// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT Â·__native_entry__(SB), NOSPLIT, $0
	NO_LOCAL_POINTERS
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff                                   // leaq         $-7(%rip), %rax
	LONG $0x24448948; BYTE $0x08                                                 // movq         %rax, $8(%rsp)
	BYTE $0xc3                                                                   // retq
	QUAD $0x0000000000000000; QUAD $0x0000000000000000; WORD $0x0000; BYTE $0x00 // .p2align 5, 0x00

LCPI0_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI0_1:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI0_2:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI0_3:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

	// .p2align 4, 0x00
LCPI0_4:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI0_5:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI0_6:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI0_7:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

	// .p2align 4, 0x90
_lspace:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x8948; BYTE $0xd0               // movq         %rdx, %rax
	LONG $0x17148d4c                       // leaq         (%rdi,%rdx), %r10
	WORD $0x8948; BYTE $0xf2               // movq         %rsi, %rdx
	WORD $0x2948; BYTE $0xc2               // subq         %rax, %rdx
	LONG $0x0069840f; WORD $0x0000         // je           LBB0_7, $105(%rip)
	WORD $0x8944; BYTE $0xd1               // movl         %r10d, %ecx
	WORD $0xe183; BYTE $0x1f               // andl         $31, %ecx
	WORD $0x8548; BYTE $0xc9               // testq        %rcx, %rcx
	LONG $0x005a840f; WORD $0x0000         // je           LBB0_7, $90(%rip)
	LONG $0x014f8d4c                       // leaq         $1(%rdi), %r9
	LONG $0xff4e8d48                       // leaq         $-1(%rsi), %rcx
	QUAD $0x000100002600b849; WORD $0x0000 // movabsq      $4294977024, %r8
	QUAD $0x9090909090909090               // .p2align 4, 0x90

LBB0_3:
	LONG $0x0714be0f               // movsbl       (%rdi,%rax), %edx
	WORD $0xfa83; BYTE $0x20       // cmpl         $32, %edx
	LONG $0x016e870f; WORD $0x0000 // ja           LBB0_27, $366(%rip)
	LONG $0xd0a30f49               // btq          %rdx, %r8
	LONG $0x0164830f; WORD $0x0000 // jae          LBB0_27, $356(%rip)
	LONG $0x01508d48               // leaq         $1(%rax), %rdx
	WORD $0x3948; BYTE $0xc1       // cmpq         %rax, %rcx
	LONG $0x0012840f; WORD $0x0000 // je           LBB0_6, $18(%rip)
	WORD $0x0144; BYTE $0xc8       // addl         %r9d, %eax
	WORD $0xe083; BYTE $0x1f       // andl         $31, %eax
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0xffca850f; WORD $0xffff // jne          LBB0_3, $-54(%rip)

LBB0_6:
	LONG $0x17148d4c         // leaq         (%rdi,%rdx), %r10
	WORD $0x2948; BYTE $0xd6 // subq         %rdx, %rsi
	WORD $0x8948; BYTE $0xf2 // movq         %rsi, %rdx

LBB0_7:
	LONG $0x20fa8348               // cmpq         $32, %rdx
	LONG $0x006a820f; WORD $0x0000 // jb           LBB0_13, $106(%rip)
	WORD $0x8948; BYTE $0xfe       // movq         %rdi, %rsi
	WORD $0x294c; BYTE $0xd6       // subq         %r10, %rsi
	QUAD $0xfffffea8056ffdc5       // vmovdqa      $-344(%rip), %ymm0  /* LCPI0_0+0(%rip) */
	QUAD $0xfffffec00d6ffdc5       // vmovdqa      $-320(%rip), %ymm1  /* LCPI0_1+0(%rip) */
	QUAD $0xfffffed8156ffdc5       // vmovdqa      $-296(%rip), %ymm2  /* LCPI0_2+0(%rip) */
	QUAD $0xfffffef01d6ffdc5       // vmovdqa      $-272(%rip), %ymm3  /* LCPI0_3+0(%rip) */

	// .p2align 4, 0x90
LBB0_9:
	LONG $0x6f7dc1c4; BYTE $0x22   // vmovdqa      (%r10), %ymm4
	LONG $0xe874ddc5               // vpcmpeqb     %ymm0, %ymm4, %ymm5
	LONG $0xf174ddc5               // vpcmpeqb     %ymm1, %ymm4, %ymm6
	LONG $0xeeebd5c5               // vpor         %ymm6, %ymm5, %ymm5
	LONG $0xf274ddc5               // vpcmpeqb     %ymm2, %ymm4, %ymm6
	LONG $0xe374ddc5               // vpcmpeqb     %ymm3, %ymm4, %ymm4
	LONG $0xe6ebddc5               // vpor         %ymm6, %ymm4, %ymm4
	LONG $0xe5ebddc5               // vpor         %ymm5, %ymm4, %ymm4
	LONG $0xc4d7fdc5               // vpmovmskb    %ymm4, %eax
	WORD $0xf883; BYTE $0xff       // cmpl         $-1, %eax
	LONG $0x00df850f; WORD $0x0000 // jne          LBB0_10, $223(%rip)
	LONG $0x20c28349               // addq         $32, %r10
	LONG $0xe0c28348               // addq         $-32, %rdx
	LONG $0xe0c68348               // addq         $-32, %rsi
	LONG $0x1ffa8348               // cmpq         $31, %rdx
	LONG $0xffbc870f; WORD $0xffff // ja           LBB0_9, $-68(%rip)

LBB0_13:
	WORD $0xf8c5; BYTE $0x77             // vzeroupper
	LONG $0x10fa8348                     // cmpq         $16, %rdx
	LONG $0x0074820f; WORD $0x0000       // jb           LBB0_18, $116(%rip)
	WORD $0x8948; BYTE $0xfe             // movq         %rdi, %rsi
	WORD $0x294c; BYTE $0xd6             // subq         %r10, %rsi
	QUAD $0xfffffeb1056ff9c5             // vmovdqa      $-335(%rip), %xmm0  /* LCPI0_4+0(%rip) */
	QUAD $0xfffffeb90d6ff9c5             // vmovdqa      $-327(%rip), %xmm1  /* LCPI0_5+0(%rip) */
	QUAD $0xfffffec1156ff9c5             // vmovdqa      $-319(%rip), %xmm2  /* LCPI0_6+0(%rip) */
	QUAD $0xfffffec91d6ff9c5             // vmovdqa      $-311(%rip), %xmm3  /* LCPI0_7+0(%rip) */
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB0_15:
	LONG $0x6f79c1c4; BYTE $0x22   // vmovdqa      (%r10), %xmm4
	LONG $0xe874d9c5               // vpcmpeqb     %xmm0, %xmm4, %xmm5
	LONG $0xf174d9c5               // vpcmpeqb     %xmm1, %xmm4, %xmm6
	LONG $0xeeebd1c5               // vpor         %xmm6, %xmm5, %xmm5
	LONG $0xf274d9c5               // vpcmpeqb     %xmm2, %xmm4, %xmm6
	LONG $0xe374d9c5               // vpcmpeqb     %xmm3, %xmm4, %xmm4
	LONG $0xe6ebd9c5               // vpor         %xmm6, %xmm4, %xmm4
	LONG $0xe5ebd9c5               // vpor         %xmm5, %xmm4, %xmm4
	LONG $0xc4d7f9c5               // vpmovmskb    %xmm4, %eax
	LONG $0xfff88366               // cmpw         $-1, %ax
	LONG $0x006b850f; WORD $0x0000 // jne          LBB0_16, $107(%rip)
	LONG $0x10c28349               // addq         $16, %r10
	LONG $0xf0c28348               // addq         $-16, %rdx
	LONG $0xf0c68348               // addq         $-16, %rsi
	LONG $0x0ffa8348               // cmpq         $15, %rdx
	LONG $0xffbb870f; WORD $0xffff // ja           LBB0_15, $-69(%rip)

LBB0_18:
	WORD $0x8548; BYTE $0xd2               // testq        %rdx, %rdx
	LONG $0x0037840f; WORD $0x0000         // je           LBB0_25, $55(%rip)
	LONG $0x12048d4d                       // leaq         (%r10,%rdx), %r8
	WORD $0xc031                           // xorl         %eax, %eax
	QUAD $0x000100002600b949; WORD $0x0000 // movabsq      $4294977024, %r9

LBB0_20:
	LONG $0x34be0f41; BYTE $0x02   // movsbl       (%r10,%rax), %esi
	WORD $0xfe83; BYTE $0x20       // cmpl         $32, %esi
	LONG $0x0036870f; WORD $0x0000 // ja           LBB0_22, $54(%rip)
	LONG $0xf1a30f49               // btq          %rsi, %r9
	LONG $0x002c830f; WORD $0x0000 // jae          LBB0_22, $44(%rip)
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x3948; BYTE $0xc2       // cmpq         %rax, %rdx
	LONG $0xffdc850f; WORD $0xffff // jne          LBB0_20, $-36(%rip)
	WORD $0x894d; BYTE $0xc2       // movq         %r8, %r10

LBB0_25:
	WORD $0x2949; BYTE $0xfa // subq         %rdi, %r10

LBB0_26:
	WORD $0x894c; BYTE $0xd0 // movq         %r10, %rax

LBB0_27:
	BYTE $0x5d // popq         %rbp
	BYTE $0xc3 // retq

LBB0_10:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper

LBB0_11:
	WORD $0xd0f7             // notl         %eax
	WORD $0xbc0f; BYTE $0xc0 // bsfl         %eax, %eax
	WORD $0x2948; BYTE $0xf0 // subq         %rsi, %rax
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB0_16:
	WORD $0xb70f; BYTE $0xc0     // movzwl       %ax, %eax
	LONG $0xffffeee9; BYTE $0xff // jmp          LBB0_11, $-18(%rip)

LBB0_22:
	WORD $0x2949; BYTE $0xfa     // subq         %rdi, %r10
	WORD $0x0149; BYTE $0xc2     // addq         %rax, %r10
	LONG $0xffffdbe9; BYTE $0xff // jmp          LBB0_26, $-37(%rip)
	WORD $0x0000; BYTE $0x00     // .p2align 5, 0x00

LCPI1_0:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'

	// .p2align 4, 0x00
LCPI1_1:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'

	// .p2align 4, 0x90
_f64toa:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	BYTE $0x50                                 // pushq        %rax
	LONG $0x7ef9e1c4; BYTE $0xc2               // vmovq        %xmm0, %rdx
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	LONG $0x34e8c148                           // shrq         $52, %rax
	LONG $0x0007ff25; BYTE $0x00               // andl         $2047, %eax
	LONG $0x0007ff3d; BYTE $0x00               // cmpl         $2047, %eax
	LONG $0x0c2f840f; WORD $0x0000             // je           LBB1_1, $3119(%rip)
	WORD $0x8948; BYTE $0xfe                   // movq         %rdi, %rsi
	WORD $0x07c6; BYTE $0x2d                   // movb         $45, (%rdi)
	WORD $0x8949; BYTE $0xd5                   // movq         %rdx, %r13
	LONG $0x3fedc149                           // shrq         $63, %r13
	LONG $0x2f3c8d4e                           // leaq         (%rdi,%r13), %r15
	QUAD $0x00000000550c8d48                   // leaq         (,%rdx,2), %rcx
	WORD $0x8548; BYTE $0xc9                   // testq        %rcx, %rcx
	LONG $0x01f9840f; WORD $0x0000             // je           LBB1_3, $505(%rip)
	QUAD $0xffffffffffffbf48; WORD $0x000f     // movabsq      $4503599627370495, %rdi
	WORD $0x2148; BYTE $0xfa                   // andq         %rdi, %rdx
	WORD $0xc085                               // testl        %eax, %eax
	LONG $0xd0758948                           // movq         %rsi, $-48(%rbp)
	LONG $0x0bfb840f; WORD $0x0000             // je           LBB1_5, $3067(%rip)
	WORD $0xff48; BYTE $0xc7                   // incq         %rdi
	WORD $0x0948; BYTE $0xd7                   // orq          %rdx, %rdi
	LONG $0xfbcdb08d; WORD $0xffff             // leal         $-1075(%rax), %esi
	LONG $0xfc01888d; WORD $0xffff             // leal         $-1023(%rax), %ecx
	WORD $0xf983; BYTE $0x34                   // cmpl         $52, %ecx
	LONG $0x001d870f; WORD $0x0000             // ja           LBB1_6, $29(%rip)
	LONG $0x000433b9; BYTE $0x00               // movl         $1075, %ecx
	WORD $0xc129                               // subl         %eax, %ecx
	LONG $0xffc3c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rbx
	WORD $0xd348; BYTE $0xe3                   // shlq         %cl, %rbx
	WORD $0xf748; BYTE $0xd3                   // notq         %rbx
	WORD $0x8548; BYTE $0xdf                   // testq        %rbx, %rdi
	LONG $0x0410840f; WORD $0x0000             // je           LBB1_11, $1040(%rip)

LBB1_6:
	WORD $0x8548; BYTE $0xd2                   // testq        %rdx, %rdx
	WORD $0x940f; BYTE $0xc1                   // sete         %cl
	WORD $0xf883; BYTE $0x02                   // cmpl         $2, %eax
	WORD $0x930f; BYTE $0xc0                   // setae        %al
	WORD $0xc820                               // andb         %cl, %al
	QUAD $0x00000000bd048d4c                   // leaq         (,%rdi,4), %r8
	WORD $0xb60f; BYTE $0xc0                   // movzbl       %al, %eax
	LONG $0x4413ce69; WORD $0x0013             // imull        $1262611, %esi, %ecx
	LONG $0x01918d44; WORD $0xf801; BYTE $0xff // leal         $-524031(%rcx), %r10d
	WORD $0xc084                               // testb        %al, %al
	LONG $0xd1440f44                           // cmovel       %ecx, %r10d
	LONG $0xb81c8d48                           // leaq         (%rax,%rdi,4), %rbx
	LONG $0xfec38348                           // addq         $-2, %rbx
	LONG $0x16fac141                           // sarl         $22, %r10d
	LONG $0xb1ca6941; WORD $0xe56c; BYTE $0xff // imull        $-1741647, %r10d, %ecx
	WORD $0xe9c1; BYTE $0x13                   // shrl         $19, %ecx
	WORD $0xf101                               // addl         %esi, %ecx
	LONG $0x000124be; BYTE $0x00               // movl         $292, %esi
	WORD $0x2944; BYTE $0xd6                   // subl         %r10d, %esi
	LONG $0x04e6c148                           // shlq         $4, %rsi
	WORD $0xc1fe                               // incb         %cl
	WORD $0xd348; BYTE $0xe3                   // shlq         %cl, %rbx
	LONG $0xc71d8d4c; WORD $0x0105; BYTE $0x00 // leaq         $67015(%rip), %r11  /* _pow10_ceil_sig.g+0(%rip) */
	LONG $0x1e648b4e; BYTE $0x08               // movq         $8(%rsi,%r11), %r12
	WORD $0x8948; BYTE $0xd8                   // movq         %rbx, %rax
	WORD $0xf749; BYTE $0xe4                   // mulq         %r12
	WORD $0x8949; BYTE $0xd1                   // movq         %rdx, %r9
	LONG $0x1e348b4e                           // movq         (%rsi,%r11), %r14
	WORD $0x8948; BYTE $0xd8                   // movq         %rbx, %rax
	WORD $0xf749; BYTE $0xe6                   // mulq         %r14
	WORD $0x8948; BYTE $0xd3                   // movq         %rdx, %rbx
	WORD $0x014c; BYTE $0xc8                   // addq         %r9, %rax
	LONG $0x00d38348                           // adcq         $0, %rbx
	WORD $0x3145; BYTE $0xdb                   // xorl         %r11d, %r11d
	LONG $0xfffea948; WORD $0xffff             // testq        $-2, %rax
	LONG $0xc3950f41                           // setne        %r11b
	WORD $0xd349; BYTE $0xe0                   // shlq         %cl, %r8
	QUAD $0x00000002bd348d48                   // leaq         $2(,%rdi,4), %rsi
	WORD $0x894c; BYTE $0xc0                   // movq         %r8, %rax
	WORD $0xf749; BYTE $0xe4                   // mulq         %r12
	WORD $0x8949; BYTE $0xd1                   // movq         %rdx, %r9
	WORD $0x0949; BYTE $0xdb                   // orq          %rbx, %r11
	WORD $0x894c; BYTE $0xc0                   // movq         %r8, %rax
	WORD $0xf749; BYTE $0xe6                   // mulq         %r14
	WORD $0x8949; BYTE $0xd0                   // movq         %rdx, %r8
	WORD $0x014c; BYTE $0xc8                   // addq         %r9, %rax
	LONG $0x00d08349                           // adcq         $0, %r8
	WORD $0xdb31                               // xorl         %ebx, %ebx
	LONG $0xfffea948; WORD $0xffff             // testq        $-2, %rax
	WORD $0x950f; BYTE $0xc3                   // setne        %bl
	WORD $0xd348; BYTE $0xe6                   // shlq         %cl, %rsi
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	WORD $0xf749; BYTE $0xe4                   // mulq         %r12
	WORD $0x8948; BYTE $0xd1                   // movq         %rdx, %rcx
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	WORD $0xf749; BYTE $0xe6                   // mulq         %r14
	WORD $0x094c; BYTE $0xc3                   // orq          %r8, %rbx
	WORD $0x0148; BYTE $0xc8                   // addq         %rcx, %rax
	LONG $0x00d28348                           // adcq         $0, %rdx
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0xfffea948; WORD $0xffff             // testq        $-2, %rax
	WORD $0x950f; BYTE $0xc1                   // setne        %cl
	WORD $0x0948; BYTE $0xd1                   // orq          %rdx, %rcx
	WORD $0xe783; BYTE $0x01                   // andl         $1, %edi
	WORD $0x0149; BYTE $0xfb                   // addq         %rdi, %r11
	WORD $0x2948; BYTE $0xf9                   // subq         %rdi, %rcx
	LONG $0x28fb8348                           // cmpq         $40, %rbx
	LONG $0x0043820f; WORD $0x0000             // jb           LBB1_29, $67(%rip)
	QUAD $0xcccccccccccdba48; WORD $0xcccc     // movabsq      $-3689348814741910323, %rdx
	WORD $0x894c; BYTE $0xc0                   // movq         %r8, %rax
	WORD $0xf748; BYTE $0xe2                   // mulq         %rdx
	WORD $0x8948; BYTE $0xd7                   // movq         %rdx, %rdi
	LONG $0x05efc148                           // shrq         $5, %rdi
	QUAD $0x00000000fd048d48                   // leaq         (,%rdi,8), %rax
	LONG $0x80148d48                           // leaq         (%rax,%rax,4), %rdx
	WORD $0x3949; BYTE $0xd3                   // cmpq         %rdx, %r11
	LONG $0xc6970f40                           // seta         %sil
	LONG $0x80148d48                           // leaq         (%rax,%rax,4), %rdx
	LONG $0x28c28348                           // addq         $40, %rdx
	WORD $0xc031                               // xorl         %eax, %eax
	WORD $0x3948; BYTE $0xca                   // cmpq         %rcx, %rdx
	WORD $0x960f; BYTE $0xc2                   // setbe        %dl
	WORD $0x3840; BYTE $0xd6                   // cmpb         %dl, %sil
	LONG $0x0134840f; WORD $0x0000             // je           LBB1_8, $308(%rip)

LBB1_29:
	WORD $0x894c; BYTE $0xc6       // movq         %r8, %rsi
	LONG $0x02eec148               // shrq         $2, %rsi
	WORD $0x894c; BYTE $0xc2       // movq         %r8, %rdx
	LONG $0xfce28348               // andq         $-4, %rdx
	WORD $0x3949; BYTE $0xd3       // cmpq         %rdx, %r11
	LONG $0xc1970f41               // seta         %r9b
	LONG $0x047a8d48               // leaq         $4(%rdx), %rdi
	WORD $0x3948; BYTE $0xcf       // cmpq         %rcx, %rdi
	WORD $0x960f; BYTE $0xc0       // setbe        %al
	WORD $0x3044; BYTE $0xc8       // xorb         %r9b, %al
	LONG $0x0055840f; WORD $0x0000 // je           LBB1_30, $85(%rip)
	LONG $0x02ca8348               // orq          $2, %rdx
	LONG $0x000001bf; BYTE $0x00   // movl         $1, %edi
	WORD $0x3948; BYTE $0xd3       // cmpq         %rdx, %rbx
	LONG $0x000e870f; WORD $0x0000 // ja           LBB1_33, $14(%rip)
	WORD $0x940f; BYTE $0xc0       // sete         %al
	LONG $0x02e8c041               // shrb         $2, %r8b
	WORD $0x2041; BYTE $0xc0       // andb         %al, %r8b
	LONG $0xf8b60f41               // movzbl       %r8b, %edi

LBB1_33:
	WORD $0x0148; BYTE $0xf7               // addq         %rsi, %rdi
	QUAD $0x0001ffffff80bc49; WORD $0x0000 // movabsq      $8589934464, %r12
	QUAD $0x540be47f24848d49               // leaq         $1410065535(%r12), %rax
	WORD $0x3948; BYTE $0xc7               // cmpq         %rax, %rdi
	LONG $0x003c870f; WORD $0x0000         // ja           LBB1_35, $60(%rip)
	LONG $0x0000ece9; BYTE $0x00           // jmp          LBB1_41, $236(%rip)

LBB1_3:
	LONG $0x3007c641             // movb         $48, (%r15)
	WORD $0x2941; BYTE $0xf7     // subl         %esi, %r15d
	WORD $0xff41; BYTE $0xc7     // incl         %r15d
	WORD $0x8944; BYTE $0xfb     // movl         %r15d, %ebx
	LONG $0x0009dde9; BYTE $0x00 // jmp          LBB1_125, $2525(%rip)

LBB1_30:
	WORD $0x3948; BYTE $0xf9               // cmpq         %rdi, %rcx
	LONG $0xffde8348                       // sbbq         $-1, %rsi
	WORD $0x8948; BYTE $0xf7               // movq         %rsi, %rdi
	QUAD $0x0001ffffff80bc49; WORD $0x0000 // movabsq      $8589934464, %r12
	QUAD $0x540be47f24848d49               // leaq         $1410065535(%r12), %rax
	WORD $0x3948; BYTE $0xc7               // cmpq         %rax, %rdi
	LONG $0x00b5860f; WORD $0x0000         // jbe          LBB1_41, $181(%rip)

LBB1_35:
	WORD $0x8948; BYTE $0xf8               // movq         %rdi, %rax
	LONG $0x0be8c148                       // shrq         $11, %rax
	LONG $0x00000bba; BYTE $0x00           // movl         $11, %edx
	LONG $0x0edd3d48; WORD $0x02e9         // cmpq         $48828125, %rax
	LONG $0x0127820f; WORD $0x0000         // jb           LBB1_51, $295(%rip)
	WORD $0x8948; BYTE $0xf8               // movq         %rdi, %rax
	LONG $0x0ce8c148                       // shrq         $12, %rax
	LONG $0x00000cba; BYTE $0x00           // movl         $12, %edx
	LONG $0x4a513d48; WORD $0x0e8d         // cmpq         $244140625, %rax
	LONG $0x010f820f; WORD $0x0000         // jb           LBB1_51, $271(%rip)
	WORD $0x8948; BYTE $0xf8               // movq         %rdi, %rax
	LONG $0x0de8c148                       // shrq         $13, %rax
	LONG $0x00000dba; BYTE $0x00           // movl         $13, %edx
	LONG $0x73953d48; WORD $0x48c2         // cmpq         $1220703125, %rax
	LONG $0x00f7820f; WORD $0x0000         // jb           LBB1_51, $247(%rip)
	LONG $0x00000eba; BYTE $0x00           // movl         $14, %edx
	QUAD $0x5af3107a4000b848; WORD $0x0000 // movabsq      $100000000000000, %rax
	WORD $0x3948; BYTE $0xc7               // cmpq         %rax, %rdi
	LONG $0x00df820f; WORD $0x0000         // jb           LBB1_51, $223(%rip)
	LONG $0x00000fba; BYTE $0x00           // movl         $15, %edx
	QUAD $0x8d7ea4c68000b848; WORD $0x0003 // movabsq      $1000000000000000, %rax
	WORD $0x3948; BYTE $0xc7               // cmpq         %rax, %rdi
	LONG $0x00c7820f; WORD $0x0000         // jb           LBB1_51, $199(%rip)
	QUAD $0x86f26fc10000b848; WORD $0x0023 // movabsq      $10000000000000000, %rax
	WORD $0x3948; BYTE $0xc7               // cmpq         %rax, %rdi
	LONG $0x000011ba; BYTE $0x00           // movl         $17, %edx

LBB1_50:
	WORD $0xda83; BYTE $0x00     // sbbl         $0, %edx
	LONG $0x0000ade9; BYTE $0x00 // jmp          LBB1_51, $173(%rip)

LBB1_8:
	WORD $0xd088                           // movb         %dl, %al
	WORD $0x0148; BYTE $0xc7               // addq         %rax, %rdi
	WORD $0xff41; BYTE $0xc2               // incl         %r10d
	QUAD $0x0001ffffff80bc49; WORD $0x0000 // movabsq      $8589934464, %r12
	QUAD $0x540be47f24848d49               // leaq         $1410065535(%r12), %rax
	WORD $0x3948; BYTE $0xc7               // cmpq         %rax, %rdi
	LONG $0xff4b870f; WORD $0xffff         // ja           LBB1_35, $-181(%rip)

LBB1_41:
	LONG $0x000001ba; BYTE $0x00               // movl         $1, %edx
	LONG $0x0aff8348                           // cmpq         $10, %rdi
	LONG $0x007b820f; WORD $0x0000             // jb           LBB1_51, $123(%rip)
	LONG $0x000002ba; BYTE $0x00               // movl         $2, %edx
	LONG $0x64ff8348                           // cmpq         $100, %rdi
	LONG $0x006c820f; WORD $0x0000             // jb           LBB1_51, $108(%rip)
	LONG $0x000003ba; BYTE $0x00               // movl         $3, %edx
	LONG $0xe8ff8148; WORD $0x0003; BYTE $0x00 // cmpq         $1000, %rdi
	LONG $0x005a820f; WORD $0x0000             // jb           LBB1_51, $90(%rip)
	LONG $0x000004ba; BYTE $0x00               // movl         $4, %edx
	LONG $0x10ff8148; WORD $0x0027; BYTE $0x00 // cmpq         $10000, %rdi
	LONG $0x0048820f; WORD $0x0000             // jb           LBB1_51, $72(%rip)
	LONG $0x000005ba; BYTE $0x00               // movl         $5, %edx
	LONG $0xa0ff8148; WORD $0x0186; BYTE $0x00 // cmpq         $100000, %rdi
	LONG $0x0036820f; WORD $0x0000             // jb           LBB1_51, $54(%rip)
	LONG $0x000006ba; BYTE $0x00               // movl         $6, %edx
	LONG $0x40ff8148; WORD $0x0f42; BYTE $0x00 // cmpq         $1000000, %rdi
	LONG $0x0024820f; WORD $0x0000             // jb           LBB1_51, $36(%rip)
	LONG $0x000007ba; BYTE $0x00               // movl         $7, %edx
	LONG $0x80ff8148; WORD $0x9896; BYTE $0x00 // cmpq         $10000000, %rdi
	LONG $0x0012820f; WORD $0x0000             // jb           LBB1_51, $18(%rip)
	LONG $0x000008ba; BYTE $0x00               // movl         $8, %edx
	LONG $0x00ff8148; WORD $0xf5e1; BYTE $0x05 // cmpq         $100000000, %rdi
	LONG $0x088d830f; WORD $0x0000             // jae          LBB1_49, $2189(%rip)

LBB1_51:
	LONG $0x12348d46               // leal         (%rdx,%r10), %r14d
	LONG $0x12048d42               // leal         (%rdx,%r10), %eax
	WORD $0xc083; BYTE $0xea       // addl         $-22, %eax
	WORD $0xf883; BYTE $0xe4       // cmpl         $-28, %eax
	LONG $0x009e870f; WORD $0x0000 // ja           LBB1_64, $158(%rip)
	LONG $0x01678d4d               // leaq         $1(%r15), %r12
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	LONG $0x00cdb5e8; BYTE $0x00   // callq        _format_significand, $52661(%rip)
	WORD $0x8948; BYTE $0xc3       // movq         %rax, %rbx
	LONG $0xd0558b4c               // movq         $-48(%rbp), %r10
	WORD $0x294c; BYTE $0xd0       // subq         %r10, %rax
	WORD $0x294c; BYTE $0xe8       // subq         %r13, %rax
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB1_53:
	WORD $0xff48; BYTE $0xc8       // decq         %rax
	LONG $0x30ff7b80               // cmpb         $48, $-1(%rbx)
	LONG $0xff5b8d48               // leaq         $-1(%rbx), %rbx
	LONG $0xffef840f; WORD $0xffff // je           LBB1_53, $-17(%rip)
	LONG $0x014f8a41               // movb         $1(%r15), %cl
	WORD $0x8841; BYTE $0x0f       // movb         %cl, (%r15)
	LONG $0x02f88348               // cmpq         $2, %rax
	LONG $0x00088c0f; WORD $0x0000 // jl           LBB1_56, $8(%rip)
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	LONG $0x2404c641; BYTE $0x2e   // movb         $46, (%r12)

LBB1_56:
	WORD $0x03c6; BYTE $0x65       // movb         $101, (%rbx)
	WORD $0x8545; BYTE $0xf6       // testl        %r14d, %r14d
	LONG $0x01358e0f; WORD $0x0000 // jle          LBB1_57, $309(%rip)
	WORD $0xff41; BYTE $0xce       // decl         %r14d
	LONG $0x2b0143c6               // movb         $43, $1(%rbx)
	WORD $0x8944; BYTE $0xf0       // movl         %r14d, %eax
	WORD $0xf883; BYTE $0x64       // cmpl         $100, %eax
	LONG $0x0137820f; WORD $0x0000 // jb           LBB1_61, $311(%rip)

LBB1_60:
	WORD $0xc189                               // movl         %eax, %ecx
	LONG $0xcccccdba; BYTE $0xcc               // movl         $3435973837, %edx
	LONG $0xd1af0f48                           // imulq        %rcx, %rdx
	LONG $0x23eac148                           // shrq         $35, %rdx
	WORD $0x0c8d; BYTE $0x12                   // leal         (%rdx,%rdx), %ecx
	WORD $0x0c8d; BYTE $0x89                   // leal         (%rcx,%rcx,4), %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	LONG $0x990d8d48; WORD $0x0101; BYTE $0x00 // leaq         $65945(%rip), %rcx  /* _Digits+0(%rip) */
	LONG $0x510cb70f                           // movzwl       (%rcx,%rdx,2), %ecx
	LONG $0x024b8966                           // movw         %cx, $2(%rbx)
	WORD $0x300c                               // orb          $48, %al
	WORD $0x4388; BYTE $0x04                   // movb         %al, $4(%rbx)
	LONG $0x05c38348                           // addq         $5, %rbx
	LONG $0x0007c4e9; BYTE $0x00               // jmp          LBB1_124, $1988(%rip)

LBB1_64:
	WORD $0x8545; BYTE $0xd2       // testl        %r10d, %r10d
	LONG $0x011d880f; WORD $0x0000 // js           LBB1_65, $285(%rip)
	WORD $0x634d; BYTE $0xf6       // movslq       %r14d, %r14
	LONG $0x371c8d4b               // leaq         (%r15,%r14), %rbx
	WORD $0x894c; BYTE $0xfe       // movq         %r15, %rsi
	LONG $0x0007fbe8; BYTE $0x00   // callq        _format_integer, $2043(%rip)
	WORD $0x3948; BYTE $0xd8       // cmpq         %rbx, %rax
	LONG $0x016c830f; WORD $0x0000 // jae          LBB1_105, $364(%rip)
	LONG $0xd0558b4c               // movq         $-48(%rbp), %r10
	WORD $0x014d; BYTE $0xd5       // addq         %r10, %r13
	WORD $0x014d; BYTE $0xf5       // addq         %r14, %r13
	WORD $0x2949; BYTE $0xc5       // subq         %rax, %r13
	LONG $0x10fd8349               // cmpq         $16, %r13
	LONG $0x0209830f; WORD $0x0000 // jae          LBB1_107, $521(%rip)

LBB1_122:
	WORD $0x8948; BYTE $0xc2     // movq         %rax, %rdx
	LONG $0x000383e9; BYTE $0x00 // jmp          LBB1_123, $899(%rip)

LBB1_11:
	WORD $0xd348; BYTE $0xef               // shrq         %cl, %rdi
	QUAD $0x0001ffffff80b848; WORD $0x0000 // movabsq      $8589934464, %rax
	LONG $0xe47f0548; WORD $0x540b         // addq         $1410065535, %rax
	WORD $0x3948; BYTE $0xc7               // cmpq         %rax, %rdi
	LONG $0x0148860f; WORD $0x0000         // jbe          LBB1_18, $328(%rip)
	WORD $0x8948; BYTE $0xf8               // movq         %rdi, %rax
	LONG $0x0be8c148                       // shrq         $11, %rax
	LONG $0x00000bba; BYTE $0x00           // movl         $11, %edx
	LONG $0x0edd3d48; WORD $0x02e9         // cmpq         $48828125, %rax
	LONG $0x01ba820f; WORD $0x0000         // jb           LBB1_28, $442(%rip)
	WORD $0x8948; BYTE $0xf8               // movq         %rdi, %rax
	LONG $0x0ce8c148                       // shrq         $12, %rax
	LONG $0x00000cba; BYTE $0x00           // movl         $12, %edx
	LONG $0x4a513d48; WORD $0x0e8d         // cmpq         $244140625, %rax
	LONG $0x01a2820f; WORD $0x0000         // jb           LBB1_28, $418(%rip)
	WORD $0x8948; BYTE $0xf8               // movq         %rdi, %rax
	LONG $0x0de8c148                       // shrq         $13, %rax
	LONG $0x00000dba; BYTE $0x00           // movl         $13, %edx
	LONG $0x73953d48; WORD $0x48c2         // cmpq         $1220703125, %rax
	LONG $0x018a820f; WORD $0x0000         // jb           LBB1_28, $394(%rip)
	LONG $0x00000eba; BYTE $0x00           // movl         $14, %edx
	QUAD $0x5af3107a4000b848; WORD $0x0000 // movabsq      $100000000000000, %rax
	WORD $0x3948; BYTE $0xc7               // cmpq         %rax, %rdi
	LONG $0x0172820f; WORD $0x0000         // jb           LBB1_28, $370(%rip)
	LONG $0x00000fba; BYTE $0x00           // movl         $15, %edx
	QUAD $0x8d7ea4c68000b848; WORD $0x0003 // movabsq      $1000000000000000, %rax
	WORD $0x3948; BYTE $0xc7               // cmpq         %rax, %rdi
	LONG $0x015a820f; WORD $0x0000         // jb           LBB1_28, $346(%rip)
	QUAD $0x86f26fc10000b848; WORD $0x0023 // movabsq      $10000000000000000, %rax
	WORD $0x3948; BYTE $0xc7               // cmpq         %rax, %rdi
	LONG $0x000011ba; BYTE $0x00           // movl         $17, %edx

LBB1_27:
	WORD $0xda83; BYTE $0x00     // sbbl         $0, %edx
	LONG $0x000140e9; BYTE $0x00 // jmp          LBB1_28, $320(%rip)

LBB1_57:
	LONG $0x2d0143c6               // movb         $45, $1(%rbx)
	LONG $0x000001b8; BYTE $0x00   // movl         $1, %eax
	WORD $0x2944; BYTE $0xf0       // subl         %r14d, %eax
	WORD $0xf883; BYTE $0x64       // cmpl         $100, %eax
	LONG $0xfec9830f; WORD $0xffff // jae          LBB1_60, $-311(%rip)

LBB1_61:
	WORD $0xf883; BYTE $0x0a                   // cmpl         $10, %eax
	LONG $0x008a820f; WORD $0x0000             // jb           LBB1_63, $138(%rip)
	WORD $0xc089                               // movl         %eax, %eax
	LONG $0x6e0d8d48; WORD $0x0100; BYTE $0x00 // leaq         $65646(%rip), %rcx  /* _Digits+0(%rip) */
	LONG $0x4104b70f                           // movzwl       (%rcx,%rax,2), %eax
	LONG $0x02438966                           // movw         %ax, $2(%rbx)
	LONG $0x04c38348                           // addq         $4, %rbx
	LONG $0x00069ee9; BYTE $0x00               // jmp          LBB1_124, $1694(%rip)

LBB1_65:
	WORD $0x8545; BYTE $0xf6                   // testl        %r14d, %r14d
	LONG $0x03c38f0f; WORD $0x0000             // jg           LBB1_78, $963(%rip)
	LONG $0x07c74166; WORD $0x2e30             // movw         $11824, (%r15)
	LONG $0x02c78349                           // addq         $2, %r15
	WORD $0x8545; BYTE $0xf6                   // testl        %r14d, %r14d
	LONG $0x03b0890f; WORD $0x0000             // jns          LBB1_78, $944(%rip)
	WORD $0x8941; BYTE $0xd0                   // movl         %edx, %r8d
	WORD $0xf741; BYTE $0xd0                   // notl         %r8d
	WORD $0x2945; BYTE $0xd0                   // subl         %r10d, %r8d
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x7ff88341                           // cmpl         $127, %r8d
	LONG $0x0387820f; WORD $0x0000             // jb           LBB1_76, $903(%rip)
	WORD $0xff49; BYTE $0xc0                   // incq         %r8
	WORD $0x894c; BYTE $0xc0                   // movq         %r8, %rax
	WORD $0x214c; BYTE $0xe0                   // andq         %r12, %rax
	LONG $0x80488d48                           // leaq         $-128(%rax), %rcx
	WORD $0x8948; BYTE $0xce                   // movq         %rcx, %rsi
	LONG $0x07eec148                           // shrq         $7, %rsi
	WORD $0xff48; BYTE $0xc6                   // incq         %rsi
	WORD $0x8941; BYTE $0xf1                   // movl         %esi, %r9d
	LONG $0x03e18341                           // andl         $3, %r9d
	LONG $0x80f98148; WORD $0x0001; BYTE $0x00 // cmpq         $384, %rcx
	LONG $0x025d830f; WORD $0x0000             // jae          LBB1_70, $605(%rip)
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0xd0558b4c                           // movq         $-48(%rbp), %r10
	LONG $0x000300e9; BYTE $0x00               // jmp          LBB1_72, $768(%rip)

LBB1_105:
	LONG $0xd0558b4c             // movq         $-48(%rbp), %r10
	LONG $0x00062ee9; BYTE $0x00 // jmp          LBB1_124, $1582(%rip)

LBB1_63:
	WORD $0x3004                 // addb         $48, %al
	WORD $0x4388; BYTE $0x02     // movb         %al, $2(%rbx)
	LONG $0x03c38348             // addq         $3, %rbx
	LONG $0x000620e9; BYTE $0x00 // jmp          LBB1_124, $1568(%rip)

LBB1_18:
	LONG $0x000001ba; BYTE $0x00               // movl         $1, %edx
	LONG $0x0aff8348                           // cmpq         $10, %rdi
	LONG $0x007b820f; WORD $0x0000             // jb           LBB1_28, $123(%rip)
	LONG $0x000002ba; BYTE $0x00               // movl         $2, %edx
	LONG $0x64ff8348                           // cmpq         $100, %rdi
	LONG $0x006c820f; WORD $0x0000             // jb           LBB1_28, $108(%rip)
	LONG $0x000003ba; BYTE $0x00               // movl         $3, %edx
	LONG $0xe8ff8148; WORD $0x0003; BYTE $0x00 // cmpq         $1000, %rdi
	LONG $0x005a820f; WORD $0x0000             // jb           LBB1_28, $90(%rip)
	LONG $0x000004ba; BYTE $0x00               // movl         $4, %edx
	LONG $0x10ff8148; WORD $0x0027; BYTE $0x00 // cmpq         $10000, %rdi
	LONG $0x0048820f; WORD $0x0000             // jb           LBB1_28, $72(%rip)
	LONG $0x000005ba; BYTE $0x00               // movl         $5, %edx
	LONG $0xa0ff8148; WORD $0x0186; BYTE $0x00 // cmpq         $100000, %rdi
	LONG $0x0036820f; WORD $0x0000             // jb           LBB1_28, $54(%rip)
	LONG $0x000006ba; BYTE $0x00               // movl         $6, %edx
	LONG $0x40ff8148; WORD $0x0f42; BYTE $0x00 // cmpq         $1000000, %rdi
	LONG $0x0024820f; WORD $0x0000             // jb           LBB1_28, $36(%rip)
	LONG $0x000007ba; BYTE $0x00               // movl         $7, %edx
	LONG $0x80ff8148; WORD $0x9896; BYTE $0x00 // cmpq         $10000000, %rdi
	LONG $0x0012820f; WORD $0x0000             // jb           LBB1_28, $18(%rip)
	LONG $0x000008ba; BYTE $0x00               // movl         $8, %edx
	LONG $0x00ff8148; WORD $0xf5e1; BYTE $0x05 // cmpq         $100000000, %rdi
	LONG $0x05d2830f; WORD $0x0000             // jae          LBB1_26, $1490(%rip)

LBB1_28:
	WORD $0x894c; BYTE $0xfe     // movq         %r15, %rsi
	LONG $0x0005dde8; BYTE $0x00 // callq        _format_integer, $1501(%rip)
	WORD $0x8948; BYTE $0xc3     // movq         %rax, %rbx
	WORD $0x5d2b; BYTE $0xd0     // subl         $-48(%rbp), %ebx
	LONG $0x000586e9; BYTE $0x00 // jmp          LBB1_125, $1414(%rip)

LBB1_107:
	LONG $0x80fd8149; WORD $0x0000; BYTE $0x00 // cmpq         $128, %r13
	LONG $0x0007830f; WORD $0x0000             // jae          LBB1_112, $7(%rip)
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0x000135e9; BYTE $0x00               // jmp          LBB1_109, $309(%rip)

LBB1_112:
	WORD $0x894c; BYTE $0xe9                   // movq         %r13, %rcx
	LONG $0x80e18348                           // andq         $-128, %rcx
	LONG $0x80798d48                           // leaq         $-128(%rcx), %rdi
	WORD $0x8948; BYTE $0xfe                   // movq         %rdi, %rsi
	LONG $0x07eec148                           // shrq         $7, %rsi
	WORD $0xff48; BYTE $0xc6                   // incq         %rsi
	WORD $0xf289                               // movl         %esi, %edx
	WORD $0xe283; BYTE $0x03                   // andl         $3, %edx
	LONG $0x80ff8148; WORD $0x0001; BYTE $0x00 // cmpq         $384, %rdi
	LONG $0x0007830f; WORD $0x0000             // jae          LBB1_114, $7(%rip)
	WORD $0xff31                               // xorl         %edi, %edi
	LONG $0x0000a4e9; BYTE $0x00               // jmp          LBB1_116, $164(%rip)

LBB1_114:
	LONG $0xfce68348         // andq         $-4, %rsi
	WORD $0xff31             // xorl         %edi, %edi
	QUAD $0xfffff8d2056ffdc5 // vmovdqa      $-1838(%rip), %ymm0  /* LCPI1_0+0(%rip) */
	WORD $0x9090             // .p2align 4, 0x90

LBB1_115:
	LONG $0x047ffec5; BYTE $0x38               // vmovdqu      %ymm0, (%rax,%rdi)
	LONG $0x447ffec5; WORD $0x2038             // vmovdqu      %ymm0, $32(%rax,%rdi)
	LONG $0x447ffec5; WORD $0x4038             // vmovdqu      %ymm0, $64(%rax,%rdi)
	LONG $0x447ffec5; WORD $0x6038             // vmovdqu      %ymm0, $96(%rax,%rdi)
	QUAD $0x00008038847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $128(%rax,%rdi)
	QUAD $0x0000a038847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $160(%rax,%rdi)
	QUAD $0x0000c038847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $192(%rax,%rdi)
	QUAD $0x0000e038847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $224(%rax,%rdi)
	QUAD $0x00010038847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $256(%rax,%rdi)
	QUAD $0x00012038847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $288(%rax,%rdi)
	QUAD $0x00014038847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $320(%rax,%rdi)
	QUAD $0x00016038847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $352(%rax,%rdi)
	QUAD $0x00018038847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $384(%rax,%rdi)
	QUAD $0x0001a038847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $416(%rax,%rdi)
	QUAD $0x0001c038847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $448(%rax,%rdi)
	QUAD $0x0001e038847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $480(%rax,%rdi)
	LONG $0x00c78148; WORD $0x0002; BYTE $0x00 // addq         $512, %rdi
	LONG $0xfcc68348                           // addq         $-4, %rsi
	LONG $0xff6c850f; WORD $0xffff             // jne          LBB1_115, $-148(%rip)

LBB1_116:
	WORD $0x8548; BYTE $0xd2                               // testq        %rdx, %rdx
	LONG $0x0047840f; WORD $0x0000                         // je           LBB1_119, $71(%rip)
	LONG $0x07348d48                                       // leaq         (%rdi,%rax), %rsi
	LONG $0x60c68348                                       // addq         $96, %rsi
	LONG $0x07e2c148                                       // shlq         $7, %rdx
	WORD $0xff31                                           // xorl         %edi, %edi
	QUAD $0xfffff81d056ffdc5                               // vmovdqa      $-2019(%rip), %ymm0  /* LCPI1_0+0(%rip) */
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB1_118:
	LONG $0x447ffec5; WORD $0xa03e // vmovdqu      %ymm0, $-96(%rsi,%rdi)
	LONG $0x447ffec5; WORD $0xc03e // vmovdqu      %ymm0, $-64(%rsi,%rdi)
	LONG $0x447ffec5; WORD $0xe03e // vmovdqu      %ymm0, $-32(%rsi,%rdi)
	LONG $0x047ffec5; BYTE $0x3e   // vmovdqu      %ymm0, (%rsi,%rdi)
	LONG $0x80ef8348               // subq         $-128, %rdi
	WORD $0x3948; BYTE $0xfa       // cmpq         %rdi, %rdx
	LONG $0xffdc850f; WORD $0xffff // jne          LBB1_118, $-36(%rip)

LBB1_119:
	WORD $0x3949; BYTE $0xcd       // cmpq         %rcx, %r13
	LONG $0x0444840f; WORD $0x0000 // je           LBB1_124, $1092(%rip)
	LONG $0x70c5f641               // testb        $112, %r13b
	LONG $0x004d840f; WORD $0x0000 // je           LBB1_121, $77(%rip)

LBB1_109:
	WORD $0x894c; BYTE $0xee // movq         %r13, %rsi
	LONG $0xf0e68348         // andq         $-16, %rsi
	WORD $0x8948; BYTE $0xc2 // movq         %rax, %rdx
	WORD $0x0148; BYTE $0xf2 // addq         %rsi, %rdx
	QUAD $0xfffff7e4056ff9c5 // vmovdqa      $-2076(%rip), %xmm0  /* LCPI1_1+0(%rip) */
	LONG $0x90909090         // .p2align 4, 0x90

LBB1_110:
	LONG $0x047ffac5; BYTE $0x08   // vmovdqu      %xmm0, (%rax,%rcx)
	LONG $0x10c18348               // addq         $16, %rcx
	WORD $0x3948; BYTE $0xce       // cmpq         %rcx, %rsi
	LONG $0xffee850f; WORD $0xffff // jne          LBB1_110, $-18(%rip)
	WORD $0x3949; BYTE $0xf5       // cmpq         %rsi, %r13
	LONG $0x0406840f; WORD $0x0000 // je           LBB1_124, $1030(%rip)
	LONG $0x90909090; BYTE $0x90   // .p2align 4, 0x90

LBB1_123:
	WORD $0x02c6; BYTE $0x30       // movb         $48, (%rdx)
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0x3948; BYTE $0xda       // cmpq         %rbx, %rdx
	LONG $0xfff1820f; WORD $0xffff // jb           LBB1_123, $-15(%rip)
	LONG $0x0003ede9; BYTE $0x00   // jmp          LBB1_124, $1005(%rip)

LBB1_121:
	WORD $0x0148; BYTE $0xc8     // addq         %rcx, %rax
	LONG $0xfffc59e9; BYTE $0xff // jmp          LBB1_122, $-935(%rip)

LBB1_70:
	LONG $0xfce68348                           // andq         $-4, %rsi
	LONG $0xd0558b4c                           // movq         $-48(%rbp), %r10
	LONG $0x2a1c8d4b                           // leaq         (%r10,%r13), %rbx
	LONG $0xe2c38148; WORD $0x0001; BYTE $0x00 // addq         $482, %rbx
	WORD $0xc931                               // xorl         %ecx, %ecx
	QUAD $0xfffff767056ffdc5                   // vmovdqa      $-2201(%rip), %ymm0  /* LCPI1_0+0(%rip) */

LBB1_71:
	QUAD $0xfffe200b847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-480(%rbx,%rcx)
	QUAD $0xfffe400b847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-448(%rbx,%rcx)
	QUAD $0xfffe600b847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-416(%rbx,%rcx)
	QUAD $0xfffe800b847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-384(%rbx,%rcx)
	QUAD $0xfffea00b847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-352(%rbx,%rcx)
	QUAD $0xfffec00b847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-320(%rbx,%rcx)
	QUAD $0xfffee00b847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-288(%rbx,%rcx)
	QUAD $0xffff000b847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-256(%rbx,%rcx)
	QUAD $0xffff200b847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-224(%rbx,%rcx)
	QUAD $0xffff400b847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-192(%rbx,%rcx)
	QUAD $0xffff600b847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-160(%rbx,%rcx)
	LONG $0x447ffec5; WORD $0x800b             // vmovdqu      %ymm0, $-128(%rbx,%rcx)
	LONG $0x447ffec5; WORD $0xa00b             // vmovdqu      %ymm0, $-96(%rbx,%rcx)
	LONG $0x447ffec5; WORD $0xc00b             // vmovdqu      %ymm0, $-64(%rbx,%rcx)
	LONG $0x447ffec5; WORD $0xe00b             // vmovdqu      %ymm0, $-32(%rbx,%rcx)
	LONG $0x047ffec5; BYTE $0x0b               // vmovdqu      %ymm0, (%rbx,%rcx)
	LONG $0x00c18148; WORD $0x0002; BYTE $0x00 // addq         $512, %rcx
	LONG $0xfcc68348                           // addq         $-4, %rsi
	LONG $0xff6f850f; WORD $0xffff             // jne          LBB1_71, $-145(%rip)

LBB1_72:
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x003c840f; WORD $0x0000 // je           LBB1_75, $60(%rip)
	WORD $0x014c; BYTE $0xe9       // addq         %r13, %rcx
	WORD $0x014c; BYTE $0xd1       // addq         %r10, %rcx
	LONG $0x62c18348               // addq         $98, %rcx
	LONG $0x07e1c149               // shlq         $7, %r9
	WORD $0xf631                   // xorl         %esi, %esi
	QUAD $0xfffff6b5056ffdc5       // vmovdqa      $-2379(%rip), %ymm0  /* LCPI1_0+0(%rip) */

LBB1_74:
	LONG $0x447ffec5; WORD $0xa031 // vmovdqu      %ymm0, $-96(%rcx,%rsi)
	LONG $0x447ffec5; WORD $0xc031 // vmovdqu      %ymm0, $-64(%rcx,%rsi)
	LONG $0x447ffec5; WORD $0xe031 // vmovdqu      %ymm0, $-32(%rcx,%rsi)
	LONG $0x047ffec5; BYTE $0x31   // vmovdqu      %ymm0, (%rcx,%rsi)
	LONG $0x80ee8348               // subq         $-128, %rsi
	WORD $0x3949; BYTE $0xf1       // cmpq         %rsi, %r9
	LONG $0xffdc850f; WORD $0xffff // jne          LBB1_74, $-36(%rip)

LBB1_75:
	WORD $0x0149; BYTE $0xc7       // addq         %rax, %r15
	WORD $0x3949; BYTE $0xc0       // cmpq         %rax, %r8
	LONG $0x0014840f; WORD $0x0000 // je           LBB1_78, $20(%rip)

LBB1_76:
	WORD $0x0144; BYTE $0xf0 // addl         %r14d, %eax
	WORD $0xd8f7             // negl         %eax

	// .p2align 4, 0x90
LBB1_77:
	LONG $0x3007c641               // movb         $48, (%r15)
	WORD $0xff49; BYTE $0xc7       // incq         %r15
	WORD $0xc8ff                   // decl         %eax
	LONG $0xfff1850f; WORD $0xffff // jne          LBB1_77, $-15(%rip)

LBB1_78:
	WORD $0x894c; BYTE $0xfe               // movq         %r15, %rsi
	WORD $0xf8c5; BYTE $0x77               // vzeroupper
	LONG $0x00c826e8; BYTE $0x00           // callq        _format_significand, $51238(%rip)
	WORD $0xc389                           // movl         %eax, %ebx
	WORD $0x2844; BYTE $0xfb               // subb         %r15b, %bl
	WORD $0x2844; BYTE $0xf3               // subb         %r14b, %bl
	LONG $0x3e2c8d47                       // leal         (%r14,%r15), %r13d
	WORD $0x2941; BYTE $0xc5               // subl         %eax, %r13d
	LONG $0xff458d45                       // leal         $-1(%r13), %r8d
	LONG $0xfe7d8d41                       // leal         $-2(%r13), %edi
	WORD $0xc931                           // xorl         %ecx, %ecx
	WORD $0x8948; BYTE $0xc6               // movq         %rax, %rsi
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB1_79:
	WORD $0xda89                   // movl         %ebx, %edx
	WORD $0xff48; BYTE $0xce       // decq         %rsi
	WORD $0x5a8d; BYTE $0x03       // leal         $3(%rdx), %ebx
	WORD $0xc7ff                   // incl         %edi
	LONG $0xff087c80; BYTE $0x30   // cmpb         $48, $-1(%rax,%rcx)
	LONG $0xff498d48               // leaq         $-1(%rcx), %rcx
	LONG $0xffe7840f; WORD $0xffff // je           LBB1_79, $-25(%rip)
	LONG $0x081c8d48               // leaq         (%rax,%rcx), %rbx
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	WORD $0x8545; BYTE $0xf6       // testl        %r14d, %r14d
	LONG $0xd0558b4c               // movq         $-48(%rbp), %r10
	LONG $0x02748e0f; WORD $0x0000 // jle          LBB1_124, $628(%rip)
	WORD $0xc689                   // movl         %eax, %esi
	WORD $0x2944; BYTE $0xfe       // subl         %r15d, %esi
	WORD $0xce01                   // addl         %ecx, %esi
	WORD $0xc6ff                   // incl         %esi
	WORD $0x3941; BYTE $0xf6       // cmpl         %esi, %r14d
	LONG $0x00308d0f; WORD $0x0000 // jge          LBB1_82, $48(%rip)
	WORD $0x8941; BYTE $0xc1       // movl         %eax, %r9d
	WORD $0x2945; BYTE $0xf1       // subl         %r14d, %r9d
	WORD $0x2945; BYTE $0xf9       // subl         %r15d, %r9d
	WORD $0xff41; BYTE $0xc1       // incl         %r9d
	LONG $0x093c8d49               // leaq         (%r9,%rcx), %rdi
	WORD $0xff85                   // testl        %edi, %edi
	LONG $0x00e18e0f; WORD $0x0000 // jle          LBB1_101, $225(%rip)
	WORD $0x8941; BYTE $0xf8       // movl         %edi, %r8d
	LONG $0xff588d49               // leaq         $-1(%r8), %rbx
	LONG $0x03fb8348               // cmpq         $3, %rbx
	LONG $0x006c830f; WORD $0x0000 // jae          LBB1_102, $108(%rip)
	WORD $0xdb31                   // xorl         %ebx, %ebx
	LONG $0x00008de9; BYTE $0x00   // jmp          LBB1_98, $141(%rip)

LBB1_82:
	WORD $0x8945; BYTE $0xc3                   // movl         %r8d, %r11d
	WORD $0x2949; BYTE $0xcb                   // subq         %rcx, %r11
	WORD $0x8545; BYTE $0xdb                   // testl        %r11d, %r11d
	LONG $0x02238e0f; WORD $0x0000             // jle          LBB1_124, $547(%rip)
	WORD $0x0145; BYTE $0xfe                   // addl         %r15d, %r14d
	WORD $0x2941; BYTE $0xc6                   // subl         %eax, %r14d
	LONG $0xfec68341                           // addl         $-2, %r14d
	WORD $0x2949; BYTE $0xce                   // subq         %rcx, %r14
	WORD $0xd231                               // xorl         %edx, %edx
	LONG $0x7ffe8341                           // cmpl         $127, %r14d
	LONG $0x01f9820f; WORD $0x0000             // jb           LBB1_93, $505(%rip)
	LONG $0xfec58341                           // addl         $-2, %r13d
	WORD $0x2949; BYTE $0xcd                   // subq         %rcx, %r13
	WORD $0x8945; BYTE $0xf0                   // movl         %r14d, %r8d
	WORD $0xff49; BYTE $0xc0                   // incq         %r8
	WORD $0x214d; BYTE $0xc4                   // andq         %r8, %r12
	WORD $0x8941; BYTE $0xf9                   // movl         %edi, %r9d
	WORD $0xff49; BYTE $0xc1                   // incq         %r9
	LONG $0x80e18349                           // andq         $-128, %r9
	LONG $0x24548d49; BYTE $0x80               // leaq         $-128(%r12), %rdx
	WORD $0x8949; BYTE $0xd2                   // movq         %rdx, %r10
	LONG $0x07eac149                           // shrq         $7, %r10
	WORD $0xff49; BYTE $0xc2                   // incq         %r10
	LONG $0x80fa8148; WORD $0x0001; BYTE $0x00 // cmpq         $384, %rdx
	LONG $0x0080830f; WORD $0x0000             // jae          LBB1_86, $128(%rip)
	WORD $0xff31                               // xorl         %edi, %edi
	LONG $0x000135e9; BYTE $0x00               // jmp          LBB1_88, $309(%rip)

LBB1_102:
	WORD $0x0149; BYTE $0xc9 // addq         %rcx, %r9
	LONG $0xfce18341         // andl         $-4, %r9d
	WORD $0xf749; BYTE $0xd9 // negq         %r9
	WORD $0xdb31             // xorl         %ebx, %ebx

	// .p2align 4, 0x90
LBB1_103:
	LONG $0x183c8d48               // leaq         (%rax,%rbx), %rdi
	LONG $0xfd39748b               // movl         $-3(%rcx,%rdi), %esi
	LONG $0xfe397489               // movl         %esi, $-2(%rcx,%rdi)
	LONG $0xfcc38348               // addq         $-4, %rbx
	WORD $0x3949; BYTE $0xd9       // cmpq         %rbx, %r9
	LONG $0xffe7850f; WORD $0xffff // jne          LBB1_103, $-25(%rip)
	WORD $0xf748; BYTE $0xdb       // negq         %rbx

LBB1_98:
	LONG $0x03c0f641                           // testb        $3, %r8b
	LONG $0x0032840f; WORD $0x0000             // je           LBB1_101, $50(%rip)
	LONG $0xc2b60f44                           // movzbl       %dl, %r8d
	LONG $0x03e08341                           // andl         $3, %r8d
	WORD $0xf749; BYTE $0xd8                   // negq         %r8
	WORD $0x8948; BYTE $0xc6                   // movq         %rax, %rsi
	WORD $0x2948; BYTE $0xde                   // subq         %rbx, %rsi
	WORD $0xff31                               // xorl         %edi, %edi
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB1_100:
	LONG $0x3e1c8d48               // leaq         (%rsi,%rdi), %rbx
	LONG $0x1914b60f               // movzbl       (%rcx,%rbx), %edx
	LONG $0x01195488               // movb         %dl, $1(%rcx,%rbx)
	WORD $0xff48; BYTE $0xcf       // decq         %rdi
	WORD $0x3949; BYTE $0xf8       // cmpq         %rdi, %r8
	LONG $0xffe8850f; WORD $0xffff // jne          LBB1_100, $-24(%rip)

LBB1_101:
	WORD $0x6349; BYTE $0xd6     // movslq       %r14d, %rdx
	LONG $0x1704c641; BYTE $0x2e // movb         $46, (%r15,%rdx)
	LONG $0x081c8d48             // leaq         (%rax,%rcx), %rbx
	LONG $0x02c38348             // addq         $2, %rbx
	LONG $0x000154e9; BYTE $0x00 // jmp          LBB1_124, $340(%rip)

LBB1_86:
	WORD $0x8944; BYTE $0xeb // movl         %r13d, %ebx
	WORD $0xff48; BYTE $0xc3 // incq         %rbx
	LONG $0x80e38348         // andq         $-128, %rbx
	LONG $0x80c38348         // addq         $-128, %rbx
	LONG $0x07ebc148         // shrq         $7, %rbx
	WORD $0xff48; BYTE $0xc3 // incq         %rbx
	LONG $0xfce38348         // andq         $-4, %rbx
	WORD $0xff31             // xorl         %edi, %edi
	QUAD $0xfffff4d0056ffdc5 // vmovdqa      $-2864(%rip), %ymm0  /* LCPI1_0+0(%rip) */

LBB1_87:
	LONG $0x38148d48                           // leaq         (%rax,%rdi), %rdx
	LONG $0x447ffec5; WORD $0x0111             // vmovdqu      %ymm0, $1(%rcx,%rdx)
	LONG $0x447ffec5; WORD $0x2111             // vmovdqu      %ymm0, $33(%rcx,%rdx)
	LONG $0x447ffec5; WORD $0x4111             // vmovdqu      %ymm0, $65(%rcx,%rdx)
	LONG $0x447ffec5; WORD $0x6111             // vmovdqu      %ymm0, $97(%rcx,%rdx)
	QUAD $0x00008111847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $129(%rcx,%rdx)
	QUAD $0x0000a111847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $161(%rcx,%rdx)
	QUAD $0x0000c111847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $193(%rcx,%rdx)
	QUAD $0x0000e111847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $225(%rcx,%rdx)
	QUAD $0x00010111847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $257(%rcx,%rdx)
	QUAD $0x00012111847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $289(%rcx,%rdx)
	QUAD $0x00014111847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $321(%rcx,%rdx)
	QUAD $0x00016111847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $353(%rcx,%rdx)
	QUAD $0x00018111847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $385(%rcx,%rdx)
	QUAD $0x0001a111847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $417(%rcx,%rdx)
	QUAD $0x0001c111847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $449(%rcx,%rdx)
	QUAD $0x0001e111847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $481(%rcx,%rdx)
	LONG $0x00c78148; WORD $0x0002; BYTE $0x00 // addq         $512, %rdi
	LONG $0xfcc38348                           // addq         $-4, %rbx
	LONG $0xff67850f; WORD $0xffff             // jne          LBB1_87, $-153(%rip)

LBB1_88:
	WORD $0x0149; BYTE $0xc1                   // addq         %rax, %r9
	LONG $0x03c2f641                           // testb        $3, %r10b
	LONG $0x0059840f; WORD $0x0000             // je           LBB1_91, $89(%rip)
	WORD $0xff41; BYTE $0xc5                   // incl         %r13d
	LONG $0x80e58141; WORD $0x0001; BYTE $0x00 // andl         $384, %r13d
	LONG $0x80c58341                           // addl         $-128, %r13d
	LONG $0x07edc141                           // shrl         $7, %r13d
	WORD $0xfe41; BYTE $0xc5                   // incb         %r13b
	LONG $0xd5b60f41                           // movzbl       %r13b, %edx
	WORD $0xe283; BYTE $0x03                   // andl         $3, %edx
	LONG $0x07e2c148                           // shlq         $7, %rdx
	WORD $0x0148; BYTE $0xf8                   // addq         %rdi, %rax
	LONG $0x61c08348                           // addq         $97, %rax
	WORD $0xf631                               // xorl         %esi, %esi
	QUAD $0xfffff3f9056ffdc5                   // vmovdqa      $-3079(%rip), %ymm0  /* LCPI1_0+0(%rip) */

LBB1_90:
	LONG $0x303c8d48               // leaq         (%rax,%rsi), %rdi
	LONG $0x447ffec5; WORD $0xa039 // vmovdqu      %ymm0, $-96(%rcx,%rdi)
	LONG $0x447ffec5; WORD $0xc039 // vmovdqu      %ymm0, $-64(%rcx,%rdi)
	LONG $0x447ffec5; WORD $0xe039 // vmovdqu      %ymm0, $-32(%rcx,%rdi)
	LONG $0x047ffec5; BYTE $0x39   // vmovdqu      %ymm0, (%rcx,%rdi)
	LONG $0x80ee8348               // subq         $-128, %rsi
	WORD $0x3948; BYTE $0xf2       // cmpq         %rsi, %rdx
	LONG $0xffd8850f; WORD $0xffff // jne          LBB1_90, $-40(%rip)

LBB1_91:
	LONG $0x091c8d4a                       // leaq         (%rcx,%r9), %rbx
	WORD $0xff48; BYTE $0xc3               // incq         %rbx
	WORD $0x394d; BYTE $0xe0               // cmpq         %r12, %r8
	LONG $0xd0558b4c                       // movq         $-48(%rbp), %r10
	LONG $0x001e840f; WORD $0x0000         // je           LBB1_124, $30(%rip)
	WORD $0x8944; BYTE $0xe2               // movl         %r12d, %edx
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB1_93:
	WORD $0x03c6; BYTE $0x30       // movb         $48, (%rbx)
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	WORD $0xc2ff                   // incl         %edx
	WORD $0x3944; BYTE $0xda       // cmpl         %r11d, %edx
	LONG $0xffef8c0f; WORD $0xffff // jl           LBB1_93, $-17(%rip)

LBB1_124:
	WORD $0x2944; BYTE $0xd3 // subl         %r10d, %ebx

LBB1_125:
	WORD $0xd889             // movl         %ebx, %eax
	LONG $0x08c48348         // addq         $8, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB1_49:
	LONG $0x00ff8148; WORD $0x9aca; BYTE $0x3b // cmpq         $1000000000, %rdi
	LONG $0x00000aba; BYTE $0x00               // movl         $10, %edx
	LONG $0xfff6ade9; BYTE $0xff               // jmp          LBB1_50, $-2387(%rip)

LBB1_1:
	WORD $0xdb31                 // xorl         %ebx, %ebx
	LONG $0xffffd4e9; BYTE $0xff // jmp          LBB1_125, $-44(%rip)

LBB1_5:
	LONG $0xfffbcebe; BYTE $0xff // movl         $-1074, %esi
	WORD $0x8948; BYTE $0xd7     // movq         %rdx, %rdi
	LONG $0xfff430e9; BYTE $0xff // jmp          LBB1_6, $-3024(%rip)

LBB1_26:
	LONG $0x00ff8148; WORD $0x9aca; BYTE $0x3b // cmpq         $1000000000, %rdi
	LONG $0x00000aba; BYTE $0x00               // movl         $10, %edx
	LONG $0xfff8d5e9; BYTE $0xff               // jmp          LBB1_27, $-1835(%rip)
	WORD $0x9090                               // .p2align 4, 0x90

_format_integer:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	BYTE $0x53                     // pushq        %rbx
	WORD $0x8941; BYTE $0xd0       // movl         %edx, %r8d
	WORD $0x0149; BYTE $0xf0       // addq         %rsi, %r8
	WORD $0x8948; BYTE $0xf8       // movq         %rdi, %rax
	LONG $0x20e8c148               // shrq         $32, %rax
	LONG $0x0016850f; WORD $0x0000 // jne          LBB2_2, $22(%rip)
	WORD $0x894d; BYTE $0xc3       // movq         %r8, %r11
	LONG $0x2710ff81; WORD $0x0000 // cmpl         $10000, %edi
	LONG $0x00c3830f; WORD $0x0000 // jae          LBB2_5, $195(%rip)

LBB2_4:
	WORD $0xfa89                 // movl         %edi, %edx
	LONG $0x00011ae9; BYTE $0x00 // jmp          LBB2_7, $282(%rip)

LBB2_2:
	QUAD $0x77118461cefdb948; WORD $0xabcc     // movabsq      $-6067343680855748867, %rcx
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	WORD $0xf748; BYTE $0xe1                   // mulq         %rcx
	LONG $0x1aeac148                           // shrq         $26, %rdx
	LONG $0x1f00ca69; WORD $0xfa0a             // imull        $-100000000, %edx, %ecx
	WORD $0xf901                               // addl         %edi, %ecx
	LONG $0x1759b941; WORD $0xd1b7             // movl         $3518437209, %r9d
	WORD $0x8948; BYTE $0xc8                   // movq         %rcx, %rax
	LONG $0xc1af0f49                           // imulq        %r9, %rax
	LONG $0x2de8c148                           // shrq         $45, %rax
	LONG $0x2710f869; WORD $0x0000             // imull        $10000, %eax, %edi
	WORD $0xf929                               // subl         %edi, %ecx
	WORD $0x8948; BYTE $0xc7                   // movq         %rax, %rdi
	LONG $0xf9af0f49                           // imulq        %r9, %rdi
	LONG $0x2defc148                           // shrq         $45, %rdi
	LONG $0x2710ff69; WORD $0x0000             // imull        $10000, %edi, %edi
	WORD $0xf829                               // subl         %edi, %eax
	WORD $0xb70f; BYTE $0xf9                   // movzwl       %cx, %edi
	WORD $0xefc1; BYTE $0x02                   // shrl         $2, %edi
	LONG $0x7bcf6944; WORD $0x0014; BYTE $0x00 // imull        $5243, %edi, %r9d
	LONG $0x11e9c141                           // shrl         $17, %r9d
	LONG $0x64f96b41                           // imull        $100, %r9d, %edi
	WORD $0xf929                               // subl         %edi, %ecx
	LONG $0xd1b70f44                           // movzwl       %cx, %r10d
	WORD $0xb70f; BYTE $0xf8                   // movzwl       %ax, %edi
	WORD $0xefc1; BYTE $0x02                   // shrl         $2, %edi
	LONG $0x147bff69; WORD $0x0000             // imull        $5243, %edi, %edi
	WORD $0xefc1; BYTE $0x11                   // shrl         $17, %edi
	WORD $0xcf6b; BYTE $0x64                   // imull        $100, %edi, %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	LONG $0xd8b70f44                           // movzwl       %ax, %r11d
	LONG $0xc00d8d48; WORD $0x00f8; BYTE $0x00 // leaq         $63680(%rip), %rcx  /* _Digits+0(%rip) */
	LONG $0x04b70f42; BYTE $0x51               // movzwl       (%rcx,%r10,2), %eax
	LONG $0x40894166; BYTE $0xfe               // movw         %ax, $-2(%r8)
	LONG $0x04b70f42; BYTE $0x49               // movzwl       (%rcx,%r9,2), %eax
	LONG $0x40894166; BYTE $0xfc               // movw         %ax, $-4(%r8)
	LONG $0x04b70f42; BYTE $0x59               // movzwl       (%rcx,%r11,2), %eax
	LONG $0x40894166; BYTE $0xfa               // movw         %ax, $-6(%r8)
	LONG $0xf8588d4d                           // leaq         $-8(%r8), %r11
	LONG $0x790cb70f                           // movzwl       (%rcx,%rdi,2), %ecx
	LONG $0x48894166; BYTE $0xf8               // movw         %cx, $-8(%r8)
	WORD $0x8948; BYTE $0xd7                   // movq         %rdx, %rdi
	LONG $0x2710ff81; WORD $0x0000             // cmpl         $10000, %edi
	LONG $0xff3d820f; WORD $0xffff             // jb           LBB2_4, $-195(%rip)

LBB2_5:
	LONG $0x1759b941; WORD $0xd1b7             // movl         $3518437209, %r9d
	LONG $0x79158d4c; WORD $0x00f8; BYTE $0x00 // leaq         $63609(%rip), %r10  /* _Digits+0(%rip) */
	QUAD $0x9090909090909090; BYTE $0x90       // .p2align 4, 0x90

LBB2_6:
	WORD $0xfa89                               // movl         %edi, %edx
	LONG $0xd1af0f49                           // imulq        %r9, %rdx
	LONG $0x2deac148                           // shrq         $45, %rdx
	LONG $0xd8f0ca69; WORD $0xffff             // imull        $-10000, %edx, %ecx
	WORD $0xf901                               // addl         %edi, %ecx
	LONG $0x1fc16948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rcx, %rax
	LONG $0x25e8c148                           // shrq         $37, %rax
	WORD $0xd86b; BYTE $0x64                   // imull        $100, %eax, %ebx
	WORD $0xd929                               // subl         %ebx, %ecx
	LONG $0x0cb70f41; BYTE $0x4a               // movzwl       (%r10,%rcx,2), %ecx
	LONG $0x4b894166; BYTE $0xfe               // movw         %cx, $-2(%r11)
	LONG $0x04b70f41; BYTE $0x42               // movzwl       (%r10,%rax,2), %eax
	LONG $0x43894166; BYTE $0xfc               // movw         %ax, $-4(%r11)
	LONG $0xfcc38349                           // addq         $-4, %r11
	LONG $0xe0ffff81; WORD $0x05f5             // cmpl         $99999999, %edi
	WORD $0xd789                               // movl         %edx, %edi
	LONG $0xffb8870f; WORD $0xffff             // ja           LBB2_6, $-72(%rip)

LBB2_7:
	WORD $0xfa83; BYTE $0x64                   // cmpl         $100, %edx
	LONG $0x002d820f; WORD $0x0000             // jb           LBB2_9, $45(%rip)
	WORD $0xb70f; BYTE $0xc2                   // movzwl       %dx, %eax
	WORD $0xe8c1; BYTE $0x02                   // shrl         $2, %eax
	LONG $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	WORD $0xe8c1; BYTE $0x11                   // shrl         $17, %eax
	WORD $0xc86b; BYTE $0x64                   // imull        $100, %eax, %ecx
	WORD $0xca29                               // subl         %ecx, %edx
	WORD $0xb70f; BYTE $0xca                   // movzwl       %dx, %ecx
	LONG $0x01158d48; WORD $0x00f8; BYTE $0x00 // leaq         $63489(%rip), %rdx  /* _Digits+0(%rip) */
	LONG $0x4a0cb70f                           // movzwl       (%rdx,%rcx,2), %ecx
	LONG $0x4b894166; BYTE $0xfe               // movw         %cx, $-2(%r11)
	LONG $0xfec38349                           // addq         $-2, %r11
	WORD $0xc289                               // movl         %eax, %edx

LBB2_9:
	WORD $0xfa83; BYTE $0x0a                   // cmpl         $10, %edx
	LONG $0x0018820f; WORD $0x0000             // jb           LBB2_11, $24(%rip)
	WORD $0xd089                               // movl         %edx, %eax
	LONG $0xe00d8d48; WORD $0x00f7; BYTE $0x00 // leaq         $63456(%rip), %rcx  /* _Digits+0(%rip) */
	LONG $0x4104b70f                           // movzwl       (%rcx,%rax,2), %eax
	LONG $0x43894166; BYTE $0xfe               // movw         %ax, $-2(%r11)
	WORD $0x894c; BYTE $0xc0                   // movq         %r8, %rax
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB2_11:
	WORD $0xc280; BYTE $0x30       // addb         $48, %dl
	WORD $0x1688                   // movb         %dl, (%rsi)
	WORD $0x894c; BYTE $0xc0       // movq         %r8, %rax
	BYTE $0x5b                     // popq         %rbx
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_i64toa:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x8548; BYTE $0xf6                   // testq        %rsi, %rsi
	LONG $0x009c880f; WORD $0x0000             // js           LBB3_12, $156(%rip)
	LONG $0x0ffe8148; WORD $0x0027; BYTE $0x00 // cmpq         $9999, %rsi
	LONG $0x00a1870f; WORD $0x0000             // ja           LBB3_9, $161(%rip)
	WORD $0xb70f; BYTE $0xc6                   // movzwl       %si, %eax
	WORD $0xe8c1; BYTE $0x02                   // shrl         $2, %eax
	LONG $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	WORD $0xe8c1; BYTE $0x11                   // shrl         $17, %eax
	LONG $0x00148d48                           // leaq         (%rax,%rax), %rdx
	WORD $0xc06b; BYTE $0x64                   // imull        $100, %eax, %eax
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xc129                               // subl         %eax, %ecx
	WORD $0xb70f; BYTE $0xc9                   // movzwl       %cx, %ecx
	WORD $0x0148; BYTE $0xc9                   // addq         %rcx, %rcx
	LONG $0x7f058d4c; WORD $0x00f7; BYTE $0x00 // leaq         $63359(%rip), %r8  /* _Digits+0(%rip) */
	LONG $0x03e8fe81; WORD $0x0000             // cmpl         $1000, %esi
	LONG $0x0010820f; WORD $0x0000             // jb           LBB3_4, $16(%rip)
	LONG $0x02048a42                           // movb         (%rdx,%r8), %al
	WORD $0x0788                               // movb         %al, (%rdi)
	LONG $0x000001b8; BYTE $0x00               // movl         $1, %eax
	LONG $0x00000be9; BYTE $0x00               // jmp          LBB3_5, $11(%rip)

LBB3_4:
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0xfe83; BYTE $0x64       // cmpl         $100, %esi
	LONG $0x0031820f; WORD $0x0000 // jb           LBB3_6, $49(%rip)

LBB3_5:
	WORD $0xb70f; BYTE $0xd2 // movzwl       %dx, %edx
	LONG $0x01ca8348         // orq          $1, %rdx
	LONG $0x02148a42         // movb         (%rdx,%r8), %dl
	WORD $0xc689             // movl         %eax, %esi
	WORD $0xc0ff             // incl         %eax
	WORD $0x1488; BYTE $0x37 // movb         %dl, (%rdi,%rsi)

LBB3_7:
	LONG $0x01148a42         // movb         (%rcx,%r8), %dl
	WORD $0xc689             // movl         %eax, %esi
	WORD $0xc0ff             // incl         %eax
	WORD $0x1488; BYTE $0x37 // movb         %dl, (%rdi,%rsi)

LBB3_8:
	WORD $0xb70f; BYTE $0xc9 // movzwl       %cx, %ecx
	LONG $0x01c98348         // orq          $1, %rcx
	LONG $0x010c8a42         // movb         (%rcx,%r8), %cl
	WORD $0xc289             // movl         %eax, %edx
	WORD $0xc0ff             // incl         %eax
	WORD $0x0c88; BYTE $0x17 // movb         %cl, (%rdi,%rdx)
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB3_6:
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0xfe83; BYTE $0x0a       // cmpl         $10, %esi
	LONG $0xffd6830f; WORD $0xffff // jae          LBB3_7, $-42(%rip)
	LONG $0xffffdce9; BYTE $0xff   // jmp          LBB3_8, $-36(%rip)

LBB3_12:
	WORD $0x07c6; BYTE $0x2d     // movb         $45, (%rdi)
	WORD $0xff48; BYTE $0xc7     // incq         %rdi
	WORD $0xf748; BYTE $0xde     // negq         %rsi
	LONG $0x000039e8; BYTE $0x00 // callq        _u64toa, $57(%rip)
	WORD $0xc0ff                 // incl         %eax
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq

LBB3_9:
	LONG $0xfffe8148; WORD $0xf5e0; BYTE $0x05 // cmpq         $99999999, %rsi
	LONG $0x0006870f; WORD $0x0000             // ja           LBB3_10, $6(%rip)
	BYTE $0x5d                                 // popq         %rbp
	LONG $0x0000f2e9; BYTE $0x00               // jmp          _u32toa_medium, $242(%rip)

LBB3_10:
	QUAD $0x86f26fc0ffffb848; WORD $0x0023 // movabsq      $9999999999999999, %rax
	WORD $0x3948; BYTE $0xc6               // cmpq         %rax, %rsi
	LONG $0x0006870f; WORD $0x0000         // ja           LBB3_11, $6(%rip)
	BYTE $0x5d                             // popq         %rbp
	LONG $0x000209e9; BYTE $0x00           // jmp          _u64toa_large_sse2, $521(%rip)

LBB3_11:
	BYTE $0x5d                   // popq         %rbp
	LONG $0x000353e9; BYTE $0x00 // jmp          _u64toa_xlarge_sse2, $851(%rip)
	WORD $0x9090; BYTE $0x90     // .p2align 4, 0x90

_u64toa:
	LONG $0x0ffe8148; WORD $0x0027; BYTE $0x00 // cmpq         $9999, %rsi
	LONG $0x0093870f; WORD $0x0000             // ja           LBB4_8, $147(%rip)
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0xb70f; BYTE $0xc6                   // movzwl       %si, %eax
	WORD $0xe8c1; BYTE $0x02                   // shrl         $2, %eax
	LONG $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	WORD $0xe8c1; BYTE $0x11                   // shrl         $17, %eax
	LONG $0x00148d48                           // leaq         (%rax,%rax), %rdx
	WORD $0xc06b; BYTE $0x64                   // imull        $100, %eax, %eax
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xc129                               // subl         %eax, %ecx
	WORD $0xb70f; BYTE $0xc9                   // movzwl       %cx, %ecx
	WORD $0x0148; BYTE $0xc9                   // addq         %rcx, %rcx
	LONG $0x98058d4c; WORD $0x00f6; BYTE $0x00 // leaq         $63128(%rip), %r8  /* _Digits+0(%rip) */
	LONG $0x03e8fe81; WORD $0x0000             // cmpl         $1000, %esi
	LONG $0x0010820f; WORD $0x0000             // jb           LBB4_3, $16(%rip)
	LONG $0x02048a42                           // movb         (%rdx,%r8), %al
	WORD $0x0788                               // movb         %al, (%rdi)
	LONG $0x000001b8; BYTE $0x00               // movl         $1, %eax
	LONG $0x00000be9; BYTE $0x00               // jmp          LBB4_4, $11(%rip)

LBB4_3:
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0xfe83; BYTE $0x64       // cmpl         $100, %esi
	LONG $0x0031820f; WORD $0x0000 // jb           LBB4_5, $49(%rip)

LBB4_4:
	WORD $0xb70f; BYTE $0xd2 // movzwl       %dx, %edx
	LONG $0x01ca8348         // orq          $1, %rdx
	LONG $0x02148a42         // movb         (%rdx,%r8), %dl
	WORD $0xc689             // movl         %eax, %esi
	WORD $0xc0ff             // incl         %eax
	WORD $0x1488; BYTE $0x37 // movb         %dl, (%rdi,%rsi)

LBB4_6:
	LONG $0x01148a42         // movb         (%rcx,%r8), %dl
	WORD $0xc689             // movl         %eax, %esi
	WORD $0xc0ff             // incl         %eax
	WORD $0x1488; BYTE $0x37 // movb         %dl, (%rdi,%rsi)

LBB4_7:
	WORD $0xb70f; BYTE $0xc9 // movzwl       %cx, %ecx
	LONG $0x01c98348         // orq          $1, %rcx
	LONG $0x010c8a42         // movb         (%rcx,%r8), %cl
	WORD $0xc289             // movl         %eax, %edx
	WORD $0xc0ff             // incl         %eax
	WORD $0x0c88; BYTE $0x17 // movb         %cl, (%rdi,%rdx)
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB4_5:
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0xfe83; BYTE $0x0a       // cmpl         $10, %esi
	LONG $0xffd6830f; WORD $0xffff // jae          LBB4_6, $-42(%rip)
	LONG $0xffffdce9; BYTE $0xff   // jmp          LBB4_7, $-36(%rip)

LBB4_8:
	LONG $0xfffe8148; WORD $0xf5e0; BYTE $0x05 // cmpq         $99999999, %rsi
	LONG $0x0005870f; WORD $0x0000             // ja           LBB4_9, $5(%rip)
	LONG $0x00001ee9; BYTE $0x00               // jmp          _u32toa_medium, $30(%rip)

LBB4_9:
	QUAD $0x86f26fc0ffffb848; WORD $0x0023 // movabsq      $9999999999999999, %rax
	WORD $0x3948; BYTE $0xc6               // cmpq         %rax, %rsi
	LONG $0x0005870f; WORD $0x0000         // ja           LBB4_10, $5(%rip)
	LONG $0x000136e9; BYTE $0x00           // jmp          _u64toa_large_sse2, $310(%rip)

LBB4_10:
	LONG $0x000281e9; BYTE $0x00 // jmp          _u64toa_xlarge_sse2, $641(%rip)
	BYTE $0x90                   // .p2align 4, 0x90

_u32toa_medium:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0xf089                               // movl         %esi, %eax
	LONG $0xb71759b9; BYTE $0xd1               // movl         $3518437209, %ecx
	LONG $0xc8af0f48                           // imulq        %rax, %rcx
	LONG $0x2de9c148                           // shrq         $45, %rcx
	LONG $0x2710d169; WORD $0x0000             // imull        $10000, %ecx, %edx
	WORD $0x8941; BYTE $0xf1                   // movl         %esi, %r9d
	WORD $0x2941; BYTE $0xd1                   // subl         %edx, %r9d
	LONG $0x83d06948; WORD $0x1bde; BYTE $0x43 // imulq        $1125899907, %rax, %rdx
	LONG $0x31eac148                           // shrq         $49, %rdx
	WORD $0xe283; BYTE $0xfe                   // andl         $-2, %edx
	LONG $0x1fc16948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rcx, %rax
	LONG $0x25e8c148                           // shrq         $37, %rax
	WORD $0xc06b; BYTE $0x64                   // imull        $100, %eax, %eax
	WORD $0xc129                               // subl         %eax, %ecx
	WORD $0x0148; BYTE $0xc9                   // addq         %rcx, %rcx
	LONG $0xb9058d4c; WORD $0x00f5; BYTE $0x00 // leaq         $62905(%rip), %r8  /* _Digits+0(%rip) */
	LONG $0x9680fe81; WORD $0x0098             // cmpl         $10000000, %esi
	LONG $0x0010820f; WORD $0x0000             // jb           LBB5_2, $16(%rip)
	LONG $0x02048a42                           // movb         (%rdx,%r8), %al
	WORD $0x0788                               // movb         %al, (%rdi)
	LONG $0x000001b8; BYTE $0x00               // movl         $1, %eax
	LONG $0x00000ee9; BYTE $0x00               // jmp          LBB5_3, $14(%rip)

LBB5_2:
	WORD $0xc031                   // xorl         %eax, %eax
	LONG $0x4240fe81; WORD $0x000f // cmpl         $1000000, %esi
	LONG $0x005e820f; WORD $0x0000 // jb           LBB5_4, $94(%rip)

LBB5_3:
	WORD $0xd289             // movl         %edx, %edx
	LONG $0x01ca8348         // orq          $1, %rdx
	LONG $0x02148a42         // movb         (%rdx,%r8), %dl
	WORD $0xc689             // movl         %eax, %esi
	WORD $0xc0ff             // incl         %eax
	WORD $0x1488; BYTE $0x37 // movb         %dl, (%rdi,%rsi)

LBB5_5:
	LONG $0x01148a42         // movb         (%rcx,%r8), %dl
	WORD $0xc689             // movl         %eax, %esi
	WORD $0xc0ff             // incl         %eax
	WORD $0x1488; BYTE $0x37 // movb         %dl, (%rdi,%rsi)

LBB5_6:
	LONG $0xd1b70f41               // movzwl       %r9w, %edx
	WORD $0xeac1; BYTE $0x02       // shrl         $2, %edx
	LONG $0x147bd269; WORD $0x0000 // imull        $5243, %edx, %edx
	WORD $0xeac1; BYTE $0x11       // shrl         $17, %edx
	WORD $0xf26b; BYTE $0x64       // imull        $100, %edx, %esi
	WORD $0x2941; BYTE $0xf1       // subl         %esi, %r9d
	LONG $0xc9b70f45               // movzwl       %r9w, %r9d
	WORD $0xc989                   // movl         %ecx, %ecx
	LONG $0x01c98348               // orq          $1, %rcx
	LONG $0x010c8a42               // movb         (%rcx,%r8), %cl
	WORD $0xc689                   // movl         %eax, %esi
	WORD $0x0c88; BYTE $0x37       // movb         %cl, (%rdi,%rsi)
	LONG $0x0cb70f41; BYTE $0x50   // movzwl       (%r8,%rdx,2), %ecx
	LONG $0x374c8966; BYTE $0x01   // movw         %cx, $1(%rdi,%rsi)
	LONG $0x0cb70f43; BYTE $0x48   // movzwl       (%r8,%r9,2), %ecx
	LONG $0x374c8966; BYTE $0x03   // movw         %cx, $3(%rdi,%rsi)
	WORD $0xc083; BYTE $0x05       // addl         $5, %eax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB5_4:
	WORD $0xc031                                             // xorl         %eax, %eax
	LONG $0x86a0fe81; WORD $0x0001                           // cmpl         $100000, %esi
	LONG $0xffa5830f; WORD $0xffff                           // jae          LBB5_5, $-91(%rip)
	LONG $0xffffabe9; BYTE $0xff                             // jmp          LBB5_6, $-85(%rip)
	QUAD $0x0000000000000000; LONG $0x00000000; WORD $0x0000 // .p2align 4, 0x00

LCPI6_0:
	QUAD $0x00000000d1b71759 // .quad 3518437209
	QUAD $0x00000000d1b71759 // .quad 3518437209

LCPI6_3:
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10

LCPI6_4:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'

	// .p2align 3, 0x00
LCPI6_1:
	QUAD $0x80003334147b20c5 // .quad -9223315738079846203

LCPI6_2:
	QUAD $0x8000200008000080 // .quad -9223336852348469120

	// .p2align 4, 0x90
_u64toa_large_sse2:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	QUAD $0x77118461cefdb948; WORD $0xabcc     // movabsq      $-6067343680855748867, %rcx
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	WORD $0xf748; BYTE $0xe1                   // mulq         %rcx
	LONG $0x1aeac148                           // shrq         $26, %rdx
	LONG $0xe100c269; WORD $0x05f5             // imull        $100000000, %edx, %eax
	WORD $0xc629                               // subl         %eax, %esi
	LONG $0xc26ef9c5                           // vmovd        %edx, %xmm0
	QUAD $0xffffff940d6ff9c5                   // vmovdqa      $-108(%rip), %xmm1  /* LCPI6_0+0(%rip) */
	LONG $0xd1f4f9c5                           // vpmuludq     %xmm1, %xmm0, %xmm2
	LONG $0xd273e9c5; BYTE $0x2d               // vpsrlq       $45, %xmm2, %xmm2
	LONG $0x002710b8; BYTE $0x00               // movl         $10000, %eax
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq        %rax, %xmm3
	LONG $0xe3f4e9c5                           // vpmuludq     %xmm3, %xmm2, %xmm4
	LONG $0xc4faf9c5                           // vpsubd       %xmm4, %xmm0, %xmm0
	LONG $0xc061e9c5                           // vpunpcklwd   %xmm0, %xmm2, %xmm0
	LONG $0xf073f9c5; BYTE $0x02               // vpsllq       $2, %xmm0, %xmm0
	LONG $0xc070fbc5; BYTE $0x50               // vpshuflw     $80, %xmm0, %xmm0
	LONG $0xc070f9c5; BYTE $0x50               // vpshufd      $80, %xmm0, %xmm0
	QUAD $0xffff8d155979e2c4; BYTE $0xff       // vpbroadcastq $-115(%rip), %xmm2  /* LCPI6_1+0(%rip) */
	QUAD $0xffff8c255979e2c4; BYTE $0xff       // vpbroadcastq $-116(%rip), %xmm4  /* LCPI6_2+0(%rip) */
	LONG $0xc2e4f9c5                           // vpmulhuw     %xmm2, %xmm0, %xmm0
	LONG $0xc4e4f9c5                           // vpmulhuw     %xmm4, %xmm0, %xmm0
	QUAD $0xffffff542d6ff9c5                   // vmovdqa      $-172(%rip), %xmm5  /* LCPI6_3+0(%rip) */
	LONG $0xf5d5f9c5                           // vpmullw      %xmm5, %xmm0, %xmm6
	LONG $0xf673c9c5; BYTE $0x10               // vpsllq       $16, %xmm6, %xmm6
	LONG $0xc6f9f9c5                           // vpsubw       %xmm6, %xmm0, %xmm0
	LONG $0xf66ef9c5                           // vmovd        %esi, %xmm6
	LONG $0xc9f4c9c5                           // vpmuludq     %xmm1, %xmm6, %xmm1
	LONG $0xd173f1c5; BYTE $0x2d               // vpsrlq       $45, %xmm1, %xmm1
	LONG $0xdbf4f1c5                           // vpmuludq     %xmm3, %xmm1, %xmm3
	LONG $0xdbfac9c5                           // vpsubd       %xmm3, %xmm6, %xmm3
	LONG $0xcb61f1c5                           // vpunpcklwd   %xmm3, %xmm1, %xmm1
	LONG $0xf173f1c5; BYTE $0x02               // vpsllq       $2, %xmm1, %xmm1
	LONG $0xc970fbc5; BYTE $0x50               // vpshuflw     $80, %xmm1, %xmm1
	LONG $0xc970f9c5; BYTE $0x50               // vpshufd      $80, %xmm1, %xmm1
	LONG $0xcae4f1c5                           // vpmulhuw     %xmm2, %xmm1, %xmm1
	LONG $0xcce4f1c5                           // vpmulhuw     %xmm4, %xmm1, %xmm1
	LONG $0xd5d5f1c5                           // vpmullw      %xmm5, %xmm1, %xmm2
	LONG $0xf273e9c5; BYTE $0x10               // vpsllq       $16, %xmm2, %xmm2
	LONG $0xcaf9f1c5                           // vpsubw       %xmm2, %xmm1, %xmm1
	LONG $0xc167f9c5                           // vpackuswb    %xmm1, %xmm0, %xmm0
	QUAD $0xffffff0e0dfcf9c5                   // vpaddb       $-242(%rip), %xmm0, %xmm1  /* LCPI6_4+0(%rip) */
	LONG $0xd2efe9c5                           // vpxor        %xmm2, %xmm2, %xmm2
	LONG $0xc274f9c5                           // vpcmpeqb     %xmm2, %xmm0, %xmm0
	LONG $0xc0d7f9c5                           // vpmovmskb    %xmm0, %eax
	WORD $0xd0f7                               // notl         %eax
	LONG $0x0080000d; BYTE $0x00               // orl          $32768, %eax
	WORD $0xbc0f; BYTE $0xc8                   // bsfl         %eax, %ecx
	LONG $0x000010b8; BYTE $0x00               // movl         $16, %eax
	WORD $0xc829                               // subl         %ecx, %eax
	LONG $0x04e1c148                           // shlq         $4, %rcx
	LONG $0x36158d48; WORD $0x011b; BYTE $0x00 // leaq         $72502(%rip), %rdx  /* _VecShiftShuffles+0(%rip) */
	LONG $0x0071e2c4; WORD $0x1104             // vpshufb      (%rcx,%rdx), %xmm1, %xmm0
	LONG $0x077ffac5                           // vmovdqu      %xmm0, (%rdi)
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	QUAD $0x0000000000000000; WORD $0x0000     // .p2align 4, 0x00

LCPI7_0:
	QUAD $0x00000000d1b71759 // .quad 3518437209
	QUAD $0x00000000d1b71759 // .quad 3518437209

LCPI7_3:
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10

LCPI7_4:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'

	// .p2align 3, 0x00
LCPI7_1:
	QUAD $0x80003334147b20c5 // .quad -9223315738079846203

LCPI7_2:
	QUAD $0x8000200008000080 // .quad -9223336852348469120

	// .p2align 4, 0x90
_u64toa_xlarge_sse2:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	QUAD $0x652fb1137857b948; WORD $0x39a5 // movabsq      $4153837486827862103, %rcx
	WORD $0x8948; BYTE $0xf0               // movq         %rsi, %rax
	WORD $0xf748; BYTE $0xe1               // mulq         %rcx
	LONG $0x33eac148                       // shrq         $51, %rdx
	QUAD $0x86f26fc10000b848; WORD $0x0023 // movabsq      $10000000000000000, %rax
	LONG $0xc2af0f48                       // imulq        %rdx, %rax
	WORD $0x2948; BYTE $0xc6               // subq         %rax, %rsi
	WORD $0xfa83; BYTE $0x09               // cmpl         $9, %edx
	LONG $0x000f870f; WORD $0x0000         // ja           LBB7_2, $15(%rip)
	WORD $0xc280; BYTE $0x30               // addb         $48, %dl
	WORD $0x1788                           // movb         %dl, (%rdi)
	LONG $0x000001b9; BYTE $0x00           // movl         $1, %ecx
	LONG $0x0000a5e9; BYTE $0x00           // jmp          LBB7_7, $165(%rip)

LBB7_2:
	WORD $0xfa83; BYTE $0x63                   // cmpl         $99, %edx
	LONG $0x001a870f; WORD $0x0000             // ja           LBB7_4, $26(%rip)
	WORD $0xd089                               // movl         %edx, %eax
	LONG $0x2d0d8d48; WORD $0x00f3; BYTE $0x00 // leaq         $62253(%rip), %rcx  /* _Digits+0(%rip) */
	LONG $0x4104b70f                           // movzwl       (%rcx,%rax,2), %eax
	WORD $0x8966; BYTE $0x07                   // movw         %ax, (%rdi)
	LONG $0x000002b9; BYTE $0x00               // movl         $2, %ecx
	LONG $0x000082e9; BYTE $0x00               // jmp          LBB7_7, $130(%rip)

LBB7_4:
	WORD $0xd089                               // movl         %edx, %eax
	WORD $0xe8c1; BYTE $0x02                   // shrl         $2, %eax
	LONG $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	WORD $0xe8c1; BYTE $0x11                   // shrl         $17, %eax
	LONG $0x03e7fa81; WORD $0x0000             // cmpl         $999, %edx
	LONG $0x0037870f; WORD $0x0000             // ja           LBB7_6, $55(%rip)
	WORD $0xc083; BYTE $0x30                   // addl         $48, %eax
	WORD $0x0788                               // movb         %al, (%rdi)
	WORD $0xb70f; BYTE $0xc2                   // movzwl       %dx, %eax
	WORD $0xc189                               // movl         %eax, %ecx
	WORD $0xe9c1; BYTE $0x02                   // shrl         $2, %ecx
	LONG $0x147bc969; WORD $0x0000             // imull        $5243, %ecx, %ecx
	WORD $0xe9c1; BYTE $0x11                   // shrl         $17, %ecx
	WORD $0xc96b; BYTE $0x64                   // imull        $100, %ecx, %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	WORD $0xb70f; BYTE $0xc0                   // movzwl       %ax, %eax
	LONG $0xdd0d8d48; WORD $0x00f2; BYTE $0x00 // leaq         $62173(%rip), %rcx  /* _Digits+0(%rip) */
	LONG $0x4104b70f                           // movzwl       (%rcx,%rax,2), %eax
	LONG $0x01478966                           // movw         %ax, $1(%rdi)
	LONG $0x000003b9; BYTE $0x00               // movl         $3, %ecx
	LONG $0x000031e9; BYTE $0x00               // jmp          LBB7_7, $49(%rip)

LBB7_6:
	WORD $0xc86b; BYTE $0x64                   // imull        $100, %eax, %ecx
	WORD $0xca29                               // subl         %ecx, %edx
	WORD $0xb70f; BYTE $0xc0                   // movzwl       %ax, %eax
	LONG $0xbc0d8d48; WORD $0x00f2; BYTE $0x00 // leaq         $62140(%rip), %rcx  /* _Digits+0(%rip) */
	LONG $0x4104b70f                           // movzwl       (%rcx,%rax,2), %eax
	WORD $0x8966; BYTE $0x07                   // movw         %ax, (%rdi)
	WORD $0xb70f; BYTE $0xc2                   // movzwl       %dx, %eax
	WORD $0x148a; BYTE $0x41                   // movb         (%rcx,%rax,2), %dl
	WORD $0x0148; BYTE $0xc0                   // addq         %rax, %rax
	WORD $0x5788; BYTE $0x02                   // movb         %dl, $2(%rdi)
	WORD $0xb70f; BYTE $0xc0                   // movzwl       %ax, %eax
	LONG $0x0108448a                           // movb         $1(%rax,%rcx), %al
	WORD $0x4788; BYTE $0x03                   // movb         %al, $3(%rdi)
	LONG $0x000004b9; BYTE $0x00               // movl         $4, %ecx

LBB7_7:
	QUAD $0x77118461cefdba48; WORD $0xabcc                                                                       // movabsq      $-6067343680855748867, %rdx
	WORD $0x8948; BYTE $0xf0                                                                                     // movq         %rsi, %rax
	WORD $0xf748; BYTE $0xe2                                                                                     // mulq         %rdx
	LONG $0x1aeac148                                                                                             // shrq         $26, %rdx
	LONG $0xc26ef9c5                                                                                             // vmovd        %edx, %xmm0
	QUAD $0xfffffeba0d6ff9c5                                                                                     // vmovdqa      $-326(%rip), %xmm1  /* LCPI7_0+0(%rip) */
	LONG $0xd1f4f9c5                                                                                             // vpmuludq     %xmm1, %xmm0, %xmm2
	LONG $0xd273e9c5; BYTE $0x2d                                                                                 // vpsrlq       $45, %xmm2, %xmm2
	LONG $0x002710b8; BYTE $0x00                                                                                 // movl         $10000, %eax
	LONG $0x6ef9e1c4; BYTE $0xd8                                                                                 // vmovq        %rax, %xmm3
	LONG $0xe3f4e9c5                                                                                             // vpmuludq     %xmm3, %xmm2, %xmm4
	LONG $0xc4faf9c5                                                                                             // vpsubd       %xmm4, %xmm0, %xmm0
	LONG $0xc061e9c5                                                                                             // vpunpcklwd   %xmm0, %xmm2, %xmm0
	LONG $0xf073f9c5; BYTE $0x02                                                                                 // vpsllq       $2, %xmm0, %xmm0
	LONG $0xc070fbc5; BYTE $0x50                                                                                 // vpshuflw     $80, %xmm0, %xmm0
	QUAD $0xfffeb8155979e2c4; BYTE $0xff                                                                         // vpbroadcastq $-328(%rip), %xmm2  /* LCPI7_1+0(%rip) */
	LONG $0xc070f9c5; BYTE $0x50                                                                                 // vpshufd      $80, %xmm0, %xmm0
	LONG $0xc2e4f9c5                                                                                             // vpmulhuw     %xmm2, %xmm0, %xmm0
	QUAD $0xfffeae255979e2c4; BYTE $0xff                                                                         // vpbroadcastq $-338(%rip), %xmm4  /* LCPI7_2+0(%rip) */
	LONG $0xc4e4f9c5                                                                                             // vpmulhuw     %xmm4, %xmm0, %xmm0
	QUAD $0xfffffe7a2d6ff9c5                                                                                     // vmovdqa      $-390(%rip), %xmm5  /* LCPI7_3+0(%rip) */
	LONG $0xf5d5f9c5                                                                                             // vpmullw      %xmm5, %xmm0, %xmm6
	LONG $0xf673c9c5; BYTE $0x10                                                                                 // vpsllq       $16, %xmm6, %xmm6
	LONG $0xc6f9f9c5                                                                                             // vpsubw       %xmm6, %xmm0, %xmm0
	LONG $0xe100c269; WORD $0x05f5                                                                               // imull        $100000000, %edx, %eax
	WORD $0xc629                                                                                                 // subl         %eax, %esi
	LONG $0xf66ef9c5                                                                                             // vmovd        %esi, %xmm6
	LONG $0xc9f4c9c5                                                                                             // vpmuludq     %xmm1, %xmm6, %xmm1
	LONG $0xd173f1c5; BYTE $0x2d                                                                                 // vpsrlq       $45, %xmm1, %xmm1
	LONG $0xdbf4f1c5                                                                                             // vpmuludq     %xmm3, %xmm1, %xmm3
	LONG $0xdbfac9c5                                                                                             // vpsubd       %xmm3, %xmm6, %xmm3
	LONG $0xcb61f1c5                                                                                             // vpunpcklwd   %xmm3, %xmm1, %xmm1
	LONG $0xf173f1c5; BYTE $0x02                                                                                 // vpsllq       $2, %xmm1, %xmm1
	LONG $0xc970fbc5; BYTE $0x50                                                                                 // vpshuflw     $80, %xmm1, %xmm1
	LONG $0xc970f9c5; BYTE $0x50                                                                                 // vpshufd      $80, %xmm1, %xmm1
	LONG $0xcae4f1c5                                                                                             // vpmulhuw     %xmm2, %xmm1, %xmm1
	LONG $0xcce4f1c5                                                                                             // vpmulhuw     %xmm4, %xmm1, %xmm1
	LONG $0xd5d5f1c5                                                                                             // vpmullw      %xmm5, %xmm1, %xmm2
	LONG $0xf273e9c5; BYTE $0x10                                                                                 // vpsllq       $16, %xmm2, %xmm2
	LONG $0xcaf9f1c5                                                                                             // vpsubw       %xmm2, %xmm1, %xmm1
	LONG $0xc167f9c5                                                                                             // vpackuswb    %xmm1, %xmm0, %xmm0
	QUAD $0xfffffe2c05fcf9c5                                                                                     // vpaddb       $-468(%rip), %xmm0, %xmm0  /* LCPI7_4+0(%rip) */
	WORD $0xc889                                                                                                 // movl         %ecx, %eax
	LONG $0x047ffac5; BYTE $0x07                                                                                 // vmovdqu      %xmm0, (%rdi,%rax)
	WORD $0xc983; BYTE $0x10                                                                                     // orl          $16, %ecx
	WORD $0xc889                                                                                                 // movl         %ecx, %eax
	BYTE $0x5d                                                                                                   // popq         %rbp
	BYTE $0xc3                                                                                                   // retq
	QUAD $0x0000000000000000; QUAD $0x0000000000000000; QUAD $0x0000000000000000; LONG $0x00000000; WORD $0x0000 // .p2align 5, 0x00

LCPI8_0:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI8_1:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

LCPI8_2:
	QUAD $0x1f1f1f1f1f1f1f1f; QUAD $0x1f1f1f1f1f1f1f1f // .space 16, '\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f'
	QUAD $0x1f1f1f1f1f1f1f1f; QUAD $0x1f1f1f1f1f1f1f1f // .space 16, '\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f'

	// .p2align 4, 0x00
LCPI8_3:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI8_4:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

LCPI8_5:
	QUAD $0x1f1f1f1f1f1f1f1f; QUAD $0x1f1f1f1f1f1f1f1f // .space 16, '\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f'

	// .p2align 4, 0x90
_quote:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x18ec8348                           // subq         $24, %rsp
	WORD $0x8949; BYTE $0xcf                   // movq         %rcx, %r15
	WORD $0x8949; BYTE $0xf6                   // movq         %rsi, %r14
	WORD $0x8b4c; BYTE $0x11                   // movq         (%rcx), %r10
	LONG $0x01c0f641                           // testb        $1, %r8b
	LONG $0xdb058d48; WORD $0x0118; BYTE $0x00 // leaq         $71899(%rip), %rax  /* __SingleQuoteTab+0(%rip) */
	LONG $0xd4058d4c; WORD $0x0128; BYTE $0x00 // leaq         $75988(%rip), %r8  /* __DoubleQuoteTab+0(%rip) */
	LONG $0xc0440f4c                           // cmoveq       %rax, %r8
	QUAD $0x00000000f5048d48                   // leaq         (,%rsi,8), %rax
	WORD $0x3949; BYTE $0xc2                   // cmpq         %rax, %r10
	LONG $0x07028d0f; WORD $0x0000             // jge          LBB8_93, $1794(%rip)
	WORD $0x8949; BYTE $0xd1                   // movq         %rdx, %r9
	WORD $0x8949; BYTE $0xfb                   // movq         %rdi, %r11
	WORD $0x854d; BYTE $0xf6                   // testq        %r14, %r14
	LONG $0x09cf840f; WORD $0x0000             // je           LBB8_122, $2511(%rip)
	QUAD $0xffffff181d6ffdc5                   // vmovdqa      $-232(%rip), %ymm3  /* LCPI8_0+0(%rip) */
	QUAD $0xffffff30256ffdc5                   // vmovdqa      $-208(%rip), %ymm4  /* LCPI8_1+0(%rip) */
	QUAD $0xffffff482d6ffdc5                   // vmovdqa      $-184(%rip), %ymm5  /* LCPI8_2+0(%rip) */
	WORD $0x8948; BYTE $0xf9                   // movq         %rdi, %rcx
	LONG $0xc0558948                           // movq         %rdx, $-64(%rbp)
	WORD $0x8949; BYTE $0xd1                   // movq         %rdx, %r9

LBB8_3:
	WORD $0x8949; BYTE $0xcd                           // movq         %rcx, %r13
	LONG $0x20fe8349                                   // cmpq         $32, %r14
	WORD $0x9d0f; BYTE $0xc1                           // setge        %cl
	LONG $0x20fa8349                                   // cmpq         $32, %r10
	WORD $0x894c; BYTE $0xe8                           // movq         %r13, %rax
	WORD $0x894c; BYTE $0xd3                           // movq         %r10, %rbx
	WORD $0x894d; BYTE $0xcc                           // movq         %r9, %r12
	WORD $0x894d; BYTE $0xf3                           // movq         %r14, %r11
	LONG $0x007e8c0f; WORD $0x0000                     // jl           LBB8_10, $126(%rip)
	LONG $0x20fe8349                                   // cmpq         $32, %r14
	LONG $0x00748c0f; WORD $0x0000                     // jl           LBB8_10, $116(%rip)
	WORD $0x3145; BYTE $0xe4                           // xorl         %r12d, %r12d
	WORD $0x894c; BYTE $0xf6                           // movq         %r14, %rsi
	WORD $0x894c; BYTE $0xd2                           // movq         %r10, %rdx
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB8_6:
	LONG $0x6f7ea1c4; WORD $0x2004 // vmovdqu      (%rax,%r12), %ymm0
	LONG $0xcb74fdc5               // vpcmpeqb     %ymm3, %ymm0, %ymm1
	LONG $0xd474fdc5               // vpcmpeqb     %ymm4, %ymm0, %ymm2
	LONG $0xc9ebedc5               // vpor         %ymm1, %ymm2, %ymm1
	LONG $0x7f7e81c4; WORD $0x2104 // vmovdqu      %ymm0, (%r9,%r12)
	LONG $0xd5dafdc5               // vpminub      %ymm5, %ymm0, %ymm2
	LONG $0xc274fdc5               // vpcmpeqb     %ymm2, %ymm0, %ymm0
	LONG $0xc0ebf5c5               // vpor         %ymm0, %ymm1, %ymm0
	LONG $0xc8d7fdc5               // vpmovmskb    %ymm0, %ecx
	WORD $0xc985                   // testl        %ecx, %ecx
	LONG $0x01d8850f; WORD $0x0000 // jne          LBB8_20, $472(%rip)
	LONG $0xe05e8d4c               // leaq         $-32(%rsi), %r11
	LONG $0xe05a8d48               // leaq         $-32(%rdx), %rbx
	LONG $0x20c48349               // addq         $32, %r12
	LONG $0x40fe8348               // cmpq         $64, %rsi
	WORD $0x9d0f; BYTE $0xc1       // setge        %cl
	LONG $0x00108c0f; WORD $0x0000 // jl           LBB8_9, $16(%rip)
	WORD $0x894c; BYTE $0xde       // movq         %r11, %rsi
	LONG $0x3ffa8348               // cmpq         $63, %rdx
	WORD $0x8948; BYTE $0xda       // movq         %rbx, %rdx
	LONG $0xffa78f0f; WORD $0xffff // jg           LBB8_6, $-89(%rip)

LBB8_9:
	LONG $0x202c8d4e         // leaq         (%rax,%r12), %r13
	WORD $0x014d; BYTE $0xcc // addq         %r9, %r12

LBB8_10:
	WORD $0xc984                           // testb        %cl, %cl
	LONG $0x007b840f; WORD $0x0000         // je           LBB8_14, $123(%rip)
	WORD $0x894c; BYTE $0xf6               // movq         %r14, %rsi
	LONG $0x6f7ec1c4; WORD $0x0045         // vmovdqu      (%r13), %ymm0
	LONG $0xcb74fdc5                       // vpcmpeqb     %ymm3, %ymm0, %ymm1
	LONG $0xd474fdc5                       // vpcmpeqb     %ymm4, %ymm0, %ymm2
	LONG $0xc9ebedc5                       // vpor         %ymm1, %ymm2, %ymm1
	LONG $0xd5dafdc5                       // vpminub      %ymm5, %ymm0, %ymm2
	LONG $0xc274fdc5                       // vpcmpeqb     %ymm2, %ymm0, %ymm0
	LONG $0xc0ebf5c5                       // vpor         %ymm0, %ymm1, %ymm0
	LONG $0xc8d7fdc5                       // vpmovmskb    %ymm0, %ecx
	QUAD $0x000100000000ba48; WORD $0x0000 // movabsq      $4294967296, %rdx
	WORD $0x0948; BYTE $0xd1               // orq          %rdx, %rcx
	LONG $0xf1bc0f4c                       // bsfq         %rcx, %r14
	LONG $0x00558b49                       // movq         (%r13), %rdx
	LONG $0x084d8b49                       // movq         $8(%r13), %rcx
	WORD $0x3949; BYTE $0xde               // cmpq         %rbx, %r14
	LONG $0x01688e0f; WORD $0x0000         // jle          LBB8_21, $360(%rip)
	LONG $0x10fb8348                       // cmpq         $16, %rbx
	WORD $0x8949; BYTE $0xc3               // movq         %rax, %r11
	LONG $0x01a7820f; WORD $0x0000         // jb           LBB8_24, $423(%rip)
	LONG $0x24148949                       // movq         %rdx, (%r12)
	LONG $0x244c8949; BYTE $0x08           // movq         %rcx, $8(%r12)
	LONG $0x104d8d49                       // leaq         $16(%r13), %rcx
	LONG $0x10c48349                       // addq         $16, %r12
	LONG $0xf0538d48                       // leaq         $-16(%rbx), %rdx
	WORD $0x8949; BYTE $0xf6               // movq         %rsi, %r14
	LONG $0x08fa8348                       // cmpq         $8, %rdx
	LONG $0x0198830f; WORD $0x0000         // jae          LBB8_25, $408(%rip)
	LONG $0x0001a6e9; BYTE $0x00           // jmp          LBB8_26, $422(%rip)

LBB8_14:
	WORD $0xf8c5; BYTE $0x77       // vzeroupper
	LONG $0x10fb8349               // cmpq         $16, %r11
	WORD $0x9d0f; BYTE $0xc2       // setge        %dl
	LONG $0xc87d894c               // movq         %r15, $-56(%rbp)
	LONG $0xd075894c               // movq         %r14, $-48(%rbp)
	LONG $0x02008c0f; WORD $0x0000 // jl           LBB8_31, $512(%rip)
	LONG $0x10fb8348               // cmpq         $16, %rbx
	QUAD $0xfffffe19356ff9c5       // vmovdqa      $-487(%rip), %xmm6  /* LCPI8_3+0(%rip) */
	QUAD $0xfffffe213d6ff9c5       // vmovdqa      $-479(%rip), %xmm7  /* LCPI8_4+0(%rip) */
	QUAD $0xfffffe29056f79c5       // vmovdqa      $-471(%rip), %xmm8  /* LCPI8_5+0(%rip) */
	LONG $0x02218c0f; WORD $0x0000 // jl           LBB8_36, $545(%rip)
	WORD $0x8948; BYTE $0xc1       // movq         %rax, %rcx
	WORD $0x294c; BYTE $0xe9       // subq         %r13, %rcx
	QUAD $0xfffffd951d6ffdc5       // vmovdqa      $-619(%rip), %ymm3  /* LCPI8_0+0(%rip) */
	QUAD $0xfffffdad256ffdc5       // vmovdqa      $-595(%rip), %ymm4  /* LCPI8_1+0(%rip) */
	QUAD $0xfffffdc52d6ffdc5       // vmovdqa      $-571(%rip), %ymm5  /* LCPI8_2+0(%rip) */
	LONG $0x90909090; BYTE $0x90   // .p2align 4, 0x90

LBB8_17:
	LONG $0x6f7ac1c4; WORD $0x0045 // vmovdqu      (%r13), %xmm0
	LONG $0xce74f9c5               // vpcmpeqb     %xmm6, %xmm0, %xmm1
	LONG $0xd774f9c5               // vpcmpeqb     %xmm7, %xmm0, %xmm2
	LONG $0xc9ebe9c5               // vpor         %xmm1, %xmm2, %xmm1
	LONG $0x7f7ac1c4; WORD $0x2404 // vmovdqu      %xmm0, (%r12)
	LONG $0xd0dab9c5               // vpminub      %xmm0, %xmm8, %xmm2
	LONG $0xc274f9c5               // vpcmpeqb     %xmm2, %xmm0, %xmm0
	LONG $0xc0ebf1c5               // vpor         %xmm0, %xmm1, %xmm0
	LONG $0xd0d7f9c5               // vpmovmskb    %xmm0, %edx
	WORD $0xd285                   // testl        %edx, %edx
	LONG $0x00d8850f; WORD $0x0000 // jne          LBB8_23, $216(%rip)
	LONG $0x10c58349               // addq         $16, %r13
	LONG $0x10c48349               // addq         $16, %r12
	LONG $0xf07b8d4d               // leaq         $-16(%r11), %r15
	LONG $0xf0738d4c               // leaq         $-16(%rbx), %r14
	LONG $0x20fb8349               // cmpq         $32, %r11
	WORD $0x9d0f; BYTE $0xc2       // setge        %dl
	LONG $0x00148c0f; WORD $0x0000 // jl           LBB8_32, $20(%rip)
	LONG $0xf0c18348               // addq         $-16, %rcx
	WORD $0x894d; BYTE $0xfb       // movq         %r15, %r11
	LONG $0x1ffb8348               // cmpq         $31, %rbx
	WORD $0x894c; BYTE $0xf3       // movq         %r14, %rbx
	LONG $0xff9f8f0f; WORD $0xffff // jg           LBB8_17, $-97(%rip)

LBB8_32:
	WORD $0xd284                   // testb        %dl, %dl
	LONG $0x01bb840f; WORD $0x0000 // je           LBB8_37, $443(%rip)

LBB8_33:
	LONG $0x6f7ac1c4; WORD $0x0045 // vmovdqu      (%r13), %xmm0
	LONG $0xce74f9c5               // vpcmpeqb     %xmm6, %xmm0, %xmm1
	LONG $0xd774f9c5               // vpcmpeqb     %xmm7, %xmm0, %xmm2
	LONG $0xc9ebe9c5               // vpor         %xmm1, %xmm2, %xmm1
	LONG $0xd0dab9c5               // vpminub      %xmm0, %xmm8, %xmm2
	LONG $0xd274f9c5               // vpcmpeqb     %xmm2, %xmm0, %xmm2
	LONG $0xcaebf1c5               // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xc9d7f9c5               // vpmovmskb    %xmm1, %ecx
	LONG $0x0000c981; WORD $0x0001 // orl          $65536, %ecx
	WORD $0xbc0f; BYTE $0xd9       // bsfl         %ecx, %ebx
	LONG $0x7ef9e1c4; BYTE $0xc1   // vmovq        %xmm0, %rcx
	WORD $0x3949; BYTE $0xde       // cmpq         %rbx, %r14
	WORD $0x8949; BYTE $0xc3       // movq         %rax, %r11
	LONG $0x029d8d0f; WORD $0x0000 // jge          LBB8_57, $669(%rip)
	LONG $0x08fe8349               // cmpq         $8, %r14
	LONG $0xc87d8b4c               // movq         $-56(%rbp), %r15
	LONG $0x02cc820f; WORD $0x0000 // jb           LBB8_62, $716(%rip)
	LONG $0x240c8949               // movq         %rcx, (%r12)
	LONG $0x084d8d49               // leaq         $8(%r13), %rcx
	LONG $0x08c48349               // addq         $8, %r12
	LONG $0xf8568d49               // leaq         $-8(%r14), %rdx
	LONG $0x0002bde9; BYTE $0x00   // jmp          LBB8_63, $701(%rip)

LBB8_20:
	WORD $0x8949; BYTE $0xc3     // movq         %rax, %r11
	LONG $0xe9bc0f44             // bsfl         %ecx, %r13d
	WORD $0x014d; BYTE $0xe5     // addq         %r12, %r13
	LONG $0x000369e9; BYTE $0x00 // jmp          LBB8_75, $873(%rip)

LBB8_21:
	LONG $0x10fe8341               // cmpl         $16, %r14d
	WORD $0x8949; BYTE $0xc3       // movq         %rax, %r11
	LONG $0x01cc820f; WORD $0x0000 // jb           LBB8_46, $460(%rip)
	LONG $0x24148949               // movq         %rdx, (%r12)
	LONG $0x244c8949; BYTE $0x08   // movq         %rcx, $8(%r12)
	LONG $0x105d8d49               // leaq         $16(%r13), %rbx
	LONG $0x10c48349               // addq         $16, %r12
	LONG $0xf04e8d49               // leaq         $-16(%r14), %rcx
	LONG $0x08f98348               // cmpq         $8, %rcx
	LONG $0x01bd830f; WORD $0x0000 // jae          LBB8_47, $445(%rip)
	LONG $0x0001cbe9; BYTE $0x00   // jmp          LBB8_48, $459(%rip)

LBB8_23:
	LONG $0xd2bc0f66             // bsfw         %dx, %dx
	LONG $0xeab70f44             // movzwl       %dx, %r13d
	WORD $0x2949; BYTE $0xcd     // subq         %rcx, %r13
	LONG $0xc87d8b4c             // movq         $-56(%rbp), %r15
	LONG $0xd0758b4c             // movq         $-48(%rbp), %r14
	WORD $0x8949; BYTE $0xc3     // movq         %rax, %r11
	LONG $0x00031de9; BYTE $0x00 // jmp          LBB8_75, $797(%rip)

LBB8_24:
	WORD $0x894c; BYTE $0xe9       // movq         %r13, %rcx
	WORD $0x8948; BYTE $0xda       // movq         %rbx, %rdx
	WORD $0x8949; BYTE $0xf6       // movq         %rsi, %r14
	LONG $0x08fa8348               // cmpq         $8, %rdx
	LONG $0x0013820f; WORD $0x0000 // jb           LBB8_26, $19(%rip)

LBB8_25:
	WORD $0x8b48; BYTE $0x31 // movq         (%rcx), %rsi
	LONG $0x24348949         // movq         %rsi, (%r12)
	LONG $0x08c18348         // addq         $8, %rcx
	LONG $0x08c48349         // addq         $8, %r12
	LONG $0xf8c28348         // addq         $-8, %rdx

LBB8_26:
	LONG $0x04fa8348               // cmpq         $4, %rdx
	LONG $0x003c820f; WORD $0x0000 // jb           LBB8_27, $60(%rip)
	WORD $0x318b                   // movl         (%rcx), %esi
	LONG $0x24348941               // movl         %esi, (%r12)
	LONG $0x04c18348               // addq         $4, %rcx
	LONG $0x04c48349               // addq         $4, %r12
	LONG $0xfcc28348               // addq         $-4, %rdx
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0x002a830f; WORD $0x0000 // jae          LBB8_54, $42(%rip)

LBB8_28:
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x0006840f; WORD $0x0000 // je           LBB8_30, $6(%rip)

LBB8_29:
	WORD $0x098a     // movb         (%rcx), %cl
	LONG $0x240c8841 // movb         %cl, (%r12)

LBB8_30:
	WORD $0x014c; BYTE $0xeb     // addq         %r13, %rbx
	WORD $0xf748; BYTE $0xd3     // notq         %rbx
	WORD $0x014c; BYTE $0xdb     // addq         %r11, %rbx
	WORD $0x8949; BYTE $0xdd     // movq         %rbx, %r13
	LONG $0x0002b1e9; BYTE $0x00 // jmp          LBB8_75, $689(%rip)

LBB8_27:
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0xffd6820f; WORD $0xffff // jb           LBB8_28, $-42(%rip)

LBB8_54:
	WORD $0xb70f; BYTE $0x31       // movzwl       (%rcx), %esi
	LONG $0x34894166; BYTE $0x24   // movw         %si, (%r12)
	LONG $0x02c18348               // addq         $2, %rcx
	LONG $0x02c48349               // addq         $2, %r12
	LONG $0xfec28348               // addq         $-2, %rdx
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xffc2850f; WORD $0xffff // jne          LBB8_29, $-62(%rip)
	LONG $0xffffc3e9; BYTE $0xff   // jmp          LBB8_30, $-61(%rip)

LBB8_31:
	WORD $0x8949; BYTE $0xde       // movq         %rbx, %r14
	WORD $0x894d; BYTE $0xdf       // movq         %r11, %r15
	QUAD $0xfffffbb71d6ffdc5       // vmovdqa      $-1097(%rip), %ymm3  /* LCPI8_0+0(%rip) */
	QUAD $0xfffffbcf256ffdc5       // vmovdqa      $-1073(%rip), %ymm4  /* LCPI8_1+0(%rip) */
	QUAD $0xfffffbe72d6ffdc5       // vmovdqa      $-1049(%rip), %ymm5  /* LCPI8_2+0(%rip) */
	QUAD $0xfffffbff356ff9c5       // vmovdqa      $-1025(%rip), %xmm6  /* LCPI8_3+0(%rip) */
	QUAD $0xfffffc073d6ff9c5       // vmovdqa      $-1017(%rip), %xmm7  /* LCPI8_4+0(%rip) */
	QUAD $0xfffffc0f056f79c5       // vmovdqa      $-1009(%rip), %xmm8  /* LCPI8_5+0(%rip) */
	WORD $0xd284                   // testb        %dl, %dl
	LONG $0x002b840f; WORD $0x0000 // je           LBB8_37, $43(%rip)
	LONG $0xfffe6be9; BYTE $0xff   // jmp          LBB8_33, $-405(%rip)

LBB8_36:
	WORD $0x8949; BYTE $0xde       // movq         %rbx, %r14
	WORD $0x894d; BYTE $0xdf       // movq         %r11, %r15
	QUAD $0xfffffb741d6ffdc5       // vmovdqa      $-1164(%rip), %ymm3  /* LCPI8_0+0(%rip) */
	QUAD $0xfffffb8c256ffdc5       // vmovdqa      $-1140(%rip), %ymm4  /* LCPI8_1+0(%rip) */
	QUAD $0xfffffba42d6ffdc5       // vmovdqa      $-1116(%rip), %ymm5  /* LCPI8_2+0(%rip) */
	WORD $0xd284                   // testb        %dl, %dl
	LONG $0xfe45850f; WORD $0xffff // jne          LBB8_33, $-443(%rip)

LBB8_37:
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	WORD $0x8949; BYTE $0xc3       // movq         %rax, %r11
	LONG $0x005e8e0f; WORD $0x0000 // jle          LBB8_44, $94(%rip)
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x00558e0f; WORD $0x0000 // jle          LBB8_44, $85(%rip)
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0xc931                   // xorl         %ecx, %ecx
	WORD $0x9090; BYTE $0x90       // .p2align 4, 0x90

LBB8_40:
	LONG $0x5cb60f41; WORD $0x0015             // movzbl       (%r13,%rdx), %ebx
	WORD $0x8948; BYTE $0xde                   // movq         %rbx, %rsi
	LONG $0x04e6c148                           // shlq         $4, %rsi
	LONG $0xbc058d48; WORD $0x0114; BYTE $0x00 // leaq         $70844(%rip), %rax  /* __SingleQuoteTab+0(%rip) */
	LONG $0x063c8348; BYTE $0x00               // cmpq         $0, (%rsi,%rax)
	LONG $0x0111850f; WORD $0x0000             // jne          LBB8_61, $273(%rip)
	LONG $0x0f048d49                           // leaq         (%r15,%rcx), %rax
	LONG $0x141c8841                           // movb         %bl, (%r12,%rdx)
	LONG $0xff718d48                           // leaq         $-1(%rcx), %rsi
	LONG $0x02f88348                           // cmpq         $2, %rax
	LONG $0x00138c0f; WORD $0x0000             // jl           LBB8_43, $19(%rip)
	WORD $0x014c; BYTE $0xf1                   // addq         %r14, %rcx
	WORD $0xff48; BYTE $0xc2                   // incq         %rdx
	LONG $0x01f98348                           // cmpq         $1, %rcx
	WORD $0x8948; BYTE $0xf1                   // movq         %rsi, %rcx
	LONG $0xffb88f0f; WORD $0xffff             // jg           LBB8_40, $-72(%rip)

LBB8_43:
	WORD $0x2949; BYTE $0xf5 // subq         %rsi, %r13
	WORD $0x0149; BYTE $0xf7 // addq         %rsi, %r15

LBB8_44:
	WORD $0x854d; BYTE $0xff               // testq        %r15, %r15
	LONG $0xd0758b4c                       // movq         $-48(%rbp), %r14
	QUAD $0x000300000001bc49; WORD $0x0000 // movabsq      $12884901889, %r12
	LONG $0x00bf840f; WORD $0x0000         // je           LBB8_59, $191(%rip)
	WORD $0xf749; BYTE $0xd5               // notq         %r13
	WORD $0x014d; BYTE $0xdd               // addq         %r11, %r13
	LONG $0x0000b7e9; BYTE $0x00           // jmp          LBB8_60, $183(%rip)

LBB8_46:
	WORD $0x894c; BYTE $0xeb       // movq         %r13, %rbx
	WORD $0x894c; BYTE $0xf1       // movq         %r14, %rcx
	LONG $0x08f98348               // cmpq         $8, %rcx
	LONG $0x0013820f; WORD $0x0000 // jb           LBB8_48, $19(%rip)

LBB8_47:
	WORD $0x8b48; BYTE $0x13 // movq         (%rbx), %rdx
	LONG $0x24148949         // movq         %rdx, (%r12)
	LONG $0x08c38348         // addq         $8, %rbx
	LONG $0x08c48349         // addq         $8, %r12
	LONG $0xf8c18348         // addq         $-8, %rcx

LBB8_48:
	LONG $0x04f98348               // cmpq         $4, %rcx
	LONG $0x0039820f; WORD $0x0000 // jb           LBB8_49, $57(%rip)
	WORD $0x138b                   // movl         (%rbx), %edx
	LONG $0x24148941               // movl         %edx, (%r12)
	LONG $0x04c38348               // addq         $4, %rbx
	LONG $0x04c48349               // addq         $4, %r12
	LONG $0xfcc18348               // addq         $-4, %rcx
	LONG $0x02f98348               // cmpq         $2, %rcx
	LONG $0x0027830f; WORD $0x0000 // jae          LBB8_56, $39(%rip)

LBB8_50:
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x0006840f; WORD $0x0000 // je           LBB8_52, $6(%rip)

LBB8_51:
	WORD $0x0b8a     // movb         (%rbx), %cl
	LONG $0x240c8841 // movb         %cl, (%r12)

LBB8_52:
	WORD $0x294d; BYTE $0xdd     // subq         %r11, %r13
	WORD $0x014d; BYTE $0xf5     // addq         %r14, %r13
	WORD $0x8949; BYTE $0xf6     // movq         %rsi, %r14
	LONG $0x00012ae9; BYTE $0x00 // jmp          LBB8_75, $298(%rip)

LBB8_49:
	LONG $0x02f98348               // cmpq         $2, %rcx
	LONG $0xffd9820f; WORD $0xffff // jb           LBB8_50, $-39(%rip)

LBB8_56:
	WORD $0xb70f; BYTE $0x13       // movzwl       (%rbx), %edx
	LONG $0x14894166; BYTE $0x24   // movw         %dx, (%r12)
	LONG $0x02c38348               // addq         $2, %rbx
	LONG $0x02c48349               // addq         $2, %r12
	LONG $0xfec18348               // addq         $-2, %rcx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0xffc5850f; WORD $0xffff // jne          LBB8_51, $-59(%rip)
	LONG $0xffffc6e9; BYTE $0xff   // jmp          LBB8_52, $-58(%rip)

LBB8_57:
	WORD $0xfb83; BYTE $0x08       // cmpl         $8, %ebx
	LONG $0xc87d8b4c               // movq         $-56(%rbp), %r15
	LONG $0x00ac820f; WORD $0x0000 // jb           LBB8_69, $172(%rip)
	LONG $0x240c8949               // movq         %rcx, (%r12)
	LONG $0x08558d49               // leaq         $8(%r13), %rdx
	LONG $0x08c48349               // addq         $8, %r12
	LONG $0xf84b8d48               // leaq         $-8(%rbx), %rcx
	LONG $0x00009de9; BYTE $0x00   // jmp          LBB8_70, $157(%rip)

LBB8_59:
	WORD $0x294d; BYTE $0xdd // subq         %r11, %r13

LBB8_60:
	LONG $0xc87d8b4c             // movq         $-56(%rbp), %r15
	LONG $0x0000dae9; BYTE $0x00 // jmp          LBB8_76, $218(%rip)

LBB8_61:
	WORD $0x294d; BYTE $0xdd     // subq         %r11, %r13
	WORD $0x2949; BYTE $0xcd     // subq         %rcx, %r13
	LONG $0xc87d8b4c             // movq         $-56(%rbp), %r15
	LONG $0x000047e9; BYTE $0x00 // jmp          LBB8_68, $71(%rip)

LBB8_62:
	WORD $0x894c; BYTE $0xe9 // movq         %r13, %rcx
	WORD $0x894c; BYTE $0xf2 // movq         %r14, %rdx

LBB8_63:
	LONG $0x04fa8348               // cmpq         $4, %rdx
	LONG $0x0040820f; WORD $0x0000 // jb           LBB8_64, $64(%rip)
	WORD $0x318b                   // movl         (%rcx), %esi
	LONG $0x24348941               // movl         %esi, (%r12)
	LONG $0x04c18348               // addq         $4, %rcx
	LONG $0x04c48349               // addq         $4, %r12
	LONG $0xfcc28348               // addq         $-4, %rdx
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0x002e830f; WORD $0x0000 // jae          LBB8_90, $46(%rip)

LBB8_65:
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x0006840f; WORD $0x0000 // je           LBB8_67, $6(%rip)

LBB8_66:
	WORD $0x098a     // movb         (%rcx), %cl
	LONG $0x240c8841 // movb         %cl, (%r12)

LBB8_67:
	WORD $0x014d; BYTE $0xee // addq         %r13, %r14
	WORD $0xf749; BYTE $0xd6 // notq         %r14
	WORD $0x014d; BYTE $0xde // addq         %r11, %r14
	WORD $0x894d; BYTE $0xf5 // movq         %r14, %r13

LBB8_68:
	LONG $0xd0758b4c             // movq         $-48(%rbp), %r14
	LONG $0x000071e9; BYTE $0x00 // jmp          LBB8_75, $113(%rip)

LBB8_64:
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0xffd2820f; WORD $0xffff // jb           LBB8_65, $-46(%rip)

LBB8_90:
	WORD $0xb70f; BYTE $0x31       // movzwl       (%rcx), %esi
	LONG $0x34894166; BYTE $0x24   // movw         %si, (%r12)
	LONG $0x02c18348               // addq         $2, %rcx
	LONG $0x02c48349               // addq         $2, %r12
	LONG $0xfec28348               // addq         $-2, %rdx
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xffbe850f; WORD $0xffff // jne          LBB8_66, $-66(%rip)
	LONG $0xffffbfe9; BYTE $0xff   // jmp          LBB8_67, $-65(%rip)

LBB8_69:
	WORD $0x894c; BYTE $0xea // movq         %r13, %rdx
	WORD $0x8948; BYTE $0xd9 // movq         %rbx, %rcx

LBB8_70:
	LONG $0xd0758b4c               // movq         $-48(%rbp), %r14
	LONG $0x04f98348               // cmpq         $4, %rcx
	LONG $0x0118820f; WORD $0x0000 // jb           LBB8_71, $280(%rip)
	WORD $0x328b                   // movl         (%rdx), %esi
	LONG $0x24348941               // movl         %esi, (%r12)
	LONG $0x04c28348               // addq         $4, %rdx
	LONG $0x04c48349               // addq         $4, %r12
	LONG $0xfcc18348               // addq         $-4, %rcx
	LONG $0x02f98348               // cmpq         $2, %rcx
	LONG $0x0106830f; WORD $0x0000 // jae          LBB8_92, $262(%rip)

LBB8_72:
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x0006840f; WORD $0x0000 // je           LBB8_74, $6(%rip)

LBB8_73:
	WORD $0x0a8a     // movb         (%rdx), %cl
	LONG $0x240c8841 // movb         %cl, (%r12)

LBB8_74:
	WORD $0x294d; BYTE $0xdd // subq         %r11, %r13
	WORD $0x0149; BYTE $0xdd // addq         %rbx, %r13

	// .p2align 4, 0x90
LBB8_75:
	QUAD $0x000300000001bc49; WORD $0x0000 // movabsq      $12884901889, %r12

LBB8_76:
	WORD $0x854d; BYTE $0xed             // testq        %r13, %r13
	LONG $0x0415880f; WORD $0x0000       // js           LBB8_125, $1045(%rip)
	WORD $0x014d; BYTE $0xe9             // addq         %r13, %r9
	WORD $0x394d; BYTE $0xee             // cmpq         %r13, %r14
	LONG $0x03c9840f; WORD $0x0000       // je           LBB8_121, $969(%rip)
	WORD $0x294d; BYTE $0xea             // subq         %r13, %r10
	LONG $0x000018e9; BYTE $0x00         // jmp          LBB8_80, $24(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB8_79:
	WORD $0x0149; BYTE $0xc9       // addq         %rcx, %r9
	WORD $0xff49; BYTE $0xc5       // incq         %r13
	WORD $0x394d; BYTE $0xee       // cmpq         %r13, %r14
	LONG $0x03a9840f; WORD $0x0000 // je           LBB8_121, $937(%rip)

LBB8_80:
	LONG $0x34b60f43; BYTE $0x2b               // movzbl       (%r11,%r13), %esi
	LONG $0x04e6c148                           // shlq         $4, %rsi
	LONG $0x301c8b49                           // movq         (%r8,%rsi), %rbx
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0x0081840f; WORD $0x0000             // je           LBB8_88, $129(%rip)
	WORD $0x6348; BYTE $0xcb                   // movslq       %ebx, %rcx
	WORD $0x2949; BYTE $0xca                   // subq         %rcx, %r10
	LONG $0x03a08c0f; WORD $0x0000             // jl           LBB8_123, $928(%rip)
	LONG $0x20e3c148                           // shlq         $32, %rbx
	LONG $0x30148d49                           // leaq         (%r8,%rsi), %rdx
	LONG $0x08c28348                           // addq         $8, %rdx
	WORD $0x394c; BYTE $0xe3                   // cmpq         %r12, %rbx
	LONG $0x002b8c0f; WORD $0x0000             // jl           LBB8_84, $43(%rip)
	WORD $0x028b                               // movl         (%rdx), %eax
	WORD $0x8941; BYTE $0x01                   // movl         %eax, (%r9)
	LONG $0x30148d49                           // leaq         (%r8,%rsi), %rdx
	LONG $0x0cc28348                           // addq         $12, %rdx
	LONG $0x04718d49                           // leaq         $4(%r9), %rsi
	LONG $0xfc598d48                           // leaq         $-4(%rcx), %rbx
	LONG $0x02fb8348                           // cmpq         $2, %rbx
	LONG $0x001c8d0f; WORD $0x0000             // jge          LBB8_85, $28(%rip)
	LONG $0x000029e9; BYTE $0x00               // jmp          LBB8_86, $41(%rip)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB8_84:
	WORD $0x894c; BYTE $0xce       // movq         %r9, %rsi
	WORD $0x8948; BYTE $0xcb       // movq         %rcx, %rbx
	LONG $0x02fb8348               // cmpq         $2, %rbx
	LONG $0x00128c0f; WORD $0x0000 // jl           LBB8_86, $18(%rip)

LBB8_85:
	WORD $0xb70f; BYTE $0x02 // movzwl       (%rdx), %eax
	WORD $0x8966; BYTE $0x06 // movw         %ax, (%rsi)
	LONG $0x02c28348         // addq         $2, %rdx
	LONG $0x02c68348         // addq         $2, %rsi
	LONG $0xfec38348         // addq         $-2, %rbx

LBB8_86:
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0xff658e0f; WORD $0xffff // jle          LBB8_79, $-155(%rip)
	WORD $0xb60f; BYTE $0x02       // movzbl       (%rdx), %eax
	WORD $0x0688                   // movb         %al, (%rsi)
	LONG $0xffff5be9; BYTE $0xff   // jmp          LBB8_79, $-165(%rip)

LBB8_88:
	LONG $0x2b0c8d4b               // leaq         (%r11,%r13), %rcx
	WORD $0x294d; BYTE $0xee       // subq         %r13, %r14
	LONG $0xf960850f; WORD $0xffff // jne          LBB8_3, $-1696(%rip)
	LONG $0x000301e9; BYTE $0x00   // jmp          LBB8_121, $769(%rip)

LBB8_71:
	LONG $0x02f98348               // cmpq         $2, %rcx
	LONG $0xfefa820f; WORD $0xffff // jb           LBB8_72, $-262(%rip)

LBB8_92:
	WORD $0xb70f; BYTE $0x32       // movzwl       (%rdx), %esi
	LONG $0x34894166; BYTE $0x24   // movw         %si, (%r12)
	LONG $0x02c28348               // addq         $2, %rdx
	LONG $0x02c48349               // addq         $2, %r12
	LONG $0xfec18348               // addq         $-2, %rcx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0xfee6850f; WORD $0xffff // jne          LBB8_73, $-282(%rip)
	LONG $0xfffee7e9; BYTE $0xff   // jmp          LBB8_74, $-281(%rip)

LBB8_93:
	LONG $0xb60d8d4c; WORD $0x0131; BYTE $0x00 // leaq         $78262(%rip), %r9  /* __EscTab+0(%rip) */
	QUAD $0xfffff81e1d6ffdc5                   // vmovdqa      $-2018(%rip), %ymm3  /* LCPI8_0+0(%rip) */
	QUAD $0xfffff836056f7dc5                   // vmovdqa      $-1994(%rip), %ymm8  /* LCPI8_1+0(%rip) */
	QUAD $0xfffff84e2d6ffdc5                   // vmovdqa      $-1970(%rip), %ymm5  /* LCPI8_2+0(%rip) */
	WORD $0x8948; BYTE $0xd3                   // movq         %rdx, %rbx
	WORD $0x894c; BYTE $0xf6                   // movq         %r14, %rsi

LBB8_94:
	LONG $0x10fe8348               // cmpq         $16, %rsi
	LONG $0x01108c0f; WORD $0x0000 // jl           LBB8_102, $272(%rip)
	LONG $0x20fe8348               // cmpq         $32, %rsi
	LONG $0x0088820f; WORD $0x0000 // jb           LBB8_99, $136(%rip)
	LONG $0x90909090               // .p2align 4, 0x90

LBB8_96:
	LONG $0x076ffec5               // vmovdqu      (%rdi), %ymm0
	LONG $0xcb74fdc5               // vpcmpeqb     %ymm3, %ymm0, %ymm1
	LONG $0xd074bdc5               // vpcmpeqb     %ymm0, %ymm8, %ymm2
	LONG $0xc9ebedc5               // vpor         %ymm1, %ymm2, %ymm1
	LONG $0x037ffec5               // vmovdqu      %ymm0, (%rbx)
	LONG $0xd5dafdc5               // vpminub      %ymm5, %ymm0, %ymm2
	LONG $0xc274fdc5               // vpcmpeqb     %ymm2, %ymm0, %ymm0
	LONG $0xc0ebf5c5               // vpor         %ymm0, %ymm1, %ymm0
	LONG $0xc0d7fdc5               // vpmovmskb    %ymm0, %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x01ef850f; WORD $0x0000 // jne          LBB8_114, $495(%rip)
	LONG $0x20c78348               // addq         $32, %rdi
	LONG $0x20c38348               // addq         $32, %rbx
	LONG $0xe0c68348               // addq         $-32, %rsi
	LONG $0x1ffe8348               // cmpq         $31, %rsi
	LONG $0xffbe870f; WORD $0xffff // ja           LBB8_96, $-66(%rip)
	WORD $0xf8c5; BYTE $0x77       // vzeroupper
	QUAD $0xfffff7e32d6ffdc5       // vmovdqa      $-2077(%rip), %ymm5  /* LCPI8_2+0(%rip) */
	QUAD $0xfffff7bb056f7dc5       // vmovdqa      $-2117(%rip), %ymm8  /* LCPI8_1+0(%rip) */
	QUAD $0xfffff7931d6ffdc5       // vmovdqa      $-2157(%rip), %ymm3  /* LCPI8_0+0(%rip) */
	LONG $0x10fe8348               // cmpq         $16, %rsi
	QUAD $0xfffff7e7356ff9c5       // vmovdqa      $-2073(%rip), %xmm6  /* LCPI8_3+0(%rip) */
	QUAD $0xfffff7ef3d6ff9c5       // vmovdqa      $-2065(%rip), %xmm7  /* LCPI8_4+0(%rip) */
	QUAD $0xfffff7f7256ff9c5       // vmovdqa      $-2057(%rip), %xmm4  /* LCPI8_5+0(%rip) */
	LONG $0x0041830f; WORD $0x0000 // jae          LBB8_100, $65(%rip)
	LONG $0x00007ee9; BYTE $0x00   // jmp          LBB8_102, $126(%rip)

LBB8_99:
	WORD $0xf8c5; BYTE $0x77             // vzeroupper
	QUAD $0xfffff7a12d6ffdc5             // vmovdqa      $-2143(%rip), %ymm5  /* LCPI8_2+0(%rip) */
	QUAD $0xfffff779056f7dc5             // vmovdqa      $-2183(%rip), %ymm8  /* LCPI8_1+0(%rip) */
	QUAD $0xfffff7511d6ffdc5             // vmovdqa      $-2223(%rip), %ymm3  /* LCPI8_0+0(%rip) */
	QUAD $0xfffff7a9356ff9c5             // vmovdqa      $-2135(%rip), %xmm6  /* LCPI8_3+0(%rip) */
	QUAD $0xfffff7b13d6ff9c5             // vmovdqa      $-2127(%rip), %xmm7  /* LCPI8_4+0(%rip) */
	QUAD $0xfffff7b9256ff9c5             // vmovdqa      $-2119(%rip), %xmm4  /* LCPI8_5+0(%rip) */
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB8_100:
	LONG $0x076ffac5               // vmovdqu      (%rdi), %xmm0
	LONG $0xce74f9c5               // vpcmpeqb     %xmm6, %xmm0, %xmm1
	LONG $0xd774f9c5               // vpcmpeqb     %xmm7, %xmm0, %xmm2
	LONG $0xc9ebe9c5               // vpor         %xmm1, %xmm2, %xmm1
	LONG $0x037ffac5               // vmovdqu      %xmm0, (%rbx)
	LONG $0xd4daf9c5               // vpminub      %xmm4, %xmm0, %xmm2
	LONG $0xc274f9c5               // vpcmpeqb     %xmm2, %xmm0, %xmm0
	LONG $0xc0ebf1c5               // vpor         %xmm0, %xmm1, %xmm0
	LONG $0xc0d7f9c5               // vpmovmskb    %xmm0, %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0120850f; WORD $0x0000 // jne          LBB8_112, $288(%rip)
	LONG $0x10c78348               // addq         $16, %rdi
	LONG $0x10c38348               // addq         $16, %rbx
	LONG $0xf0c68348               // addq         $-16, %rsi
	LONG $0x0ffe8348               // cmpq         $15, %rsi
	LONG $0xffbe870f; WORD $0xffff // ja           LBB8_100, $-66(%rip)

LBB8_102:
	LONG $0x08fe8348               // cmpq         $8, %rsi
	LONG $0x007b8c0f; WORD $0x0000 // jl           LBB8_106, $123(%rip)
	WORD $0xb60f; BYTE $0x07       // movzbl       (%rdi), %eax
	LONG $0x014fb60f               // movzbl       $1(%rdi), %ecx
	LONG $0x090c8a42               // movb         (%rcx,%r9), %cl
	WORD $0xc900                   // addb         %cl, %cl
	LONG $0x080c0a42               // orb          (%rax,%r9), %cl
	LONG $0x0247b60f               // movzbl       $2(%rdi), %eax
	LONG $0x08148a46               // movb         (%rax,%r9), %r10b
	LONG $0x02e2c041               // shlb         $2, %r10b
	WORD $0x0841; BYTE $0xca       // orb          %cl, %r10b
	LONG $0x0347b60f               // movzbl       $3(%rdi), %eax
	LONG $0x08048a42               // movb         (%rax,%r9), %al
	WORD $0xe0c0; BYTE $0x03       // shlb         $3, %al
	WORD $0x0844; BYTE $0xd0       // orb          %r10b, %al
	WORD $0x8b48; BYTE $0x0f       // movq         (%rdi), %rcx
	WORD $0x8948; BYTE $0x0b       // movq         %rcx, (%rbx)
	LONG $0x00d2850f; WORD $0x0000 // jne          LBB8_113, $210(%rip)
	LONG $0x0447b60f               // movzbl       $4(%rdi), %eax
	LONG $0x054fb60f               // movzbl       $5(%rdi), %ecx
	LONG $0x090c8a42               // movb         (%rcx,%r9), %cl
	WORD $0xc900                   // addb         %cl, %cl
	LONG $0x080c0a42               // orb          (%rax,%r9), %cl
	LONG $0x0647b60f               // movzbl       $6(%rdi), %eax
	LONG $0x08148a46               // movb         (%rax,%r9), %r10b
	LONG $0x02e2c041               // shlb         $2, %r10b
	WORD $0x0841; BYTE $0xca       // orb          %cl, %r10b
	LONG $0x0747b60f               // movzbl       $7(%rdi), %eax
	LONG $0x08048a42               // movb         (%rax,%r9), %al
	WORD $0xe0c0; BYTE $0x03       // shlb         $3, %al
	WORD $0x0844; BYTE $0xd0       // orb          %r10b, %al
	LONG $0x00f2850f; WORD $0x0000 // jne          LBB8_119, $242(%rip)
	LONG $0x08c38348               // addq         $8, %rbx
	LONG $0x08c78348               // addq         $8, %rdi
	LONG $0xf8c68348               // addq         $-8, %rsi

LBB8_106:
	LONG $0x04fe8348               // cmpq         $4, %rsi
	LONG $0x00448c0f; WORD $0x0000 // jl           LBB8_109, $68(%rip)
	WORD $0xb60f; BYTE $0x07       // movzbl       (%rdi), %eax
	LONG $0x014fb60f               // movzbl       $1(%rdi), %ecx
	LONG $0x090c8a42               // movb         (%rcx,%r9), %cl
	WORD $0xc900                   // addb         %cl, %cl
	LONG $0x080c0a42               // orb          (%rax,%r9), %cl
	LONG $0x0247b60f               // movzbl       $2(%rdi), %eax
	LONG $0x08148a46               // movb         (%rax,%r9), %r10b
	LONG $0x02e2c041               // shlb         $2, %r10b
	WORD $0x0841; BYTE $0xca       // orb          %cl, %r10b
	LONG $0x0347b60f               // movzbl       $3(%rdi), %eax
	LONG $0x08048a42               // movb         (%rax,%r9), %al
	WORD $0xe0c0; BYTE $0x03       // shlb         $3, %al
	WORD $0x0844; BYTE $0xd0       // orb          %r10b, %al
	WORD $0x0f8b                   // movl         (%rdi), %ecx
	WORD $0x0b89                   // movl         %ecx, (%rbx)
	LONG $0x004f850f; WORD $0x0000 // jne          LBB8_113, $79(%rip)
	LONG $0x04c38348               // addq         $4, %rbx
	LONG $0x04c78348               // addq         $4, %rdi
	LONG $0xfcc68348               // addq         $-4, %rsi

LBB8_109:
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x00af8e0f; WORD $0x0000 // jle          LBB8_120, $175(%rip)
	WORD $0x9090                   // .p2align 4, 0x90

LBB8_110:
	WORD $0xb60f; BYTE $0x07       // movzbl       (%rdi), %eax
	LONG $0x083c8042; BYTE $0x00   // cmpb         $0, (%rax,%r9)
	LONG $0x0039850f; WORD $0x0000 // jne          LBB8_116, $57(%rip)
	WORD $0xff48; BYTE $0xc7       // incq         %rdi
	WORD $0x0388                   // movb         %al, (%rbx)
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	LONG $0xff468d48               // leaq         $-1(%rsi), %rax
	LONG $0x01fe8348               // cmpq         $1, %rsi
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	LONG $0xffd98f0f; WORD $0xffff // jg           LBB8_110, $-39(%rip)
	LONG $0x000081e9; BYTE $0x00   // jmp          LBB8_120, $129(%rip)

LBB8_112:
	LONG $0xc0bc0f66             // bsfw         %ax, %ax
	WORD $0xb70f; BYTE $0xc0     // movzwl       %ax, %eax
	LONG $0x000006e9; BYTE $0x00 // jmp          LBB8_115, $6(%rip)

LBB8_113:
	WORD $0xb60f; BYTE $0xc0 // movzbl       %al, %eax

LBB8_114:
	WORD $0xbc0f; BYTE $0xc0 // bsfl         %eax, %eax

LBB8_115:
	WORD $0x0148; BYTE $0xc7 // addq         %rax, %rdi
	WORD $0x2948; BYTE $0xc6 // subq         %rax, %rsi
	WORD $0x0148; BYTE $0xc3 // addq         %rax, %rbx

LBB8_116:
	WORD $0x078a                               // movb         (%rdi), %al
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB8_117:
	WORD $0x8948; BYTE $0xd9       // movq         %rbx, %rcx
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	LONG $0x04e0c148               // shlq         $4, %rax
	LONG $0x001c6349               // movslq       (%r8,%rax), %rbx
	LONG $0x00448b49; BYTE $0x08   // movq         $8(%r8,%rax), %rax
	WORD $0x8948; BYTE $0x01       // movq         %rax, (%rcx)
	WORD $0x0148; BYTE $0xcb       // addq         %rcx, %rbx
	LONG $0x02fe8348               // cmpq         $2, %rsi
	LONG $0x003a8c0f; WORD $0x0000 // jl           LBB8_120, $58(%rip)
	WORD $0xff48; BYTE $0xce       // decq         %rsi
	LONG $0x0147b60f               // movzbl       $1(%rdi), %eax
	WORD $0xff48; BYTE $0xc7       // incq         %rdi
	LONG $0x083c8042; BYTE $0x00   // cmpb         $0, (%rax,%r9)
	LONG $0xffc8850f; WORD $0xffff // jne          LBB8_117, $-56(%rip)
	LONG $0xfffd7be9; BYTE $0xff   // jmp          LBB8_94, $-645(%rip)

LBB8_119:
	WORD $0xb60f; BYTE $0xc0     // movzbl       %al, %eax
	WORD $0xbc0f; BYTE $0xc0     // bsfl         %eax, %eax
	LONG $0x04488d48             // leaq         $4(%rax), %rcx
	WORD $0x0148; BYTE $0xc7     // addq         %rax, %rdi
	LONG $0x04c78348             // addq         $4, %rdi
	WORD $0x2948; BYTE $0xce     // subq         %rcx, %rsi
	WORD $0x0148; BYTE $0xc3     // addq         %rax, %rbx
	LONG $0x04c38348             // addq         $4, %rbx
	LONG $0xffff9ae9; BYTE $0xff // jmp          LBB8_116, $-102(%rip)

LBB8_120:
	WORD $0x2948; BYTE $0xd3     // subq         %rdx, %rbx
	WORD $0x8949; BYTE $0x1f     // movq         %rbx, (%r15)
	LONG $0x00002be9; BYTE $0x00 // jmp          LBB8_124, $43(%rip)

LBB8_121:
	WORD $0x014d; BYTE $0xeb // addq         %r13, %r11
	LONG $0xc0558b48         // movq         $-64(%rbp), %rdx

LBB8_122:
	WORD $0x2949; BYTE $0xd1     // subq         %rdx, %r9
	WORD $0x894d; BYTE $0x0f     // movq         %r9, (%r15)
	WORD $0x2949; BYTE $0xfb     // subq         %rdi, %r11
	WORD $0x894d; BYTE $0xde     // movq         %r11, %r14
	LONG $0x000013e9; BYTE $0x00 // jmp          LBB8_124, $19(%rip)

LBB8_123:
	LONG $0xc04d2b4c         // subq         $-64(%rbp), %r9
	WORD $0x894d; BYTE $0x0f // movq         %r9, (%r15)
	WORD $0x294c; BYTE $0xdf // subq         %r11, %rdi
	WORD $0xf749; BYTE $0xd5 // notq         %r13
	WORD $0x0149; BYTE $0xfd // addq         %rdi, %r13
	WORD $0x894d; BYTE $0xee // movq         %r13, %r14

LBB8_124:
	WORD $0x894c; BYTE $0xf0 // movq         %r14, %rax
	LONG $0x18c48348         // addq         $24, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB8_125:
	LONG $0xc0458b48                                                                           // movq         $-64(%rbp), %rax
	WORD $0x014c; BYTE $0xe8                                                                   // addq         %r13, %rax
	WORD $0xf748; BYTE $0xd0                                                                   // notq         %rax
	WORD $0x014c; BYTE $0xc8                                                                   // addq         %r9, %rax
	WORD $0x8949; BYTE $0x07                                                                   // movq         %rax, (%r15)
	WORD $0x294c; BYTE $0xdf                                                                   // subq         %r11, %rdi
	WORD $0x014c; BYTE $0xef                                                                   // addq         %r13, %rdi
	WORD $0x8949; BYTE $0xfe                                                                   // movq         %rdi, %r14
	LONG $0xffffcde9; BYTE $0xff                                                               // jmp          LBB8_124, $-51(%rip)
	QUAD $0x0000000000000000; QUAD $0x0000000000000000; QUAD $0x0000000000000000; WORD $0x0000 // .p2align 5, 0x00

LCPI9_0:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

	// .p2align 4, 0x00
LCPI9_1:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

	// .p2align 4, 0x90
_unquote:
	BYTE $0x55                                                           // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                                             // movq         %rsp, %rbp
	WORD $0x5741                                                         // pushq        %r15
	WORD $0x5641                                                         // pushq        %r14
	WORD $0x5541                                                         // pushq        %r13
	WORD $0x5441                                                         // pushq        %r12
	BYTE $0x53                                                           // pushq        %rbx
	LONG $0x48ec8348                                                     // subq         $72, %rsp
	WORD $0x8548; BYTE $0xf6                                             // testq        %rsi, %rsi
	LONG $0x06ef840f; WORD $0x0000                                       // je           LBB9_1, $1775(%rip)
	LONG $0xd04d8948                                                     // movq         %rcx, $-48(%rbp)
	WORD $0x894c; BYTE $0xc0                                             // movq         %r8, %rax
	LONG $0xa045894c                                                     // movq         %r8, $-96(%rbp)
	WORD $0x894d; BYTE $0xc2                                             // movq         %r8, %r10
	LONG $0x01e28341                                                     // andl         $1, %r10d
	LONG $0x0d058d4c; WORD $0x012f; BYTE $0x00                           // leaq         $77581(%rip), %r8  /* __UnquoteTab+0(%rip) */
	QUAD $0xffffff950d6ffdc5                                             // vmovdqa      $-107(%rip), %ymm1  /* LCPI9_0+0(%rip) */
	QUAD $0xffffffad156ff9c5                                             // vmovdqa      $-83(%rip), %xmm2  /* LCPI9_1+0(%rip) */
	WORD $0x8949; BYTE $0xff                                             // movq         %rdi, %r15
	WORD $0x8949; BYTE $0xf5                                             // movq         %rsi, %r13
	WORD $0x8949; BYTE $0xd6                                             // movq         %rdx, %r14
	LONG $0x00020fe9; BYTE $0x00                                         // jmp          LBB9_3, $527(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB9_59:
	LONG $0xfffc8141; WORD $0x0007; BYTE $0x00 // cmpl         $2047, %r12d
	LONG $0x0553860f; WORD $0x0000             // jbe          LBB9_67, $1363(%rip)
	QUAD $0xffff200024848d41                   // leal         $-57344(%r12), %eax
	LONG $0xfff7ff3d; BYTE $0xff               // cmpl         $-2049, %eax
	LONG $0x0500860f; WORD $0x0000             // jbe          LBB9_70, $1280(%rip)
	WORD $0x854d; BYTE $0xd2                   // testq        %r10, %r10
	LONG $0xc07d8948                           // movq         %rdi, $-64(%rbp)
	LONG $0xb8758948                           // movq         %rsi, $-72(%rbp)
	LONG $0x00dc850f; WORD $0x0000             // jne          LBB9_62, $220(%rip)
	LONG $0xb055894c                           // movq         %r10, $-80(%rbp)
	LONG $0xa8558948                           // movq         %rdx, $-88(%rbp)
	LONG $0x06fd8349                           // cmpq         $6, %r13
	LONG $0x00f58c0f; WORD $0x0000             // jl           LBB9_94, $245(%rip)

LBB9_91:
	LONG $0xfffc8141; WORD $0x00db; BYTE $0x00 // cmpl         $56319, %r12d
	LONG $0x00e8870f; WORD $0x0000             // ja           LBB9_94, $232(%rip)
	LONG $0x5c3f8041                           // cmpb         $92, (%r15)
	LONG $0x00de850f; WORD $0x0000             // jne          LBB9_94, $222(%rip)
	LONG $0x017f8041; BYTE $0x75               // cmpb         $117, $1(%r15)
	LONG $0x00d3850f; WORD $0x0000             // jne          LBB9_94, $211(%rip)
	LONG $0x025f8b41                           // movl         $2(%r15), %ebx
	WORD $0xdf89                               // movl         %ebx, %edi
	WORD $0xf8c5; BYTE $0x77                   // vzeroupper
	LONG $0x00087de8; BYTE $0x00               // callq        _unhex16_is, $2173(%rip)
	WORD $0xc084                               // testb        %al, %al
	LONG $0x0774840f; WORD $0x0000             // je           LBB9_100, $1908(%rip)
	WORD $0xcb0f                               // bswapl       %ebx
	WORD $0xd889                               // movl         %ebx, %eax
	WORD $0xe8c1; BYTE $0x04                   // shrl         $4, %eax
	WORD $0xd0f7                               // notl         %eax
	LONG $0x01010125; BYTE $0x01               // andl         $16843009, %eax
	WORD $0x048d; BYTE $0xc0                   // leal         (%rax,%rax,8), %eax
	LONG $0x0f0fe381; WORD $0x0f0f             // andl         $252645135, %ebx
	WORD $0xc301                               // addl         %eax, %ebx
	WORD $0xd889                               // movl         %ebx, %eax
	WORD $0xe8c1; BYTE $0x04                   // shrl         $4, %eax
	WORD $0xd809                               // orl          %ebx, %eax
	WORD $0xb60f; BYTE $0xc8                   // movzbl       %al, %ecx
	WORD $0xe8c1; BYTE $0x08                   // shrl         $8, %eax
	LONG $0x00ff0025; BYTE $0x00               // andl         $65280, %eax
	WORD $0x1c8d; BYTE $0x08                   // leal         (%rax,%rcx), %ebx
	LONG $0x06c78349                           // addq         $6, %r15
	LONG $0xfac58349                           // addq         $-6, %r13
	WORD $0xc801                               // addl         %ecx, %eax
	LONG $0xff200005; BYTE $0xff               // addl         $-57344, %eax
	LONG $0xfffbff3d; BYTE $0xff               // cmpl         $-1025, %eax
	LONG $0xc07d8b48                           // movq         $-64(%rbp), %rdi
	LONG $0xa8558b48                           // movq         $-88(%rbp), %rdx
	LONG $0xb8758b48                           // movq         $-72(%rbp), %rsi
	LONG $0x10058d4c; WORD $0x012e; BYTE $0x00 // leaq         $77328(%rip), %r8  /* __UnquoteTab+0(%rip) */
	QUAD $0xfffffe980d6ffdc5                   // vmovdqa      $-360(%rip), %ymm1  /* LCPI9_0+0(%rip) */
	QUAD $0xfffffeb0156ff9c5                   // vmovdqa      $-336(%rip), %xmm2  /* LCPI9_1+0(%rip) */
	LONG $0x0070870f; WORD $0x0000             // ja           LBB9_110, $112(%rip)
	LONG $0x06c74166; WORD $0xbfef             // movw         $-16401, (%r14)
	LONG $0x0246c641; BYTE $0xbd               // movb         $-67, $2(%r14)
	LONG $0x03c68349                           // addq         $3, %r14
	WORD $0x8941; BYTE $0xdc                   // movl         %ebx, %r12d
	LONG $0x0080fb81; WORD $0x0000             // cmpl         $128, %ebx
	LONG $0xb0558b4c                           // movq         $-80(%rbp), %r10
	LONG $0xfef8830f; WORD $0xffff             // jae          LBB9_59, $-264(%rip)
	LONG $0x0003d7e9; BYTE $0x00               // jmp          LBB9_112, $983(%rip)

LBB9_62:
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0x06b48e0f; WORD $0x0000 // jle          LBB9_63, $1716(%rip)
	LONG $0x5c3f8041               // cmpb         $92, (%r15)
	LONG $0x00b1850f; WORD $0x0000 // jne          LBB9_96, $177(%rip)
	WORD $0xff49; BYTE $0xcd       // decq         %r13
	WORD $0xff49; BYTE $0xc7       // incq         %r15
	LONG $0xb055894c               // movq         %r10, $-80(%rbp)
	LONG $0xa8558948               // movq         %rdx, $-88(%rbp)
	LONG $0x06fd8349               // cmpq         $6, %r13
	LONG $0xff0b8d0f; WORD $0xffff // jge          LBB9_91, $-245(%rip)

LBB9_94:
	LONG $0x02a045f6               // testb        $2, $-96(%rbp)
	LONG $0x0545840f; WORD $0x0000 // je           LBB9_77, $1349(%rip)
	LONG $0x06c74166; WORD $0xbfef // movw         $-16401, (%r14)
	LONG $0x0246c641; BYTE $0xbd   // movb         $-67, $2(%r14)
	LONG $0x03c68349               // addq         $3, %r14
	LONG $0x000046e9; BYTE $0x00   // jmp          LBB9_86, $70(%rip)

LBB9_110:
	WORD $0xd889 // movl         %ebx, %eax

LBB9_85:
	LONG $0x0ae4c141             // shll         $10, %r12d
	WORD $0xc189                 // movl         %eax, %ecx
	WORD $0x0144; BYTE $0xe1     // addl         %r12d, %ecx
	WORD $0x0144; BYTE $0xe0     // addl         %r12d, %eax
	LONG $0xa0240005; BYTE $0xfc // addl         $-56613888, %eax
	WORD $0xc289                 // movl         %eax, %edx
	WORD $0xeac1; BYTE $0x12     // shrl         $18, %edx
	WORD $0xca80; BYTE $0xf0     // orb          $-16, %dl
	WORD $0x8841; BYTE $0x16     // movb         %dl, (%r14)
	WORD $0xc289                 // movl         %eax, %edx
	WORD $0xeac1; BYTE $0x0c     // shrl         $12, %edx
	WORD $0xe280; BYTE $0x3f     // andb         $63, %dl
	WORD $0xca80; BYTE $0x80     // orb          $-128, %dl
	LONG $0x01568841             // movb         %dl, $1(%r14)
	WORD $0xe8c1; BYTE $0x06     // shrl         $6, %eax
	WORD $0x3f24                 // andb         $63, %al
	WORD $0x800c                 // orb          $-128, %al
	LONG $0x02468841             // movb         %al, $2(%r14)
	WORD $0xe180; BYTE $0x3f     // andb         $63, %cl
	WORD $0xc980; BYTE $0x80     // orb          $-128, %cl
	LONG $0x034e8841             // movb         %cl, $3(%r14)
	LONG $0x04c68349             // addq         $4, %r14

LBB9_86:
	LONG $0xc07d8b48                           // movq         $-64(%rbp), %rdi
	LONG $0xa8558b48                           // movq         $-88(%rbp), %rdx
	LONG $0xb0558b4c                           // movq         $-80(%rbp), %r10
	LONG $0xb8758b48                           // movq         $-72(%rbp), %rsi
	LONG $0x2d058d4c; WORD $0x012d; BYTE $0x00 // leaq         $77101(%rip), %r8  /* __UnquoteTab+0(%rip) */
	QUAD $0xfffffdb50d6ffdc5                   // vmovdqa      $-587(%rip), %ymm1  /* LCPI9_0+0(%rip) */
	QUAD $0xfffffdcd156ff9c5                   // vmovdqa      $-563(%rip), %xmm2  /* LCPI9_1+0(%rip) */
	WORD $0x854d; BYTE $0xed                   // testq        %r13, %r13
	LONG $0x0034850f; WORD $0x0000             // jne          LBB9_3, $52(%rip)
	LONG $0x000612e9; BYTE $0x00               // jmp          LBB9_115, $1554(%rip)

LBB9_96:
	LONG $0x02a045f6               // testb        $2, $-96(%rbp)
	LONG $0x06f1840f; WORD $0x0000 // je           LBB9_97, $1777(%rip)
	LONG $0x06c74166; WORD $0xbfef // movw         $-16401, (%r14)
	LONG $0x0246c641; BYTE $0xbd   // movb         $-67, $2(%r14)
	LONG $0x03c68349               // addq         $3, %r14
	LONG $0xc07d8b48               // movq         $-64(%rbp), %rdi
	LONG $0xb8758b48               // movq         $-72(%rbp), %rsi
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0x05e8840f; WORD $0x0000 // je           LBB9_115, $1512(%rip)
	LONG $0x90909090; BYTE $0x90   // .p2align 4, 0x90

LBB9_3:
	LONG $0x5c3f8041                                         // cmpb         $92, (%r15)
	LONG $0x0016850f; WORD $0x0000                           // jne          LBB9_5, $22(%rip)
	WORD $0x3145; BYTE $0xc9                                 // xorl         %r9d, %r9d
	LONG $0x00015ee9; BYTE $0x00                             // jmp          LBB9_23, $350(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB9_5:
	WORD $0x894c; BYTE $0xeb       // movq         %r13, %rbx
	WORD $0x894c; BYTE $0xf1       // movq         %r14, %rcx
	WORD $0x894d; BYTE $0xf9       // movq         %r15, %r9
	LONG $0x20fd8349               // cmpq         $32, %r13
	LONG $0x00458c0f; WORD $0x0000 // jl           LBB9_11, $69(%rip)
	WORD $0xc931                   // xorl         %ecx, %ecx
	WORD $0x894c; BYTE $0xe8       // movq         %r13, %rax
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB9_7:
	LONG $0x6f7ec1c4; WORD $0x0f04 // vmovdqu      (%r15,%rcx), %ymm0
	LONG $0x7f7ec1c4; WORD $0x0e04 // vmovdqu      %ymm0, (%r14,%rcx)
	LONG $0xc174fdc5               // vpcmpeqb     %ymm1, %ymm0, %ymm0
	LONG $0xd8d7fdc5               // vpmovmskb    %ymm0, %ebx
	WORD $0xdb85                   // testl        %ebx, %ebx
	LONG $0x00db850f; WORD $0x0000 // jne          LBB9_8, $219(%rip)
	LONG $0xe0588d48               // leaq         $-32(%rax), %rbx
	LONG $0x20c18348               // addq         $32, %rcx
	LONG $0x3ff88348               // cmpq         $63, %rax
	WORD $0x8948; BYTE $0xd8       // movq         %rbx, %rax
	LONG $0xffcf8f0f; WORD $0xffff // jg           LBB9_7, $-49(%rip)
	LONG $0x0f0c8d4d               // leaq         (%r15,%rcx), %r9
	WORD $0x014c; BYTE $0xf1       // addq         %r14, %rcx

LBB9_11:
	WORD $0xf8c5; BYTE $0x77       // vzeroupper
	LONG $0x10fb8348               // cmpq         $16, %rbx
	LONG $0x00568c0f; WORD $0x0000 // jl           LBB9_12, $86(%rip)
	WORD $0x894d; BYTE $0xfb       // movq         %r15, %r11
	WORD $0x294d; BYTE $0xcb       // subq         %r9, %r11
	QUAD $0xfffffcdd0d6ffdc5       // vmovdqa      $-803(%rip), %ymm1  /* LCPI9_0+0(%rip) */
	QUAD $0xfffffcf5156ff9c5       // vmovdqa      $-779(%rip), %xmm2  /* LCPI9_1+0(%rip) */
	LONG $0x90909090; BYTE $0x90   // .p2align 4, 0x90

LBB9_18:
	LONG $0x6f7ac1c4; BYTE $0x01   // vmovdqu      (%r9), %xmm0
	LONG $0x017ffac5               // vmovdqu      %xmm0, (%rcx)
	LONG $0xc274f9c5               // vpcmpeqb     %xmm2, %xmm0, %xmm0
	LONG $0xc0d7f9c5               // vpmovmskb    %xmm0, %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0094850f; WORD $0x0000 // jne          LBB9_19, $148(%rip)
	LONG $0x10c18349               // addq         $16, %r9
	LONG $0x10c18348               // addq         $16, %rcx
	LONG $0xf0638d4c               // leaq         $-16(%rbx), %r12
	LONG $0xf0c38349               // addq         $-16, %r11
	LONG $0x1ffb8348               // cmpq         $31, %rbx
	WORD $0x894c; BYTE $0xe3       // movq         %r12, %rbx
	LONG $0xffca870f; WORD $0xffff // ja           LBB9_18, $-54(%rip)
	LONG $0x000013e9; BYTE $0x00   // jmp          LBB9_13, $19(%rip)

LBB9_12:
	WORD $0x8949; BYTE $0xdc // movq         %rbx, %r12
	QUAD $0xfffffc8a0d6ffdc5 // vmovdqa      $-886(%rip), %ymm1  /* LCPI9_0+0(%rip) */
	QUAD $0xfffffca2156ff9c5 // vmovdqa      $-862(%rip), %xmm2  /* LCPI9_1+0(%rip) */

LBB9_13:
	WORD $0x854d; BYTE $0xe4                   // testq        %r12, %r12
	LONG $0x03b8840f; WORD $0x0000             // je           LBB9_116, $952(%rip)
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB9_15:
	LONG $0x1cb60f41; BYTE $0x01   // movzbl       (%r9,%rax), %ebx
	WORD $0xfb80; BYTE $0x5c       // cmpb         $92, %bl
	LONG $0x0014840f; WORD $0x0000 // je           LBB9_21, $20(%rip)
	WORD $0x1c88; BYTE $0x01       // movb         %bl, (%rcx,%rax)
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x3949; BYTE $0xc4       // cmpq         %rax, %r12
	LONG $0xffe3850f; WORD $0xffff // jne          LBB9_15, $-29(%rip)
	LONG $0x00038de9; BYTE $0x00   // jmp          LBB9_116, $909(%rip)

LBB9_21:
	WORD $0x294d; BYTE $0xf9       // subq         %r15, %r9
	WORD $0x0149; BYTE $0xc1       // addq         %rax, %r9
	LONG $0xfff98349               // cmpq         $-1, %r9
	LONG $0x003e850f; WORD $0x0000 // jne          LBB9_23, $62(%rip)
	LONG $0x000378e9; BYTE $0x00   // jmp          LBB9_116, $888(%rip)

LBB9_8:
	LONG $0xcbbc0f44               // bsfl         %ebx, %r9d
	WORD $0x0149; BYTE $0xc9       // addq         %rcx, %r9
	LONG $0xfff98349               // cmpq         $-1, %r9
	LONG $0x0028850f; WORD $0x0000 // jne          LBB9_23, $40(%rip)
	LONG $0x000362e9; BYTE $0x00   // jmp          LBB9_116, $866(%rip)

LBB9_19:
	LONG $0xc0bc0f66                                         // bsfw         %ax, %ax
	LONG $0xc8b70f44                                         // movzwl       %ax, %r9d
	WORD $0x294d; BYTE $0xd9                                 // subq         %r11, %r9
	LONG $0xfff98349                                         // cmpq         $-1, %r9
	LONG $0x034d840f; WORD $0x0000                           // je           LBB9_116, $845(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB9_23:
	LONG $0x02498d49               // leaq         $2(%r9), %rcx
	WORD $0x2949; BYTE $0xcd       // subq         %rcx, %r13
	LONG $0x03fd880f; WORD $0x0000 // js           LBB9_24, $1021(%rip)
	WORD $0x014d; BYTE $0xcf       // addq         %r9, %r15
	LONG $0x02c78349               // addq         $2, %r15
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x0102850f; WORD $0x0000 // jne          LBB9_26, $258(%rip)

LBB9_37:
	WORD $0x014d; BYTE $0xce       // addq         %r9, %r14
	LONG $0x47b60f41; BYTE $0xff   // movzbl       $-1(%r15), %eax
	LONG $0x00048a42               // movb         (%rax,%r8), %al
	WORD $0xff3c                   // cmpb         $-1, %al
	LONG $0x001f840f; WORD $0x0000 // je           LBB9_41, $31(%rip)
	WORD $0xc084                   // testb        %al, %al
	LONG $0x03e4840f; WORD $0x0000 // je           LBB9_39, $996(%rip)
	WORD $0x8841; BYTE $0x06       // movb         %al, (%r14)

LBB9_113:
	WORD $0xff49; BYTE $0xc6       // incq         %r14
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0xfe48850f; WORD $0xffff // jne          LBB9_3, $-440(%rip)
	LONG $0x000426e9; BYTE $0x00   // jmp          LBB9_115, $1062(%rip)
	WORD $0x9090; BYTE $0x90       // .p2align 4, 0x90

LBB9_41:
	LONG $0x03fd8349                           // cmpq         $3, %r13
	LONG $0x03b0860f; WORD $0x0000             // jbe          LBB9_24, $944(%rip)
	WORD $0x8b41; BYTE $0x1f                   // movl         (%r15), %ebx
	WORD $0xd989                               // movl         %ebx, %ecx
	WORD $0xd1f7                               // notl         %ecx
	LONG $0xcfd0838d; WORD $0xcfcf             // leal         $-808464432(%rbx), %eax
	LONG $0x8080e181; WORD $0x8080             // andl         $-2139062144, %ecx
	WORD $0xc185                               // testl        %eax, %ecx
	LONG $0x02e5850f; WORD $0x0000             // jne          LBB9_46, $741(%rip)
	LONG $0x1919838d; WORD $0x1919             // leal         $421075225(%rbx), %eax
	WORD $0xd809                               // orl          %ebx, %eax
	LONG $0x808080a9; BYTE $0x80               // testl        $-2139062144, %eax
	LONG $0x02d2850f; WORD $0x0000             // jne          LBB9_46, $722(%rip)
	WORD $0xd889                               // movl         %ebx, %eax
	LONG $0x7f7f7f25; BYTE $0x7f               // andl         $2139062143, %eax
	LONG $0xc0c0bb41; WORD $0xc0c0             // movl         $-1061109568, %r11d
	WORD $0x2941; BYTE $0xc3                   // subl         %eax, %r11d
	LONG $0x46888d44; WORD $0x4646; BYTE $0x46 // leal         $1179010630(%rax), %r9d
	WORD $0x2141; BYTE $0xcb                   // andl         %ecx, %r11d
	WORD $0x8545; BYTE $0xcb                   // testl        %r9d, %r11d
	LONG $0x02af850f; WORD $0x0000             // jne          LBB9_46, $687(%rip)
	LONG $0xe0e0b941; WORD $0xe0e0             // movl         $-522133280, %r9d
	WORD $0x2941; BYTE $0xc1                   // subl         %eax, %r9d
	LONG $0x39393905; BYTE $0x39               // addl         $960051513, %eax
	WORD $0x2144; BYTE $0xc9                   // andl         %r9d, %ecx
	WORD $0xc185                               // testl        %eax, %ecx
	LONG $0x0296850f; WORD $0x0000             // jne          LBB9_46, $662(%rip)
	WORD $0xcb0f                               // bswapl       %ebx
	WORD $0xd989                               // movl         %ebx, %ecx
	WORD $0xe9c1; BYTE $0x04                   // shrl         $4, %ecx
	WORD $0xd1f7                               // notl         %ecx
	LONG $0x0101e181; WORD $0x0101             // andl         $16843009, %ecx
	WORD $0x0c8d; BYTE $0xc9                   // leal         (%rcx,%rcx,8), %ecx
	LONG $0x0f0fe381; WORD $0x0f0f             // andl         $252645135, %ebx
	WORD $0xcb01                               // addl         %ecx, %ebx
	WORD $0xd989                               // movl         %ebx, %ecx
	WORD $0xe9c1; BYTE $0x04                   // shrl         $4, %ecx
	WORD $0xd909                               // orl          %ebx, %ecx
	WORD $0xb60f; BYTE $0xd9                   // movzbl       %cl, %ebx
	WORD $0xe9c1; BYTE $0x08                   // shrl         $8, %ecx
	LONG $0xff00e181; WORD $0x0000             // andl         $65280, %ecx
	WORD $0xcb09                               // orl          %ecx, %ebx
	LONG $0x044f8d4d                           // leaq         $4(%r15), %r9
	LONG $0xfc4d8d49                           // leaq         $-4(%r13), %rcx
	LONG $0x0080fb81; WORD $0x0000             // cmpl         $128, %ebx
	LONG $0x0067820f; WORD $0x0000             // jb           LBB9_56, $103(%rip)
	LONG $0x02a045f6                           // testb        $2, $-96(%rbp)
	LONG $0x006b840f; WORD $0x0000             // je           LBB9_65, $107(%rip)
	WORD $0x894d; BYTE $0xcf                   // movq         %r9, %r15
	WORD $0x8941; BYTE $0xdc                   // movl         %ebx, %r12d
	WORD $0x8949; BYTE $0xcd                   // movq         %rcx, %r13
	LONG $0xfffb71e9; BYTE $0xff               // jmp          LBB9_59, $-1167(%rip)

LBB9_26:
	WORD $0x8545; BYTE $0xed       // testl        %r13d, %r13d
	LONG $0x02e2840f; WORD $0x0000 // je           LBB9_24, $738(%rip)
	LONG $0xff7f8041; BYTE $0x5c   // cmpb         $92, $-1(%r15)
	LONG $0x0303850f; WORD $0x0000 // jne          LBB9_28, $771(%rip)
	LONG $0x5c3f8041               // cmpb         $92, (%r15)
	LONG $0x0026850f; WORD $0x0000 // jne          LBB9_36, $38(%rip)
	LONG $0x01fd8341               // cmpl         $1, %r13d
	LONG $0x02c38e0f; WORD $0x0000 // jle          LBB9_24, $707(%rip)
	LONG $0x014f8a41               // movb         $1(%r15), %cl
	WORD $0xf980; BYTE $0x22       // cmpb         $34, %cl
	LONG $0x0009840f; WORD $0x0000 // je           LBB9_35, $9(%rip)
	WORD $0xf980; BYTE $0x5c       // cmpb         $92, %cl
	LONG $0x02f2850f; WORD $0x0000 // jne          LBB9_34, $754(%rip)

LBB9_35:
	WORD $0xff49; BYTE $0xc7 // incq         %r15
	WORD $0xff49; BYTE $0xcd // decq         %r13

LBB9_36:
	WORD $0xff49; BYTE $0xc7     // incq         %r15
	WORD $0xff49; BYTE $0xcd     // decq         %r13
	LONG $0xfffeafe9; BYTE $0xff // jmp          LBB9_37, $-337(%rip)

LBB9_56:
	WORD $0x8949; BYTE $0xcd // movq         %rcx, %r13
	WORD $0x894d; BYTE $0xcf // movq         %r9, %r15

LBB9_112:
	WORD $0x8841; BYTE $0x1e     // movb         %bl, (%r14)
	LONG $0xfffec0e9; BYTE $0xff // jmp          LBB9_113, $-320(%rip)

LBB9_65:
	LONG $0x0800fb81; WORD $0x0000                           // cmpl         $2048, %ebx
	LONG $0x005f820f; WORD $0x0000                           // jb           LBB9_66, $95(%rip)
	LONG $0x2000838d; WORD $0xffff                           // leal         $-57344(%rbx), %eax
	LONG $0xfff8003d; BYTE $0xff                             // cmpl         $-2048, %eax
	LONG $0x0080830f; WORD $0x0000                           // jae          LBB9_71, $128(%rip)
	WORD $0x8949; BYTE $0xcd                                 // movq         %rcx, %r13
	WORD $0x8941; BYTE $0xdc                                 // movl         %ebx, %r12d
	WORD $0x894d; BYTE $0xcf                                 // movq         %r9, %r15
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB9_70:
	WORD $0x8944; BYTE $0xe0       // movl         %r12d, %eax
	WORD $0xe8c1; BYTE $0x0c       // shrl         $12, %eax
	WORD $0xe00c                   // orb          $-32, %al
	WORD $0x8841; BYTE $0x06       // movb         %al, (%r14)
	WORD $0x8944; BYTE $0xe0       // movl         %r12d, %eax
	WORD $0xe8c1; BYTE $0x06       // shrl         $6, %eax
	WORD $0x3f24                   // andb         $63, %al
	WORD $0x800c                   // orb          $-128, %al
	LONG $0x01468841               // movb         %al, $1(%r14)
	LONG $0x3fe48041               // andb         $63, %r12b
	LONG $0x80cc8041               // orb          $-128, %r12b
	LONG $0x02668845               // movb         %r12b, $2(%r14)
	LONG $0x03c68349               // addq         $3, %r14
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0xfcae850f; WORD $0xffff // jne          LBB9_3, $-850(%rip)
	LONG $0x00028ce9; BYTE $0x00   // jmp          LBB9_115, $652(%rip)

LBB9_66:
	WORD $0x8949; BYTE $0xcd // movq         %rcx, %r13
	WORD $0x8941; BYTE $0xdc // movl         %ebx, %r12d
	WORD $0x894d; BYTE $0xcf // movq         %r9, %r15

LBB9_67:
	WORD $0x8944; BYTE $0xe0       // movl         %r12d, %eax
	WORD $0xe8c1; BYTE $0x06       // shrl         $6, %eax
	WORD $0xc00c                   // orb          $-64, %al
	WORD $0x8841; BYTE $0x06       // movb         %al, (%r14)
	LONG $0x3fe48041               // andb         $63, %r12b
	LONG $0x80cc8041               // orb          $-128, %r12b
	LONG $0x01668845               // movb         %r12b, $1(%r14)
	LONG $0x02c68349               // addq         $2, %r14
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0xfc7c850f; WORD $0xffff // jne          LBB9_3, $-900(%rip)
	LONG $0x00025ae9; BYTE $0x00   // jmp          LBB9_115, $602(%rip)

LBB9_71:
	WORD $0x8949; BYTE $0xdc       // movq         %rbx, %r12
	LONG $0x984d8948               // movq         %rcx, $-104(%rbp)
	LONG $0xc84d894c               // movq         %r9, $-56(%rbp)
	LONG $0xb8758948               // movq         %rsi, $-72(%rbp)
	LONG $0xa8558948               // movq         %rdx, $-88(%rbp)
	LONG $0xc07d8948               // movq         %rdi, $-64(%rbp)
	LONG $0xb055894c               // movq         %r10, $-80(%rbp)
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x00a4850f; WORD $0x0000 // jne          LBB9_72, $164(%rip)
	LONG $0x987d8348; BYTE $0x06   // cmpq         $6, $-104(%rbp)
	LONG $0x00cb820f; WORD $0x0000 // jb           LBB9_76, $203(%rip)

LBB9_78:
	LONG $0xfffc8141; WORD $0x00db; BYTE $0x00 // cmpl         $56319, %r12d
	LONG $0x00be870f; WORD $0x0000             // ja           LBB9_76, $190(%rip)
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	WORD $0x3880; BYTE $0x5c                   // cmpb         $92, (%rax)
	LONG $0x00b1850f; WORD $0x0000             // jne          LBB9_76, $177(%rip)
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	LONG $0x75017880                           // cmpb         $117, $1(%rax)
	LONG $0x00a3850f; WORD $0x0000             // jne          LBB9_76, $163(%rip)
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	WORD $0x588b; BYTE $0x02                   // movl         $2(%rax), %ebx
	WORD $0xdf89                               // movl         %ebx, %edi
	WORD $0xf8c5; BYTE $0x77                   // vzeroupper
	LONG $0x0002ffe8; BYTE $0x00               // callq        _unhex16_is, $767(%rip)
	WORD $0xc084                               // testb        %al, %al
	LONG $0x01f2840f; WORD $0x0000             // je           LBB9_82, $498(%rip)
	WORD $0xcb0f                               // bswapl       %ebx
	WORD $0xd889                               // movl         %ebx, %eax
	WORD $0xe8c1; BYTE $0x04                   // shrl         $4, %eax
	WORD $0xd0f7                               // notl         %eax
	LONG $0x01010125; BYTE $0x01               // andl         $16843009, %eax
	WORD $0x048d; BYTE $0xc0                   // leal         (%rax,%rax,8), %eax
	LONG $0x0f0fe381; WORD $0x0f0f             // andl         $252645135, %ebx
	WORD $0xc301                               // addl         %eax, %ebx
	WORD $0xd889                               // movl         %ebx, %eax
	WORD $0xe8c1; BYTE $0x04                   // shrl         $4, %eax
	WORD $0xd809                               // orl          %ebx, %eax
	WORD $0xb60f; BYTE $0xc8                   // movzbl       %al, %ecx
	WORD $0xe8c1; BYTE $0x08                   // shrl         $8, %eax
	LONG $0x00ff0025; BYTE $0x00               // andl         $65280, %eax
	LONG $0xc8458348; BYTE $0x06               // addq         $6, $-56(%rbp)
	WORD $0x148d; BYTE $0x08                   // leal         (%rax,%rcx), %edx
	LONG $0x2000c281; WORD $0xffff             // addl         $-57344, %edx
	LONG $0xfc00fa81; WORD $0xffff             // cmpl         $-1024, %edx
	LONG $0x0292820f; WORD $0x0000             // jb           LBB9_98, $658(%rip)
	WORD $0xc809                               // orl          %ecx, %eax
	LONG $0x986d8b4c                           // movq         $-104(%rbp), %r13
	LONG $0xfac58349                           // addq         $-6, %r13
	LONG $0xc87d8b4c                           // movq         $-56(%rbp), %r15
	LONG $0xfffb07e9; BYTE $0xff               // jmp          LBB9_85, $-1273(%rip)

LBB9_72:
	LONG $0x05fd8349               // cmpq         $5, %r13
	LONG $0x025a820f; WORD $0x0000 // jb           LBB9_87, $602(%rip)
	LONG $0xc8458b48               // movq         $-56(%rbp), %rax
	WORD $0x3880; BYTE $0x5c       // cmpb         $92, (%rax)
	LONG $0x0268850f; WORD $0x0000 // jne          LBB9_98, $616(%rip)
	LONG $0xfbc58349               // addq         $-5, %r13
	LONG $0x05c78349               // addq         $5, %r15
	LONG $0x986d894c               // movq         %r13, $-104(%rbp)
	LONG $0xc87d894c               // movq         %r15, $-56(%rbp)
	LONG $0x987d8348; BYTE $0x06   // cmpq         $6, $-104(%rbp)
	LONG $0xff35830f; WORD $0xffff // jae          LBB9_78, $-203(%rip)

LBB9_76:
	LONG $0xc87d8b4c // movq         $-56(%rbp), %r15

LBB9_77:
	LONG $0xb0458b48                           // movq         $-80(%rbp), %rax
	LONG $0xc0450348                           // addq         $-64(%rbp), %rax
	WORD $0x2949; BYTE $0xc7                   // subq         %rax, %r15
	LONG $0xfcc78349                           // addq         $-4, %r15
	LONG $0xd0458b48                           // movq         $-48(%rbp), %rax
	WORD $0x894c; BYTE $0x38                   // movq         %r15, (%rax)
	LONG $0xfcc6c749; WORD $0xffff; BYTE $0xff // movq         $-4, %r14
	LONG $0x00000ce9; BYTE $0x00               // jmp          LBB9_117, $12(%rip)

LBB9_1:
	WORD $0x3145; BYTE $0xed // xorl         %r13d, %r13d
	WORD $0x8949; BYTE $0xd6 // movq         %rdx, %r14

LBB9_116:
	WORD $0x014d; BYTE $0xee // addq         %r13, %r14
	WORD $0x2949; BYTE $0xd6 // subq         %rdx, %r14

LBB9_117:
	WORD $0x894c; BYTE $0xf0 // movq         %r14, %rax
	LONG $0x48c48348         // addq         $72, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB9_46:
	WORD $0x894c; BYTE $0xf8                   // movq         %r15, %rax
	WORD $0x2948; BYTE $0xf8                   // subq         %rdi, %rax
	LONG $0xd0758b48                           // movq         $-48(%rbp), %rsi
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	WORD $0x8a41; BYTE $0x0f                   // movb         (%r15), %cl
	WORD $0x518d; BYTE $0xc6                   // leal         $-58(%rcx), %edx
	LONG $0xfec6c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r14
	WORD $0xfa80; BYTE $0xf5                   // cmpb         $-11, %dl
	LONG $0x000f870f; WORD $0x0000             // ja           LBB9_48, $15(%rip)
	WORD $0xe180; BYTE $0xdf                   // andb         $-33, %cl
	WORD $0xc180; BYTE $0xb9                   // addb         $-71, %cl
	WORD $0xf980; BYTE $0xfa                   // cmpb         $-6, %cl
	LONG $0xffb9820f; WORD $0xffff             // jb           LBB9_117, $-71(%rip)

LBB9_48:
	LONG $0x01488d48               // leaq         $1(%rax), %rcx
	WORD $0x8948; BYTE $0x0e       // movq         %rcx, (%rsi)
	LONG $0x014f8a41               // movb         $1(%r15), %cl
	WORD $0x518d; BYTE $0xc6       // leal         $-58(%rcx), %edx
	WORD $0xfa80; BYTE $0xf5       // cmpb         $-11, %dl
	LONG $0x000f870f; WORD $0x0000 // ja           LBB9_50, $15(%rip)
	WORD $0xe180; BYTE $0xdf       // andb         $-33, %cl
	WORD $0xc180; BYTE $0xb9       // addb         $-71, %cl
	WORD $0xf980; BYTE $0xfa       // cmpb         $-6, %cl
	LONG $0xff93820f; WORD $0xffff // jb           LBB9_117, $-109(%rip)

LBB9_50:
	LONG $0x02488d48               // leaq         $2(%rax), %rcx
	WORD $0x8948; BYTE $0x0e       // movq         %rcx, (%rsi)
	LONG $0x024f8a41               // movb         $2(%r15), %cl
	WORD $0x518d; BYTE $0xc6       // leal         $-58(%rcx), %edx
	WORD $0xfa80; BYTE $0xf5       // cmpb         $-11, %dl
	LONG $0x000f870f; WORD $0x0000 // ja           LBB9_52, $15(%rip)
	WORD $0xe180; BYTE $0xdf       // andb         $-33, %cl
	WORD $0xc180; BYTE $0xb9       // addb         $-71, %cl
	WORD $0xf980; BYTE $0xfa       // cmpb         $-6, %cl
	LONG $0xff6d820f; WORD $0xffff // jb           LBB9_117, $-147(%rip)

LBB9_52:
	LONG $0x03488d48               // leaq         $3(%rax), %rcx
	WORD $0x8948; BYTE $0x0e       // movq         %rcx, (%rsi)
	LONG $0x034f8a41               // movb         $3(%r15), %cl
	WORD $0x518d; BYTE $0xc6       // leal         $-58(%rcx), %edx
	WORD $0xfa80; BYTE $0xf5       // cmpb         $-11, %dl
	LONG $0x000f870f; WORD $0x0000 // ja           LBB9_54, $15(%rip)
	WORD $0xe180; BYTE $0xdf       // andb         $-33, %cl
	WORD $0xc180; BYTE $0xb9       // addb         $-71, %cl
	WORD $0xf980; BYTE $0xfa       // cmpb         $-6, %cl
	LONG $0xff47820f; WORD $0xffff // jb           LBB9_117, $-185(%rip)

LBB9_54:
	LONG $0x04c08348             // addq         $4, %rax
	WORD $0x8948; BYTE $0x06     // movq         %rax, (%rsi)
	LONG $0xffff3be9; BYTE $0xff // jmp          LBB9_117, $-197(%rip)

LBB9_24:
	LONG $0xd0458b48                           // movq         $-48(%rbp), %rax
	WORD $0x8948; BYTE $0x30                   // movq         %rsi, (%rax)
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	LONG $0xffff28e9; BYTE $0xff               // jmp          LBB9_117, $-216(%rip)

LBB9_39:
	WORD $0xf748; BYTE $0xd7                   // notq         %rdi
	WORD $0x0149; BYTE $0xff                   // addq         %rdi, %r15
	LONG $0xd0458b48                           // movq         $-48(%rbp), %rax
	WORD $0x894c; BYTE $0x38                   // movq         %r15, (%rax)
	LONG $0xfdc6c749; WORD $0xffff; BYTE $0xff // movq         $-3, %r14
	LONG $0xffff0fe9; BYTE $0xff               // jmp          LBB9_117, $-241(%rip)

LBB9_28:
	WORD $0xf748; BYTE $0xd7 // notq         %rdi
	WORD $0x0149; BYTE $0xff // addq         %rdi, %r15

LBB9_29:
	LONG $0xd0458b48                           // movq         $-48(%rbp), %rax
	WORD $0x894c; BYTE $0x38                   // movq         %r15, (%rax)
	LONG $0xfec6c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r14
	LONG $0xfffef6e9; BYTE $0xff               // jmp          LBB9_117, $-266(%rip)

LBB9_34:
	WORD $0x2949; BYTE $0xff     // subq         %rdi, %r15
	WORD $0xff49; BYTE $0xc7     // incq         %r15
	LONG $0xffffe2e9; BYTE $0xff // jmp          LBB9_29, $-30(%rip)

LBB9_63:
	LONG $0x02a045f6               // testb        $2, $-96(%rbp)
	LONG $0x00e1840f; WORD $0x0000 // je           LBB9_87, $225(%rip)
	LONG $0x06c74166; WORD $0xbfef // movw         $-16401, (%r14)
	LONG $0x0246c641; BYTE $0xbd   // movb         $-67, $2(%r14)
	LONG $0x03c68349               // addq         $3, %r14

LBB9_115:
	WORD $0x3145; BYTE $0xed     // xorl         %r13d, %r13d
	LONG $0xfffec4e9; BYTE $0xff // jmp          LBB9_116, $-316(%rip)

LBB9_82:
	LONG $0xc87d8b4c // movq         $-56(%rbp), %r15

LBB9_100:
	WORD $0x894c; BYTE $0xf8                   // movq         %r15, %rax
	LONG $0xc0452b48                           // subq         $-64(%rbp), %rax
	LONG $0x02c08348                           // addq         $2, %rax
	LONG $0xd04d8b48                           // movq         $-48(%rbp), %rcx
	WORD $0x8948; BYTE $0x01                   // movq         %rax, (%rcx)
	LONG $0x024f8a41                           // movb         $2(%r15), %cl
	WORD $0x518d; BYTE $0xc6                   // leal         $-58(%rcx), %edx
	LONG $0xfec6c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r14
	WORD $0xfa80; BYTE $0xf5                   // cmpb         $-11, %dl
	LONG $0x000f870f; WORD $0x0000             // ja           LBB9_102, $15(%rip)
	WORD $0xe180; BYTE $0xdf                   // andb         $-33, %cl
	WORD $0xc180; BYTE $0xb9                   // addb         $-71, %cl
	WORD $0xf980; BYTE $0xfa                   // cmpb         $-6, %cl
	LONG $0xfe8e820f; WORD $0xffff             // jb           LBB9_117, $-370(%rip)

LBB9_102:
	LONG $0x01488d48               // leaq         $1(%rax), %rcx
	LONG $0xd0558b48               // movq         $-48(%rbp), %rdx
	WORD $0x8948; BYTE $0x0a       // movq         %rcx, (%rdx)
	LONG $0x034f8a41               // movb         $3(%r15), %cl
	WORD $0x518d; BYTE $0xc6       // leal         $-58(%rcx), %edx
	WORD $0xfa80; BYTE $0xf5       // cmpb         $-11, %dl
	LONG $0x000f870f; WORD $0x0000 // ja           LBB9_104, $15(%rip)
	WORD $0xe180; BYTE $0xdf       // andb         $-33, %cl
	WORD $0xc180; BYTE $0xb9       // addb         $-71, %cl
	WORD $0xf980; BYTE $0xfa       // cmpb         $-6, %cl
	LONG $0xfe64820f; WORD $0xffff // jb           LBB9_117, $-412(%rip)

LBB9_104:
	LONG $0x02488d48               // leaq         $2(%rax), %rcx
	LONG $0xd0558b48               // movq         $-48(%rbp), %rdx
	WORD $0x8948; BYTE $0x0a       // movq         %rcx, (%rdx)
	LONG $0x044f8a41               // movb         $4(%r15), %cl
	WORD $0x518d; BYTE $0xc6       // leal         $-58(%rcx), %edx
	WORD $0xfa80; BYTE $0xf5       // cmpb         $-11, %dl
	LONG $0x000f870f; WORD $0x0000 // ja           LBB9_106, $15(%rip)
	WORD $0xe180; BYTE $0xdf       // andb         $-33, %cl
	WORD $0xc180; BYTE $0xb9       // addb         $-71, %cl
	WORD $0xf980; BYTE $0xfa       // cmpb         $-6, %cl
	LONG $0xfe3a820f; WORD $0xffff // jb           LBB9_117, $-454(%rip)

LBB9_106:
	LONG $0x03488d48               // leaq         $3(%rax), %rcx
	LONG $0xd0558b48               // movq         $-48(%rbp), %rdx
	WORD $0x8948; BYTE $0x0a       // movq         %rcx, (%rdx)
	LONG $0x054f8a41               // movb         $5(%r15), %cl
	WORD $0x518d; BYTE $0xc6       // leal         $-58(%rcx), %edx
	WORD $0xfa80; BYTE $0xf5       // cmpb         $-11, %dl
	LONG $0x000f870f; WORD $0x0000 // ja           LBB9_108, $15(%rip)
	WORD $0xe180; BYTE $0xdf       // andb         $-33, %cl
	WORD $0xc180; BYTE $0xb9       // addb         $-71, %cl
	WORD $0xf980; BYTE $0xfa       // cmpb         $-6, %cl
	LONG $0xfe10820f; WORD $0xffff // jb           LBB9_117, $-496(%rip)

LBB9_108:
	LONG $0x04c08348             // addq         $4, %rax
	LONG $0xd04d8b48             // movq         $-48(%rbp), %rcx
	WORD $0x8948; BYTE $0x01     // movq         %rax, (%rcx)
	LONG $0xfffe00e9; BYTE $0xff // jmp          LBB9_117, $-512(%rip)

LBB9_87:
	LONG $0xd0458b48                           // movq         $-48(%rbp), %rax
	LONG $0xb84d8b48                           // movq         $-72(%rbp), %rcx
	WORD $0x8948; BYTE $0x08                   // movq         %rcx, (%rax)
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	LONG $0xfffde9e9; BYTE $0xff               // jmp          LBB9_117, $-535(%rip)

LBB9_97:
	LONG $0xc87d894c // movq         %r15, $-56(%rbp)

LBB9_98:
	LONG $0xc8658b4c                           // movq         $-56(%rbp), %r12
	LONG $0xc0652b4c                           // subq         $-64(%rbp), %r12
	LONG $0xfcc48349                           // addq         $-4, %r12
	LONG $0xd0458b48                           // movq         $-48(%rbp), %rax
	WORD $0x894c; BYTE $0x20                   // movq         %r12, (%rax)
	LONG $0xfcc6c749; WORD $0xffff; BYTE $0xff // movq         $-4, %r14
	LONG $0xfffdc6e9; BYTE $0xff               // jmp          LBB9_117, $-570(%rip)
	BYTE $0x90                                 // .p2align 4, 0x90

_unhex16_is:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0xf889                   // movl         %edi, %eax
	WORD $0xd0f7                   // notl         %eax
	LONG $0xcfd08f8d; WORD $0xcfcf // leal         $-808464432(%rdi), %ecx
	LONG $0x80808025; BYTE $0x80   // andl         $-2139062144, %eax
	WORD $0xc885                   // testl        %ecx, %eax
	LONG $0x0007840f; WORD $0x0000 // je           LBB10_2, $7(%rip)
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB10_2:
	LONG $0x19198f8d; WORD $0x1919 // leal         $421075225(%rdi), %ecx
	WORD $0xf909                   // orl          %edi, %ecx
	LONG $0x8080c1f7; WORD $0x8080 // testl        $-2139062144, %ecx
	LONG $0x0007840f; WORD $0x0000 // je           LBB10_4, $7(%rip)
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB10_4:
	LONG $0x7f7fe781; WORD $0x7f7f // andl         $2139062143, %edi
	LONG $0xc0c0c0b9; BYTE $0xc0   // movl         $-1061109568, %ecx
	WORD $0xf929                   // subl         %edi, %ecx
	LONG $0x4646978d; WORD $0x4646 // leal         $1179010630(%rdi), %edx
	WORD $0xc121                   // andl         %eax, %ecx
	WORD $0xd185                   // testl        %edx, %ecx
	LONG $0x0007840f; WORD $0x0000 // je           LBB10_6, $7(%rip)
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB10_6:
	LONG $0xe0e0e0b9; BYTE $0xe0   // movl         $-522133280, %ecx
	WORD $0xf929                   // subl         %edi, %ecx
	LONG $0x3939c781; WORD $0x3939 // addl         $960051513, %edi
	WORD $0xc821                   // andl         %ecx, %eax
	WORD $0xf885                   // testl        %edi, %eax
	WORD $0x940f; BYTE $0xc0       // sete         %al
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq
	LONG $0x00000000; WORD $0x0000 // .p2align 5, 0x00

LCPI11_0:
	QUAD $0x2626262626262626; QUAD $0x2626262626262626 // .space 16, '&&&&&&&&&&&&&&&&'
	QUAD $0x2626262626262626; QUAD $0x2626262626262626 // .space 16, '&&&&&&&&&&&&&&&&'

LCPI11_1:
	QUAD $0xe2e2e2e2e2e2e2e2; QUAD $0xe2e2e2e2e2e2e2e2 // .space 16, '\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2'
	QUAD $0xe2e2e2e2e2e2e2e2; QUAD $0xe2e2e2e2e2e2e2e2 // .space 16, '\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2'

LCPI11_2:
	QUAD $0xfdfdfdfdfdfdfdfd; QUAD $0xfdfdfdfdfdfdfdfd // .space 16, '\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd'
	QUAD $0xfdfdfdfdfdfdfdfd; QUAD $0xfdfdfdfdfdfdfdfd // .space 16, '\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd'

LCPI11_3:
	QUAD $0x3c3c3c3c3c3c3c3c; QUAD $0x3c3c3c3c3c3c3c3c // .space 16, '<<<<<<<<<<<<<<<<'
	QUAD $0x3c3c3c3c3c3c3c3c; QUAD $0x3c3c3c3c3c3c3c3c // .space 16, '<<<<<<<<<<<<<<<<'

	// .p2align 4, 0x00
LCPI11_4:
	QUAD $0x2626262626262626; QUAD $0x2626262626262626 // .space 16, '&&&&&&&&&&&&&&&&'

LCPI11_5:
	QUAD $0xe2e2e2e2e2e2e2e2; QUAD $0xe2e2e2e2e2e2e2e2 // .space 16, '\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2'

LCPI11_6:
	QUAD $0xfdfdfdfdfdfdfdfd; QUAD $0xfdfdfdfdfdfdfdfd // .space 16, '\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd'

LCPI11_7:
	QUAD $0x3c3c3c3c3c3c3c3c; QUAD $0x3c3c3c3c3c3c3c3c // .space 16, '<<<<<<<<<<<<<<<<'

	// .p2align 4, 0x90
_html_escape:
	BYTE $0x55                                               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                                 // movq         %rsp, %rbp
	WORD $0x5741                                             // pushq        %r15
	WORD $0x5641                                             // pushq        %r14
	WORD $0x5541                                             // pushq        %r13
	WORD $0x5441                                             // pushq        %r12
	BYTE $0x53                                               // pushq        %rbx
	LONG $0x18ec8348                                         // subq         $24, %rsp
	LONG $0xc04d8948                                         // movq         %rcx, $-64(%rbp)
	WORD $0x8949; BYTE $0xd7                                 // movq         %rdx, %r15
	LONG $0xc8558948                                         // movq         %rdx, $-56(%rbp)
	LONG $0xd07d8948                                         // movq         %rdi, $-48(%rbp)
	WORD $0x8948; BYTE $0xf8                                 // movq         %rdi, %rax
	WORD $0x8548; BYTE $0xf6                                 // testq        %rsi, %rsi
	LONG $0x07798e0f; WORD $0x0000                           // jle          LBB11_106, $1913(%rip)
	LONG $0xc0458b48                                         // movq         $-64(%rbp), %rax
	WORD $0x8b4c; BYTE $0x08                                 // movq         (%rax), %r9
	QUAD $0xffffff051d6ffdc5                                 // vmovdqa      $-251(%rip), %ymm3  /* LCPI11_0+0(%rip) */
	QUAD $0xffffff1d256ffdc5                                 // vmovdqa      $-227(%rip), %ymm4  /* LCPI11_1+0(%rip) */
	QUAD $0xffffff352d6ffdc5                                 // vmovdqa      $-203(%rip), %ymm5  /* LCPI11_2+0(%rip) */
	QUAD $0xffffff4d356ffdc5                                 // vmovdqa      $-179(%rip), %ymm6  /* LCPI11_3+0(%rip) */
	LONG $0x56358d4c; WORD $0x0125; BYTE $0x00               // leaq         $75094(%rip), %r14  /* __HtmlQuoteTab+0(%rip) */
	LONG $0xd05d8b4c                                         // movq         $-48(%rbp), %r11
	LONG $0xc87d8b4c                                         // movq         $-56(%rbp), %r15
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB11_2:
	WORD $0x854d; BYTE $0xc9                   // testq        %r9, %r9
	LONG $0x074b8e0f; WORD $0x0000             // jle          LBB11_3, $1867(%rip)
	LONG $0x20fe8348                           // cmpq         $32, %rsi
	WORD $0x930f; BYTE $0xc1                   // setae        %cl
	WORD $0x894c; BYTE $0xc8                   // movq         %r9, %rax
	WORD $0x894d; BYTE $0xf8                   // movq         %r15, %r8
	WORD $0x8949; BYTE $0xf2                   // movq         %rsi, %r10
	WORD $0x894d; BYTE $0xdc                   // movq         %r11, %r12
	LONG $0x20f98349                           // cmpq         $32, %r9
	LONG $0x007a820f; WORD $0x0000             // jb           LBB11_12, $122(%rip)
	LONG $0x20fe8348                           // cmpq         $32, %rsi
	LONG $0x0070820f; WORD $0x0000             // jb           LBB11_12, $112(%rip)
	WORD $0x3145; BYTE $0xc0                   // xorl         %r8d, %r8d
	WORD $0x8948; BYTE $0xf3                   // movq         %rsi, %rbx
	WORD $0x894c; BYTE $0xcf                   // movq         %r9, %rdi
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB11_7:
	LONG $0x6f7e81c4; WORD $0x0304 // vmovdqu      (%r11,%r8), %ymm0
	LONG $0xcb74fdc5               // vpcmpeqb     %ymm3, %ymm0, %ymm1
	LONG $0xd474fdc5               // vpcmpeqb     %ymm4, %ymm0, %ymm2
	LONG $0xc9ebedc5               // vpor         %ymm1, %ymm2, %ymm1
	LONG $0xd5dbfdc5               // vpand        %ymm5, %ymm0, %ymm2
	LONG $0xd674edc5               // vpcmpeqb     %ymm6, %ymm2, %ymm2
	LONG $0xcaebf5c5               // vpor         %ymm2, %ymm1, %ymm1
	LONG $0x7f7e81c4; WORD $0x0704 // vmovdqu      %ymm0, (%r15,%r8)
	LONG $0xc1d7fdc5               // vpmovmskb    %ymm1, %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0180850f; WORD $0x0000 // jne          LBB11_8, $384(%rip)
	LONG $0xe0538d4c               // leaq         $-32(%rbx), %r10
	LONG $0xe0478d48               // leaq         $-32(%rdi), %rax
	LONG $0x20c08349               // addq         $32, %r8
	LONG $0x40fb8348               // cmpq         $64, %rbx
	WORD $0x9d0f; BYTE $0xc1       // setge        %cl
	LONG $0x00108c0f; WORD $0x0000 // jl           LBB11_11, $16(%rip)
	WORD $0x894c; BYTE $0xd3       // movq         %r10, %rbx
	LONG $0x3fff8348               // cmpq         $63, %rdi
	WORD $0x8948; BYTE $0xc7       // movq         %rax, %rdi
	LONG $0xffa78f0f; WORD $0xffff // jg           LBB11_7, $-89(%rip)

LBB11_11:
	LONG $0x03248d4f         // leaq         (%r11,%r8), %r12
	WORD $0x014d; BYTE $0xf8 // addq         %r15, %r8

LBB11_12:
	WORD $0xc984                           // testb        %cl, %cl
	LONG $0x0078840f; WORD $0x0000         // je           LBB11_38, $120(%rip)
	LONG $0x6f7ec1c4; WORD $0x2404         // vmovdqu      (%r12), %ymm0
	LONG $0xcb74fdc5                       // vpcmpeqb     %ymm3, %ymm0, %ymm1
	LONG $0xd474fdc5                       // vpcmpeqb     %ymm4, %ymm0, %ymm2
	LONG $0xc9ebedc5                       // vpor         %ymm1, %ymm2, %ymm1
	LONG $0xc5dbfdc5                       // vpand        %ymm5, %ymm0, %ymm0
	LONG $0xc674fdc5                       // vpcmpeqb     %ymm6, %ymm0, %ymm0
	LONG $0xc0ebf5c5                       // vpor         %ymm0, %ymm1, %ymm0
	LONG $0xc8d7fdc5                       // vpmovmskb    %ymm0, %ecx
	QUAD $0x000100000000ba48; WORD $0x0000 // movabsq      $4294967296, %rdx
	WORD $0x0948; BYTE $0xd1               // orq          %rdx, %rcx
	LONG $0xe9bc0f4c                       // bsfq         %rcx, %r13
	LONG $0x243c8b49                       // movq         (%r12), %rdi
	LONG $0x244c8b49; BYTE $0x08           // movq         $8(%r12), %rcx
	WORD $0x3949; BYTE $0xc5               // cmpq         %rax, %r13
	LONG $0x010f8e0f; WORD $0x0000         // jle          LBB11_14, $271(%rip)
	LONG $0x10f88348                       // cmpq         $16, %rax
	LONG $0x0142820f; WORD $0x0000         // jb           LBB11_27, $322(%rip)
	WORD $0x8949; BYTE $0x38               // movq         %rdi, (%r8)
	LONG $0x08488949                       // movq         %rcx, $8(%r8)
	LONG $0x24548d4d; BYTE $0x10           // leaq         $16(%r12), %r10
	LONG $0x10c08349                       // addq         $16, %r8
	LONG $0xf0708d4c                       // leaq         $-16(%rax), %r14
	LONG $0x08fe8349                       // cmpq         $8, %r14
	LONG $0x0134830f; WORD $0x0000         // jae          LBB11_30, $308(%rip)
	LONG $0x000141e9; BYTE $0x00           // jmp          LBB11_31, $321(%rip)
	LONG $0x90909090; WORD $0x9090         // .p2align 4, 0x90

LBB11_38:
	WORD $0xf8c5; BYTE $0x77       // vzeroupper
	LONG $0x10fa8349               // cmpq         $16, %r10
	WORD $0x9d0f; BYTE $0xc1       // setge        %cl
	LONG $0x015f8c0f; WORD $0x0000 // jl           LBB11_39, $351(%rip)
	LONG $0x10f88348               // cmpq         $16, %rax
	QUAD $0xfffffe143d6ff9c5       // vmovdqa      $-492(%rip), %xmm7  /* LCPI11_4+0(%rip) */
	QUAD $0xfffffe1c056f79c5       // vmovdqa      $-484(%rip), %xmm8  /* LCPI11_5+0(%rip) */
	QUAD $0xfffffe240d6f79c5       // vmovdqa      $-476(%rip), %xmm9  /* LCPI11_6+0(%rip) */
	QUAD $0xfffffe2c156f79c5       // vmovdqa      $-468(%rip), %xmm10  /* LCPI11_7+0(%rip) */
	LONG $0x01eb8c0f; WORD $0x0000 // jl           LBB11_41, $491(%rip)
	WORD $0x894c; BYTE $0xdf       // movq         %r11, %rdi
	WORD $0x294c; BYTE $0xe7       // subq         %r12, %rdi
	QUAD $0xfffffd681d6ffdc5       // vmovdqa      $-664(%rip), %ymm3  /* LCPI11_0+0(%rip) */
	QUAD $0xfffffd80256ffdc5       // vmovdqa      $-640(%rip), %ymm4  /* LCPI11_1+0(%rip) */
	QUAD $0xfffffd982d6ffdc5       // vmovdqa      $-616(%rip), %ymm5  /* LCPI11_2+0(%rip) */
	QUAD $0xfffffdb0356ffdc5       // vmovdqa      $-592(%rip), %ymm6  /* LCPI11_3+0(%rip) */

	// .p2align 4, 0x90
LBB11_43:
	LONG $0x6f7ac1c4; WORD $0x2404                     // vmovdqu      (%r12), %xmm0
	LONG $0xcf74f9c5                                   // vpcmpeqb     %xmm7, %xmm0, %xmm1
	LONG $0xd074b9c5                                   // vpcmpeqb     %xmm0, %xmm8, %xmm2
	LONG $0xc9ebe9c5                                   // vpor         %xmm1, %xmm2, %xmm1
	LONG $0xd0dbb1c5                                   // vpand        %xmm0, %xmm9, %xmm2
	LONG $0xd274a9c5                                   // vpcmpeqb     %xmm2, %xmm10, %xmm2
	LONG $0xcaebf1c5                                   // vpor         %xmm2, %xmm1, %xmm1
	LONG $0x7f7ac1c4; BYTE $0x00                       // vmovdqu      %xmm0, (%r8)
	LONG $0xc9d7f9c5                                   // vpmovmskb    %xmm1, %ecx
	WORD $0xc985                                       // testl        %ecx, %ecx
	LONG $0x007a850f; WORD $0x0000                     // jne          LBB11_44, $122(%rip)
	LONG $0x10c48349                                   // addq         $16, %r12
	LONG $0x10c08349                                   // addq         $16, %r8
	LONG $0xf0728d4d                                   // leaq         $-16(%r10), %r14
	LONG $0xf0688d4c                                   // leaq         $-16(%rax), %r13
	LONG $0x20fa8349                                   // cmpq         $32, %r10
	WORD $0x9d0f; BYTE $0xc1                           // setge        %cl
	LONG $0x01098c0f; WORD $0x0000                     // jl           LBB11_47, $265(%rip)
	LONG $0xf0c78348                                   // addq         $-16, %rdi
	WORD $0x894d; BYTE $0xf2                           // movq         %r14, %r10
	LONG $0x1ff88348                                   // cmpq         $31, %rax
	WORD $0x894c; BYTE $0xe8                           // movq         %r13, %rax
	LONG $0xffa08f0f; WORD $0xffff                     // jg           LBB11_43, $-96(%rip)
	LONG $0x0000f0e9; BYTE $0x00                       // jmp          LBB11_47, $240(%rip)
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB11_8:
	LONG $0xe0bc0f44             // bsfl         %eax, %r12d
	WORD $0x014d; BYTE $0xc4     // addq         %r8, %r12
	LONG $0x0003ebe9; BYTE $0x00 // jmp          LBB11_83, $1003(%rip)

LBB11_14:
	LONG $0x10fd8341               // cmpl         $16, %r13d
	LONG $0x01fa820f; WORD $0x0000 // jb           LBB11_15, $506(%rip)
	WORD $0x8949; BYTE $0x38       // movq         %rdi, (%r8)
	LONG $0x08488949               // movq         %rcx, $8(%r8)
	LONG $0x24548d4d; BYTE $0x10   // leaq         $16(%r12), %r10
	LONG $0x10c08349               // addq         $16, %r8
	LONG $0xf0458d49               // leaq         $-16(%r13), %rax
	LONG $0x08f88348               // cmpq         $8, %rax
	LONG $0x01ec830f; WORD $0x0000 // jae          LBB11_18, $492(%rip)
	LONG $0x0001f9e9; BYTE $0x00   // jmp          LBB11_19, $505(%rip)

LBB11_44:
	LONG $0xc1bc0f66             // bsfw         %cx, %ax
	LONG $0xe0b70f44             // movzwl       %ax, %r12d
	WORD $0x2949; BYTE $0xfc     // subq         %rdi, %r12
	LONG $0x0003a7e9; BYTE $0x00 // jmp          LBB11_82, $935(%rip)

LBB11_27:
	WORD $0x894d; BYTE $0xe2       // movq         %r12, %r10
	WORD $0x8949; BYTE $0xc6       // movq         %rax, %r14
	LONG $0x08fe8349               // cmpq         $8, %r14
	LONG $0x0012820f; WORD $0x0000 // jb           LBB11_31, $18(%rip)

LBB11_30:
	WORD $0x8b49; BYTE $0x0a // movq         (%r10), %rcx
	WORD $0x8949; BYTE $0x08 // movq         %rcx, (%r8)
	LONG $0x08c28349         // addq         $8, %r10
	LONG $0x08c08349         // addq         $8, %r8
	LONG $0xf8c68349         // addq         $-8, %r14

LBB11_31:
	LONG $0x04fe8349               // cmpq         $4, %r14
	LONG $0x01eb830f; WORD $0x0000 // jae          LBB11_32, $491(%rip)
	LONG $0x02fe8349               // cmpq         $2, %r14
	LONG $0x01fd830f; WORD $0x0000 // jae          LBB11_34, $509(%rip)

LBB11_35:
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x0006840f; WORD $0x0000 // je           LBB11_37, $6(%rip)

LBB11_36:
	WORD $0x8a41; BYTE $0x0a // movb         (%r10), %cl
	WORD $0x8841; BYTE $0x08 // movb         %cl, (%r8)

LBB11_37:
	WORD $0x014c; BYTE $0xe0     // addq         %r12, %rax
	WORD $0xf748; BYTE $0xd0     // notq         %rax
	WORD $0x014c; BYTE $0xd8     // addq         %r11, %rax
	WORD $0x8949; BYTE $0xc4     // movq         %rax, %r12
	LONG $0x000351e9; BYTE $0x00 // jmp          LBB11_82, $849(%rip)

LBB11_39:
	WORD $0x8949; BYTE $0xc5 // movq         %rax, %r13
	WORD $0x894d; BYTE $0xd6 // movq         %r10, %r14
	QUAD $0xfffffc331d6ffdc5 // vmovdqa      $-973(%rip), %ymm3  /* LCPI11_0+0(%rip) */
	QUAD $0xfffffc4b256ffdc5 // vmovdqa      $-949(%rip), %ymm4  /* LCPI11_1+0(%rip) */
	QUAD $0xfffffc632d6ffdc5 // vmovdqa      $-925(%rip), %ymm5  /* LCPI11_2+0(%rip) */
	QUAD $0xfffffc7b356ffdc5 // vmovdqa      $-901(%rip), %ymm6  /* LCPI11_3+0(%rip) */
	QUAD $0xfffffc933d6ff9c5 // vmovdqa      $-877(%rip), %xmm7  /* LCPI11_4+0(%rip) */
	QUAD $0xfffffc9b056f79c5 // vmovdqa      $-869(%rip), %xmm8  /* LCPI11_5+0(%rip) */
	QUAD $0xfffffca30d6f79c5 // vmovdqa      $-861(%rip), %xmm9  /* LCPI11_6+0(%rip) */
	QUAD $0xfffffcab156f79c5 // vmovdqa      $-853(%rip), %xmm10  /* LCPI11_7+0(%rip) */

LBB11_47:
	WORD $0xc984                   // testb        %cl, %cl
	LONG $0x0096840f; WORD $0x0000 // je           LBB11_48, $150(%rip)

LBB11_58:
	LONG $0x6f7ac1c4; WORD $0x2404             // vmovdqu      (%r12), %xmm0
	LONG $0xcf74f9c5                           // vpcmpeqb     %xmm7, %xmm0, %xmm1
	LONG $0xd074b9c5                           // vpcmpeqb     %xmm0, %xmm8, %xmm2
	LONG $0xc9ebe9c5                           // vpor         %xmm1, %xmm2, %xmm1
	LONG $0xd0dbb1c5                           // vpand        %xmm0, %xmm9, %xmm2
	LONG $0xd274a9c5                           // vpcmpeqb     %xmm2, %xmm10, %xmm2
	LONG $0xcaebf1c5                           // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xc1d7f9c5                           // vpmovmskb    %xmm1, %eax
	LONG $0x0100000d; BYTE $0x00               // orl          $65536, %eax
	WORD $0xbc0f; BYTE $0xc0                   // bsfl         %eax, %eax
	LONG $0x7ef9e1c4; BYTE $0xc1               // vmovq        %xmm0, %rcx
	WORD $0x3949; BYTE $0xc5                   // cmpq         %rax, %r13
	LONG $0x01b78d0f; WORD $0x0000             // jge          LBB11_59, $439(%rip)
	LONG $0x08fd8349                           // cmpq         $8, %r13
	LONG $0x20358d4c; WORD $0x0122; BYTE $0x00 // leaq         $74272(%rip), %r14  /* __HtmlQuoteTab+0(%rip) */
	LONG $0x01e0820f; WORD $0x0000             // jb           LBB11_70, $480(%rip)
	WORD $0x8949; BYTE $0x08                   // movq         %rcx, (%r8)
	LONG $0x24448d49; BYTE $0x08               // leaq         $8(%r12), %rax
	LONG $0x08c08349                           // addq         $8, %r8
	LONG $0xf87d8d49                           // leaq         $-8(%r13), %rdi
	LONG $0x04ff8348                           // cmpq         $4, %rdi
	LONG $0x01d6830f; WORD $0x0000             // jae          LBB11_73, $470(%rip)
	LONG $0x0001e2e9; BYTE $0x00               // jmp          LBB11_74, $482(%rip)

LBB11_41:
	WORD $0x8949; BYTE $0xc5       // movq         %rax, %r13
	WORD $0x894d; BYTE $0xd6       // movq         %r10, %r14
	QUAD $0xfffffb7d1d6ffdc5       // vmovdqa      $-1155(%rip), %ymm3  /* LCPI11_0+0(%rip) */
	QUAD $0xfffffb95256ffdc5       // vmovdqa      $-1131(%rip), %ymm4  /* LCPI11_1+0(%rip) */
	QUAD $0xfffffbad2d6ffdc5       // vmovdqa      $-1107(%rip), %ymm5  /* LCPI11_2+0(%rip) */
	QUAD $0xfffffbc5356ffdc5       // vmovdqa      $-1083(%rip), %ymm6  /* LCPI11_3+0(%rip) */
	WORD $0xc984                   // testb        %cl, %cl
	LONG $0xff6a850f; WORD $0xffff // jne          LBB11_58, $-150(%rip)

LBB11_48:
	WORD $0x854d; BYTE $0xf6                   // testq        %r14, %r14
	LONG $0x00708e0f; WORD $0x0000             // jle          LBB11_56, $112(%rip)
	WORD $0x854d; BYTE $0xed                   // testq        %r13, %r13
	LONG $0x00678e0f; WORD $0x0000             // jle          LBB11_56, $103(%rip)
	WORD $0xc931                               // xorl         %ecx, %ecx
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB11_51:
	LONG $0x3cb60f41; BYTE $0x0c           // movzbl       (%r12,%rcx), %edi
	LONG $0x3eff8348                       // cmpq         $62, %rdi
	LONG $0x0014870f; WORD $0x0000         // ja           LBB11_52, $20(%rip)
	QUAD $0x004000000000ba48; WORD $0x5000 // movabsq      $5764607797912141824, %rdx
	LONG $0xfaa30f48                       // btq          %rdi, %rdx
	LONG $0x0148820f; WORD $0x0000         // jb           LBB11_80, $328(%rip)

LBB11_52:
	LONG $0xe2ff8040               // cmpb         $-30, %dil
	LONG $0x013e840f; WORD $0x0000 // je           LBB11_80, $318(%rip)
	LONG $0x06148d49               // leaq         (%r14,%rax), %rdx
	LONG $0x083c8841               // movb         %dil, (%r8,%rcx)
	LONG $0xff788d48               // leaq         $-1(%rax), %rdi
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0x00138c0f; WORD $0x0000 // jl           LBB11_55, $19(%rip)
	WORD $0x014c; BYTE $0xe8       // addq         %r13, %rax
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	LONG $0x01f88348               // cmpq         $1, %rax
	WORD $0x8948; BYTE $0xf8       // movq         %rdi, %rax
	LONG $0xffaa8f0f; WORD $0xffff // jg           LBB11_51, $-86(%rip)

LBB11_55:
	WORD $0x2949; BYTE $0xfc // subq         %rdi, %r12
	WORD $0x0149; BYTE $0xfe // addq         %rdi, %r14

LBB11_56:
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x01e4840f; WORD $0x0000 // je           LBB11_57, $484(%rip)
	WORD $0xf749; BYTE $0xd4       // notq         %r12
	WORD $0x014d; BYTE $0xdc       // addq         %r11, %r12
	LONG $0x0001e0e9; BYTE $0x00   // jmp          LBB11_82, $480(%rip)

LBB11_15:
	WORD $0x894d; BYTE $0xe2       // movq         %r12, %r10
	WORD $0x894c; BYTE $0xe8       // movq         %r13, %rax
	LONG $0x08f88348               // cmpq         $8, %rax
	LONG $0x0012820f; WORD $0x0000 // jb           LBB11_19, $18(%rip)

LBB11_18:
	WORD $0x8b49; BYTE $0x0a // movq         (%r10), %rcx
	WORD $0x8949; BYTE $0x08 // movq         %rcx, (%r8)
	LONG $0x08c28349         // addq         $8, %r10
	LONG $0x08c08349         // addq         $8, %r8
	LONG $0xf8c08348         // addq         $-8, %rax

LBB11_19:
	LONG $0x04f88348               // cmpq         $4, %rax
	LONG $0x0062830f; WORD $0x0000 // jae          LBB11_20, $98(%rip)
	LONG $0x02f88348               // cmpq         $2, %rax
	LONG $0x0074830f; WORD $0x0000 // jae          LBB11_22, $116(%rip)

LBB11_23:
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0006840f; WORD $0x0000 // je           LBB11_25, $6(%rip)

LBB11_24:
	WORD $0x8a41; BYTE $0x02 // movb         (%r10), %al
	WORD $0x8841; BYTE $0x00 // movb         %al, (%r8)

LBB11_25:
	WORD $0x294d; BYTE $0xdc     // subq         %r11, %r12
	WORD $0x014d; BYTE $0xec     // addq         %r13, %r12
	LONG $0x000197e9; BYTE $0x00 // jmp          LBB11_83, $407(%rip)

LBB11_32:
	WORD $0x8b41; BYTE $0x0a       // movl         (%r10), %ecx
	WORD $0x8941; BYTE $0x08       // movl         %ecx, (%r8)
	LONG $0x04c28349               // addq         $4, %r10
	LONG $0x04c08349               // addq         $4, %r8
	LONG $0xfcc68349               // addq         $-4, %r14
	LONG $0x02fe8349               // cmpq         $2, %r14
	LONG $0xfe03820f; WORD $0xffff // jb           LBB11_35, $-509(%rip)

LBB11_34:
	LONG $0x0ab70f41               // movzwl       (%r10), %ecx
	LONG $0x08894166               // movw         %cx, (%r8)
	LONG $0x02c28349               // addq         $2, %r10
	LONG $0x02c08349               // addq         $2, %r8
	LONG $0xfec68349               // addq         $-2, %r14
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0xfdef850f; WORD $0xffff // jne          LBB11_36, $-529(%rip)
	LONG $0xfffdf0e9; BYTE $0xff   // jmp          LBB11_37, $-528(%rip)

LBB11_20:
	WORD $0x8b41; BYTE $0x0a       // movl         (%r10), %ecx
	WORD $0x8941; BYTE $0x08       // movl         %ecx, (%r8)
	LONG $0x04c28349               // addq         $4, %r10
	LONG $0x04c08349               // addq         $4, %r8
	LONG $0xfcc08348               // addq         $-4, %rax
	LONG $0x02f88348               // cmpq         $2, %rax
	LONG $0xff8c820f; WORD $0xffff // jb           LBB11_23, $-116(%rip)

LBB11_22:
	LONG $0x0ab70f41               // movzwl       (%r10), %ecx
	LONG $0x08894166               // movw         %cx, (%r8)
	LONG $0x02c28349               // addq         $2, %r10
	LONG $0x02c08349               // addq         $2, %r8
	LONG $0xfec08348               // addq         $-2, %rax
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xff78850f; WORD $0xffff // jne          LBB11_24, $-136(%rip)
	LONG $0xffff79e9; BYTE $0xff   // jmp          LBB11_25, $-135(%rip)

LBB11_59:
	WORD $0xf883; BYTE $0x08                   // cmpl         $8, %eax
	LONG $0x6a358d4c; WORD $0x0120; BYTE $0x00 // leaq         $73834(%rip), %r14  /* __HtmlQuoteTab+0(%rip) */
	LONG $0x0074820f; WORD $0x0000             // jb           LBB11_60, $116(%rip)
	WORD $0x8949; BYTE $0x08                   // movq         %rcx, (%r8)
	LONG $0x24548d4d; BYTE $0x08               // leaq         $8(%r12), %r10
	LONG $0x08c08349                           // addq         $8, %r8
	LONG $0xf8788d48                           // leaq         $-8(%rax), %rdi
	LONG $0x04ff8348                           // cmpq         $4, %rdi
	LONG $0x006a830f; WORD $0x0000             // jae          LBB11_63, $106(%rip)
	LONG $0x000077e9; BYTE $0x00               // jmp          LBB11_64, $119(%rip)

LBB11_80:
	WORD $0x294d; BYTE $0xdc     // subq         %r11, %r12
	WORD $0x2949; BYTE $0xc4     // subq         %rax, %r12
	LONG $0x0000dae9; BYTE $0x00 // jmp          LBB11_82, $218(%rip)

LBB11_70:
	WORD $0x894c; BYTE $0xe0       // movq         %r12, %rax
	WORD $0x894c; BYTE $0xef       // movq         %r13, %rdi
	LONG $0x04ff8348               // cmpq         $4, %rdi
	LONG $0x0011820f; WORD $0x0000 // jb           LBB11_74, $17(%rip)

LBB11_73:
	WORD $0x088b             // movl         (%rax), %ecx
	WORD $0x8941; BYTE $0x08 // movl         %ecx, (%r8)
	LONG $0x04c08348         // addq         $4, %rax
	LONG $0x04c08349         // addq         $4, %r8
	LONG $0xfcc78348         // addq         $-4, %rdi

LBB11_74:
	LONG $0x02ff8348               // cmpq         $2, %rdi
	LONG $0x0065830f; WORD $0x0000 // jae          LBB11_75, $101(%rip)
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0005840f; WORD $0x0000 // je           LBB11_78, $5(%rip)

LBB11_77:
	WORD $0x008a             // movb         (%rax), %al
	WORD $0x8841; BYTE $0x00 // movb         %al, (%r8)

LBB11_78:
	WORD $0x014d; BYTE $0xe5     // addq         %r12, %r13
	WORD $0xf749; BYTE $0xd5     // notq         %r13
	WORD $0x014d; BYTE $0xdd     // addq         %r11, %r13
	WORD $0x894d; BYTE $0xec     // movq         %r13, %r12
	LONG $0x000097e9; BYTE $0x00 // jmp          LBB11_83, $151(%rip)

LBB11_60:
	WORD $0x894d; BYTE $0xe2       // movq         %r12, %r10
	WORD $0x8948; BYTE $0xc7       // movq         %rax, %rdi
	LONG $0x04ff8348               // cmpq         $4, %rdi
	LONG $0x0012820f; WORD $0x0000 // jb           LBB11_64, $18(%rip)

LBB11_63:
	WORD $0x8b41; BYTE $0x0a // movl         (%r10), %ecx
	WORD $0x8941; BYTE $0x08 // movl         %ecx, (%r8)
	LONG $0x04c28349         // addq         $4, %r10
	LONG $0x04c08349         // addq         $4, %r8
	LONG $0xfcc78348         // addq         $-4, %rdi

LBB11_64:
	LONG $0x02ff8348               // cmpq         $2, %rdi
	LONG $0x003b830f; WORD $0x0000 // jae          LBB11_65, $59(%rip)
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0006840f; WORD $0x0000 // je           LBB11_68, $6(%rip)

LBB11_67:
	WORD $0x8a41; BYTE $0x0a // movb         (%r10), %cl
	WORD $0x8841; BYTE $0x08 // movb         %cl, (%r8)

LBB11_68:
	WORD $0x294d; BYTE $0xdc     // subq         %r11, %r12
	WORD $0x0149; BYTE $0xc4     // addq         %rax, %r12
	LONG $0x000051e9; BYTE $0x00 // jmp          LBB11_83, $81(%rip)

LBB11_75:
	WORD $0xb70f; BYTE $0x08       // movzwl       (%rax), %ecx
	LONG $0x08894166               // movw         %cx, (%r8)
	LONG $0x02c08348               // addq         $2, %rax
	LONG $0x02c08349               // addq         $2, %r8
	LONG $0xfec78348               // addq         $-2, %rdi
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0xff88850f; WORD $0xffff // jne          LBB11_77, $-120(%rip)
	LONG $0xffff88e9; BYTE $0xff   // jmp          LBB11_78, $-120(%rip)

LBB11_65:
	LONG $0x0ab70f41               // movzwl       (%r10), %ecx
	LONG $0x08894166               // movw         %cx, (%r8)
	LONG $0x02c28349               // addq         $2, %r10
	LONG $0x02c08349               // addq         $2, %r8
	LONG $0xfec78348               // addq         $-2, %rdi
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0xffb1850f; WORD $0xffff // jne          LBB11_67, $-79(%rip)
	LONG $0xffffb2e9; BYTE $0xff   // jmp          LBB11_68, $-78(%rip)

LBB11_57:
	WORD $0x294d; BYTE $0xdc // subq         %r11, %r12
	LONG $0x90909090         // .p2align 4, 0x90

LBB11_82:
	LONG $0x59358d4c; WORD $0x011f; BYTE $0x00 // leaq         $73561(%rip), %r14  /* __HtmlQuoteTab+0(%rip) */

LBB11_83:
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x011f880f; WORD $0x0000 // js           LBB11_84, $287(%rip)
	WORD $0x014d; BYTE $0xe3       // addq         %r12, %r11
	WORD $0x014d; BYTE $0xe7       // addq         %r12, %r15
	WORD $0x294c; BYTE $0xe6       // subq         %r12, %rsi
	LONG $0x01338e0f; WORD $0x0000 // jle          LBB11_86, $307(%rip)
	WORD $0x294d; BYTE $0xe1       // subq         %r12, %r9
	WORD $0x8a41; BYTE $0x0b       // movb         (%r11), %cl
	WORD $0xf980; BYTE $0xe2       // cmpb         $-30, %cl
	LONG $0x00b4840f; WORD $0x0000 // je           LBB11_89, $180(%rip)
	WORD $0x894c; BYTE $0xd8       // movq         %r11, %rax

LBB11_93:
	WORD $0xb60f; BYTE $0xf9               // movzbl       %cl, %edi
	LONG $0x04e7c148                       // shlq         $4, %rdi
	LONG $0x37148b4a                       // movq         (%rdi,%r14), %rdx
	WORD $0x6348; BYTE $0xda               // movslq       %edx, %rbx
	WORD $0x2949; BYTE $0xd9               // subq         %rbx, %r9
	LONG $0x01218c0f; WORD $0x0000         // jl           LBB11_94, $289(%rip)
	LONG $0x20e2c148                       // shlq         $32, %rdx
	LONG $0x37048d4e                       // leaq         (%rdi,%r14), %r8
	LONG $0x08c08349                       // addq         $8, %r8
	QUAD $0x000300000001b948; WORD $0x0000 // movabsq      $12884901889, %rcx
	WORD $0x3948; BYTE $0xca               // cmpq         %rcx, %rdx
	LONG $0x00298c0f; WORD $0x0000         // jl           LBB11_98, $41(%rip)
	WORD $0x8b41; BYTE $0x08               // movl         (%r8), %ecx
	WORD $0x8941; BYTE $0x0f               // movl         %ecx, (%r15)
	LONG $0x37048d4e                       // leaq         (%rdi,%r14), %r8
	LONG $0x0cc08349                       // addq         $12, %r8
	LONG $0x04578d4d                       // leaq         $4(%r15), %r10
	LONG $0xfc7b8d48                       // leaq         $-4(%rbx), %rdi
	LONG $0x02ff8348                       // cmpq         $2, %rdi
	LONG $0x00198d0f; WORD $0x0000         // jge          LBB11_101, $25(%rip)
	LONG $0x000028e9; BYTE $0x00           // jmp          LBB11_102, $40(%rip)
	LONG $0x90909090                       // .p2align 4, 0x90

LBB11_98:
	WORD $0x894d; BYTE $0xfa       // movq         %r15, %r10
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	LONG $0x02ff8348               // cmpq         $2, %rdi
	LONG $0x00148c0f; WORD $0x0000 // jl           LBB11_102, $20(%rip)

LBB11_101:
	LONG $0x10b70f41 // movzwl       (%r8), %edx
	LONG $0x12894166 // movw         %dx, (%r10)
	LONG $0x02c08349 // addq         $2, %r8
	LONG $0x02c28349 // addq         $2, %r10
	LONG $0xfec78348 // addq         $-2, %rdi

LBB11_102:
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x00068e0f; WORD $0x0000 // jle          LBB11_104, $6(%rip)
	WORD $0x8a41; BYTE $0x08       // movb         (%r8), %cl
	WORD $0x8841; BYTE $0x0a       // movb         %cl, (%r10)

LBB11_104:
	WORD $0x0149; BYTE $0xdf // addq         %rbx, %r15

LBB11_105:
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	LONG $0xff4e8d48               // leaq         $-1(%rsi), %rcx
	WORD $0x8949; BYTE $0xc3       // movq         %rax, %r11
	LONG $0x01fe8348               // cmpq         $1, %rsi
	WORD $0x8948; BYTE $0xce       // movq         %rcx, %rsi
	LONG $0xf943870f; WORD $0xffff // ja           LBB11_2, $-1725(%rip)
	LONG $0x000073e9; BYTE $0x00   // jmp          LBB11_106, $115(%rip)

LBB11_89:
	LONG $0x03fe8348               // cmpq         $3, %rsi
	LONG $0x0028820f; WORD $0x0000 // jb           LBB11_95, $40(%rip)
	LONG $0x017b8041; BYTE $0x80   // cmpb         $-128, $1(%r11)
	LONG $0x001d850f; WORD $0x0000 // jne          LBB11_95, $29(%rip)
	LONG $0x024b8a41               // movb         $2(%r11), %cl
	WORD $0xc889                   // movl         %ecx, %eax
	WORD $0xfe24                   // andb         $-2, %al
	WORD $0xa83c                   // cmpb         $-88, %al
	LONG $0x000d850f; WORD $0x0000 // jne          LBB11_95, $13(%rip)
	LONG $0x02438d49               // leaq         $2(%r11), %rax
	LONG $0xfec68348               // addq         $-2, %rsi
	LONG $0xffff1de9; BYTE $0xff   // jmp          LBB11_93, $-227(%rip)

LBB11_95:
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x00578e0f; WORD $0x0000 // jle          LBB11_3, $87(%rip)
	LONG $0xe207c641               // movb         $-30, (%r15)
	WORD $0xff49; BYTE $0xc7       // incq         %r15
	WORD $0xff49; BYTE $0xc9       // decq         %r9
	WORD $0x894c; BYTE $0xd8       // movq         %r11, %rax
	LONG $0xffff97e9; BYTE $0xff   // jmp          LBB11_105, $-105(%rip)

LBB11_84:
	LONG $0xc84d8b48             // movq         $-56(%rbp), %rcx
	WORD $0x014c; BYTE $0xe1     // addq         %r12, %rcx
	WORD $0xf748; BYTE $0xd1     // notq         %rcx
	WORD $0x014c; BYTE $0xf9     // addq         %r15, %rcx
	LONG $0xc0458b48             // movq         $-64(%rbp), %rax
	WORD $0x8948; BYTE $0x08     // movq         %rcx, (%rax)
	LONG $0xd0458b48             // movq         $-48(%rbp), %rax
	WORD $0x294c; BYTE $0xd8     // subq         %r11, %rax
	WORD $0x014c; BYTE $0xe0     // addq         %r12, %rax
	LONG $0x00002ce9; BYTE $0x00 // jmp          LBB11_107, $44(%rip)

LBB11_86:
	WORD $0x894c; BYTE $0xd8 // movq         %r11, %rax

LBB11_106:
	LONG $0xc87d2b4c             // subq         $-56(%rbp), %r15
	LONG $0xc04d8b48             // movq         $-64(%rbp), %rcx
	WORD $0x894c; BYTE $0x39     // movq         %r15, (%rcx)
	LONG $0xd0452b48             // subq         $-48(%rbp), %rax
	LONG $0x000015e9; BYTE $0x00 // jmp          LBB11_107, $21(%rip)

LBB11_94:
	LONG $0xc87d2b4c         // subq         $-56(%rbp), %r15
	LONG $0xc0458b48         // movq         $-64(%rbp), %rax
	WORD $0x894c; BYTE $0x38 // movq         %r15, (%rax)

LBB11_3:
	WORD $0xf749; BYTE $0xd3 // notq         %r11
	LONG $0xd05d034c         // addq         $-48(%rbp), %r11
	WORD $0x894c; BYTE $0xd8 // movq         %r11, %rax

LBB11_107:
	LONG $0x18c48348         // addq         $24, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

	// .p2align 4, 0x90
_atof_eisel_lemire64:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	BYTE $0x53                     // pushq        %rbx
	LONG $0xfea4868d; WORD $0xffff // leal         $-348(%rsi), %eax
	LONG $0xfffd483d; BYTE $0xff   // cmpl         $-696, %eax
	LONG $0x0112820f; WORD $0x0000 // jb           LBB12_1, $274(%rip)
	WORD $0x8949; BYTE $0xc8       // movq         %rcx, %r8
	WORD $0x8941; BYTE $0xd1       // movl         %edx, %r9d
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x000d840f; WORD $0x0000 // je           LBB12_4, $13(%rip)
	LONG $0xd7bd0f4c               // bsrq         %rdi, %r10
	LONG $0x3ff28349               // xorq         $63, %r10
	LONG $0x000006e9; BYTE $0x00   // jmp          LBB12_5, $6(%rip)

LBB12_4:
	LONG $0x0040ba41; WORD $0x0000 // movl         $64, %r10d

LBB12_5:
	WORD $0x8944; BYTE $0xd1                   // movl         %r10d, %ecx
	WORD $0xd348; BYTE $0xe7                   // shlq         %cl, %rdi
	LONG $0x015c8e8d; WORD $0x0000             // leal         $348(%rsi), %ecx
	LONG $0x04e1c148                           // shlq         $4, %rcx
	LONG $0xed3d8d4c; WORD $0x00a4; BYTE $0x00 // leaq         $42221(%rip), %r15  /* _POW10_M128_TAB+0(%rip) */
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	LONG $0x3964f74a; BYTE $0x08               // mulq         $8(%rcx,%r15)
	WORD $0x8949; BYTE $0xc3                   // movq         %rax, %r11
	WORD $0x8949; BYTE $0xd6                   // movq         %rdx, %r14
	LONG $0x01ffe281; WORD $0x0000             // andl         $511, %edx
	LONG $0xfffa8148; WORD $0x0001; BYTE $0x00 // cmpq         $511, %rdx
	LONG $0x0046850f; WORD $0x0000             // jne          LBB12_11, $70(%rip)
	WORD $0x8948; BYTE $0xfb                   // movq         %rdi, %rbx
	WORD $0xf748; BYTE $0xd3                   // notq         %rbx
	WORD $0x3949; BYTE $0xdb                   // cmpq         %rbx, %r11
	LONG $0x0037860f; WORD $0x0000             // jbe          LBB12_11, $55(%rip)
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	LONG $0x3924f74a                           // mulq         (%rcx,%r15)
	WORD $0x0149; BYTE $0xd3                   // addq         %rdx, %r11
	LONG $0x00d68349                           // adcq         $0, %r14
	WORD $0x8944; BYTE $0xf2                   // movl         %r14d, %edx
	LONG $0x01ffe281; WORD $0x0000             // andl         $511, %edx
	LONG $0xfffa8148; WORD $0x0001; BYTE $0x00 // cmpq         $511, %rdx
	LONG $0x0013850f; WORD $0x0000             // jne          LBB12_11, $19(%rip)
	LONG $0xfffb8349                           // cmpq         $-1, %r11
	LONG $0x0009850f; WORD $0x0000             // jne          LBB12_11, $9(%rip)
	WORD $0x3948; BYTE $0xd8                   // cmpq         %rbx, %rax
	LONG $0x0072870f; WORD $0x0000             // ja           LBB12_1, $114(%rip)

LBB12_11:
	WORD $0x894c; BYTE $0xf0       // movq         %r14, %rax
	LONG $0x3fe8c148               // shrq         $63, %rax
	WORD $0x488d; BYTE $0x09       // leal         $9(%rax), %ecx
	WORD $0xd349; BYTE $0xee       // shrq         %cl, %r14
	WORD $0x854d; BYTE $0xdb       // testq        %r11, %r11
	LONG $0x0018850f; WORD $0x0000 // jne          LBB12_15, $24(%rip)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x000f850f; WORD $0x0000 // jne          LBB12_15, $15(%rip)
	WORD $0x8944; BYTE $0xf1       // movl         %r14d, %ecx
	WORD $0xe183; BYTE $0x03       // andl         $3, %ecx
	WORD $0xf983; BYTE $0x01       // cmpl         $1, %ecx
	LONG $0x0044840f; WORD $0x0000 // je           LBB12_1, $68(%rip)

LBB12_15:
	LONG $0x526ace69; WORD $0x0003             // imull        $217706, %esi, %ecx
	WORD $0xf9c1; BYTE $0x10                   // sarl         $16, %ecx
	LONG $0x043fc181; WORD $0x0000             // addl         $1087, %ecx
	WORD $0x6348; BYTE $0xf1                   // movslq       %ecx, %rsi
	WORD $0x294c; BYTE $0xd6                   // subq         %r10, %rsi
	WORD $0x8944; BYTE $0xf2                   // movl         %r14d, %edx
	WORD $0xe283; BYTE $0x01                   // andl         $1, %edx
	WORD $0x014c; BYTE $0xf2                   // addq         %r14, %rdx
	WORD $0x8948; BYTE $0xd1                   // movq         %rdx, %rcx
	LONG $0x36e9c148                           // shrq         $54, %rcx
	WORD $0x0148; BYTE $0xf0                   // addq         %rsi, %rax
	LONG $0x01f98348                           // cmpq         $1, %rcx
	LONG $0x00d88348                           // sbbq         $0, %rax
	LONG $0x01b08d48; WORD $0xfff8; BYTE $0xff // leaq         $-2047(%rax), %rsi
	LONG $0x02fe8148; WORD $0xfff8; BYTE $0xff // cmpq         $-2046, %rsi
	LONG $0x0009830f; WORD $0x0000             // jae          LBB12_17, $9(%rip)

LBB12_1:
	WORD $0xc031 // xorl         %eax, %eax

LBB12_18:
	BYTE $0x5b   // popq         %rbx
	WORD $0x5e41 // popq         %r14
	WORD $0x5f41 // popq         %r15
	BYTE $0x5d   // popq         %rbp
	BYTE $0xc3   // retq

LBB12_17:
	LONG $0x01f98348                           // cmpq         $1, %rcx
	WORD $0x02b1                               // movb         $2, %cl
	WORD $0xd980; BYTE $0x00                   // sbbb         $0, %cl
	WORD $0xd348; BYTE $0xea                   // shrq         %cl, %rdx
	LONG $0x34e0c148                           // shlq         $52, %rax
	QUAD $0xffffffffffffb948; WORD $0x000f     // movabsq      $4503599627370495, %rcx
	WORD $0x2148; BYTE $0xd1                   // andq         %rdx, %rcx
	WORD $0x0948; BYTE $0xc1                   // orq          %rax, %rcx
	QUAD $0x000000000000b848; WORD $0x8000     // movabsq      $-9223372036854775808, %rax
	WORD $0x0948; BYTE $0xc8                   // orq          %rcx, %rax
	LONG $0xfff98341                           // cmpl         $-1, %r9d
	LONG $0xc1450f48                           // cmovneq      %rcx, %rax
	WORD $0x8949; BYTE $0x00                   // movq         %rax, (%r8)
	WORD $0x01b0                               // movb         $1, %al
	LONG $0xffffbae9; BYTE $0xff               // jmp          LBB12_18, $-70(%rip)
	QUAD $0x0000000000000000; LONG $0x00000000 // .p2align 5, 0x00

LCPI13_0:
	QUAD $0x0000000000000000 // .space 8, '\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000001 // .quad 1
	QUAD $0x0000000000000001 // .quad 1
	QUAD $0x0000000000000001 // .quad 1

	// .p2align 3, 0x00
LCPI13_1:
	QUAD $0x0000000000000001 // .quad 1

LCPI13_2:
	QUAD $0x0000000000002710 // .quad 10000

LCPI13_3:
	QUAD $0x000000000000000a // .quad 10
	QUAD $0x9090909090909090 // .p2align 4, 0x90

_decimal_to_f64:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x5741                           // pushq        %r15
	WORD $0x5641                           // pushq        %r14
	WORD $0x5541                           // pushq        %r13
	WORD $0x5441                           // pushq        %r12
	BYTE $0x53                             // pushq        %rbx
	BYTE $0x50                             // pushq        %rax
	WORD $0x8948; BYTE $0xf3               // movq         %rsi, %rbx
	WORD $0x8949; BYTE $0xff               // movq         %rdi, %r15
	QUAD $0x000000000000b948; WORD $0x0010 // movabsq      $4503599627370496, %rcx
	LONG $0x00107f83                       // cmpl         $0, $16(%rdi)
	LONG $0x002f840f; WORD $0x0000         // je           LBB13_4, $47(%rip)
	QUAD $0x000000000000be49; WORD $0x7ff0 // movabsq      $9218868437227405312, %r14
	LONG $0x14478b41                       // movl         $20(%r15), %eax
	WORD $0x3145; BYTE $0xe4               // xorl         %r12d, %r12d
	LONG $0x0001363d; BYTE $0x00           // cmpl         $310, %eax
	LONG $0x05768f0f; WORD $0x0000         // jg           LBB13_70, $1398(%rip)
	LONG $0xfffeb63d; BYTE $0xff           // cmpl         $-330, %eax
	LONG $0x00138d0f; WORD $0x0000         // jge          LBB13_5, $19(%rip)
	WORD $0x3145; BYTE $0xf6               // xorl         %r14d, %r14d
	LONG $0x000563e9; BYTE $0x00           // jmp          LBB13_70, $1379(%rip)

LBB13_4:
	WORD $0x3145; BYTE $0xf6     // xorl         %r14d, %r14d
	WORD $0x3145; BYTE $0xe4     // xorl         %r12d, %r12d
	LONG $0x000558e9; BYTE $0x00 // jmp          LBB13_70, $1368(%rip)

LBB13_5:
	LONG $0xd05d8948                           // movq         %rbx, $-48(%rbp)
	LONG $0xa3358d4c; WORD $0x00ce; BYTE $0x00 // leaq         $52899(%rip), %r14  /* _POW_TAB+0(%rip) */
	WORD $0xc085                               // testl        %eax, %eax
	LONG $0x00bc8e0f; WORD $0x0000             // jle          LBB13_15, $188(%rip)
	WORD $0x3145; BYTE $0xe4                   // xorl         %r12d, %r12d
	LONG $0x000031e9; BYTE $0x00               // jmp          LBB13_10, $49(%rip)
	WORD $0x9090; BYTE $0x90                   // .p2align 4, 0x90

LBB13_7:
	LONG $0xffffe5be; BYTE $0xff   // movl         $-27, %esi
	LONG $0x00001bbb; BYTE $0x00   // movl         $27, %ebx
	LONG $0x107f8341; BYTE $0x00   // cmpl         $0, $16(%r15)
	LONG $0x000a840f; WORD $0x0000 // je           LBB13_9, $10(%rip)

LBB13_8:
	WORD $0xdef7                 // negl         %esi
	WORD $0x894c; BYTE $0xff     // movq         %r15, %rdi
	LONG $0x00a121e8; BYTE $0x00 // callq        _right_shift, $41249(%rip)

LBB13_9:
	WORD $0x0141; BYTE $0xdc       // addl         %ebx, %r12d
	LONG $0x14478b41               // movl         $20(%r15), %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x00838e0f; WORD $0x0000 // jle          LBB13_15, $131(%rip)

LBB13_10:
	WORD $0xf883; BYTE $0x08                           // cmpl         $8, %eax
	LONG $0xffc9870f; WORD $0xffff                     // ja           LBB13_7, $-55(%rip)
	WORD $0xc089                                       // movl         %eax, %eax
	LONG $0x861c8b41                                   // movl         (%r14,%rax,4), %ebx
	LONG $0x107f8341; BYTE $0x00                       // cmpl         $0, $16(%r15)
	LONG $0xffd7840f; WORD $0xffff                     // je           LBB13_9, $-41(%rip)
	WORD $0xde89                                       // movl         %ebx, %esi
	WORD $0xdef7                                       // negl         %esi
	WORD $0xfe83; BYTE $0xc3                           // cmpl         $-61, %esi
	LONG $0xffc0870f; WORD $0xffff                     // ja           LBB13_8, $-64(%rip)
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB13_13:
	WORD $0x8941; BYTE $0xf5       // movl         %esi, %r13d
	WORD $0x894c; BYTE $0xff       // movq         %r15, %rdi
	LONG $0x00003cbe; BYTE $0x00   // movl         $60, %esi
	LONG $0x00a0d0e8; BYTE $0x00   // callq        _right_shift, $41168(%rip)
	LONG $0x3c758d41               // leal         $60(%r13), %esi
	LONG $0x88fd8341               // cmpl         $-120, %r13d
	LONG $0xffe2820f; WORD $0xffff // jb           LBB13_13, $-30(%rip)
	LONG $0xffff92e9; BYTE $0xff   // jmp          LBB13_8, $-110(%rip)

LBB13_19:
	LONG $0x00001bbb; BYTE $0x00                           // movl         $27, %ebx
	LONG $0x107f8341; BYTE $0x00                           // cmpl         $0, $16(%r15)
	LONG $0x001b840f; WORD $0x0000                         // je           LBB13_14, $27(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB13_21:
	WORD $0x894c; BYTE $0xff     // movq         %r15, %rdi
	WORD $0xde89                 // movl         %ebx, %esi
	LONG $0x009e76e8; BYTE $0x00 // callq        _left_shift, $40566(%rip)
	LONG $0x14478b41             // movl         $20(%r15), %eax

LBB13_14:
	WORD $0x2941; BYTE $0xdc // subl         %ebx, %r12d

LBB13_15:
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0017880f; WORD $0x0000 // js           LBB13_18, $23(%rip)
	LONG $0x0032850f; WORD $0x0000 // jne          LBB13_22, $50(%rip)
	WORD $0x8b49; BYTE $0x0f       // movq         (%r15), %rcx
	WORD $0x3980; BYTE $0x35       // cmpb         $53, (%rcx)
	LONG $0x000e8c0f; WORD $0x0000 // jl           LBB13_20, $14(%rip)
	LONG $0x000021e9; BYTE $0x00   // jmp          LBB13_22, $33(%rip)

	// .p2align 4, 0x90
LBB13_18:
	WORD $0xf883; BYTE $0xf8       // cmpl         $-8, %eax
	LONG $0xffaa820f; WORD $0xffff // jb           LBB13_19, $-86(%rip)

LBB13_20:
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xd9f7                   // negl         %ecx
	LONG $0x8e1c8b41               // movl         (%r14,%rcx,4), %ebx
	LONG $0x107f8341; BYTE $0x00   // cmpl         $0, $16(%r15)
	LONG $0xffb4850f; WORD $0xffff // jne          LBB13_21, $-76(%rip)
	LONG $0xffffbde9; BYTE $0xff   // jmp          LBB13_14, $-67(%rip)

LBB13_22:
	LONG $0x02fc8141; WORD $0xfffc; BYTE $0xff                           // cmpl         $-1022, %r12d
	LONG $0x00568f0f; WORD $0x0000                                       // jg           LBB13_28, $86(%rip)
	LONG $0x107f8341; BYTE $0x00                                         // cmpl         $0, $16(%r15)
	LONG $0xd05d8b48                                                     // movq         $-48(%rbp), %rbx
	LONG $0x0063840f; WORD $0x0000                                       // je           LBB13_30, $99(%rip)
	LONG $0xc6fc8141; WORD $0xfffb; BYTE $0xff                           // cmpl         $-1082, %r12d
	LONG $0x0061870f; WORD $0x0000                                       // ja           LBB13_31, $97(%rip)
	LONG $0xc1c48141; WORD $0x0003; BYTE $0x00                           // addl         $961, %r12d
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB13_26:
	WORD $0x894c; BYTE $0xff       // movq         %r15, %rdi
	LONG $0x00003cbe; BYTE $0x00   // movl         $60, %esi
	LONG $0x00a003e8; BYTE $0x00   // callq        _right_shift, $40963(%rip)
	LONG $0x3cc48341               // addl         $60, %r12d
	LONG $0x88fc8341               // cmpl         $-120, %r12d
	LONG $0xffe5820f; WORD $0xffff // jb           LBB13_26, $-27(%rip)
	LONG $0x3cc48341               // addl         $60, %r12d
	LONG $0x00002ee9; BYTE $0x00   // jmp          LBB13_32, $46(%rip)

LBB13_28:
	LONG $0x00fc8141; WORD $0x0004; BYTE $0x00 // cmpl         $1024, %r12d
	LONG $0xd05d8b48                           // movq         $-48(%rbp), %rbx
	LONG $0x03838f0f; WORD $0x0000             // jg           LBB13_67, $899(%rip)
	WORD $0xff41; BYTE $0xcc                   // decl         %r12d
	WORD $0x8945; BYTE $0xe6                   // movl         %r12d, %r14d
	LONG $0x000026e9; BYTE $0x00               // jmp          LBB13_33, $38(%rip)

LBB13_30:
	LONG $0xfc02be41; WORD $0xffff // movl         $-1022, %r14d
	LONG $0x000033e9; BYTE $0x00   // jmp          LBB13_35, $51(%rip)

LBB13_31:
	LONG $0xfdc48141; WORD $0x0003; BYTE $0x00 // addl         $1021, %r12d

LBB13_32:
	WORD $0xf741; BYTE $0xdc       // negl         %r12d
	WORD $0x894c; BYTE $0xff       // movq         %r15, %rdi
	WORD $0x8944; BYTE $0xe6       // movl         %r12d, %esi
	LONG $0x009fb0e8; BYTE $0x00   // callq        _right_shift, $40880(%rip)
	LONG $0xfc02be41; WORD $0xffff // movl         $-1022, %r14d

LBB13_33:
	LONG $0x107f8341; BYTE $0x00   // cmpl         $0, $16(%r15)
	LONG $0x000d840f; WORD $0x0000 // je           LBB13_35, $13(%rip)
	WORD $0x894c; BYTE $0xff       // movq         %r15, %rdi
	LONG $0x000035be; BYTE $0x00   // movl         $53, %esi
	LONG $0x009d72e8; BYTE $0x00   // callq        _left_shift, $40306(%rip)

LBB13_35:
	LONG $0x14478b41                           // movl         $20(%r15), %eax
	LONG $0xffc4c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r12
	WORD $0xf883; BYTE $0x14                   // cmpl         $20, %eax
	LONG $0x034f8f0f; WORD $0x0000             // jg           LBB13_69, $847(%rip)
	WORD $0xc085                               // testl        %eax, %eax
	LONG $0x00578e0f; WORD $0x0000             // jle          LBB13_41, $87(%rip)
	LONG $0x10578b41                           // movl         $16(%r15), %edx
	WORD $0xf631                               // xorl         %esi, %esi
	WORD $0xd285                               // testl        %edx, %edx
	WORD $0x4e0f; BYTE $0xd6                   // cmovlel      %esi, %edx
	LONG $0xff488d4c                           // leaq         $-1(%rax), %r9
	WORD $0x3949; BYTE $0xd1                   // cmpq         %rdx, %r9
	LONG $0xca430f4c                           // cmovaeq      %rdx, %r9
	LONG $0x01418d4d                           // leaq         $1(%r9), %r8
	WORD $0x3145; BYTE $0xe4                   // xorl         %r12d, %r12d
	QUAD $0x9090909090909090; BYTE $0x90       // .p2align 4, 0x90

LBB13_38:
	WORD $0x3948; BYTE $0xf2       // cmpq         %rsi, %rdx
	LONG $0x002e840f; WORD $0x0000 // je           LBB13_42, $46(%rip)
	LONG $0xa43c8d4b               // leaq         (%r12,%r12,4), %rdi
	WORD $0x8b49; BYTE $0x0f       // movq         (%r15), %rcx
	LONG $0x0cbe0f48; BYTE $0x31   // movsbq       (%rcx,%rsi), %rcx
	LONG $0x79248d4c               // leaq         (%rcx,%rdi,2), %r12
	LONG $0xd0c48349               // addq         $-48, %r12
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x3948; BYTE $0xf0       // cmpq         %rsi, %rax
	LONG $0xffd7850f; WORD $0xffff // jne          LBB13_38, $-41(%rip)
	WORD $0x894d; BYTE $0xc1       // movq         %r8, %r9
	LONG $0x000006e9; BYTE $0x00   // jmp          LBB13_42, $6(%rip)

LBB13_41:
	WORD $0x3145; BYTE $0xc9 // xorl         %r9d, %r9d
	WORD $0x3145; BYTE $0xe4 // xorl         %r12d, %r12d

LBB13_42:
	WORD $0x3944; BYTE $0xc8               // cmpl         %r9d, %eax
	LONG $0x023f8e0f; WORD $0x0000         // jle          LBB13_55, $575(%rip)
	WORD $0xc289                           // movl         %eax, %edx
	WORD $0x2944; BYTE $0xca               // subl         %r9d, %edx
	WORD $0xfa83; BYTE $0x10               // cmpl         $16, %edx
	LONG $0x021d820f; WORD $0x0000         // jb           LBB13_53, $541(%rip)
	WORD $0x8941; BYTE $0xd0               // movl         %edx, %r8d
	QUAD $0xfffffcf7056ff9c5               // vmovdqa      $-777(%rip), %xmm0  /* LCPI13_0+0(%rip) */
	LONG $0x22f9c3c4; WORD $0x00c4         // vpinsrq      $0, %r12, %xmm0, %xmm0
	LONG $0xf0e08341                       // andl         $-16, %r8d
	QUAD $0xfffce305027de3c4; WORD $0xf0ff // vpblendd     $240, $-797(%rip), %ymm0, %ymm0  /* LCPI13_0+0(%rip) */
	LONG $0xf0488d41                       // leal         $-16(%r8), %ecx
	WORD $0xcf89                           // movl         %ecx, %edi
	WORD $0xefc1; BYTE $0x04               // shrl         $4, %edi
	WORD $0xc7ff                           // incl         %edi
	WORD $0xfe89                           // movl         %edi, %esi
	WORD $0xe683; BYTE $0x03               // andl         $3, %esi
	WORD $0xf983; BYTE $0x30               // cmpl         $48, %ecx
	LONG $0x0016830f; WORD $0x0000         // jae          LBB13_46, $22(%rip)
	QUAD $0xfffce115597de2c4; BYTE $0xff   // vpbroadcastq $-799(%rip), %ymm2  /* LCPI13_1+0(%rip) */
	LONG $0xda6ffdc5                       // vmovdqa      %ymm2, %ymm3
	LONG $0xca6ffdc5                       // vmovdqa      %ymm2, %ymm1
	LONG $0x000085e9; BYTE $0x00           // jmp          LBB13_48, $133(%rip)

LBB13_46:
	WORD $0xe783; BYTE $0xfc                   // andl         $-4, %edi
	QUAD $0xfffcc815597de2c4; BYTE $0xff       // vpbroadcastq $-824(%rip), %ymm2  /* LCPI13_1+0(%rip) */
	QUAD $0xfffcc725597de2c4; BYTE $0xff       // vpbroadcastq $-825(%rip), %ymm4  /* LCPI13_2+0(%rip) */
	LONG $0xda6ffdc5                           // vmovdqa      %ymm2, %ymm3
	LONG $0xca6ffdc5                           // vmovdqa      %ymm2, %ymm1
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB13_47:
	LONG $0xecf4fdc5               // vpmuludq     %ymm4, %ymm0, %ymm5
	LONG $0xd073fdc5; BYTE $0x20   // vpsrlq       $32, %ymm0, %ymm0
	LONG $0xc4f4fdc5               // vpmuludq     %ymm4, %ymm0, %ymm0
	LONG $0xf073fdc5; BYTE $0x20   // vpsllq       $32, %ymm0, %ymm0
	LONG $0xc0d4d5c5               // vpaddq       %ymm0, %ymm5, %ymm0
	LONG $0xecf4edc5               // vpmuludq     %ymm4, %ymm2, %ymm5
	LONG $0xd273edc5; BYTE $0x20   // vpsrlq       $32, %ymm2, %ymm2
	LONG $0xd4f4edc5               // vpmuludq     %ymm4, %ymm2, %ymm2
	LONG $0xf273edc5; BYTE $0x20   // vpsllq       $32, %ymm2, %ymm2
	LONG $0xd2d4d5c5               // vpaddq       %ymm2, %ymm5, %ymm2
	LONG $0xecf4e5c5               // vpmuludq     %ymm4, %ymm3, %ymm5
	LONG $0xd373e5c5; BYTE $0x20   // vpsrlq       $32, %ymm3, %ymm3
	LONG $0xdcf4e5c5               // vpmuludq     %ymm4, %ymm3, %ymm3
	LONG $0xf373e5c5; BYTE $0x20   // vpsllq       $32, %ymm3, %ymm3
	LONG $0xdbd4d5c5               // vpaddq       %ymm3, %ymm5, %ymm3
	LONG $0xecf4f5c5               // vpmuludq     %ymm4, %ymm1, %ymm5
	LONG $0xd173f5c5; BYTE $0x20   // vpsrlq       $32, %ymm1, %ymm1
	LONG $0xccf4f5c5               // vpmuludq     %ymm4, %ymm1, %ymm1
	LONG $0xf173f5c5; BYTE $0x20   // vpsllq       $32, %ymm1, %ymm1
	LONG $0xc9d4d5c5               // vpaddq       %ymm1, %ymm5, %ymm1
	WORD $0xc783; BYTE $0xfc       // addl         $-4, %edi
	LONG $0xff9f850f; WORD $0xffff // jne          LBB13_47, $-97(%rip)

LBB13_48:
	WORD $0xf685                                             // testl        %esi, %esi
	LONG $0x0077840f; WORD $0x0000                           // je           LBB13_51, $119(%rip)
	QUAD $0xfffc4e25597de2c4; BYTE $0xff                     // vpbroadcastq $-946(%rip), %ymm4  /* LCPI13_3+0(%rip) */
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB13_50:
	LONG $0xecf4fdc5               // vpmuludq     %ymm4, %ymm0, %ymm5
	LONG $0xd073fdc5; BYTE $0x20   // vpsrlq       $32, %ymm0, %ymm0
	LONG $0xc4f4fdc5               // vpmuludq     %ymm4, %ymm0, %ymm0
	LONG $0xf073fdc5; BYTE $0x20   // vpsllq       $32, %ymm0, %ymm0
	LONG $0xc0d4d5c5               // vpaddq       %ymm0, %ymm5, %ymm0
	LONG $0xecf4edc5               // vpmuludq     %ymm4, %ymm2, %ymm5
	LONG $0xd273edc5; BYTE $0x20   // vpsrlq       $32, %ymm2, %ymm2
	LONG $0xd4f4edc5               // vpmuludq     %ymm4, %ymm2, %ymm2
	LONG $0xf273edc5; BYTE $0x20   // vpsllq       $32, %ymm2, %ymm2
	LONG $0xd2d4d5c5               // vpaddq       %ymm2, %ymm5, %ymm2
	LONG $0xecf4e5c5               // vpmuludq     %ymm4, %ymm3, %ymm5
	LONG $0xd373e5c5; BYTE $0x20   // vpsrlq       $32, %ymm3, %ymm3
	LONG $0xdcf4e5c5               // vpmuludq     %ymm4, %ymm3, %ymm3
	LONG $0xf373e5c5; BYTE $0x20   // vpsllq       $32, %ymm3, %ymm3
	LONG $0xdbd4d5c5               // vpaddq       %ymm3, %ymm5, %ymm3
	LONG $0xecf4f5c5               // vpmuludq     %ymm4, %ymm1, %ymm5
	LONG $0xd173f5c5; BYTE $0x20   // vpsrlq       $32, %ymm1, %ymm1
	LONG $0xccf4f5c5               // vpmuludq     %ymm4, %ymm1, %ymm1
	LONG $0xf173f5c5; BYTE $0x20   // vpsllq       $32, %ymm1, %ymm1
	LONG $0xc9d4d5c5               // vpaddq       %ymm1, %ymm5, %ymm1
	WORD $0xceff                   // decl         %esi
	LONG $0xffa0850f; WORD $0xffff // jne          LBB13_50, $-96(%rip)

LBB13_51:
	LONG $0xd273ddc5; BYTE $0x20   // vpsrlq       $32, %ymm2, %ymm4
	LONG $0xe0f4ddc5               // vpmuludq     %ymm0, %ymm4, %ymm4
	LONG $0xd073d5c5; BYTE $0x20   // vpsrlq       $32, %ymm0, %ymm5
	LONG $0xedf4edc5               // vpmuludq     %ymm5, %ymm2, %ymm5
	LONG $0xe4d4d5c5               // vpaddq       %ymm4, %ymm5, %ymm4
	LONG $0xf473ddc5; BYTE $0x20   // vpsllq       $32, %ymm4, %ymm4
	LONG $0xc0f4edc5               // vpmuludq     %ymm0, %ymm2, %ymm0
	LONG $0xc4d4fdc5               // vpaddq       %ymm4, %ymm0, %ymm0
	LONG $0xd373edc5; BYTE $0x20   // vpsrlq       $32, %ymm3, %ymm2
	LONG $0xd0f4edc5               // vpmuludq     %ymm0, %ymm2, %ymm2
	LONG $0xd073ddc5; BYTE $0x20   // vpsrlq       $32, %ymm0, %ymm4
	LONG $0xe4f4e5c5               // vpmuludq     %ymm4, %ymm3, %ymm4
	LONG $0xd2d4ddc5               // vpaddq       %ymm2, %ymm4, %ymm2
	LONG $0xf273edc5; BYTE $0x20   // vpsllq       $32, %ymm2, %ymm2
	LONG $0xc0f4e5c5               // vpmuludq     %ymm0, %ymm3, %ymm0
	LONG $0xc2d4fdc5               // vpaddq       %ymm2, %ymm0, %ymm0
	LONG $0xd173edc5; BYTE $0x20   // vpsrlq       $32, %ymm1, %ymm2
	LONG $0xd0f4edc5               // vpmuludq     %ymm0, %ymm2, %ymm2
	LONG $0xd073e5c5; BYTE $0x20   // vpsrlq       $32, %ymm0, %ymm3
	LONG $0xdbf4f5c5               // vpmuludq     %ymm3, %ymm1, %ymm3
	LONG $0xd2d4e5c5               // vpaddq       %ymm2, %ymm3, %ymm2
	LONG $0xf273edc5; BYTE $0x20   // vpsllq       $32, %ymm2, %ymm2
	LONG $0xc0f4f5c5               // vpmuludq     %ymm0, %ymm1, %ymm0
	LONG $0xc2d4fdc5               // vpaddq       %ymm2, %ymm0, %ymm0
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128 $1, %ymm0, %xmm1
	LONG $0xd073e9c5; BYTE $0x20   // vpsrlq       $32, %xmm0, %xmm2
	LONG $0xd1f4e9c5               // vpmuludq     %xmm1, %xmm2, %xmm2
	LONG $0xd173e1c5; BYTE $0x20   // vpsrlq       $32, %xmm1, %xmm3
	LONG $0xdbf4f9c5               // vpmuludq     %xmm3, %xmm0, %xmm3
	LONG $0xd2d4e1c5               // vpaddq       %xmm2, %xmm3, %xmm2
	LONG $0xf273e9c5; BYTE $0x20   // vpsllq       $32, %xmm2, %xmm2
	LONG $0xc1f4f9c5               // vpmuludq     %xmm1, %xmm0, %xmm0
	LONG $0xc2d4f9c5               // vpaddq       %xmm2, %xmm0, %xmm0
	LONG $0xc870f9c5; BYTE $0xee   // vpshufd      $238, %xmm0, %xmm1
	LONG $0xd073e9c5; BYTE $0x20   // vpsrlq       $32, %xmm0, %xmm2
	LONG $0xd1f4e9c5               // vpmuludq     %xmm1, %xmm2, %xmm2
	LONG $0xd870f9c5; BYTE $0xff   // vpshufd      $255, %xmm0, %xmm3
	LONG $0xdbf4f9c5               // vpmuludq     %xmm3, %xmm0, %xmm3
	LONG $0xd2d4e1c5               // vpaddq       %xmm2, %xmm3, %xmm2
	LONG $0xf273e9c5; BYTE $0x20   // vpsllq       $32, %xmm2, %xmm2
	LONG $0xc1f4f9c5               // vpmuludq     %xmm1, %xmm0, %xmm0
	LONG $0xc2d4f9c5               // vpaddq       %xmm2, %xmm0, %xmm0
	LONG $0x7ef9c1c4; BYTE $0xc4   // vmovq        %xmm0, %r12
	WORD $0x3944; BYTE $0xc2       // cmpl         %r8d, %edx
	LONG $0x0017840f; WORD $0x0000 // je           LBB13_55, $23(%rip)
	WORD $0x0145; BYTE $0xc1       // addl         %r8d, %r9d

LBB13_53:
	WORD $0xc289             // movl         %eax, %edx
	WORD $0x2944; BYTE $0xca // subl         %r9d, %edx

	// .p2align 4, 0x90
LBB13_54:
	WORD $0x014d; BYTE $0xe4       // addq         %r12, %r12
	LONG $0xa4248d4f               // leaq         (%r12,%r12,4), %r12
	WORD $0xcaff                   // decl         %edx
	LONG $0xfff1850f; WORD $0xffff // jne          LBB13_54, $-15(%rip)

LBB13_55:
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0049880f; WORD $0x0000 // js           LBB13_62, $73(%rip)
	LONG $0x10578b41               // movl         $16(%r15), %edx
	WORD $0xc239                   // cmpl         %eax, %edx
	LONG $0x003d8e0f; WORD $0x0000 // jle          LBB13_62, $61(%rip)
	WORD $0x8b49; BYTE $0x37       // movq         (%r15), %rsi
	WORD $0x0c8a; BYTE $0x06       // movb         (%rsi,%rax), %cl
	WORD $0xf980; BYTE $0x35       // cmpb         $53, %cl
	LONG $0x00de850f; WORD $0x0000 // jne          LBB13_64, $222(%rip)
	WORD $0x788d; BYTE $0x01       // leal         $1(%rax), %edi
	WORD $0xd739                   // cmpl         %edx, %edi
	LONG $0x00d3850f; WORD $0x0000 // jne          LBB13_64, $211(%rip)
	WORD $0x01b2                   // movb         $1, %dl
	LONG $0x1c7f8341; BYTE $0x00   // cmpl         $0, $28(%r15)
	LONG $0x0018850f; WORD $0x0000 // jne          LBB13_65, $24(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x000d840f; WORD $0x0000 // je           LBB13_62, $13(%rip)
	WORD $0xc8ff                   // decl         %eax
	WORD $0x148a; BYTE $0x06       // movb         (%rsi,%rax), %dl
	WORD $0xe280; BYTE $0x01       // andb         $1, %dl
	LONG $0x000002e9; BYTE $0x00   // jmp          LBB13_65, $2(%rip)

LBB13_62:
	WORD $0xd231 // xorl         %edx, %edx

LBB13_65:
	WORD $0xb60f; BYTE $0xc2                   // movzbl       %dl, %eax
	WORD $0x0149; BYTE $0xc4                   // addq         %rax, %r12
	QUAD $0x000000000000b848; WORD $0x0020     // movabsq      $9007199254740992, %rax
	WORD $0x3949; BYTE $0xc4                   // cmpq         %rax, %r12
	LONG $0x0036850f; WORD $0x0000             // jne          LBB13_69, $54(%rip)
	LONG $0xfefe8141; WORD $0x0003; BYTE $0x00 // cmpl         $1022, %r14d
	LONG $0x001c8e0f; WORD $0x0000             // jle          LBB13_68, $28(%rip)

LBB13_67:
	WORD $0x3145; BYTE $0xe4               // xorl         %r12d, %r12d
	QUAD $0x000000000000b948; WORD $0x0010 // movabsq      $4503599627370496, %rcx
	QUAD $0x000000000000be49; WORD $0x7ff0 // movabsq      $9218868437227405312, %r14
	LONG $0x000036e9; BYTE $0x00           // jmp          LBB13_70, $54(%rip)

LBB13_68:
	WORD $0xff41; BYTE $0xc6               // incl         %r14d
	QUAD $0x000000000000bc49; WORD $0x0010 // movabsq      $4503599627370496, %r12

LBB13_69:
	WORD $0x894c; BYTE $0xe0                   // movq         %r12, %rax
	QUAD $0x000000000000b948; WORD $0x0010     // movabsq      $4503599627370496, %rcx
	WORD $0x2148; BYTE $0xc8                   // andq         %rcx, %rax
	LONG $0xffc68141; WORD $0x0003; BYTE $0x00 // addl         $1023, %r14d
	LONG $0xffe68141; WORD $0x0007; BYTE $0x00 // andl         $2047, %r14d
	LONG $0x34e6c149                           // shlq         $52, %r14
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0xf0440f4c                           // cmoveq       %rax, %r14

LBB13_70:
	WORD $0xff48; BYTE $0xc9               // decq         %rcx
	WORD $0x214c; BYTE $0xe1               // andq         %r12, %rcx
	WORD $0x094c; BYTE $0xf1               // orq          %r14, %rcx
	QUAD $0x000000000000b848; WORD $0x8000 // movabsq      $-9223372036854775808, %rax
	WORD $0x0948; BYTE $0xc8               // orq          %rcx, %rax
	LONG $0x187f8341; BYTE $0x00           // cmpl         $0, $24(%r15)
	LONG $0xc1440f48                       // cmoveq       %rcx, %rax
	WORD $0x8948; BYTE $0x03               // movq         %rax, (%rbx)
	WORD $0xc031                           // xorl         %eax, %eax
	LONG $0x08c48348                       // addq         $8, %rsp
	BYTE $0x5b                             // popq         %rbx
	WORD $0x5c41                           // popq         %r12
	WORD $0x5d41                           // popq         %r13
	WORD $0x5e41                           // popq         %r14
	WORD $0x5f41                           // popq         %r15
	BYTE $0x5d                             // popq         %rbp
	WORD $0xf8c5; BYTE $0x77               // vzeroupper
	BYTE $0xc3                             // retq

LBB13_64:
	WORD $0xf980; BYTE $0x35     // cmpb         $53, %cl
	WORD $0x9d0f; BYTE $0xc2     // setge        %dl
	LONG $0xffff47e9; BYTE $0xff // jmp          LBB13_65, $-185(%rip)
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_atof_native:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x28ec8348                           // subq         $40, %rsp
	QUAD $0x00000000d045c748                   // movq         $0, $-48(%rbp)
	LONG $0xb0558948                           // movq         %rdx, $-80(%rbp)
	LONG $0xb84d8948                           // movq         %rcx, $-72(%rbp)
	WORD $0x8548; BYTE $0xc9                   // testq        %rcx, %rcx
	LONG $0x01b6840f; WORD $0x0000             // je           LBB14_19, $438(%rip)
	WORD $0x02c6; BYTE $0x00                   // movb         $0, (%rdx)
	LONG $0x01f98348                           // cmpq         $1, %rcx
	LONG $0x01a9840f; WORD $0x0000             // je           LBB14_19, $425(%rip)
	LONG $0xff418d4c                           // leaq         $-1(%rcx), %r8
	LONG $0x000001b8; BYTE $0x00               // movl         $1, %eax
	LONG $0x10f88349                           // cmpq         $16, %r8
	LONG $0x0186820f; WORD $0x0000             // jb           LBB14_18, $390(%rip)
	LONG $0x80f88149; WORD $0x0000; BYTE $0x00 // cmpq         $128, %r8
	LONG $0x0008830f; WORD $0x0000             // jae          LBB14_8, $8(%rip)
	WORD $0x3145; BYTE $0xdb                   // xorl         %r11d, %r11d
	LONG $0x00012fe9; BYTE $0x00               // jmp          LBB14_5, $303(%rip)

LBB14_8:
	WORD $0x894d; BYTE $0xc3       // movq         %r8, %r11
	LONG $0x80e38349               // andq         $-128, %r11
	LONG $0x80438d49               // leaq         $-128(%r11), %rax
	WORD $0x8949; BYTE $0xc2       // movq         %rax, %r10
	LONG $0x07eac149               // shrq         $7, %r10
	WORD $0xff49; BYTE $0xc2       // incq         %r10
	WORD $0x8945; BYTE $0xd1       // movl         %r10d, %r9d
	LONG $0x03e18341               // andl         $3, %r9d
	LONG $0x01803d48; WORD $0x0000 // cmpq         $384, %rax
	LONG $0x0007830f; WORD $0x0000 // jae          LBB14_10, $7(%rip)
	WORD $0xdb31                   // xorl         %ebx, %ebx
	LONG $0x0000a7e9; BYTE $0x00   // jmp          LBB14_12, $167(%rip)

LBB14_10:
	LONG $0xfce28349         // andq         $-4, %r10
	WORD $0xdb31             // xorl         %ebx, %ebx
	LONG $0xc057f8c5         // vxorps       %xmm0, %xmm0, %xmm0
	QUAD $0x9090909090909090 // .p2align 4, 0x90

LBB14_11:
	LONG $0x4411fcc5; WORD $0x011a             // vmovups      %ymm0, $1(%rdx,%rbx)
	LONG $0x4411fcc5; WORD $0x211a             // vmovups      %ymm0, $33(%rdx,%rbx)
	LONG $0x4411fcc5; WORD $0x411a             // vmovups      %ymm0, $65(%rdx,%rbx)
	LONG $0x4411fcc5; WORD $0x611a             // vmovups      %ymm0, $97(%rdx,%rbx)
	QUAD $0x0000811a8411fcc5; BYTE $0x00       // vmovups      %ymm0, $129(%rdx,%rbx)
	QUAD $0x0000a11a8411fcc5; BYTE $0x00       // vmovups      %ymm0, $161(%rdx,%rbx)
	QUAD $0x0000c11a8411fcc5; BYTE $0x00       // vmovups      %ymm0, $193(%rdx,%rbx)
	QUAD $0x0000e11a8411fcc5; BYTE $0x00       // vmovups      %ymm0, $225(%rdx,%rbx)
	QUAD $0x0001011a8411fcc5; BYTE $0x00       // vmovups      %ymm0, $257(%rdx,%rbx)
	QUAD $0x0001211a8411fcc5; BYTE $0x00       // vmovups      %ymm0, $289(%rdx,%rbx)
	QUAD $0x0001411a8411fcc5; BYTE $0x00       // vmovups      %ymm0, $321(%rdx,%rbx)
	QUAD $0x0001611a8411fcc5; BYTE $0x00       // vmovups      %ymm0, $353(%rdx,%rbx)
	QUAD $0x0001811a8411fcc5; BYTE $0x00       // vmovups      %ymm0, $385(%rdx,%rbx)
	QUAD $0x0001a11a8411fcc5; BYTE $0x00       // vmovups      %ymm0, $417(%rdx,%rbx)
	QUAD $0x0001c11a8411fcc5; BYTE $0x00       // vmovups      %ymm0, $449(%rdx,%rbx)
	QUAD $0x0001e11a8411fcc5; BYTE $0x00       // vmovups      %ymm0, $481(%rdx,%rbx)
	LONG $0x00c38148; WORD $0x0002; BYTE $0x00 // addq         $512, %rbx
	LONG $0xfcc28349                           // addq         $-4, %r10
	LONG $0xff6b850f; WORD $0xffff             // jne          LBB14_11, $-149(%rip)

LBB14_12:
	WORD $0x854d; BYTE $0xc9                                 // testq        %r9, %r9
	LONG $0x003d840f; WORD $0x0000                           // je           LBB14_15, $61(%rip)
	LONG $0xc057f8c5                                         // vxorps       %xmm0, %xmm0, %xmm0
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB14_14:
	WORD $0x8948; BYTE $0xd8       // movq         %rbx, %rax
	LONG $0x01c88348               // orq          $1, %rax
	LONG $0x0411fcc5; BYTE $0x02   // vmovups      %ymm0, (%rdx,%rax)
	LONG $0x4411fcc5; WORD $0x2002 // vmovups      %ymm0, $32(%rdx,%rax)
	LONG $0x4411fcc5; WORD $0x4002 // vmovups      %ymm0, $64(%rdx,%rax)
	LONG $0x4411fcc5; WORD $0x6002 // vmovups      %ymm0, $96(%rdx,%rax)
	LONG $0x80eb8348               // subq         $-128, %rbx
	WORD $0xff49; BYTE $0xc9       // decq         %r9
	LONG $0xffd5850f; WORD $0xffff // jne          LBB14_14, $-43(%rip)

LBB14_15:
	WORD $0x394d; BYTE $0xd8       // cmpq         %r11, %r8
	LONG $0x005c840f; WORD $0x0000 // je           LBB14_19, $92(%rip)
	LONG $0x70c0f641               // testb        $112, %r8b
	LONG $0x0034840f; WORD $0x0000 // je           LBB14_17, $52(%rip)

LBB14_5:
	WORD $0x894c; BYTE $0xc3 // movq         %r8, %rbx
	LONG $0xf0e38348         // andq         $-16, %rbx
	LONG $0x01438d48         // leaq         $1(%rbx), %rax
	LONG $0xc057f8c5         // vxorps       %xmm0, %xmm0, %xmm0
	WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB14_6:
	LONG $0x1178a1c4; WORD $0x1a44; BYTE $0x01 // vmovups      %xmm0, $1(%rdx,%r11)
	LONG $0x10c38349                           // addq         $16, %r11
	WORD $0x394c; BYTE $0xdb                   // cmpq         %r11, %rbx
	LONG $0xffec850f; WORD $0xffff             // jne          LBB14_6, $-20(%rip)
	WORD $0x3949; BYTE $0xd8                   // cmpq         %rbx, %r8
	LONG $0x0013850f; WORD $0x0000             // jne          LBB14_18, $19(%rip)
	LONG $0x00001ee9; BYTE $0x00               // jmp          LBB14_19, $30(%rip)

LBB14_17:
	LONG $0x01cb8349                           // orq          $1, %r11
	WORD $0x894c; BYTE $0xd8                   // movq         %r11, %rax
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB14_18:
	LONG $0x000204c6               // movb         $0, (%rdx,%rax)
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x3948; BYTE $0xc1       // cmpq         %rax, %rcx
	LONG $0xfff0850f; WORD $0xffff // jne          LBB14_18, $-16(%rip)

LBB14_19:
	LONG $0x00c045c7; WORD $0x0000; BYTE $0x00 // movl         $0, $-64(%rbp)
	QUAD $0x00000000c845c748                   // movq         $0, $-56(%rbp)
	WORD $0x3145; BYTE $0xc0                   // xorl         %r8d, %r8d
	WORD $0x3f80; BYTE $0x2d                   // cmpb         $45, (%rdi)
	LONG $0x001b850f; WORD $0x0000             // jne          LBB14_20, $27(%rip)
	LONG $0x01c845c7; WORD $0x0000; BYTE $0x00 // movl         $1, $-56(%rbp)
	LONG $0x0001bd41; WORD $0x0000             // movl         $1, %r13d
	WORD $0x3949; BYTE $0xf5                   // cmpq         %rsi, %r13
	LONG $0x00118c0f; WORD $0x0000             // jl           LBB14_23, $17(%rip)
	LONG $0x0001b6e9; BYTE $0x00               // jmp          LBB14_55, $438(%rip)

LBB14_20:
	WORD $0x3145; BYTE $0xed       // xorl         %r13d, %r13d
	WORD $0x3949; BYTE $0xf5       // cmpq         %rsi, %r13
	LONG $0x01aa8d0f; WORD $0x0000 // jge          LBB14_55, $426(%rip)

LBB14_23:
	WORD $0xb741; BYTE $0x01     // movb         $1, %r15b
	WORD $0x3145; BYTE $0xc0     // xorl         %r8d, %r8d
	WORD $0x3145; BYTE $0xc9     // xorl         %r9d, %r9d
	WORD $0x3145; BYTE $0xe4     // xorl         %r12d, %r12d
	WORD $0x3145; BYTE $0xdb     // xorl         %r11d, %r11d
	WORD $0xdb31                 // xorl         %ebx, %ebx
	LONG $0x000028e9; BYTE $0x00 // jmp          LBB14_24, $40(%rip)
	QUAD $0x9090909090909090     // .p2align 4, 0x90

LBB14_34:
	LONG $0x000001bb; BYTE $0x00   // movl         $1, %ebx
	WORD $0x8945; BYTE $0xdc       // movl         %r11d, %r12d
	WORD $0x2e3c                   // cmpb         $46, %al
	LONG $0x0095850f; WORD $0x0000 // jne          LBB14_37, $149(%rip)

LBB14_35:
	WORD $0xff49; BYTE $0xc5       // incq         %r13
	WORD $0x3949; BYTE $0xf5       // cmpq         %rsi, %r13
	LONG $0xc79c0f41               // setl         %r15b
	LONG $0x007c840f; WORD $0x0000 // je           LBB14_36, $124(%rip)

LBB14_24:
	WORD $0x8941; BYTE $0xda                   // movl         %ebx, %r10d
	WORD $0x8945; BYTE $0xe6                   // movl         %r12d, %r14d
	LONG $0x04b60f42; BYTE $0x2f               // movzbl       (%rdi,%r13), %eax
	WORD $0x588d; BYTE $0xd0                   // leal         $-48(%rax), %ebx
	WORD $0xfb80; BYTE $0x09                   // cmpb         $9, %bl
	LONG $0xffc9870f; WORD $0xffff             // ja           LBB14_34, $-55(%rip)
	WORD $0x303c                               // cmpb         $48, %al
	LONG $0x0021850f; WORD $0x0000             // jne          LBB14_30, $33(%rip)
	WORD $0x8545; BYTE $0xdb                   // testl        %r11d, %r11d
	LONG $0x0043840f; WORD $0x0000             // je           LBB14_27, $67(%rip)
	WORD $0x6349; BYTE $0xd8                   // movslq       %r8d, %rbx
	WORD $0x3948; BYTE $0xcb                   // cmpq         %rcx, %rbx
	LONG $0x0018820f; WORD $0x0000             // jb           LBB14_33, $24(%rip)
	LONG $0x000019e9; BYTE $0x00               // jmp          LBB14_29, $25(%rip)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB14_30:
	WORD $0x6349; BYTE $0xdb       // movslq       %r11d, %rbx
	WORD $0x3948; BYTE $0xcb       // cmpq         %rcx, %rbx
	LONG $0x0014830f; WORD $0x0000 // jae          LBB14_31, $20(%rip)

LBB14_33:
	WORD $0x0488; BYTE $0x1a // movb         %al, (%rdx,%rbx)
	WORD $0xff41; BYTE $0xc0 // incl         %r8d

LBB14_29:
	WORD $0x8945; BYTE $0xf4     // movl         %r14d, %r12d
	WORD $0x8945; BYTE $0xc3     // movl         %r8d, %r11d
	WORD $0x8944; BYTE $0xd3     // movl         %r10d, %ebx
	LONG $0xffff90e9; BYTE $0xff // jmp          LBB14_35, $-112(%rip)

LBB14_31:
	LONG $0x0001b941; WORD $0x0000 // movl         $1, %r9d
	LONG $0x000006e9; BYTE $0x00   // jmp          LBB14_32, $6(%rip)

LBB14_27:
	WORD $0xff41; BYTE $0xce // decl         %r14d
	WORD $0x3145; BYTE $0xdb // xorl         %r11d, %r11d

LBB14_32:
	WORD $0x8945; BYTE $0xf4     // movl         %r14d, %r12d
	WORD $0x8944; BYTE $0xd3     // movl         %r10d, %ebx
	LONG $0xffff74e9; BYTE $0xff // jmp          LBB14_35, $-140(%rip)

LBB14_36:
	WORD $0x8945; BYTE $0xe6 // movl         %r12d, %r14d
	WORD $0x8949; BYTE $0xf5 // movq         %rsi, %r13
	WORD $0x8941; BYTE $0xda // movl         %ebx, %r10d

LBB14_37:
	LONG $0xc4758944               // movl         %r14d, $-60(%rbp)
	LONG $0xcc4d8944               // movl         %r9d, $-52(%rbp)
	LONG $0xc0458944               // movl         %r8d, $-64(%rbp)
	WORD $0x8545; BYTE $0xd2       // testl        %r10d, %r10d
	LONG $0x0012840f; WORD $0x0000 // je           LBB14_38, $18(%rip)
	WORD $0x8945; BYTE $0xf0       // movl         %r14d, %r8d
	LONG $0x01c7f641               // testb        $1, %r15b
	LONG $0x0013850f; WORD $0x0000 // jne          LBB14_41, $19(%rip)
	LONG $0x0000c4e9; BYTE $0x00   // jmp          LBB14_56, $196(%rip)

LBB14_38:
	LONG $0xc4458944               // movl         %r8d, $-60(%rbp)
	LONG $0x01c7f641               // testb        $1, %r15b
	LONG $0x00b6840f; WORD $0x0000 // je           LBB14_56, $182(%rip)

LBB14_41:
	WORD $0x8944; BYTE $0xe8       // movl         %r13d, %eax
	WORD $0x0c8a; BYTE $0x07       // movb         (%rdi,%rax), %cl
	WORD $0xc980; BYTE $0x20       // orb          $32, %cl
	WORD $0xf980; BYTE $0x65       // cmpb         $101, %cl
	LONG $0x00a4850f; WORD $0x0000 // jne          LBB14_56, $164(%rip)
	LONG $0x0107548a               // movb         $1(%rdi,%rax), %dl
	WORD $0xfa80; BYTE $0x2d       // cmpb         $45, %dl
	LONG $0x0017840f; WORD $0x0000 // je           LBB14_46, $23(%rip)
	LONG $0x000001b9; BYTE $0x00   // movl         $1, %ecx
	WORD $0xfa80; BYTE $0x2b       // cmpb         $43, %dl
	LONG $0x0028850f; WORD $0x0000 // jne          LBB14_44, $40(%rip)
	LONG $0x02c58341               // addl         $2, %r13d
	LONG $0x000009e9; BYTE $0x00   // jmp          LBB14_47, $9(%rip)

LBB14_46:
	LONG $0x02c58341             // addl         $2, %r13d
	LONG $0xffffffb9; BYTE $0xff // movl         $-1, %ecx

LBB14_47:
	WORD $0x8944; BYTE $0xe8       // movl         %r13d, %eax
	WORD $0x6348; BYTE $0xd0       // movslq       %eax, %rdx
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0x3948; BYTE $0xf2       // cmpq         %rsi, %rdx
	LONG $0x00168c0f; WORD $0x0000 // jl           LBB14_49, $22(%rip)
	LONG $0x000057e9; BYTE $0x00   // jmp          LBB14_54, $87(%rip)

LBB14_44:
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x6348; BYTE $0xd0       // movslq       %eax, %rdx
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0x3948; BYTE $0xf2       // cmpq         %rsi, %rdx
	LONG $0x00468d0f; WORD $0x0000 // jge          LBB14_54, $70(%rip)

LBB14_49:
	WORD $0xc031                                             // xorl         %eax, %eax
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB14_50:
	LONG $0x171cbe0f               // movsbl       (%rdi,%rdx), %ebx
	WORD $0xfb83; BYTE $0x30       // cmpl         $48, %ebx
	LONG $0x00298c0f; WORD $0x0000 // jl           LBB14_54, $41(%rip)
	WORD $0xfb80; BYTE $0x39       // cmpb         $57, %bl
	LONG $0x0020870f; WORD $0x0000 // ja           LBB14_54, $32(%rip)
	LONG $0x00270f3d; BYTE $0x00   // cmpl         $9999, %eax
	LONG $0x00158f0f; WORD $0x0000 // jg           LBB14_54, $21(%rip)
	WORD $0x048d; BYTE $0x80       // leal         (%rax,%rax,4), %eax
	WORD $0x048d; BYTE $0x43       // leal         (%rbx,%rax,2), %eax
	WORD $0xc083; BYTE $0xd0       // addl         $-48, %eax
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0x3948; BYTE $0xd6       // cmpq         %rdx, %rsi
	LONG $0xffca850f; WORD $0xffff // jne          LBB14_50, $-54(%rip)

LBB14_54:
	WORD $0xaf0f; BYTE $0xc1 // imull        %ecx, %eax
	WORD $0x0141; BYTE $0xc0 // addl         %eax, %r8d

LBB14_55:
	LONG $0xc4458944 // movl         %r8d, $-60(%rbp)

LBB14_56:
	LONG $0xb07d8d48                           // leaq         $-80(%rbp), %rdi
	LONG $0xd0758d48                           // leaq         $-48(%rbp), %rsi
	WORD $0xf8c5; BYTE $0x77                   // vzeroupper
	LONG $0xfff620e8; BYTE $0xff               // callq        _decimal_to_f64, $-2528(%rip)
	LONG $0x4510fbc5; BYTE $0xd0               // vmovsd       $-48(%rbp), %xmm0
	LONG $0x28c48348                           // addq         $40, %rsp
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5c41                               // popq         %r12
	WORD $0x5d41                               // popq         %r13
	WORD $0x5e41                               // popq         %r14
	WORD $0x5f41                               // popq         %r15
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	QUAD $0x0000000000000000; LONG $0x00000000 // .p2align 5, 0x00

LCPI15_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI15_1:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI15_2:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI15_3:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

	// .p2align 4, 0x00
LCPI15_4:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI15_5:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI15_6:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI15_7:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

	// .p2align 4, 0x90
_advance_ns:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	BYTE $0x53                     // pushq        %rbx
	WORD $0x8b4c; BYTE $0x1e       // movq         (%rsi), %r11
	WORD $0x8b4c; BYTE $0x0f       // movq         (%rdi), %r9
	LONG $0x08478b4c               // movq         $8(%rdi), %r8
	WORD $0x394d; BYTE $0xc3       // cmpq         %r8, %r11
	LONG $0x001e830f; WORD $0x0000 // jae          LBB15_4, $30(%rip)
	LONG $0x19048a43               // movb         (%r9,%r11), %al
	WORD $0x0d3c                   // cmpb         $13, %al
	LONG $0x0012840f; WORD $0x0000 // je           LBB15_4, $18(%rip)
	WORD $0x203c                   // cmpb         $32, %al
	LONG $0x000a840f; WORD $0x0000 // je           LBB15_4, $10(%rip)
	WORD $0xf504                   // addb         $-11, %al
	WORD $0xfe3c                   // cmpb         $-2, %al
	LONG $0x0287820f; WORD $0x0000 // jb           LBB15_48, $647(%rip)

LBB15_4:
	LONG $0x01438d49               // leaq         $1(%r11), %rax
	WORD $0x394c; BYTE $0xc0       // cmpq         %r8, %rax
	LONG $0x0022830f; WORD $0x0000 // jae          LBB15_9, $34(%rip)
	LONG $0x010c8a41               // movb         (%r9,%rax), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0015840f; WORD $0x0000 // je           LBB15_9, $21(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000c840f; WORD $0x0000 // je           LBB15_9, $12(%rip)
	WORD $0xc180; BYTE $0xf5       // addb         $-11, %cl
	WORD $0xf980; BYTE $0xfe       // cmpb         $-2, %cl
	LONG $0x005e820f; WORD $0x0000 // jb           LBB15_8, $94(%rip)

LBB15_9:
	LONG $0x02438d49               // leaq         $2(%r11), %rax
	WORD $0x394c; BYTE $0xc0       // cmpq         %r8, %rax
	LONG $0x0022830f; WORD $0x0000 // jae          LBB15_14, $34(%rip)
	LONG $0x010c8a41               // movb         (%r9,%rax), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0015840f; WORD $0x0000 // je           LBB15_14, $21(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000c840f; WORD $0x0000 // je           LBB15_14, $12(%rip)
	WORD $0xc180; BYTE $0xf5       // addb         $-11, %cl
	WORD $0xf980; BYTE $0xfe       // cmpb         $-2, %cl
	LONG $0x002f820f; WORD $0x0000 // jb           LBB15_8, $47(%rip)

LBB15_14:
	LONG $0x03438d49               // leaq         $3(%r11), %rax
	WORD $0x394c; BYTE $0xc0       // cmpq         %r8, %rax
	LONG $0x002a830f; WORD $0x0000 // jae          LBB15_19, $42(%rip)
	LONG $0x010c8a41               // movb         (%r9,%rax), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x001d840f; WORD $0x0000 // je           LBB15_19, $29(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x0014840f; WORD $0x0000 // je           LBB15_19, $20(%rip)
	WORD $0xc180; BYTE $0xf5       // addb         $-11, %cl
	WORD $0xf980; BYTE $0xfe       // cmpb         $-2, %cl
	LONG $0x0008830f; WORD $0x0000 // jae          LBB15_19, $8(%rip)

LBB15_8:
	WORD $0x8949; BYTE $0xc3     // movq         %rax, %r11
	LONG $0x0001f2e9; BYTE $0x00 // jmp          LBB15_48, $498(%rip)

LBB15_19:
	LONG $0x04c38349                       // addq         $4, %r11
	WORD $0x394d; BYTE $0xd8               // cmpq         %r11, %r8
	LONG $0x01c5860f; WORD $0x0000         // jbe          LBB15_44, $453(%rip)
	LONG $0x191c8d4b                       // leaq         (%r9,%r11), %rbx
	WORD $0x894c; BYTE $0xc1               // movq         %r8, %rcx
	WORD $0x294c; BYTE $0xd9               // subq         %r11, %rcx
	LONG $0x0071840f; WORD $0x0000         // je           LBB15_28, $113(%rip)
	WORD $0xd889                           // movl         %ebx, %eax
	WORD $0xe083; BYTE $0x1f               // andl         $31, %eax
	WORD $0x8548; BYTE $0xc0               // testq        %rax, %rax
	LONG $0x0063840f; WORD $0x0000         // je           LBB15_28, $99(%rip)
	LONG $0x000005ba; BYTE $0x00           // movl         $5, %edx
	WORD $0x294c; BYTE $0xc2               // subq         %r8, %rdx
	QUAD $0x000100002600b948; WORD $0x0000 // movabsq      $4294977024, %rcx
	QUAD $0x9090909090909090               // .p2align 4, 0x90

LBB15_23:
	LONG $0x04be0f43; BYTE $0x19   // movsbl       (%r9,%r11), %eax
	WORD $0xf883; BYTE $0x20       // cmpl         $32, %eax
	LONG $0x0193870f; WORD $0x0000 // ja           LBB15_46, $403(%rip)
	LONG $0xc1a30f48               // btq          %rax, %rcx
	LONG $0x0189830f; WORD $0x0000 // jae          LBB15_46, $393(%rip)
	LONG $0x1a1c8d4a               // leaq         (%rdx,%r11), %rbx
	LONG $0x01438d49               // leaq         $1(%r11), %rax
	LONG $0x04fb8348               // cmpq         $4, %rbx
	LONG $0x0015840f; WORD $0x0000 // je           LBB15_27, $21(%rip)
	LONG $0x191c8d43               // leal         (%r9,%r11), %ebx
	WORD $0xc3ff                   // incl         %ebx
	WORD $0xe383; BYTE $0x1f       // andl         $31, %ebx
	WORD $0x8949; BYTE $0xc3       // movq         %rax, %r11
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0xffc1850f; WORD $0xffff // jne          LBB15_23, $-63(%rip)

LBB15_27:
	LONG $0x011c8d49         // leaq         (%r9,%rax), %rbx
	WORD $0x894c; BYTE $0xc1 // movq         %r8, %rcx
	WORD $0x2948; BYTE $0xc1 // subq         %rax, %rcx

LBB15_28:
	LONG $0x20f98348                           // cmpq         $32, %rcx
	LONG $0x0070820f; WORD $0x0000             // jb           LBB15_32, $112(%rip)
	WORD $0x894c; BYTE $0xc8                   // movq         %r9, %rax
	WORD $0x2948; BYTE $0xd8                   // subq         %rbx, %rax
	QUAD $0xfffffdcf056ffdc5                   // vmovdqa      $-561(%rip), %ymm0  /* LCPI15_0+0(%rip) */
	QUAD $0xfffffde70d6ffdc5                   // vmovdqa      $-537(%rip), %ymm1  /* LCPI15_1+0(%rip) */
	QUAD $0xfffffdff156ffdc5                   // vmovdqa      $-513(%rip), %ymm2  /* LCPI15_2+0(%rip) */
	QUAD $0xfffffe171d6ffdc5                   // vmovdqa      $-489(%rip), %ymm3  /* LCPI15_3+0(%rip) */
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB15_30:
	LONG $0x236ffdc5               // vmovdqa      (%rbx), %ymm4
	LONG $0xe874ddc5               // vpcmpeqb     %ymm0, %ymm4, %ymm5
	LONG $0xf174ddc5               // vpcmpeqb     %ymm1, %ymm4, %ymm6
	LONG $0xeeebd5c5               // vpor         %ymm6, %ymm5, %ymm5
	LONG $0xf274ddc5               // vpcmpeqb     %ymm2, %ymm4, %ymm6
	LONG $0xe374ddc5               // vpcmpeqb     %ymm3, %ymm4, %ymm4
	LONG $0xe6ebddc5               // vpor         %ymm6, %ymm4, %ymm4
	LONG $0xe5ebddc5               // vpor         %ymm5, %ymm4, %ymm4
	LONG $0xd4d7fdc5               // vpmovmskb    %ymm4, %edx
	WORD $0xfa83; BYTE $0xff       // cmpl         $-1, %edx
	LONG $0x00e8850f; WORD $0x0000 // jne          LBB15_45, $232(%rip)
	LONG $0x20c38348               // addq         $32, %rbx
	LONG $0xe0c18348               // addq         $-32, %rcx
	LONG $0xe0c08348               // addq         $-32, %rax
	LONG $0x1ff98348               // cmpq         $31, %rcx
	LONG $0xffbd870f; WORD $0xffff // ja           LBB15_30, $-67(%rip)

LBB15_32:
	WORD $0xf8c5; BYTE $0x77       // vzeroupper
	LONG $0x10f98348               // cmpq         $16, %rcx
	LONG $0x006a820f; WORD $0x0000 // jb           LBB15_36, $106(%rip)
	WORD $0x894d; BYTE $0xca       // movq         %r9, %r10
	WORD $0x2949; BYTE $0xda       // subq         %rbx, %r10
	QUAD $0xfffffdd2056ff9c5       // vmovdqa      $-558(%rip), %xmm0  /* LCPI15_4+0(%rip) */
	QUAD $0xfffffdda0d6ff9c5       // vmovdqa      $-550(%rip), %xmm1  /* LCPI15_5+0(%rip) */
	QUAD $0xfffffde2156ff9c5       // vmovdqa      $-542(%rip), %xmm2  /* LCPI15_6+0(%rip) */
	QUAD $0xfffffdea1d6ff9c5       // vmovdqa      $-534(%rip), %xmm3  /* LCPI15_7+0(%rip) */

LBB15_34:
	LONG $0x236ff9c5               // vmovdqa      (%rbx), %xmm4
	LONG $0xe874d9c5               // vpcmpeqb     %xmm0, %xmm4, %xmm5
	LONG $0xf174d9c5               // vpcmpeqb     %xmm1, %xmm4, %xmm6
	LONG $0xeeebd1c5               // vpor         %xmm6, %xmm5, %xmm5
	LONG $0xf274d9c5               // vpcmpeqb     %xmm2, %xmm4, %xmm6
	LONG $0xe374d9c5               // vpcmpeqb     %xmm3, %xmm4, %xmm4
	LONG $0xe6ebd9c5               // vpor         %xmm6, %xmm4, %xmm4
	LONG $0xe5ebd9c5               // vpor         %xmm5, %xmm4, %xmm4
	LONG $0xc4d7f9c5               // vpmovmskb    %xmm4, %eax
	LONG $0xfff88366               // cmpw         $-1, %ax
	LONG $0x009a850f; WORD $0x0000 // jne          LBB15_49, $154(%rip)
	LONG $0x10c38348               // addq         $16, %rbx
	LONG $0xf0c18348               // addq         $-16, %rcx
	LONG $0xf0c28349               // addq         $-16, %r10
	LONG $0x0ff98348               // cmpq         $15, %rcx
	LONG $0xffbc870f; WORD $0xffff // ja           LBB15_34, $-68(%rip)

LBB15_36:
	WORD $0x8548; BYTE $0xc9               // testq        %rcx, %rcx
	LONG $0x0036840f; WORD $0x0000         // je           LBB15_42, $54(%rip)
	LONG $0x0b148d4c                       // leaq         (%rbx,%rcx), %r10
	WORD $0xc031                           // xorl         %eax, %eax
	QUAD $0x000100002600bb49; WORD $0x0000 // movabsq      $4294977024, %r11

LBB15_38:
	LONG $0x0314be0f               // movsbl       (%rbx,%rax), %edx
	WORD $0xfa83; BYTE $0x20       // cmpl         $32, %edx
	LONG $0x007b870f; WORD $0x0000 // ja           LBB15_51, $123(%rip)
	LONG $0xd3a30f49               // btq          %rdx, %r11
	LONG $0x0071830f; WORD $0x0000 // jae          LBB15_51, $113(%rip)
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x3948; BYTE $0xc1       // cmpq         %rax, %rcx
	LONG $0xffdd850f; WORD $0xffff // jne          LBB15_38, $-35(%rip)
	WORD $0x894c; BYTE $0xd3       // movq         %r10, %rbx

LBB15_42:
	WORD $0x294c; BYTE $0xcb       // subq         %r9, %rbx
	WORD $0x8949; BYTE $0xdb       // movq         %rbx, %r11
	WORD $0x394d; BYTE $0xc3       // cmpq         %r8, %r11
	LONG $0x0022820f; WORD $0x0000 // jb           LBB15_47, $34(%rip)
	LONG $0x000046e9; BYTE $0x00   // jmp          LBB15_50, $70(%rip)

LBB15_44:
	WORD $0x894c; BYTE $0x1e     // movq         %r11, (%rsi)
	LONG $0x00003ee9; BYTE $0x00 // jmp          LBB15_50, $62(%rip)

LBB15_45:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	WORD $0xd2f7             // notl         %edx
	LONG $0xdabc0f44         // bsfl         %edx, %r11d
	WORD $0x2949; BYTE $0xc3 // subq         %rax, %r11

LBB15_46:
	WORD $0x394d; BYTE $0xc3       // cmpq         %r8, %r11
	LONG $0x0029830f; WORD $0x0000 // jae          LBB15_50, $41(%rip)

LBB15_47:
	WORD $0x8b4c; BYTE $0x0f // movq         (%rdi), %r9

LBB15_48:
	LONG $0x01438d49         // leaq         $1(%r11), %rax
	WORD $0x8948; BYTE $0x06 // movq         %rax, (%rsi)
	LONG $0x19048a43         // movb         (%r9,%r11), %al
	WORD $0xbe0f; BYTE $0xc0 // movsbl       %al, %eax
	BYTE $0x5b               // popq         %rbx
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB15_49:
	WORD $0xb70f; BYTE $0xc0       // movzwl       %ax, %eax
	WORD $0xd0f7                   // notl         %eax
	LONG $0xd8bc0f44               // bsfl         %eax, %r11d
	WORD $0x294d; BYTE $0xd3       // subq         %r10, %r11
	WORD $0x394d; BYTE $0xc3       // cmpq         %r8, %r11
	LONG $0xffd7820f; WORD $0xffff // jb           LBB15_47, $-41(%rip)

LBB15_50:
	WORD $0xc031             // xorl         %eax, %eax
	WORD $0xbe0f; BYTE $0xc0 // movsbl       %al, %eax
	BYTE $0x5b               // popq         %rbx
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB15_51:
	WORD $0x294c; BYTE $0xcb                                 // subq         %r9, %rbx
	WORD $0x0148; BYTE $0xc3                                 // addq         %rax, %rbx
	WORD $0x8949; BYTE $0xdb                                 // movq         %rbx, %r11
	WORD $0x394d; BYTE $0xc3                                 // cmpq         %r8, %r11
	LONG $0xffbd820f; WORD $0xffff                           // jb           LBB15_47, $-67(%rip)
	LONG $0xffffe1e9; BYTE $0xff                             // jmp          LBB15_50, $-31(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_advance_dword:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x8b4c; BYTE $0x0e                   // movq         (%rsi), %r9
	LONG $0x08578b4c                           // movq         $8(%rdi), %r10
	LONG $0x121c8d4e                           // leaq         (%rdx,%r10), %r11
	LONG $0xfcc38349                           // addq         $-4, %r11
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x394d; BYTE $0xd9                   // cmpq         %r11, %r9
	LONG $0x0020870f; WORD $0x0000             // ja           LBB16_3, $32(%rip)
	WORD $0x8b48; BYTE $0x3f                   // movq         (%rdi), %rdi
	LONG $0x0f048d4a                           // leaq         (%rdi,%r9), %rax
	WORD $0x2948; BYTE $0xd0                   // subq         %rdx, %rax
	WORD $0x3944; BYTE $0x00                   // cmpl         %r8d, (%rax)
	LONG $0x0012850f; WORD $0x0000             // jne          LBB16_4, $18(%rip)
	WORD $0x2949; BYTE $0xd1                   // subq         %rdx, %r9
	LONG $0x04c18349                           // addq         $4, %r9
	WORD $0x894d; BYTE $0xca                   // movq         %r9, %r10
	WORD $0x8948; BYTE $0xc8                   // movq         %rcx, %rax

LBB16_3:
	WORD $0x894c; BYTE $0x16 // movq         %r10, (%rsi)
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB16_4:
	WORD $0x2949; BYTE $0xd1                   // subq         %rdx, %r9
	WORD $0x894c; BYTE $0x0e                   // movq         %r9, (%rsi)
	LONG $0x0cbe0f42; BYTE $0x0f               // movsbl       (%rdi,%r9), %ecx
	LONG $0xd0b60f41                           // movzbl       %r8b, %edx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	WORD $0xca39                               // cmpl         %ecx, %edx
	LONG $0x0025850f; WORD $0x0000             // jne          LBB16_7, $37(%rip)
	WORD $0xff49; BYTE $0xc1                   // incq         %r9
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB16_6:
	LONG $0x08e8c141               // shrl         $8, %r8d
	WORD $0x894c; BYTE $0x0e       // movq         %r9, (%rsi)
	LONG $0x0cbe0f42; BYTE $0x0f   // movsbl       (%rdi,%r9), %ecx
	LONG $0xd0b60f41               // movzbl       %r8b, %edx
	WORD $0xff49; BYTE $0xc1       // incq         %r9
	WORD $0xca39                   // cmpl         %ecx, %edx
	LONG $0xffe5840f; WORD $0xffff // je           LBB16_6, $-27(%rip)

LBB16_7:
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_value:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x20ec8348                           // subq         $32, %rsp
	WORD $0x8945; BYTE $0xc4                   // movl         %r8d, %r12d
	WORD $0x8949; BYTE $0xce                   // movq         %rcx, %r14
	WORD $0x8948; BYTE $0xf3                   // movq         %rsi, %rbx
	WORD $0x8949; BYTE $0xff                   // movq         %rdi, %r15
	LONG $0xd8558948                           // movq         %rdx, $-40(%rbp)
	LONG $0xc07d8948                           // movq         %rdi, $-64(%rbp)
	LONG $0xc8758948                           // movq         %rsi, $-56(%rbp)
	LONG $0xc07d8d48                           // leaq         $-64(%rbp), %rdi
	LONG $0xd8758d48                           // leaq         $-40(%rbp), %rsi
	LONG $0xfffc2ce8; BYTE $0xff               // callq        _advance_ns, $-980(%rip)
	WORD $0xbe0f; BYTE $0xc0                   // movsbl       %al, %eax
	WORD $0xf883; BYTE $0x7d                   // cmpl         $125, %eax
	LONG $0x003d870f; WORD $0x0000             // ja           LBB17_4, $61(%rip)
	LONG $0x8d0d8d48; WORD $0x0002; BYTE $0x00 // leaq         $653(%rip), %rcx  /* LJTI17_0+0(%rip) */
	LONG $0x81046348                           // movslq       (%rcx,%rax,4), %rax
	WORD $0x0148; BYTE $0xc8                   // addq         %rcx, %rax
	JMP  AX

LBB17_2:
	LONG $0xd84dff48             // decq         $-40(%rbp)
	LONG $0xc07d8d48             // leaq         $-64(%rbp), %rdi
	LONG $0xd8758d48             // leaq         $-40(%rbp), %rsi
	WORD $0x894c; BYTE $0xf2     // movq         %r14, %rdx
	LONG $0x00087ce8; BYTE $0x00 // callq        _vnumber, $2172(%rip)
	LONG $0xd8458b48             // movq         $-40(%rbp), %rax
	LONG $0x000257e9; BYTE $0x00 // jmp          LBB17_21, $599(%rip)

LBB17_3:
	LONG $0x0106c749; WORD $0x0000; BYTE $0x00 // movq         $1, (%r14)
	LONG $0xd8458b48                           // movq         $-40(%rbp), %rax
	LONG $0x000247e9; BYTE $0x00               // jmp          LBB17_21, $583(%rip)

LBB17_4:
	LONG $0xfe06c749; WORD $0xffff; BYTE $0xff // movq         $-2, (%r14)
	LONG $0xd8458b48                           // movq         $-40(%rbp), %rax
	WORD $0xff48; BYTE $0xc8                   // decq         %rax
	LONG $0x000234e9; BYTE $0x00               // jmp          LBB17_21, $564(%rip)

LBB17_5:
	QUAD $0xffffffffd045c748                   // movq         $-1, $-48(%rbp)
	LONG $0xd87d8b4c                           // movq         $-40(%rbp), %r15
	LONG $0xc07d8d48                           // leaq         $-64(%rbp), %rdi
	LONG $0xd0558d48                           // leaq         $-48(%rbp), %rdx
	WORD $0x894c; BYTE $0xfe                   // movq         %r15, %rsi
	LONG $0x0004f4e8; BYTE $0x00               // callq        _advance_string, $1268(%rip)
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x0165880f; WORD $0x0000             // js           LBB17_26, $357(%rip)
	LONG $0xd8458948                           // movq         %rax, $-40(%rbp)
	LONG $0x107e894d                           // movq         %r15, $16(%r14)
	LONG $0xd04d8b48                           // movq         $-48(%rbp), %rcx
	WORD $0x3948; BYTE $0xc1                   // cmpq         %rax, %rcx
	LONG $0xffc2c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdx
	LONG $0xd14c0f48                           // cmovlq       %rcx, %rdx
	LONG $0x18568949                           // movq         %rdx, $24(%r14)
	LONG $0x000007b9; BYTE $0x00               // movl         $7, %ecx
	WORD $0x8949; BYTE $0x0e                   // movq         %rcx, (%r14)
	LONG $0x0001e4e9; BYTE $0x00               // jmp          LBB17_21, $484(%rip)

LBB17_7:
	WORD $0xc931                               // xorl         %ecx, %ecx
	WORD $0x8545; BYTE $0xe4                   // testl        %r12d, %r12d
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000bba; BYTE $0x00               // movl         $11, %edx
	LONG $0x0000bbe9; BYTE $0x00               // jmp          LBB17_20, $187(%rip)

LBB17_8:
	WORD $0xc931                               // xorl         %ecx, %ecx
	WORD $0x8545; BYTE $0xe4                   // testl        %r12d, %r12d
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000aba; BYTE $0x00               // movl         $10, %edx
	LONG $0x0000a5e9; BYTE $0x00               // jmp          LBB17_20, $165(%rip)

LBB17_9:
	LONG $0x0506c749; WORD $0x0000; BYTE $0x00 // movq         $5, (%r14)
	LONG $0xd8458b48                           // movq         $-40(%rbp), %rax
	LONG $0x0001a8e9; BYTE $0x00               // jmp          LBB17_21, $424(%rip)

LBB17_10:
	LONG $0xd8458b48                           // movq         $-40(%rbp), %rax
	LONG $0xfd538d48                           // leaq         $-3(%rbx), %rdx
	LONG $0xffc1c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rcx
	WORD $0x3948; BYTE $0xd0                   // cmpq         %rdx, %rax
	LONG $0x00c7870f; WORD $0x0000             // ja           LBB17_14, $199(%rip)
	LONG $0x07548b41; BYTE $0xff               // movl         $-1(%r15,%rax), %edx
	LONG $0x756efa81; WORD $0x6c6c             // cmpl         $1819047278, %edx
	LONG $0x00e4850f; WORD $0x0000             // jne          LBB17_27, $228(%rip)
	LONG $0x03c08348                           // addq         $3, %rax
	LONG $0x000002b9; BYTE $0x00               // movl         $2, %ecx
	LONG $0x0000a5e9; BYTE $0x00               // jmp          LBB17_13, $165(%rip)

LBB17_15:
	LONG $0xd8458b48                           // movq         $-40(%rbp), %rax
	LONG $0xfd538d48                           // leaq         $-3(%rbx), %rdx
	LONG $0xffc1c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rcx
	WORD $0x3948; BYTE $0xd0                   // cmpq         %rdx, %rax
	LONG $0x0090870f; WORD $0x0000             // ja           LBB17_14, $144(%rip)
	LONG $0x07548b41; BYTE $0xff               // movl         $-1(%r15,%rax), %edx
	LONG $0x7274fa81; WORD $0x6575             // cmpl         $1702195828, %edx
	LONG $0x00e1850f; WORD $0x0000             // jne          LBB17_32, $225(%rip)
	LONG $0x03c08348                           // addq         $3, %rax
	LONG $0x000003b9; BYTE $0x00               // movl         $3, %ecx
	LONG $0x00006ee9; BYTE $0x00               // jmp          LBB17_13, $110(%rip)

LBB17_18:
	WORD $0xc931                               // xorl         %ecx, %ecx
	WORD $0x8545; BYTE $0xe4                   // testl        %r12d, %r12d
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000dba; BYTE $0x00               // movl         $13, %edx
	LONG $0x000011e9; BYTE $0x00               // jmp          LBB17_20, $17(%rip)

LBB17_19:
	WORD $0xc931                               // xorl         %ecx, %ecx
	WORD $0x8545; BYTE $0xe4                   // testl        %r12d, %r12d
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000cba; BYTE $0x00               // movl         $12, %edx

LBB17_20:
	LONG $0xd0440f48             // cmoveq       %rax, %rdx
	WORD $0x940f; BYTE $0xc1     // sete         %cl
	WORD $0x8949; BYTE $0x16     // movq         %rdx, (%r14)
	LONG $0xd8458b48             // movq         $-40(%rbp), %rax
	WORD $0x2948; BYTE $0xc8     // subq         %rcx, %rax
	LONG $0x0000fde9; BYTE $0x00 // jmp          LBB17_21, $253(%rip)

LBB17_22:
	LONG $0xd8458b48                           // movq         $-40(%rbp), %rax
	LONG $0xfc538d48                           // leaq         $-4(%rbx), %rdx
	LONG $0xffc1c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rcx
	WORD $0x3948; BYTE $0xd0                   // cmpq         %rdx, %rax
	LONG $0x001c870f; WORD $0x0000             // ja           LBB17_14, $28(%rip)
	LONG $0x07148b41                           // movl         (%r15,%rax), %edx
	LONG $0x6c61fa81; WORD $0x6573             // cmpl         $1702063201, %edx
	LONG $0x00a2850f; WORD $0x0000             // jne          LBB17_36, $162(%rip)
	LONG $0x04c08348                           // addq         $4, %rax
	LONG $0x000004b9; BYTE $0x00               // movl         $4, %ecx

LBB17_13:
	WORD $0x8948; BYTE $0xc3 // movq         %rax, %rbx

LBB17_14:
	LONG $0xd85d8948             // movq         %rbx, $-40(%rbp)
	WORD $0x8948; BYTE $0xd8     // movq         %rbx, %rax
	WORD $0x8949; BYTE $0x0e     // movq         %rcx, (%r14)
	LONG $0x0000bae9; BYTE $0x00 // jmp          LBB17_21, $186(%rip)

LBB17_25:
	LONG $0x0606c749; WORD $0x0000; BYTE $0x00 // movq         $6, (%r14)
	LONG $0xd8458b48                           // movq         $-40(%rbp), %rax
	LONG $0x0000aae9; BYTE $0x00               // jmp          LBB17_21, $170(%rip)

LBB17_26:
	LONG $0xd85d8948             // movq         %rbx, $-40(%rbp)
	WORD $0x8949; BYTE $0x06     // movq         %rax, (%r14)
	WORD $0x8948; BYTE $0xd8     // movq         %rbx, %rax
	LONG $0x00009be9; BYTE $0x00 // jmp          LBB17_21, $155(%rip)

LBB17_27:
	WORD $0xff48; BYTE $0xc8                   // decq         %rax
	LONG $0xfec1c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rcx
	WORD $0xfa80; BYTE $0x6e                   // cmpb         $110, %dl
	LONG $0x0085850f; WORD $0x0000             // jne          LBB17_31, $133(%rip)
	LONG $0x6c756eba; BYTE $0x6c               // movl         $1819047278, %edx

LBB17_29:
	WORD $0xeac1; BYTE $0x08       // shrl         $8, %edx
	LONG $0x74be0f41; WORD $0x0107 // movsbl       $1(%r15,%rax), %esi
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xb60f; BYTE $0xfa       // movzbl       %dl, %edi
	WORD $0xf739                   // cmpl         %esi, %edi
	LONG $0xffe9840f; WORD $0xffff // je           LBB17_29, $-23(%rip)
	LONG $0x000060e9; BYTE $0x00   // jmp          LBB17_30, $96(%rip)

LBB17_32:
	WORD $0xff48; BYTE $0xc8                   // decq         %rax
	LONG $0xfec1c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rcx
	WORD $0xfa80; BYTE $0x74                   // cmpb         $116, %dl
	LONG $0x0051850f; WORD $0x0000             // jne          LBB17_31, $81(%rip)
	LONG $0x757274ba; BYTE $0x65               // movl         $1702195828, %edx

LBB17_34:
	WORD $0xeac1; BYTE $0x08       // shrl         $8, %edx
	LONG $0x74be0f41; WORD $0x0107 // movsbl       $1(%r15,%rax), %esi
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xb60f; BYTE $0xfa       // movzbl       %dl, %edi
	WORD $0xf739                   // cmpl         %esi, %edi
	LONG $0xffe9840f; WORD $0xffff // je           LBB17_34, $-23(%rip)
	LONG $0x00002ce9; BYTE $0x00   // jmp          LBB17_30, $44(%rip)

LBB17_36:
	LONG $0xfec1c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rcx
	WORD $0xfa80; BYTE $0x61                   // cmpb         $97, %dl
	LONG $0x0020850f; WORD $0x0000             // jne          LBB17_31, $32(%rip)
	LONG $0x736c61ba; BYTE $0x65               // movl         $1702063201, %edx

LBB17_38:
	WORD $0xeac1; BYTE $0x08       // shrl         $8, %edx
	LONG $0x74be0f41; WORD $0x0107 // movsbl       $1(%r15,%rax), %esi
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xb60f; BYTE $0xfa       // movzbl       %dl, %edi
	WORD $0xf739                   // cmpl         %esi, %edi
	LONG $0xffe9840f; WORD $0xffff // je           LBB17_38, $-23(%rip)

LBB17_30:
	LONG $0xd8458948 // movq         %rax, $-40(%rbp)

LBB17_31:
	WORD $0x8949; BYTE $0x0e // movq         %rcx, (%r14)

LBB17_21:
	LONG $0x20c48348         // addq         $32, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x9090; BYTE $0x90 // .p2align 2, 0x90

	// .set L17_0_set_3, LBB17_3-LJTI17_0
	// .set L17_0_set_4, LBB17_4-LJTI17_0
	// .set L17_0_set_5, LBB17_5-LJTI17_0
	// .set L17_0_set_7, LBB17_7-LJTI17_0
	// .set L17_0_set_2, LBB17_2-LJTI17_0
	// .set L17_0_set_8, LBB17_8-LJTI17_0
	// .set L17_0_set_9, LBB17_9-LJTI17_0
	// .set L17_0_set_19, LBB17_19-LJTI17_0
	// .set L17_0_set_22, LBB17_22-LJTI17_0
	// .set L17_0_set_10, LBB17_10-LJTI17_0
	// .set L17_0_set_15, LBB17_15-LJTI17_0
	// .set L17_0_set_25, LBB17_25-LJTI17_0
	// .set L17_0_set_18, LBB17_18-LJTI17_0
LJTI17_0:
	LONG $0xfffffd99 // .long L17_0_set_3
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffdbc // .long L17_0_set_5
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffe0c // .long L17_0_set_7
	LONG $0xfffffd7c // .long L17_0_set_2
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffd7c // .long L17_0_set_2
	LONG $0xfffffd7c // .long L17_0_set_2
	LONG $0xfffffd7c // .long L17_0_set_2
	LONG $0xfffffd7c // .long L17_0_set_2
	LONG $0xfffffd7c // .long L17_0_set_2
	LONG $0xfffffd7c // .long L17_0_set_2
	LONG $0xfffffd7c // .long L17_0_set_2
	LONG $0xfffffd7c // .long L17_0_set_2
	LONG $0xfffffd7c // .long L17_0_set_2
	LONG $0xfffffd7c // .long L17_0_set_2
	LONG $0xfffffe22 // .long L17_0_set_8
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffe38 // .long L17_0_set_9
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffecc // .long L17_0_set_19
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffef3 // .long L17_0_set_22
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffe48 // .long L17_0_set_10
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffe7f // .long L17_0_set_15
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xffffff36 // .long L17_0_set_25
	LONG $0xfffffda9 // .long L17_0_set_4
	LONG $0xfffffeb6 // .long L17_0_set_18
	LONG $0x90909090 // .p2align 4, 0x90

_vstring:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x10ec8348                           // subq         $16, %rsp
	WORD $0x8949; BYTE $0xd6                   // movq         %rdx, %r14
	WORD $0x8948; BYTE $0xf3                   // movq         %rsi, %rbx
	WORD $0x8949; BYTE $0xff                   // movq         %rdi, %r15
	QUAD $0xffffffffd845c748                   // movq         $-1, $-40(%rbp)
	WORD $0x8b4c; BYTE $0x26                   // movq         (%rsi), %r12
	LONG $0xd8558d48                           // leaq         $-40(%rbp), %rdx
	WORD $0x894c; BYTE $0xe6                   // movq         %r12, %rsi
	LONG $0x0000a1e8; BYTE $0x00               // callq        _advance_string, $161(%rip)
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x0027880f; WORD $0x0000             // js           LBB18_1, $39(%rip)
	WORD $0x8948; BYTE $0x03                   // movq         %rax, (%rbx)
	LONG $0x1066894d                           // movq         %r12, $16(%r14)
	LONG $0xd84d8b48                           // movq         $-40(%rbp), %rcx
	WORD $0x3948; BYTE $0xc1                   // cmpq         %rax, %rcx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0xc14c0f48                           // cmovlq       %rcx, %rax
	LONG $0x18468949                           // movq         %rax, $24(%r14)
	LONG $0x000007b8; BYTE $0x00               // movl         $7, %eax
	LONG $0x000007e9; BYTE $0x00               // jmp          LBB18_3, $7(%rip)

LBB18_1:
	LONG $0x084f8b49         // movq         $8(%r15), %rcx
	WORD $0x8948; BYTE $0x0b // movq         %rcx, (%rbx)

LBB18_3:
	WORD $0x8949; BYTE $0x06                                                                   // movq         %rax, (%r14)
	LONG $0x10c48348                                                                           // addq         $16, %rsp
	BYTE $0x5b                                                                                 // popq         %rbx
	WORD $0x5c41                                                                               // popq         %r12
	WORD $0x5e41                                                                               // popq         %r14
	WORD $0x5f41                                                                               // popq         %r15
	BYTE $0x5d                                                                                 // popq         %rbp
	BYTE $0xc3                                                                                 // retq
	QUAD $0x0000000000000000; QUAD $0x0000000000000000; QUAD $0x0000000000000000; WORD $0x0000 // .p2align 5, 0x00

LCPI19_0:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI19_1:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

	// .p2align 4, 0x90
_advance_string:
	BYTE $0x55                                               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                                 // movq         %rsp, %rbp
	WORD $0x5741                                             // pushq        %r15
	WORD $0x5641                                             // pushq        %r14
	WORD $0x5541                                             // pushq        %r13
	WORD $0x5441                                             // pushq        %r12
	BYTE $0x53                                               // pushq        %rbx
	LONG $0x087f8b4c                                         // movq         $8(%rdi), %r15
	WORD $0x2949; BYTE $0xf7                                 // subq         %rsi, %r15
	LONG $0x02e8840f; WORD $0x0000                           // je           LBB19_17, $744(%rip)
	WORD $0x8b4c; BYTE $0x0f                                 // movq         (%rdi), %r9
	LONG $0xff02c748; WORD $0xffff; BYTE $0xff               // movq         $-1, (%rdx)
	LONG $0x40ff8349                                         // cmpq         $64, %r15
	LONG $0x0172820f; WORD $0x0000                           // jb           LBB19_18, $370(%rip)
	WORD $0x8948; BYTE $0xf7                                 // movq         %rsi, %rdi
	WORD $0xf748; BYTE $0xd7                                 // notq         %rdi
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff               // movq         $-1, %r8
	WORD $0x3145; BYTE $0xf6                                 // xorl         %r14d, %r14d
	QUAD $0xffffff7a056ffdc5                                 // vmovdqa      $-134(%rip), %ymm0  /* LCPI19_0+0(%rip) */
	QUAD $0xffffff920d6ffdc5                                 // vmovdqa      $-110(%rip), %ymm1  /* LCPI19_1+0(%rip) */
	QUAD $0xaaaaaaaaaaaaba49; WORD $0xaaaa                   // movabsq      $-6148914691236517206, %r10
	QUAD $0x555555555555bb49; WORD $0x5555                   // movabsq      $6148914691236517205, %r11
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB19_3:
	LONG $0x6f7ec1c4; WORD $0x3114             // vmovdqu      (%r9,%rsi), %ymm2
	LONG $0x6f7ec1c4; WORD $0x315c; BYTE $0x20 // vmovdqu      $32(%r9,%rsi), %ymm3
	LONG $0xe074edc5                           // vpcmpeqb     %ymm0, %ymm2, %ymm4
	LONG $0xe4d77dc5                           // vpmovmskb    %ymm4, %r12d
	LONG $0xe074e5c5                           // vpcmpeqb     %ymm0, %ymm3, %ymm4
	LONG $0xccd7fdc5                           // vpmovmskb    %ymm4, %ecx
	LONG $0xd174edc5                           // vpcmpeqb     %ymm1, %ymm2, %ymm2
	LONG $0xc2d7fdc5                           // vpmovmskb    %ymm2, %eax
	LONG $0xd174e5c5                           // vpcmpeqb     %ymm1, %ymm3, %ymm2
	LONG $0xdad7fdc5                           // vpmovmskb    %ymm2, %ebx
	LONG $0x20e1c148                           // shlq         $32, %rcx
	WORD $0x0949; BYTE $0xcc                   // orq          %rcx, %r12
	LONG $0x20e3c148                           // shlq         $32, %rbx
	WORD $0x0948; BYTE $0xd8                   // orq          %rbx, %rax
	LONG $0x0030850f; WORD $0x0000             // jne          LBB19_7, $48(%rip)
	WORD $0x854d; BYTE $0xf6                   // testq        %r14, %r14
	LONG $0x003b850f; WORD $0x0000             // jne          LBB19_9, $59(%rip)
	WORD $0x3145; BYTE $0xf6                   // xorl         %r14d, %r14d
	WORD $0x854d; BYTE $0xe4                   // testq        %r12, %r12
	LONG $0x006d850f; WORD $0x0000             // jne          LBB19_10, $109(%rip)

LBB19_6:
	LONG $0xc0c78349               // addq         $-64, %r15
	LONG $0xc0c78348               // addq         $-64, %rdi
	LONG $0x40c68348               // addq         $64, %rsi
	LONG $0x3fff8349               // cmpq         $63, %r15
	LONG $0xff94870f; WORD $0xffff // ja           LBB19_3, $-108(%rip)
	LONG $0x000067e9; BYTE $0x00   // jmp          LBB19_12, $103(%rip)

LBB19_7:
	LONG $0xfff88349               // cmpq         $-1, %r8
	LONG $0x000a850f; WORD $0x0000 // jne          LBB19_9, $10(%rip)
	LONG $0xc0bc0f4c               // bsfq         %rax, %r8
	WORD $0x0149; BYTE $0xf0       // addq         %rsi, %r8
	WORD $0x894c; BYTE $0x02       // movq         %r8, (%rdx)

LBB19_9:
	WORD $0x894c; BYTE $0xf1       // movq         %r14, %rcx
	WORD $0xf748; BYTE $0xd1       // notq         %rcx
	WORD $0x2148; BYTE $0xc1       // andq         %rax, %rcx
	LONG $0x092c8d4c               // leaq         (%rcx,%rcx), %r13
	WORD $0x094d; BYTE $0xf5       // orq          %r14, %r13
	WORD $0x894c; BYTE $0xeb       // movq         %r13, %rbx
	WORD $0xf748; BYTE $0xd3       // notq         %rbx
	WORD $0x2148; BYTE $0xc3       // andq         %rax, %rbx
	WORD $0x214c; BYTE $0xd3       // andq         %r10, %rbx
	WORD $0x3145; BYTE $0xf6       // xorl         %r14d, %r14d
	WORD $0x0148; BYTE $0xcb       // addq         %rcx, %rbx
	LONG $0xc6920f41               // setb         %r14b
	WORD $0x0148; BYTE $0xdb       // addq         %rbx, %rbx
	WORD $0x314c; BYTE $0xdb       // xorq         %r11, %rbx
	WORD $0x214c; BYTE $0xeb       // andq         %r13, %rbx
	WORD $0xf748; BYTE $0xd3       // notq         %rbx
	WORD $0x2149; BYTE $0xdc       // andq         %rbx, %r12
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0xff93840f; WORD $0xffff // je           LBB19_6, $-109(%rip)

LBB19_10:
	LONG $0xc4bc0f49         // bsfq         %r12, %rax
	WORD $0x2948; BYTE $0xf8 // subq         %rdi, %rax

LBB19_11:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB19_12:
	WORD $0x014c; BYTE $0xce       // addq         %r9, %rsi
	LONG $0x20ff8349               // cmpq         $32, %r15
	LONG $0x00c2820f; WORD $0x0000 // jb           LBB19_23, $194(%rip)

LBB19_13:
	LONG $0x066ffec5               // vmovdqu      (%rsi), %ymm0
	QUAD $0xfffffe5f0d74fdc5       // vpcmpeqb     $-417(%rip), %ymm0, %ymm1  /* LCPI19_0+0(%rip) */
	LONG $0xf9d7fdc5               // vpmovmskb    %ymm1, %edi
	QUAD $0xfffffe730574fdc5       // vpcmpeqb     $-397(%rip), %ymm0, %ymm0  /* LCPI19_1+0(%rip) */
	LONG $0xc0d7fdc5               // vpmovmskb    %ymm0, %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0043850f; WORD $0x0000 // jne          LBB19_19, $67(%rip)
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x0054850f; WORD $0x0000 // jne          LBB19_21, $84(%rip)
	WORD $0x3145; BYTE $0xf6       // xorl         %r14d, %r14d
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0081840f; WORD $0x0000 // je           LBB19_22, $129(%rip)

LBB19_16:
	LONG $0xc7bc0f48             // bsfq         %rdi, %rax
	WORD $0x294c; BYTE $0xce     // subq         %r9, %rsi
	WORD $0x0148; BYTE $0xf0     // addq         %rsi, %rax
	WORD $0xff48; BYTE $0xc0     // incq         %rax
	LONG $0xffff9ae9; BYTE $0xff // jmp          LBB19_11, $-102(%rip)

LBB19_18:
	WORD $0x014c; BYTE $0xce                   // addq         %r9, %rsi
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8
	WORD $0x3145; BYTE $0xf6                   // xorl         %r14d, %r14d
	LONG $0x20ff8349                           // cmpq         $32, %r15
	LONG $0xff9e830f; WORD $0xffff             // jae          LBB19_13, $-98(%rip)
	LONG $0x00005be9; BYTE $0x00               // jmp          LBB19_23, $91(%rip)

LBB19_19:
	LONG $0xfff88349               // cmpq         $-1, %r8
	LONG $0x0010850f; WORD $0x0000 // jne          LBB19_21, $16(%rip)
	WORD $0x8948; BYTE $0xf1       // movq         %rsi, %rcx
	WORD $0x294c; BYTE $0xc9       // subq         %r9, %rcx
	LONG $0xc0bc0f4c               // bsfq         %rax, %r8
	WORD $0x0149; BYTE $0xc8       // addq         %rcx, %r8
	WORD $0x894c; BYTE $0x02       // movq         %r8, (%rdx)

LBB19_21:
	WORD $0x8944; BYTE $0xf1       // movl         %r14d, %ecx
	WORD $0xd1f7                   // notl         %ecx
	WORD $0xc121                   // andl         %eax, %ecx
	WORD $0x1c8d; BYTE $0x09       // leal         (%rcx,%rcx), %ebx
	LONG $0x4e148d45               // leal         (%r14,%rcx,2), %r10d
	WORD $0xd3f7                   // notl         %ebx
	WORD $0xc321                   // andl         %eax, %ebx
	LONG $0xaaaae381; WORD $0xaaaa // andl         $-1431655766, %ebx
	WORD $0x3145; BYTE $0xf6       // xorl         %r14d, %r14d
	WORD $0xcb01                   // addl         %ecx, %ebx
	LONG $0xc6920f41               // setb         %r14b
	WORD $0xdb01                   // addl         %ebx, %ebx
	LONG $0x5555f381; WORD $0x5555 // xorl         $1431655765, %ebx
	WORD $0x2144; BYTE $0xd3       // andl         %r10d, %ebx
	WORD $0xd3f7                   // notl         %ebx
	WORD $0xdf21                   // andl         %ebx, %edi
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0xff7f850f; WORD $0xffff // jne          LBB19_16, $-129(%rip)

LBB19_22:
	LONG $0x20c68348 // addq         $32, %rsi
	LONG $0xe0c78349 // addq         $-32, %r15

LBB19_23:
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x00af850f; WORD $0x0000 // jne          LBB19_38, $175(%rip)
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	LONG $0x0083840f; WORD $0x0000 // je           LBB19_35, $131(%rip)

LBB19_25:
	WORD $0x894d; BYTE $0xca                   // movq         %r9, %r10
	WORD $0xf749; BYTE $0xda                   // negq         %r10
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax

LBB19_26:
	WORD $0xff31 // xorl         %edi, %edi

LBB19_27:
	LONG $0x3e1cb60f               // movzbl       (%rsi,%rdi), %ebx
	WORD $0xfb80; BYTE $0x22       // cmpb         $34, %bl
	LONG $0x0061840f; WORD $0x0000 // je           LBB19_34, $97(%rip)
	WORD $0xfb80; BYTE $0x5c       // cmpb         $92, %bl
	LONG $0x0011840f; WORD $0x0000 // je           LBB19_30, $17(%rip)
	WORD $0xff48; BYTE $0xc7       // incq         %rdi
	WORD $0x3949; BYTE $0xff       // cmpq         %rdi, %r15
	LONG $0xffde850f; WORD $0xffff // jne          LBB19_27, $-34(%rip)
	LONG $0x000058e9; BYTE $0x00   // jmp          LBB19_36, $88(%rip)

LBB19_30:
	LONG $0xff4f8d49               // leaq         $-1(%r15), %rcx
	WORD $0x3948; BYTE $0xf9       // cmpq         %rdi, %rcx
	LONG $0xfece840f; WORD $0xffff // je           LBB19_11, $-306(%rip)
	LONG $0xfff88349               // cmpq         $-1, %r8
	LONG $0x000a850f; WORD $0x0000 // jne          LBB19_33, $10(%rip)
	LONG $0x32048d4d               // leaq         (%r10,%rsi), %r8
	WORD $0x0149; BYTE $0xf8       // addq         %rdi, %r8
	WORD $0x894c; BYTE $0x02       // movq         %r8, (%rdx)

LBB19_33:
	WORD $0x0148; BYTE $0xfe       // addq         %rdi, %rsi
	LONG $0x02c68348               // addq         $2, %rsi
	WORD $0x894c; BYTE $0xf9       // movq         %r15, %rcx
	WORD $0x2948; BYTE $0xf9       // subq         %rdi, %rcx
	LONG $0xfec18348               // addq         $-2, %rcx
	LONG $0xfec78349               // addq         $-2, %r15
	WORD $0x3949; BYTE $0xff       // cmpq         %rdi, %r15
	WORD $0x8949; BYTE $0xcf       // movq         %rcx, %r15
	LONG $0xff95850f; WORD $0xffff // jne          LBB19_26, $-107(%rip)
	LONG $0xfffe94e9; BYTE $0xff   // jmp          LBB19_11, $-364(%rip)

LBB19_34:
	WORD $0x0148; BYTE $0xfe // addq         %rdi, %rsi
	WORD $0xff48; BYTE $0xc6 // incq         %rsi

LBB19_35:
	WORD $0x294c; BYTE $0xce     // subq         %r9, %rsi
	WORD $0x8948; BYTE $0xf0     // movq         %rsi, %rax
	LONG $0xfffe83e9; BYTE $0xff // jmp          LBB19_11, $-381(%rip)

LBB19_36:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0xfb80; BYTE $0x22                   // cmpb         $34, %bl
	LONG $0xfe73850f; WORD $0xffff             // jne          LBB19_11, $-397(%rip)
	WORD $0x0148; BYTE $0xfe                   // addq         %rdi, %rsi
	LONG $0xffffdde9; BYTE $0xff               // jmp          LBB19_35, $-35(%rip)

LBB19_38:
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	LONG $0x002a840f; WORD $0x0000 // je           LBB19_17, $42(%rip)
	LONG $0xfff88349               // cmpq         $-1, %r8
	LONG $0x000c850f; WORD $0x0000 // jne          LBB19_41, $12(%rip)
	WORD $0x894d; BYTE $0xc8       // movq         %r9, %r8
	WORD $0xf749; BYTE $0xd0       // notq         %r8
	WORD $0x0149; BYTE $0xf0       // addq         %rsi, %r8
	WORD $0x894c; BYTE $0x02       // movq         %r8, (%rdx)

LBB19_41:
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0xff49; BYTE $0xcf       // decq         %r15
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	LONG $0xff2c850f; WORD $0xffff // jne          LBB19_25, $-212(%rip)
	LONG $0xffffaae9; BYTE $0xff   // jmp          LBB19_35, $-86(%rip)

LBB19_17:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0xfffe2ce9; BYTE $0xff               // jmp          LBB19_11, $-468(%rip)
	WORD $0x0000                               // .p2align 4, 0x00

LCPI20_0:
	LONG $0x43300000 // .long 1127219200
	LONG $0x45300000 // .long 1160773632
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0

LCPI20_1:
	QUAD $0x4330000000000000 // .quad 0x4330000000000000
	QUAD $0x4530000000000000 // .quad 0x4530000000000000

	// .p2align 3, 0x00
LCPI20_2:
	QUAD $0x430c6bf526340000 // .quad 0x430c6bf526340000

LCPI20_3:
	QUAD $0xc30c6bf526340000 // .quad 0xc30c6bf526340000

	// .p2align 4, 0x90
_vnumber:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x48ec8348                           // subq         $72, %rsp
	WORD $0x8949; BYTE $0xd7                   // movq         %rdx, %r15
	WORD $0x8b4c; BYTE $0x36                   // movq         (%rsi), %r14
	WORD $0x8b4c; BYTE $0x1f                   // movq         (%rdi), %r11
	LONG $0x086f8b4c                           // movq         $8(%rdi), %r13
	LONG $0x204a8b4c                           // movq         $32(%rdx), %r9
	LONG $0x28528b4c                           // movq         $40(%rdx), %r10
	LONG $0x0902c748; WORD $0x0000; BYTE $0x00 // movq         $9, (%rdx)
	LONG $0xc057f9c5                           // vxorpd       %xmm0, %xmm0, %xmm0
	LONG $0x4211f9c5; BYTE $0x08               // vmovupd      %xmm0, $8(%rdx)
	LONG $0x1872894c                           // movq         %r14, $24(%rdx)
	WORD $0x394d; BYTE $0xee                   // cmpq         %r13, %r14
	LONG $0x02da830f; WORD $0x0000             // jae          LBB20_54, $730(%rip)
	LONG $0x333c8a43                           // movb         (%r11,%r14), %dil
	LONG $0x000001ba; BYTE $0x00               // movl         $1, %edx
	WORD $0x894c; BYTE $0xf0                   // movq         %r14, %rax
	LONG $0x2dff8040                           // cmpb         $45, %dil
	LONG $0x0016850f; WORD $0x0000             // jne          LBB20_4, $22(%rip)
	LONG $0x01468d49                           // leaq         $1(%r14), %rax
	WORD $0x394c; BYTE $0xe8                   // cmpq         %r13, %rax
	LONG $0x02b7830f; WORD $0x0000             // jae          LBB20_54, $695(%rip)
	LONG $0x033c8a41                           // movb         (%r11,%rax), %dil
	LONG $0xffffffba; BYTE $0xff               // movl         $-1, %edx

LBB20_4:
	WORD $0x4f8d; BYTE $0xc6       // leal         $-58(%rdi), %ecx
	WORD $0xf980; BYTE $0xf5       // cmpb         $-11, %cl
	LONG $0x000f870f; WORD $0x0000 // ja           LBB20_6, $15(%rip)

LBB20_5:
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfe07c749; WORD $0xffff; BYTE $0xff // movq         $-2, (%r15)
	LONG $0x00029de9; BYTE $0x00               // jmp          LBB20_55, $669(%rip)

LBB20_6:
	LONG $0x30ff8040                       // cmpb         $48, %dil
	LONG $0x0035850f; WORD $0x0000         // jne          LBB20_10, $53(%rip)
	LONG $0x01488d48                       // leaq         $1(%rax), %rcx
	WORD $0x394c; BYTE $0xe8               // cmpq         %r13, %rax
	LONG $0x00b7830f; WORD $0x0000         // jae          LBB20_19, $183(%rip)
	LONG $0x0b1c8a41                       // movb         (%r11,%rcx), %bl
	WORD $0xc380; BYTE $0xd2               // addb         $-46, %bl
	WORD $0xfb80; BYTE $0x37               // cmpb         $55, %bl
	LONG $0x00a7870f; WORD $0x0000         // ja           LBB20_19, $167(%rip)
	LONG $0xc3b60f44                       // movzbl       %bl, %r8d
	QUAD $0x000000800001bb48; WORD $0x0080 // movabsq      $36028797027352577, %rbx
	LONG $0xc3a30f4c                       // btq          %r8, %rbx
	LONG $0x008f830f; WORD $0x0000         // jae          LBB20_19, $143(%rip)

LBB20_10:
	WORD $0x394c; BYTE $0xe8       // cmpq         %r13, %rax
	LONG $0x984d894c               // movq         %r9, $-104(%rbp)
	LONG $0xa055894c               // movq         %r10, $-96(%rbp)
	LONG $0x006c830f; WORD $0x0000 // jae          LBB20_18, $108(%rip)
	WORD $0x4f8d; BYTE $0xd0       // leal         $-48(%rdi), %ecx
	WORD $0xf980; BYTE $0x09       // cmpb         $9, %cl
	LONG $0x007a870f; WORD $0x0000 // ja           LBB20_20, $122(%rip)
	WORD $0x01b1                   // movb         $1, %cl
	WORD $0x4d89; BYTE $0xd0       // movl         %ecx, $-48(%rbp)
	WORD $0x8941; BYTE $0xd0       // movl         %edx, %r8d
	LONG $0xffffd0b9; BYTE $0xff   // movl         $4294967248, %ecx
	LONG $0xff558d4d               // leaq         $-1(%r13), %r10
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0xdb31                   // xorl         %ebx, %ebx
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	BYTE $0x90                     // .p2align 4, 0x90

LBB20_13:
	WORD $0xfb83; BYTE $0x12       // cmpl         $18, %ebx
	LONG $0x00178f0f; WORD $0x0000 // jg           LBB20_15, $23(%rip)
	LONG $0xa4148d4b               // leaq         (%r12,%r12,4), %rdx
	LONG $0xffbe0f40               // movsbl       %dil, %edi
	WORD $0xcf01                   // addl         %ecx, %edi
	LONG $0x57248d4c               // leaq         (%rdi,%rdx,2), %r12
	WORD $0xc3ff                   // incl         %ebx
	LONG $0x000005e9; BYTE $0x00   // jmp          LBB20_16, $5(%rip)
	WORD $0x9090                   // .p2align 4, 0x90

LBB20_15:
	WORD $0xff41; BYTE $0xc1 // incl         %r9d

LBB20_16:
	WORD $0x3949; BYTE $0xc2       // cmpq         %rax, %r10
	LONG $0x007d840f; WORD $0x0000 // je           LBB20_25, $125(%rip)
	LONG $0x7cb60f41; WORD $0x0103 // movzbl       $1(%r11,%rax), %edi
	WORD $0x578d; BYTE $0xd0       // leal         $-48(%rdi), %edx
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xfa80; BYTE $0x0a       // cmpb         $10, %dl
	LONG $0xffbf820f; WORD $0xffff // jb           LBB20_13, $-65(%rip)
	LONG $0x00002ae9; BYTE $0x00   // jmp          LBB20_21, $42(%rip)

LBB20_18:
	WORD $0x01b1                 // movb         $1, %cl
	WORD $0x4d89; BYTE $0xd0     // movl         %ecx, $-48(%rbp)
	WORD $0x3145; BYTE $0xc9     // xorl         %r9d, %r9d
	WORD $0xdb31                 // xorl         %ebx, %ebx
	WORD $0x3145; BYTE $0xe4     // xorl         %r12d, %r12d
	LONG $0x000057e9; BYTE $0x00 // jmp          LBB20_27, $87(%rip)

LBB20_19:
	WORD $0x8948; BYTE $0x0e     // movq         %rcx, (%rsi)
	LONG $0x0001c7e9; BYTE $0x00 // jmp          LBB20_55, $455(%rip)

LBB20_20:
	WORD $0x01b1             // movb         $1, %cl
	WORD $0x4d89; BYTE $0xd0 // movl         %ecx, $-48(%rbp)
	WORD $0x8941; BYTE $0xd0 // movl         %edx, %r8d
	WORD $0x3145; BYTE $0xe4 // xorl         %r12d, %r12d
	WORD $0xdb31             // xorl         %ebx, %ebx
	WORD $0x3145; BYTE $0xc9 // xorl         %r9d, %r9d

LBB20_21:
	LONG $0x2eff8040                           // cmpb         $46, %dil
	LONG $0x0032850f; WORD $0x0000             // jne          LBB20_26, $50(%rip)
	WORD $0xff48; BYTE $0xc0                   // incq         %rax
	LONG $0x0807c749; WORD $0x0000; BYTE $0x00 // movq         $8, (%r15)
	WORD $0x394c; BYTE $0xe8                   // cmpq         %r13, %rax
	LONG $0x0190830f; WORD $0x0000             // jae          LBB20_54, $400(%rip)
	LONG $0x03148a41                           // movb         (%r11,%rax), %dl
	WORD $0xc280; BYTE $0xc6                   // addb         $-58, %dl
	WORD $0xfa80; BYTE $0xf5                   // cmpb         $-11, %dl
	LONG $0xfede860f; WORD $0xffff             // jbe          LBB20_5, $-290(%rip)
	LONG $0x00d045c7; WORD $0x0000; BYTE $0x00 // movl         $0, $-48(%rbp)
	LONG $0x000003e9; BYTE $0x00               // jmp          LBB20_26, $3(%rip)

LBB20_25:
	WORD $0x894c; BYTE $0xe8 // movq         %r13, %rax

LBB20_26:
	WORD $0x8944; BYTE $0xc2 // movl         %r8d, %edx

LBB20_27:
	WORD $0x3145; BYTE $0xd2       // xorl         %r10d, %r10d
	WORD $0x8545; BYTE $0xc9       // testl        %r9d, %r9d
	LONG $0xc29f0f41               // setg         %r10b
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x0055850f; WORD $0x0000 // jne          LBB20_36, $85(%rip)
	WORD $0x8545; BYTE $0xc9       // testl        %r9d, %r9d
	LONG $0x004c850f; WORD $0x0000 // jne          LBB20_36, $76(%rip)
	WORD $0x394c; BYTE $0xe8       // cmpq         %r13, %rax
	LONG $0x003b830f; WORD $0x0000 // jae          LBB20_34, $59(%rip)
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0x2944; BYTE $0xe9       // subl         %r13d, %ecx
	WORD $0xdb31                   // xorl         %ebx, %ebx
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0x9090                   // .p2align 4, 0x90

LBB20_31:
	LONG $0x033c8041; BYTE $0x30   // cmpb         $48, (%r11,%rax)
	LONG $0x0029850f; WORD $0x0000 // jne          LBB20_35, $41(%rip)
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xff41; BYTE $0xc9       // decl         %r9d
	WORD $0x3949; BYTE $0xc5       // cmpq         %rax, %r13
	LONG $0xffe6850f; WORD $0xffff // jne          LBB20_31, $-26(%rip)
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	WORD $0x8948; BYTE $0xcb       // movq         %rcx, %rbx
	LONG $0x00d07d80               // cmpb         $0, $-48(%rbp)
	LONG $0x013c850f; WORD $0x0000 // jne          LBB20_57, $316(%rip)
	LONG $0x00016be9; BYTE $0x00   // jmp          LBB20_61, $363(%rip)

LBB20_34:
	WORD $0x3145; BYTE $0xc9 // xorl         %r9d, %r9d
	WORD $0xdb31             // xorl         %ebx, %ebx

LBB20_35:
	WORD $0x3145; BYTE $0xe4 // xorl         %r12d, %r12d

LBB20_36:
	WORD $0x394c; BYTE $0xe8       // cmpq         %r13, %rax
	LONG $0x0049830f; WORD $0x0000 // jae          LBB20_42, $73(%rip)
	WORD $0xfb83; BYTE $0x12       // cmpl         $18, %ebx
	LONG $0x00408f0f; WORD $0x0000 // jg           LBB20_42, $64(%rip)
	LONG $0xffd0b841; WORD $0xffff // movl         $4294967248, %r8d
	BYTE $0x90                     // .p2align 4, 0x90

LBB20_39:
	LONG $0x3cb60f41; BYTE $0x03   // movzbl       (%r11,%rax), %edi
	WORD $0x4f8d; BYTE $0xd0       // leal         $-48(%rdi), %ecx
	WORD $0xf980; BYTE $0x09       // cmpb         $9, %cl
	LONG $0x0028870f; WORD $0x0000 // ja           LBB20_42, $40(%rip)
	LONG $0xa40c8d4b               // leaq         (%r12,%r12,4), %rcx
	WORD $0x0144; BYTE $0xc7       // addl         %r8d, %edi
	LONG $0x4f248d4c               // leaq         (%rdi,%rcx,2), %r12
	WORD $0xff41; BYTE $0xc9       // decl         %r9d
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x394c; BYTE $0xe8       // cmpq         %r13, %rax
	LONG $0x000e830f; WORD $0x0000 // jae          LBB20_42, $14(%rip)
	WORD $0x4b8d; BYTE $0x01       // leal         $1(%rbx), %ecx
	WORD $0xfb83; BYTE $0x12       // cmpl         $18, %ebx
	WORD $0xcb89                   // movl         %ecx, %ebx
	LONG $0xffc78c0f; WORD $0xffff // jl           LBB20_39, $-57(%rip)

LBB20_42:
	WORD $0x394c; BYTE $0xe8             // cmpq         %r13, %rax
	LONG $0x00c4830f; WORD $0x0000       // jae          LBB20_56, $196(%rip)
	LONG $0x031c8a41                     // movb         (%r11,%rax), %bl
	WORD $0x7b8d; BYTE $0xd0             // leal         $-48(%rbx), %edi
	LONG $0x09ff8040                     // cmpb         $9, %dil
	LONG $0x0032870f; WORD $0x0000       // ja           LBB20_48, $50(%rip)
	LONG $0xff458d4d                     // leaq         $-1(%r13), %r8
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB20_45:
	WORD $0x3949; BYTE $0xc0       // cmpq         %rax, %r8
	LONG $0x0178840f; WORD $0x0000 // je           LBB20_67, $376(%rip)
	LONG $0x5cb60f41; WORD $0x0103 // movzbl       $1(%r11,%rax), %ebx
	WORD $0x7b8d; BYTE $0xd0       // leal         $-48(%rbx), %edi
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	LONG $0x09ff8040               // cmpb         $9, %dil
	LONG $0xffe1860f; WORD $0xffff // jbe          LBB20_45, $-31(%rip)
	LONG $0x0001ba41; WORD $0x0000 // movl         $1, %r10d

LBB20_48:
	WORD $0xcb80; BYTE $0x20                   // orb          $32, %bl
	WORD $0xfb80; BYTE $0x65                   // cmpb         $101, %bl
	LONG $0x0075850f; WORD $0x0000             // jne          LBB20_56, $117(%rip)
	LONG $0x01788d48                           // leaq         $1(%rax), %rdi
	LONG $0x0807c749; WORD $0x0000; BYTE $0x00 // movq         $8, (%r15)
	WORD $0x394c; BYTE $0xef                   // cmpq         %r13, %rdi
	LONG $0x0048830f; WORD $0x0000             // jae          LBB20_54, $72(%rip)
	LONG $0xc4558944                           // movl         %r10d, $-60(%rbp)
	LONG $0x3b148a45                           // movb         (%r11,%rdi), %r10b
	LONG $0x2dfa8041                           // cmpb         $45, %r10b
	LONG $0x0010840f; WORD $0x0000             // je           LBB20_52, $16(%rip)
	LONG $0x0001b841; WORD $0x0000             // movl         $1, %r8d
	LONG $0x2bfa8041                           // cmpb         $43, %r10b
	LONG $0x02ad850f; WORD $0x0000             // jne          LBB20_89, $685(%rip)

LBB20_52:
	LONG $0x02c08348               // addq         $2, %rax
	WORD $0x394c; BYTE $0xe8       // cmpq         %r13, %rax
	LONG $0x0019830f; WORD $0x0000 // jae          LBB20_54, $25(%rip)
	WORD $0xc931                   // xorl         %ecx, %ecx
	LONG $0x2bfa8041               // cmpb         $43, %r10b
	WORD $0x940f; BYTE $0xc1       // sete         %cl
	LONG $0x09048d44               // leal         (%rcx,%rcx), %r8d
	WORD $0xff41; BYTE $0xc8       // decl         %r8d
	LONG $0x03148a45               // movb         (%r11,%rax), %r10b
	LONG $0x00028ae9; BYTE $0x00   // jmp          LBB20_90, $650(%rip)

LBB20_54:
	WORD $0x894c; BYTE $0x2e                   // movq         %r13, (%rsi)
	LONG $0xff07c749; WORD $0xffff; BYTE $0xff // movq         $-1, (%r15)

LBB20_55:
	LONG $0x48c48348 // addq         $72, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5d41     // popq         %r13
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB20_56:
	WORD $0x8944; BYTE $0xcb       // movl         %r9d, %ebx
	WORD $0x8949; BYTE $0xc5       // movq         %rax, %r13
	LONG $0x00d07d80               // cmpb         $0, $-48(%rbp)
	LONG $0x0034840f; WORD $0x0000 // je           LBB20_61, $52(%rip)

LBB20_57:
	WORD $0xdb85                           // testl        %ebx, %ebx
	LONG $0x0025850f; WORD $0x0000         // jne          LBB20_60, $37(%rip)
	QUAD $0x000000000000b848; WORD $0x8000 // movabsq      $-9223372036854775808, %rax
	WORD $0x6348; BYTE $0xca               // movslq       %edx, %rcx
	WORD $0x854d; BYTE $0xe4               // testq        %r12, %r12
	LONG $0x00e1890f; WORD $0x0000         // jns          LBB20_70, $225(%rip)
	WORD $0x894c; BYTE $0xe7               // movq         %r12, %rdi
	WORD $0x2148; BYTE $0xcf               // andq         %rcx, %rdi
	WORD $0x3948; BYTE $0xc7               // cmpq         %rax, %rdi
	LONG $0x00d2840f; WORD $0x0000         // je           LBB20_70, $210(%rip)

LBB20_60:
	LONG $0x0807c749; WORD $0x0000; BYTE $0x00 // movq         $8, (%r15)

LBB20_61:
	QUAD $0x00000000b845c748                   // movq         $0, $-72(%rbp)
	LONG $0x6ef9c1c4; BYTE $0xc4               // vmovq        %r12, %xmm0
	QUAD $0xfffffc410562f9c5                   // vpunpckldq   $-959(%rip), %xmm0, %xmm0  /* LCPI20_0+0(%rip) */
	QUAD $0xfffffc49055cf9c5                   // vsubpd       $-951(%rip), %xmm0, %xmm0  /* LCPI20_1+0(%rip) */
	LONG $0x0579e3c4; WORD $0x01c8             // vpermilpd    $1, %xmm0, %xmm1
	LONG $0xc058f3c5                           // vaddsd       %xmm0, %xmm1, %xmm0
	LONG $0x4511fbc5; BYTE $0xc8               // vmovsd       %xmm0, $-56(%rbp)
	WORD $0x894c; BYTE $0xe0                   // movq         %r12, %rax
	LONG $0x34e8c148                           // shrq         $52, %rax
	LONG $0x010c850f; WORD $0x0000             // jne          LBB20_76, $268(%rip)
	LONG $0x7ef9e1c4; BYTE $0xc1               // vmovq        %xmm0, %rcx
	WORD $0xd089                               // movl         %edx, %eax
	WORD $0xe8c1; BYTE $0x1f                   // shrl         $31, %eax
	LONG $0x3fe0c148                           // shlq         $63, %rax
	WORD $0x0948; BYTE $0xc8                   // orq          %rcx, %rax
	LONG $0xc8458948                           // movq         %rax, $-56(%rbp)
	WORD $0x854d; BYTE $0xe4                   // testq        %r12, %r12
	LONG $0x0196840f; WORD $0x0000             // je           LBB20_84, $406(%rip)
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0x018e840f; WORD $0x0000             // je           LBB20_84, $398(%rip)
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq        %rax, %xmm0
	WORD $0x438d; BYTE $0xff                   // leal         $-1(%rbx), %eax
	WORD $0xf883; BYTE $0x24                   // cmpl         $36, %eax
	LONG $0x003f870f; WORD $0x0000             // ja           LBB20_68, $63(%rip)
	WORD $0xfb83; BYTE $0x17                   // cmpl         $23, %ebx
	LONG $0x008d820f; WORD $0x0000             // jb           LBB20_71, $141(%rip)
	WORD $0x438d; BYTE $0xea                   // leal         $-22(%rbx), %eax
	LONG $0xa30d8d48; WORD $0x0129; BYTE $0x00 // leaq         $76195(%rip), %rcx  /* _P10_TAB+0(%rip) */
	LONG $0x0459fbc5; BYTE $0xc1               // vmulsd       (%rcx,%rax,8), %xmm0, %xmm0
	LONG $0x4511fbc5; BYTE $0xc8               // vmovsd       %xmm0, $-56(%rbp)
	LONG $0x000016b8; BYTE $0x00               // movl         $22, %eax
	LONG $0x000071e9; BYTE $0x00               // jmp          LBB20_72, $113(%rip)

LBB20_67:
	LONG $0x0001ba41; WORD $0x0000 // movl         $1, %r10d
	WORD $0x8944; BYTE $0xcb       // movl         %r9d, %ebx
	LONG $0x00d07d80               // cmpb         $0, $-48(%rbp)
	LONG $0xff22850f; WORD $0xffff // jne          LBB20_57, $-222(%rip)
	LONG $0xffff51e9; BYTE $0xff   // jmp          LBB20_61, $-175(%rip)

LBB20_68:
	WORD $0xfb83; BYTE $0xea                   // cmpl         $-22, %ebx
	LONG $0x008d820f; WORD $0x0000             // jb           LBB20_76, $141(%rip)
	WORD $0xdbf7                               // negl         %ebx
	LONG $0x65058d48; WORD $0x0129; BYTE $0x00 // leaq         $76133(%rip), %rax  /* _P10_TAB+0(%rip) */
	LONG $0x045efbc5; BYTE $0xd8               // vdivsd       (%rax,%rbx,8), %xmm0, %xmm0
	LONG $0x00006be9; BYTE $0x00               // jmp          LBB20_75, $107(%rip)

LBB20_70:
	LONG $0x6ef9c1c4; BYTE $0xc4   // vmovq        %r12, %xmm0
	LONG $0xe1af0f4c               // imulq        %rcx, %r12
	QUAD $0xfffffb7a0562f9c5       // vpunpckldq   $-1158(%rip), %xmm0, %xmm0  /* LCPI20_0+0(%rip) */
	QUAD $0xfffffb82055cf9c5       // vsubpd       $-1150(%rip), %xmm0, %xmm0  /* LCPI20_1+0(%rip) */
	LONG $0x1067894d               // movq         %r12, $16(%r15)
	LONG $0x0579e3c4; WORD $0x01c8 // vpermilpd    $1, %xmm0, %xmm1
	LONG $0xc058f3c5               // vaddsd       %xmm0, %xmm1, %xmm0
	WORD $0x2148; BYTE $0xc8       // andq         %rcx, %rax
	LONG $0x7ef9e1c4; BYTE $0xc1   // vmovq        %xmm0, %rcx
	WORD $0x0948; BYTE $0xc1       // orq          %rax, %rcx
	LONG $0x084f8949               // movq         %rcx, $8(%r15)
	LONG $0x00011ce9; BYTE $0x00   // jmp          LBB20_88, $284(%rip)

LBB20_71:
	WORD $0xd889 // movl         %ebx, %eax

LBB20_72:
	QUAD $0xfffffb66052ef9c5                   // vucomisd     $-1178(%rip), %xmm0  /* LCPI20_2+0(%rip) */
	LONG $0x002f870f; WORD $0x0000             // ja           LBB20_76, $47(%rip)
	QUAD $0xfffffb600d10fbc5                   // vmovsd       $-1184(%rip), %xmm1  /* LCPI20_3+0(%rip) */
	LONG $0xc82ef9c5                           // vucomisd     %xmm0, %xmm1
	LONG $0x001d870f; WORD $0x0000             // ja           LBB20_76, $29(%rip)
	WORD $0xc089                               // movl         %eax, %eax
	LONG $0xf50d8d48; WORD $0x0128; BYTE $0x00 // leaq         $76021(%rip), %rcx  /* _P10_TAB+0(%rip) */
	LONG $0x0459fbc5; BYTE $0xc1               // vmulsd       (%rcx,%rax,8), %xmm0, %xmm0

LBB20_75:
	LONG $0x4511fbc5; BYTE $0xc8 // vmovsd       %xmm0, $-56(%rbp)
	LONG $0x7ef9e1c4; BYTE $0xc0 // vmovq        %xmm0, %rax
	LONG $0x0000a8e9; BYTE $0x00 // jmp          LBB20_84, $168(%rip)

LBB20_76:
	LONG $0xc4558944               // movl         %r10d, $-60(%rbp)
	LONG $0xa85d894c               // movq         %r11, $-88(%rbp)
	LONG $0xd0758948               // movq         %rsi, $-48(%rbp)
	LONG $0xc84d8d48               // leaq         $-56(%rbp), %rcx
	WORD $0x894c; BYTE $0xe7       // movq         %r12, %rdi
	WORD $0xde89                   // movl         %ebx, %esi
	LONG $0xb05d8948               // movq         %rbx, $-80(%rbp)
	WORD $0xd389                   // movl         %edx, %ebx
	LONG $0xffe221e8; BYTE $0xff   // callq        _atof_eisel_lemire64, $-7647(%rip)
	WORD $0xc084                   // testb        %al, %al
	LONG $0x004b840f; WORD $0x0000 // je           LBB20_81, $75(%rip)
	LONG $0xb0758b48               // movq         $-80(%rbp), %rsi
	LONG $0x00c47d83               // cmpl         $0, $-60(%rbp)
	LONG $0x006a840f; WORD $0x0000 // je           LBB20_82, $106(%rip)
	WORD $0xff49; BYTE $0xc4       // incq         %r12
	LONG $0xb84d8d48               // leaq         $-72(%rbp), %rcx
	WORD $0x894c; BYTE $0xe7       // movq         %r12, %rdi
	WORD $0xda89                   // movl         %ebx, %edx
	LONG $0xffe1fae8; BYTE $0xff   // callq        _atof_eisel_lemire64, $-7686(%rip)
	WORD $0xc084                   // testb        %al, %al
	LONG $0x0024840f; WORD $0x0000 // je           LBB20_81, $36(%rip)
	LONG $0x4d10fbc5; BYTE $0xb8   // vmovsd       $-72(%rbp), %xmm1
	LONG $0x4510fbc5; BYTE $0xc8   // vmovsd       $-56(%rbp), %xmm0
	LONG $0xc82ef9c5               // vucomisd     %xmm0, %xmm1
	LONG $0x0010850f; WORD $0x0000 // jne          LBB20_81, $16(%rip)
	LONG $0x000a8a0f; WORD $0x0000 // jp           LBB20_81, $10(%rip)
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq        %xmm0, %rax
	LONG $0x000031e9; BYTE $0x00   // jmp          LBB20_83, $49(%rip)

LBB20_81:
	LONG $0xa87d8b48             // movq         $-88(%rbp), %rdi
	WORD $0x014c; BYTE $0xf7     // addq         %r14, %rdi
	WORD $0x894c; BYTE $0xee     // movq         %r13, %rsi
	WORD $0x294c; BYTE $0xf6     // subq         %r14, %rsi
	LONG $0x98558b48             // movq         $-104(%rbp), %rdx
	LONG $0xa04d8b48             // movq         $-96(%rbp), %rcx
	LONG $0xffe974e8; BYTE $0xff // callq        _atof_native, $-5772(%rip)
	LONG $0x4511fbc5; BYTE $0xc8 // vmovsd       %xmm0, $-56(%rbp)
	LONG $0x7ef9e1c4; BYTE $0xc0 // vmovq        %xmm0, %rax
	LONG $0xd0758b48             // movq         $-48(%rbp), %rsi
	LONG $0x00000de9; BYTE $0x00 // jmp          LBB20_85, $13(%rip)

LBB20_82:
	LONG $0xc8458b48 // movq         $-56(%rbp), %rax

LBB20_83:
	LONG $0xd0758b48 // movq         $-48(%rbp), %rsi

LBB20_84:
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq        %rax, %xmm0

LBB20_85:
	QUAD $0x000000000000b948; WORD $0x8000     // movabsq      $-9223372036854775808, %rcx
	WORD $0xff48; BYTE $0xc9                   // decq         %rcx
	WORD $0x2148; BYTE $0xc1                   // andq         %rax, %rcx
	QUAD $0x000000000000b848; WORD $0x7ff0     // movabsq      $9218868437227405312, %rax
	WORD $0x3948; BYTE $0xc1                   // cmpq         %rax, %rcx
	LONG $0x0007850f; WORD $0x0000             // jne          LBB20_87, $7(%rip)
	LONG $0xf807c749; WORD $0xffff; BYTE $0xff // movq         $-8, (%r15)

LBB20_87:
	LONG $0x117bc1c4; WORD $0x0847 // vmovsd       %xmm0, $8(%r15)

LBB20_88:
	WORD $0x894c; BYTE $0x2e     // movq         %r13, (%rsi)
	LONG $0xfffd83e9; BYTE $0xff // jmp          LBB20_55, $-637(%rip)

LBB20_89:
	WORD $0x8948; BYTE $0xf8 // movq         %rdi, %rax

LBB20_90:
	LONG $0xc67a8d41               // leal         $-58(%r10), %edi
	LONG $0xf6ff8040               // cmpb         $-10, %dil
	LONG $0xfac6820f; WORD $0xffff // jb           LBB20_5, $-1338(%rip)
	WORD $0xdb31                   // xorl         %ebx, %ebx
	WORD $0x394c; BYTE $0xe8       // cmpq         %r13, %rax
	LONG $0x0054830f; WORD $0x0000 // jae          LBB20_97, $84(%rip)
	LONG $0xd07a8d41               // leal         $-48(%r10), %edi
	LONG $0x09ff8040               // cmpb         $9, %dil
	LONG $0x0046870f; WORD $0x0000 // ja           LBB20_97, $70(%rip)
	LONG $0xff4d8d49               // leaq         $-1(%r13), %rcx
	WORD $0xdb31                   // xorl         %ebx, %ebx

LBB20_94:
	LONG $0xd2b60f45               // movzbl       %r10b, %r10d
	LONG $0x2710fb81; WORD $0x0000 // cmpl         $10000, %ebx
	WORD $0x3c8d; BYTE $0x9b       // leal         (%rbx,%rbx,4), %edi
	LONG $0x7a7c8d41; BYTE $0xd0   // leal         $-48(%r10,%rdi,2), %edi
	WORD $0x4d0f; BYTE $0xfb       // cmovgel      %ebx, %edi
	WORD $0x8948; BYTE $0xfb       // movq         %rdi, %rbx
	WORD $0x3948; BYTE $0xc1       // cmpq         %rax, %rcx
	LONG $0x001c840f; WORD $0x0000 // je           LBB20_96, $28(%rip)
	LONG $0x54b60f45; WORD $0x0103 // movzbl       $1(%r11,%rax), %r10d
	LONG $0xd07a8d41               // leal         $-48(%r10), %edi
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	LONG $0x0aff8040               // cmpb         $10, %dil
	LONG $0xffc8820f; WORD $0xffff // jb           LBB20_94, $-56(%rip)
	LONG $0x000003e9; BYTE $0x00   // jmp          LBB20_97, $3(%rip)

LBB20_96:
	WORD $0x894c; BYTE $0xe8 // movq         %r13, %rax

LBB20_97:
	LONG $0xd8af0f41                     // imull        %r8d, %ebx
	WORD $0x0144; BYTE $0xcb             // addl         %r9d, %ebx
	WORD $0x8949; BYTE $0xc5             // movq         %rax, %r13
	LONG $0xc4558b44                     // movl         $-60(%rbp), %r10d
	LONG $0xfffd53e9; BYTE $0xff         // jmp          LBB20_61, $-685(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

_vsigned:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	BYTE $0x53                                 // pushq        %rbx
	WORD $0x8b48; BYTE $0x06                   // movq         (%rsi), %rax
	WORD $0x8b4c; BYTE $0x07                   // movq         (%rdi), %r8
	LONG $0x085f8b4c                           // movq         $8(%rdi), %r11
	LONG $0x0902c748; WORD $0x0000; BYTE $0x00 // movq         $9, (%rdx)
	LONG $0xc057f8c5                           // vxorps       %xmm0, %xmm0, %xmm0
	LONG $0x4211f8c5; BYTE $0x08               // vmovups      %xmm0, $8(%rdx)
	LONG $0x18428948                           // movq         %rax, $24(%rdx)
	WORD $0x394c; BYTE $0xd8                   // cmpq         %r11, %rax
	LONG $0x0044830f; WORD $0x0000             // jae          LBB21_1, $68(%rip)
	LONG $0x000c8a41                           // movb         (%r8,%rax), %cl
	LONG $0x0001b941; WORD $0x0000             // movl         $1, %r9d
	WORD $0xf980; BYTE $0x2d                   // cmpb         $45, %cl
	LONG $0x0017850f; WORD $0x0000             // jne          LBB21_5, $23(%rip)
	WORD $0xff48; BYTE $0xc0                   // incq         %rax
	WORD $0x394c; BYTE $0xd8                   // cmpq         %r11, %rax
	LONG $0x0025830f; WORD $0x0000             // jae          LBB21_1, $37(%rip)
	LONG $0x000c8a41                           // movb         (%r8,%rax), %cl
	LONG $0xffc1c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r9

LBB21_5:
	WORD $0x798d; BYTE $0xc6                   // leal         $-58(%rcx), %edi
	LONG $0xf5ff8040                           // cmpb         $-11, %dil
	LONG $0x001a870f; WORD $0x0000             // ja           LBB21_7, $26(%rip)
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfe02c748; WORD $0xffff; BYTE $0xff // movq         $-2, (%rdx)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB21_1:
	WORD $0x894c; BYTE $0x1e                   // movq         %r11, (%rsi)
	LONG $0xff02c748; WORD $0xffff; BYTE $0xff // movq         $-1, (%rdx)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB21_7:
	WORD $0xf980; BYTE $0x30               // cmpb         $48, %cl
	LONG $0x0035850f; WORD $0x0000         // jne          LBB21_12, $53(%rip)
	LONG $0x01788d48                       // leaq         $1(%rax), %rdi
	WORD $0x394c; BYTE $0xd8               // cmpq         %r11, %rax
	LONG $0x0084830f; WORD $0x0000         // jae          LBB21_11, $132(%rip)
	LONG $0x380c8a41                       // movb         (%r8,%rdi), %cl
	WORD $0xc180; BYTE $0xd2               // addb         $-46, %cl
	WORD $0xf980; BYTE $0x37               // cmpb         $55, %cl
	LONG $0x0074870f; WORD $0x0000         // ja           LBB21_11, $116(%rip)
	LONG $0xd1b60f44                       // movzbl       %cl, %r10d
	QUAD $0x000000800001b948; WORD $0x0080 // movabsq      $36028797027352577, %rcx
	LONG $0xd1a30f4c                       // btq          %r10, %rcx
	LONG $0x005c830f; WORD $0x0000         // jae          LBB21_11, $92(%rip)

LBB21_12:
	WORD $0x394c; BYTE $0xd8             // cmpq         %r11, %rax
	WORD $0x894d; BYTE $0xda             // movq         %r11, %r10
	LONG $0xd0470f4c                     // cmovaq       %rax, %r10
	WORD $0xff31                         // xorl         %edi, %edi
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB21_13:
	WORD $0x394c; BYTE $0xd8       // cmpq         %r11, %rax
	LONG $0x006f830f; WORD $0x0000 // jae          LBB21_22, $111(%rip)
	LONG $0x0cbe0f49; BYTE $0x00   // movsbq       (%r8,%rax), %rcx
	WORD $0x598d; BYTE $0xd0       // leal         $-48(%rcx), %ebx
	WORD $0xfb80; BYTE $0x09       // cmpb         $9, %bl
	LONG $0x0033870f; WORD $0x0000 // ja           LBB21_18, $51(%rip)
	LONG $0x0aff6b48               // imulq        $10, %rdi, %rdi
	LONG $0x0013800f; WORD $0x0000 // jo           LBB21_17, $19(%rip)
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xc183; BYTE $0xd0       // addl         $-48, %ecx
	LONG $0xc9af0f49               // imulq        %r9, %rcx
	WORD $0x0148; BYTE $0xcf       // addq         %rcx, %rdi
	LONG $0xffc9810f; WORD $0xffff // jno          LBB21_13, $-55(%rip)

LBB21_17:
	WORD $0xff48; BYTE $0xc8                   // decq         %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfb02c748; WORD $0xffff; BYTE $0xff // movq         $-5, (%rdx)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB21_11:
	WORD $0x8948; BYTE $0x3e // movq         %rdi, (%rsi)
	BYTE $0x5b               // popq         %rbx
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB21_18:
	WORD $0xf980; BYTE $0x2e       // cmpb         $46, %cl
	LONG $0x0012840f; WORD $0x0000 // je           LBB21_24, $18(%rip)
	WORD $0xf980; BYTE $0x45       // cmpb         $69, %cl
	LONG $0x0009840f; WORD $0x0000 // je           LBB21_24, $9(%rip)
	WORD $0xf980; BYTE $0x65       // cmpb         $101, %cl
	LONG $0x000d850f; WORD $0x0000 // jne          LBB21_21, $13(%rip)

LBB21_24:
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfa02c748; WORD $0xffff; BYTE $0xff // movq         $-6, (%rdx)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB21_21:
	WORD $0x8949; BYTE $0xc2 // movq         %rax, %r10

LBB21_22:
	WORD $0x894c; BYTE $0x16                                 // movq         %r10, (%rsi)
	LONG $0x107a8948                                         // movq         %rdi, $16(%rdx)
	BYTE $0x5b                                               // popq         %rbx
	BYTE $0x5d                                               // popq         %rbp
	BYTE $0xc3                                               // retq
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_vunsigned:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5641                               // pushq        %r14
	BYTE $0x53                                 // pushq        %rbx
	WORD $0x8949; BYTE $0xd0                   // movq         %rdx, %r8
	WORD $0x8b48; BYTE $0x0e                   // movq         (%rsi), %rcx
	WORD $0x8b4c; BYTE $0x0f                   // movq         (%rdi), %r9
	LONG $0x08778b4c                           // movq         $8(%rdi), %r14
	LONG $0x0902c748; WORD $0x0000; BYTE $0x00 // movq         $9, (%rdx)
	LONG $0xc057f8c5                           // vxorps       %xmm0, %xmm0, %xmm0
	LONG $0x4211f8c5; BYTE $0x08               // vmovups      %xmm0, $8(%rdx)
	LONG $0x184a8948                           // movq         %rcx, $24(%rdx)
	WORD $0x394c; BYTE $0xf1                   // cmpq         %r14, %rcx
	LONG $0x0018830f; WORD $0x0000             // jae          LBB22_3, $24(%rip)
	LONG $0x09048a41                           // movb         (%r9,%rcx), %al
	WORD $0x2d3c                               // cmpb         $45, %al
	LONG $0x001b850f; WORD $0x0000             // jne          LBB22_4, $27(%rip)

LBB22_2:
	LONG $0xfa00c749; WORD $0xffff; BYTE $0xff // movq         $-6, (%r8)
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5e41                               // popq         %r14
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB22_3:
	WORD $0x894c; BYTE $0x36                   // movq         %r14, (%rsi)
	LONG $0xff00c749; WORD $0xffff; BYTE $0xff // movq         $-1, (%r8)
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5e41                               // popq         %r14
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB22_4:
	WORD $0x508d; BYTE $0xc6                   // leal         $-58(%rax), %edx
	WORD $0xfa80; BYTE $0xf5                   // cmpb         $-11, %dl
	LONG $0x000c870f; WORD $0x0000             // ja           LBB22_6, $12(%rip)
	LONG $0xfe00c749; WORD $0xffff; BYTE $0xff // movq         $-2, (%r8)
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5e41                               // popq         %r14
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB22_6:
	WORD $0x303c                           // cmpb         $48, %al
	LONG $0x0026850f; WORD $0x0000         // jne          LBB22_9, $38(%rip)
	LONG $0x09448a41; BYTE $0x01           // movb         $1(%r9,%rcx), %al
	WORD $0xd204                           // addb         $-46, %al
	WORD $0x373c                           // cmpb         $55, %al
	LONG $0x00a8870f; WORD $0x0000         // ja           LBB22_20, $168(%rip)
	WORD $0xb60f; BYTE $0xc0               // movzbl       %al, %eax
	QUAD $0x000000800001ba48; WORD $0x0080 // movabsq      $36028797027352577, %rdx
	LONG $0xc2a30f48                       // btq          %rax, %rdx
	LONG $0x0091830f; WORD $0x0000         // jae          LBB22_20, $145(%rip)

LBB22_9:
	WORD $0x3949; BYTE $0xce       // cmpq         %rcx, %r14
	WORD $0x8949; BYTE $0xca       // movq         %rcx, %r10
	LONG $0xd6470f4d               // cmovaq       %r14, %r10
	WORD $0xc031                   // xorl         %eax, %eax
	LONG $0x000abb41; WORD $0x0000 // movl         $10, %r11d

	// .p2align 4, 0x90
LBB22_10:
	WORD $0x394c; BYTE $0xf1       // cmpq         %r14, %rcx
	LONG $0x0084830f; WORD $0x0000 // jae          LBB22_22, $132(%rip)
	LONG $0x1cbe0f41; BYTE $0x09   // movsbl       (%r9,%rcx), %ebx
	WORD $0x538d; BYTE $0xd0       // leal         $-48(%rbx), %edx
	WORD $0xfa80; BYTE $0x09       // cmpb         $9, %dl
	LONG $0x0042870f; WORD $0x0000 // ja           LBB22_16, $66(%rip)
	WORD $0xf749; BYTE $0xe3       // mulq         %r11
	LONG $0x0027800f; WORD $0x0000 // jo           LBB22_15, $39(%rip)
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	WORD $0xc383; BYTE $0xd0       // addl         $-48, %ebx
	WORD $0xff31                   // xorl         %edi, %edi
	WORD $0x0148; BYTE $0xd8       // addq         %rbx, %rax
	LONG $0xc7920f40               // setb         %dil
	WORD $0x8948; BYTE $0xfa       // movq         %rdi, %rdx
	WORD $0xf748; BYTE $0xda       // negq         %rdx
	WORD $0x3148; BYTE $0xd7       // xorq         %rdx, %rdi
	LONG $0x0009850f; WORD $0x0000 // jne          LBB22_15, $9(%rip)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xffb6890f; WORD $0xffff // jns          LBB22_10, $-74(%rip)

LBB22_15:
	WORD $0xff48; BYTE $0xc9                   // decq         %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0xfb00c749; WORD $0xffff; BYTE $0xff // movq         $-5, (%r8)
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5e41                               // popq         %r14
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB22_16:
	WORD $0xfb80; BYTE $0x2e       // cmpb         $46, %bl
	LONG $0x0012840f; WORD $0x0000 // je           LBB22_19, $18(%rip)
	WORD $0xfb80; BYTE $0x45       // cmpb         $69, %bl
	LONG $0x0009840f; WORD $0x0000 // je           LBB22_19, $9(%rip)
	WORD $0xfb80; BYTE $0x65       // cmpb         $101, %bl
	LONG $0x0013850f; WORD $0x0000 // jne          LBB22_21, $19(%rip)

LBB22_19:
	WORD $0x8948; BYTE $0x0e     // movq         %rcx, (%rsi)
	LONG $0xffff0ee9; BYTE $0xff // jmp          LBB22_2, $-242(%rip)

LBB22_20:
	WORD $0xff48; BYTE $0xc1 // incq         %rcx
	WORD $0x8948; BYTE $0x0e // movq         %rcx, (%rsi)
	BYTE $0x5b               // popq         %rbx
	WORD $0x5e41             // popq         %r14
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB22_21:
	WORD $0x8949; BYTE $0xca // movq         %rcx, %r10

LBB22_22:
	WORD $0x894c; BYTE $0x16                   // movq         %r10, (%rsi)
	LONG $0x10408949                           // movq         %rax, $16(%r8)
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5e41                               // popq         %r14
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	LONG $0x00000000; WORD $0x0000; BYTE $0x00 // .p2align 5, 0x00

LCPI23_0:
	QUAD $0x2b2b2b2b2b2b2b2b; QUAD $0x2b2b2b2b2b2b2b2b // .space 16, '++++++++++++++++'
	QUAD $0x2b2b2b2b2b2b2b2b; QUAD $0x2b2b2b2b2b2b2b2b // .space 16, '++++++++++++++++'

LCPI23_1:
	QUAD $0x2d2d2d2d2d2d2d2d; QUAD $0x2d2d2d2d2d2d2d2d // .space 16, '----------------'
	QUAD $0x2d2d2d2d2d2d2d2d; QUAD $0x2d2d2d2d2d2d2d2d // .space 16, '----------------'

LCPI23_2:
	QUAD $0xdfdfdfdfdfdfdfdf; QUAD $0xdfdfdfdfdfdfdfdf // .space 16, '\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf'
	QUAD $0xdfdfdfdfdfdfdfdf; QUAD $0xdfdfdfdfdfdfdfdf // .space 16, '\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf'

LCPI23_3:
	QUAD $0x2e2e2e2e2e2e2e2e; QUAD $0x2e2e2e2e2e2e2e2e // .space 16, '................'
	QUAD $0x2e2e2e2e2e2e2e2e; QUAD $0x2e2e2e2e2e2e2e2e // .space 16, '................'

LCPI23_4:
	QUAD $0x4545454545454545; QUAD $0x4545454545454545 // .space 16, 'EEEEEEEEEEEEEEEE'
	QUAD $0x4545454545454545; QUAD $0x4545454545454545 // .space 16, 'EEEEEEEEEEEEEEEE'

LCPI23_5:
	QUAD $0xd0d0d0d0d0d0d0d0; QUAD $0xd0d0d0d0d0d0d0d0 // .space 16, '\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0'
	QUAD $0xd0d0d0d0d0d0d0d0; QUAD $0xd0d0d0d0d0d0d0d0 // .space 16, '\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0'

LCPI23_6:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

	// .p2align 4, 0x00
LCPI23_7:
	QUAD $0x2b2b2b2b2b2b2b2b; QUAD $0x2b2b2b2b2b2b2b2b // .space 16, '++++++++++++++++'

LCPI23_8:
	QUAD $0x2d2d2d2d2d2d2d2d; QUAD $0x2d2d2d2d2d2d2d2d // .space 16, '----------------'

LCPI23_9:
	QUAD $0xd0d0d0d0d0d0d0d0; QUAD $0xd0d0d0d0d0d0d0d0 // .space 16, '\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0\xd0'

LCPI23_10:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI23_11:
	QUAD $0xdfdfdfdfdfdfdfdf; QUAD $0xdfdfdfdfdfdfdfdf // .space 16, '\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf'

LCPI23_12:
	QUAD $0x2e2e2e2e2e2e2e2e; QUAD $0x2e2e2e2e2e2e2e2e // .space 16, '................'

LCPI23_13:
	QUAD $0x4545454545454545; QUAD $0x4545454545454545 // .space 16, 'EEEEEEEEEEEEEEEE'

	// .p2align 4, 0x90
_skip_number:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x5741                           // pushq        %r15
	WORD $0x5641                           // pushq        %r14
	WORD $0x5441                           // pushq        %r12
	BYTE $0x53                             // pushq        %rbx
	WORD $0x8548; BYTE $0xf6               // testq        %rsi, %rsi
	LONG $0x03a4840f; WORD $0x0000         // je           LBB23_1, $932(%rip)
	WORD $0x3f80; BYTE $0x30               // cmpb         $48, (%rdi)
	LONG $0x0035850f; WORD $0x0000         // jne          LBB23_6, $53(%rip)
	LONG $0x000001b8; BYTE $0x00           // movl         $1, %eax
	LONG $0x01fe8348                       // cmpq         $1, %rsi
	LONG $0x04b8840f; WORD $0x0000         // je           LBB23_81, $1208(%rip)
	WORD $0x4f8a; BYTE $0x01               // movb         $1(%rdi), %cl
	WORD $0xc180; BYTE $0xd2               // addb         $-46, %cl
	WORD $0xf980; BYTE $0x37               // cmpb         $55, %cl
	LONG $0x04a9870f; WORD $0x0000         // ja           LBB23_81, $1193(%rip)
	WORD $0xb60f; BYTE $0xc9               // movzbl       %cl, %ecx
	QUAD $0x000000800001ba48; WORD $0x0080 // movabsq      $36028797027352577, %rdx
	LONG $0xcaa30f48                       // btq          %rcx, %rdx
	LONG $0x0492830f; WORD $0x0000         // jae          LBB23_81, $1170(%rip)

LBB23_6:
	LONG $0xffc1c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r9
	LONG $0x20fe8348                           // cmpq         $32, %rsi
	LONG $0x048d820f; WORD $0x0000             // jb           LBB23_7, $1165(%rip)
	WORD $0xc031                               // xorl         %eax, %eax
	QUAD $0xfffffe43056ffdc5                   // vmovdqa      $-445(%rip), %ymm0  /* LCPI23_0+0(%rip) */
	QUAD $0xfffffe5b0d6ffdc5                   // vmovdqa      $-421(%rip), %ymm1  /* LCPI23_1+0(%rip) */
	QUAD $0xfffffe73156ffdc5                   // vmovdqa      $-397(%rip), %ymm2  /* LCPI23_2+0(%rip) */
	QUAD $0xfffffe8b1d6ffdc5                   // vmovdqa      $-373(%rip), %ymm3  /* LCPI23_3+0(%rip) */
	QUAD $0xfffffea3256ffdc5                   // vmovdqa      $-349(%rip), %ymm4  /* LCPI23_4+0(%rip) */
	QUAD $0xfffffebb2d6ffdc5                   // vmovdqa      $-325(%rip), %ymm5  /* LCPI23_5+0(%rip) */
	QUAD $0xfffffed3356ffdc5                   // vmovdqa      $-301(%rip), %ymm6  /* LCPI23_6+0(%rip) */
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8
	LONG $0xffc2c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r10
	LONG $0x90909090; BYTE $0x90               // .p2align 4, 0x90

LBB23_9:
	LONG $0x3c6ffec5; BYTE $0x07   // vmovdqu      (%rdi,%rax), %ymm7
	LONG $0xc07445c5               // vpcmpeqb     %ymm0, %ymm7, %ymm8
	LONG $0xc97445c5               // vpcmpeqb     %ymm1, %ymm7, %ymm9
	LONG $0xeb3541c4; BYTE $0xc0   // vpor         %ymm8, %ymm9, %ymm8
	LONG $0xcadb45c5               // vpand        %ymm2, %ymm7, %ymm9
	LONG $0xcc7435c5               // vpcmpeqb     %ymm4, %ymm9, %ymm9
	LONG $0xd37445c5               // vpcmpeqb     %ymm3, %ymm7, %ymm10
	LONG $0xd77dc1c4; BYTE $0xd2   // vpmovmskb    %ymm10, %edx
	LONG $0xd77d41c4; BYTE $0xf9   // vpmovmskb    %ymm9, %r15d
	LONG $0xd77d41c4; BYTE $0xd8   // vpmovmskb    %ymm8, %r11d
	LONG $0xfdfcc5c5               // vpaddb       %ymm5, %ymm7, %ymm7
	LONG $0xdeda45c5               // vpminub      %ymm6, %ymm7, %ymm11
	LONG $0xff74a5c5               // vpcmpeqb     %ymm7, %ymm11, %ymm7
	LONG $0xeb2d41c4; BYTE $0xc9   // vpor         %ymm9, %ymm10, %ymm9
	LONG $0xffebb5c5               // vpor         %ymm7, %ymm9, %ymm7
	LONG $0xffebbdc5               // vpor         %ymm7, %ymm8, %ymm7
	LONG $0xcfd7fdc5               // vpmovmskb    %ymm7, %ecx
	WORD $0xf748; BYTE $0xd1       // notq         %rcx
	LONG $0xf1bc0f4c               // bsfq         %rcx, %r14
	LONG $0x20fe8341               // cmpl         $32, %r14d
	LONG $0x0017840f; WORD $0x0000 // je           LBB23_11, $23(%rip)
	LONG $0xffffffbb; BYTE $0xff   // movl         $-1, %ebx
	WORD $0x8944; BYTE $0xf1       // movl         %r14d, %ecx
	WORD $0xe3d3                   // shll         %cl, %ebx
	WORD $0xd3f7                   // notl         %ebx
	WORD $0xda21                   // andl         %ebx, %edx
	WORD $0x2141; BYTE $0xdf       // andl         %ebx, %r15d
	WORD $0x2144; BYTE $0xdb       // andl         %r11d, %ebx
	WORD $0x8941; BYTE $0xdb       // movl         %ebx, %r11d

LBB23_11:
	WORD $0x4a8d; BYTE $0xff       // leal         $-1(%rdx), %ecx
	WORD $0xd121                   // andl         %edx, %ecx
	LONG $0x0384850f; WORD $0x0000 // jne          LBB23_12, $900(%rip)
	LONG $0xff4f8d41               // leal         $-1(%r15), %ecx
	WORD $0x2144; BYTE $0xf9       // andl         %r15d, %ecx
	LONG $0x0377850f; WORD $0x0000 // jne          LBB23_12, $887(%rip)
	LONG $0xff4b8d41               // leal         $-1(%r11), %ecx
	WORD $0x2144; BYTE $0xd9       // andl         %r11d, %ecx
	LONG $0x036a850f; WORD $0x0000 // jne          LBB23_12, $874(%rip)
	WORD $0xd285                   // testl        %edx, %edx
	LONG $0x0013840f; WORD $0x0000 // je           LBB23_19, $19(%rip)
	WORD $0xbc0f; BYTE $0xca       // bsfl         %edx, %ecx
	LONG $0xfffa8349               // cmpq         $-1, %r10
	LONG $0x035d850f; WORD $0x0000 // jne          LBB23_82, $861(%rip)
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	WORD $0x8949; BYTE $0xca       // movq         %rcx, %r10

LBB23_19:
	WORD $0x8545; BYTE $0xff       // testl        %r15d, %r15d
	LONG $0x0014840f; WORD $0x0000 // je           LBB23_22, $20(%rip)
	LONG $0xcfbc0f41               // bsfl         %r15d, %ecx
	LONG $0xfff88349               // cmpq         $-1, %r8
	LONG $0x0340850f; WORD $0x0000 // jne          LBB23_82, $832(%rip)
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	WORD $0x8949; BYTE $0xc8       // movq         %rcx, %r8

LBB23_22:
	WORD $0x8545; BYTE $0xdb       // testl        %r11d, %r11d
	LONG $0x0014840f; WORD $0x0000 // je           LBB23_25, $20(%rip)
	LONG $0xcbbc0f41               // bsfl         %r11d, %ecx
	LONG $0xfff98349               // cmpq         $-1, %r9
	LONG $0x0323850f; WORD $0x0000 // jne          LBB23_82, $803(%rip)
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	WORD $0x8949; BYTE $0xc9       // movq         %rcx, %r9

LBB23_25:
	LONG $0x20fe8341               // cmpl         $32, %r14d
	LONG $0x021e850f; WORD $0x0000 // jne          LBB23_83, $542(%rip)
	LONG $0xe0c68348               // addq         $-32, %rsi
	LONG $0x20c08348               // addq         $32, %rax
	LONG $0x1ffe8348               // cmpq         $31, %rsi
	LONG $0xfef8870f; WORD $0xffff // ja           LBB23_9, $-264(%rip)
	WORD $0xf8c5; BYTE $0x77       // vzeroupper
	WORD $0x0148; BYTE $0xf8       // addq         %rdi, %rax
	WORD $0x8949; BYTE $0xc6       // movq         %rax, %r14
	LONG $0x10fe8348               // cmpq         $16, %rsi
	LONG $0x014f820f; WORD $0x0000 // jb           LBB23_49, $335(%rip)

LBB23_29:
	WORD $0x894d; BYTE $0xf3     // movq         %r14, %r11
	WORD $0x2949; BYTE $0xfb     // subq         %rdi, %r11
	WORD $0xc031                 // xorl         %eax, %eax
	QUAD $0xfffffdb5056f79c5     // vmovdqa      $-587(%rip), %xmm8  /* LCPI23_7+0(%rip) */
	QUAD $0xfffffdbd0d6f79c5     // vmovdqa      $-579(%rip), %xmm9  /* LCPI23_8+0(%rip) */
	QUAD $0xfffffdc5156f79c5     // vmovdqa      $-571(%rip), %xmm10  /* LCPI23_9+0(%rip) */
	QUAD $0xfffffdcd1d6f79c5     // vmovdqa      $-563(%rip), %xmm11  /* LCPI23_10+0(%rip) */
	QUAD $0xfffffdd5256ff9c5     // vmovdqa      $-555(%rip), %xmm4  /* LCPI23_11+0(%rip) */
	QUAD $0xfffffddd2d6ff9c5     // vmovdqa      $-547(%rip), %xmm5  /* LCPI23_12+0(%rip) */
	QUAD $0xfffffde5356ff9c5     // vmovdqa      $-539(%rip), %xmm6  /* LCPI23_13+0(%rip) */
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB23_30:
	LONG $0x6f7ac1c4; WORD $0x063c // vmovdqu      (%r14,%rax), %xmm7
	LONG $0xc774b9c5               // vpcmpeqb     %xmm7, %xmm8, %xmm0
	LONG $0xcf74b1c5               // vpcmpeqb     %xmm7, %xmm9, %xmm1
	LONG $0xc0ebf1c5               // vpor         %xmm0, %xmm1, %xmm0
	LONG $0xcffca9c5               // vpaddb       %xmm7, %xmm10, %xmm1
	LONG $0xd1daa1c5               // vpminub      %xmm1, %xmm11, %xmm2
	LONG $0xca74f1c5               // vpcmpeqb     %xmm2, %xmm1, %xmm1
	LONG $0xd4dbc1c5               // vpand        %xmm4, %xmm7, %xmm2
	LONG $0xd674e9c5               // vpcmpeqb     %xmm6, %xmm2, %xmm2
	LONG $0xfd74c1c5               // vpcmpeqb     %xmm5, %xmm7, %xmm7
	LONG $0xdfebe9c5               // vpor         %xmm7, %xmm2, %xmm3
	LONG $0xd8ebe1c5               // vpor         %xmm0, %xmm3, %xmm3
	LONG $0xc9ebe1c5               // vpor         %xmm1, %xmm3, %xmm1
	LONG $0xd7d7f9c5               // vpmovmskb    %xmm7, %edx
	LONG $0xe2d779c5               // vpmovmskb    %xmm2, %r12d
	LONG $0xf8d779c5               // vpmovmskb    %xmm0, %r15d
	LONG $0xc9d7f9c5               // vpmovmskb    %xmm1, %ecx
	WORD $0xd1f7                   // notl         %ecx
	WORD $0xbc0f; BYTE $0xc9       // bsfl         %ecx, %ecx
	WORD $0xf983; BYTE $0x10       // cmpl         $16, %ecx
	LONG $0x0014840f; WORD $0x0000 // je           LBB23_32, $20(%rip)
	LONG $0xffffffbb; BYTE $0xff   // movl         $-1, %ebx
	WORD $0xe3d3                   // shll         %cl, %ebx
	WORD $0xd3f7                   // notl         %ebx
	WORD $0xda21                   // andl         %ebx, %edx
	WORD $0x2141; BYTE $0xdc       // andl         %ebx, %r12d
	WORD $0x2144; BYTE $0xfb       // andl         %r15d, %ebx
	WORD $0x8941; BYTE $0xdf       // movl         %ebx, %r15d

LBB23_32:
	WORD $0x5a8d; BYTE $0xff       // leal         $-1(%rdx), %ebx
	WORD $0xd321                   // andl         %edx, %ebx
	LONG $0x0243850f; WORD $0x0000 // jne          LBB23_33, $579(%rip)
	LONG $0x245c8d41; BYTE $0xff   // leal         $-1(%r12), %ebx
	WORD $0x2144; BYTE $0xe3       // andl         %r12d, %ebx
	LONG $0x0235850f; WORD $0x0000 // jne          LBB23_33, $565(%rip)
	LONG $0xff5f8d41               // leal         $-1(%r15), %ebx
	WORD $0x2144; BYTE $0xfb       // andl         %r15d, %ebx
	LONG $0x0228850f; WORD $0x0000 // jne          LBB23_33, $552(%rip)
	WORD $0xd285                   // testl        %edx, %edx
	LONG $0x0016840f; WORD $0x0000 // je           LBB23_40, $22(%rip)
	WORD $0xbc0f; BYTE $0xd2       // bsfl         %edx, %edx
	LONG $0xfffa8349               // cmpq         $-1, %r10
	LONG $0x0223850f; WORD $0x0000 // jne          LBB23_84, $547(%rip)
	WORD $0x014c; BYTE $0xda       // addq         %r11, %rdx
	WORD $0x0148; BYTE $0xc2       // addq         %rax, %rdx
	WORD $0x8949; BYTE $0xd2       // movq         %rdx, %r10

LBB23_40:
	WORD $0x8545; BYTE $0xe4       // testl        %r12d, %r12d
	LONG $0x0017840f; WORD $0x0000 // je           LBB23_43, $23(%rip)
	LONG $0xd4bc0f41               // bsfl         %r12d, %edx
	LONG $0xfff88349               // cmpq         $-1, %r8
	LONG $0x0203850f; WORD $0x0000 // jne          LBB23_84, $515(%rip)
	WORD $0x014c; BYTE $0xda       // addq         %r11, %rdx
	WORD $0x0148; BYTE $0xc2       // addq         %rax, %rdx
	WORD $0x8949; BYTE $0xd0       // movq         %rdx, %r8

LBB23_43:
	WORD $0x8545; BYTE $0xff       // testl        %r15d, %r15d
	LONG $0x0017840f; WORD $0x0000 // je           LBB23_46, $23(%rip)
	LONG $0xd7bc0f41               // bsfl         %r15d, %edx
	LONG $0xfff98349               // cmpq         $-1, %r9
	LONG $0x01e3850f; WORD $0x0000 // jne          LBB23_84, $483(%rip)
	WORD $0x014c; BYTE $0xda       // addq         %r11, %rdx
	WORD $0x0148; BYTE $0xc2       // addq         %rax, %rdx
	WORD $0x8949; BYTE $0xd1       // movq         %rdx, %r9

LBB23_46:
	WORD $0xf983; BYTE $0x10       // cmpl         $16, %ecx
	LONG $0x00dd850f; WORD $0x0000 // jne          LBB23_65, $221(%rip)
	LONG $0xf0c68348               // addq         $-16, %rsi
	LONG $0x10c08348               // addq         $16, %rax
	LONG $0x0ffe8348               // cmpq         $15, %rsi
	LONG $0xfef9870f; WORD $0xffff // ja           LBB23_30, $-263(%rip)
	WORD $0x0149; BYTE $0xc6       // addq         %rax, %r14

LBB23_49:
	WORD $0x8548; BYTE $0xf6                   // testq        %rsi, %rsi
	LONG $0x00c7840f; WORD $0x0000             // je           LBB23_67, $199(%rip)
	LONG $0x361c8d4d                           // leaq         (%r14,%rsi), %r11
	WORD $0x894c; BYTE $0xf2                   // movq         %r14, %rdx
	WORD $0x2948; BYTE $0xfa                   // subq         %rdi, %rdx
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0xda3d8d4c; WORD $0x0001; BYTE $0x00 // leaq         $474(%rip), %r15  /* LJTI23_0+0(%rip) */
	LONG $0x000031e9; BYTE $0x00               // jmp          LBB23_51, $49(%rip)

LBB23_53:
	WORD $0xf983; BYTE $0x65       // cmpl         $101, %ecx
	LONG $0x00a3850f; WORD $0x0000 // jne          LBB23_66, $163(%rip)

LBB23_54:
	LONG $0xfff88349                                         // cmpq         $-1, %r8
	LONG $0x0180850f; WORD $0x0000                           // jne          LBB23_59, $384(%rip)
	LONG $0x02048d4c                                         // leaq         (%rdx,%rax), %r8
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB23_63:
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x3948; BYTE $0xc6       // cmpq         %rax, %rsi
	LONG $0x012d840f; WORD $0x0000 // je           LBB23_64, $301(%rip)

LBB23_51:
	LONG $0x0cbe0f41; BYTE $0x06   // movsbl       (%r14,%rax), %ecx
	WORD $0x598d; BYTE $0xd0       // leal         $-48(%rcx), %ebx
	WORD $0xfb83; BYTE $0x0a       // cmpl         $10, %ebx
	LONG $0xffe3820f; WORD $0xffff // jb           LBB23_63, $-29(%rip)
	WORD $0x598d; BYTE $0xd5       // leal         $-43(%rcx), %ebx
	WORD $0xfb83; BYTE $0x1a       // cmpl         $26, %ebx
	LONG $0xffb2870f; WORD $0xffff // ja           LBB23_53, $-78(%rip)
	LONG $0x9f0c6349               // movslq       (%r15,%rbx,4), %rcx
	WORD $0x014c; BYTE $0xf9       // addq         %r15, %rcx
	JMP  CX

LBB23_61:
	LONG $0xfff98349               // cmpq         $-1, %r9
	LONG $0x0132850f; WORD $0x0000 // jne          LBB23_59, $306(%rip)
	LONG $0x020c8d4c               // leaq         (%rdx,%rax), %r9
	LONG $0xffffbbe9; BYTE $0xff   // jmp          LBB23_63, $-69(%rip)

LBB23_57:
	LONG $0xfffa8349               // cmpq         $-1, %r10
	LONG $0x011f850f; WORD $0x0000 // jne          LBB23_59, $287(%rip)
	LONG $0x02148d4c               // leaq         (%rdx,%rax), %r10
	LONG $0xffffa8e9; BYTE $0xff   // jmp          LBB23_63, $-88(%rip)

LBB23_1:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0x000120e9; BYTE $0x00               // jmp          LBB23_81, $288(%rip)

LBB23_83:
	WORD $0x0149; BYTE $0xc6                   // addq         %rax, %r14
	WORD $0x0149; BYTE $0xfe                   // addq         %rdi, %r14
	WORD $0xf8c5; BYTE $0x77                   // vzeroupper
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x854d; BYTE $0xd2                   // testq        %r10, %r10
	LONG $0x001d850f; WORD $0x0000             // jne          LBB23_68, $29(%rip)
	LONG $0x000102e9; BYTE $0x00               // jmp          LBB23_81, $258(%rip)

LBB23_65:
	WORD $0xc989             // movl         %ecx, %ecx
	WORD $0x0149; BYTE $0xce // addq         %rcx, %r14

LBB23_66:
	WORD $0x0149; BYTE $0xc6 // addq         %rax, %r14

LBB23_67:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x854d; BYTE $0xd2                   // testq        %r10, %r10
	LONG $0x00ea840f; WORD $0x0000             // je           LBB23_81, $234(%rip)

LBB23_68:
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x00e1840f; WORD $0x0000 // je           LBB23_81, $225(%rip)
	WORD $0x854d; BYTE $0xc0       // testq        %r8, %r8
	LONG $0x00d8840f; WORD $0x0000 // je           LBB23_81, $216(%rip)
	WORD $0x2949; BYTE $0xfe       // subq         %rdi, %r14
	LONG $0xff468d49               // leaq         $-1(%r14), %rax
	WORD $0x3949; BYTE $0xc2       // cmpq         %rax, %r10
	LONG $0x0033840f; WORD $0x0000 // je           LBB23_73, $51(%rip)
	WORD $0x3949; BYTE $0xc1       // cmpq         %rax, %r9
	LONG $0x002a840f; WORD $0x0000 // je           LBB23_73, $42(%rip)
	WORD $0x3949; BYTE $0xc0       // cmpq         %rax, %r8
	LONG $0x0021840f; WORD $0x0000 // je           LBB23_73, $33(%rip)
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x00238e0f; WORD $0x0000 // jle          LBB23_77, $35(%rip)
	LONG $0xff418d49               // leaq         $-1(%r9), %rax
	WORD $0x3949; BYTE $0xc0       // cmpq         %rax, %r8
	LONG $0x0016840f; WORD $0x0000 // je           LBB23_77, $22(%rip)
	WORD $0xf749; BYTE $0xd1       // notq         %r9
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	LONG $0x000095e9; BYTE $0x00   // jmp          LBB23_81, $149(%rip)

LBB23_73:
	WORD $0xf749; BYTE $0xde     // negq         %r14
	WORD $0x894c; BYTE $0xf0     // movq         %r14, %rax
	LONG $0x00008ae9; BYTE $0x00 // jmp          LBB23_81, $138(%rip)

LBB23_77:
	WORD $0x894c; BYTE $0xd0       // movq         %r10, %rax
	WORD $0x094c; BYTE $0xc0       // orq          %r8, %rax
	WORD $0x990f; BYTE $0xc0       // setns        %al
	LONG $0x0014880f; WORD $0x0000 // js           LBB23_80, $20(%rip)
	WORD $0x394d; BYTE $0xc2       // cmpq         %r8, %r10
	LONG $0x000b8c0f; WORD $0x0000 // jl           LBB23_80, $11(%rip)
	WORD $0xf749; BYTE $0xd2       // notq         %r10
	WORD $0x894c; BYTE $0xd0       // movq         %r10, %rax
	LONG $0x000067e9; BYTE $0x00   // jmp          LBB23_81, $103(%rip)

LBB23_80:
	LONG $0xff488d49             // leaq         $-1(%r8), %rcx
	WORD $0x3949; BYTE $0xca     // cmpq         %rcx, %r10
	WORD $0xf749; BYTE $0xd0     // notq         %r8
	LONG $0xc6450f4d             // cmovneq      %r14, %r8
	WORD $0xc084                 // testb        %al, %al
	LONG $0xc6440f4d             // cmoveq       %r14, %r8
	WORD $0x894c; BYTE $0xc0     // movq         %r8, %rax
	LONG $0x00004be9; BYTE $0x00 // jmp          LBB23_81, $75(%rip)

LBB23_64:
	WORD $0x894d; BYTE $0xde                   // movq         %r11, %r14
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x854d; BYTE $0xd2                   // testq        %r10, %r10
	LONG $0xff4e850f; WORD $0xffff             // jne          LBB23_68, $-178(%rip)
	LONG $0x000033e9; BYTE $0x00               // jmp          LBB23_81, $51(%rip)

LBB23_12:
	WORD $0xbc0f; BYTE $0xc9     // bsfl         %ecx, %ecx
	LONG $0x000002e9; BYTE $0x00 // jmp          LBB23_13, $2(%rip)

LBB23_82:
	WORD $0xc989 // movl         %ecx, %ecx

LBB23_13:
	WORD $0xf748; BYTE $0xd0     // notq         %rax
	WORD $0x2948; BYTE $0xc8     // subq         %rcx, %rax
	LONG $0x00001ee9; BYTE $0x00 // jmp          LBB23_81, $30(%rip)

LBB23_33:
	WORD $0xbc0f; BYTE $0xcb     // bsfl         %ebx, %ecx
	LONG $0x00000ae9; BYTE $0x00 // jmp          LBB23_34, $10(%rip)

LBB23_59:
	WORD $0x294c; BYTE $0xf7     // subq         %r14, %rdi
	LONG $0x000008e9; BYTE $0x00 // jmp          LBB23_60, $8(%rip)

LBB23_84:
	WORD $0xd189 // movl         %edx, %ecx

LBB23_34:
	WORD $0x294c; BYTE $0xf7 // subq         %r14, %rdi
	WORD $0x2948; BYTE $0xcf // subq         %rcx, %rdi

LBB23_60:
	WORD $0xf748; BYTE $0xd0 // notq         %rax
	WORD $0x0148; BYTE $0xf8 // addq         %rdi, %rax

LBB23_81:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB23_7:
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8
	LONG $0xffc2c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r10
	WORD $0x8949; BYTE $0xfe                   // movq         %rdi, %r14
	LONG $0x10fe8348                           // cmpq         $16, %rsi
	LONG $0xfcc0830f; WORD $0xffff             // jae          LBB23_29, $-832(%rip)
	LONG $0xfffe0ae9; BYTE $0xff               // jmp          LBB23_49, $-502(%rip)

	// .p2align 2, 0x90
	// .set L23_0_set_61, LBB23_61-LJTI23_0
	// .set L23_0_set_66, LBB23_66-LJTI23_0
	// .set L23_0_set_57, LBB23_57-LJTI23_0
	// .set L23_0_set_54, LBB23_54-LJTI23_0
LJTI23_0:
	LONG $0xfffffe82 // .long L23_0_set_61
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffe82 // .long L23_0_set_61
	LONG $0xfffffe95 // .long L23_0_set_57
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffed7 // .long L23_0_set_66
	LONG $0xfffffe34 // .long L23_0_set_54
	LONG $0x00000000 // .p2align 4, 0x00

LCPI24_0:
	LONG $0x00000001 // .long 1
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0

	// .p2align 4, 0x90
_skip_one:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	WORD $0x8948; BYTE $0xf2                   // movq         %rsi, %rdx
	WORD $0x8948; BYTE $0xfe                   // movq         %rdi, %rsi
	QUAD $0xffffffdb0528f8c5                   // vmovaps      $-37(%rip), %xmm0  /* LCPI24_0+0(%rip) */
	LONG $0x0011f8c5                           // vmovups      %xmm0, (%rax)
	WORD $0x8948; BYTE $0xc7                   // movq         %rax, %rdi
	WORD $0xc931                               // xorl         %ecx, %ecx
	BYTE $0x5d                                 // popq         %rbp
	LONG $0x00000ce9; BYTE $0x00               // jmp          _fsm_exec, $12(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

_fsm_exec:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x28ec8348                           // subq         $40, %rsp
	WORD $0x4d89; BYTE $0xc4                   // movl         %ecx, $-60(%rbp)
	LONG $0x003f8348                           // cmpq         $0, (%rdi)
	LONG $0x0017840f; WORD $0x0000             // je           LBB25_6, $23(%rip)
	WORD $0x8949; BYTE $0xfc                   // movq         %rdi, %r12
	LONG $0xc8558948                           // movq         %rdx, $-56(%rbp)
	LONG $0xd0758948                           // movq         %rsi, $-48(%rbp)
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	LONG $0x00003be9; BYTE $0x00               // jmp          LBB25_2, $59(%rip)

LBB25_6:
	LONG $0xffc5c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r13
	LONG $0x0003fbe9; BYTE $0x00               // jmp          LBB25_66, $1019(%rip)

LBB25_53:
	LONG $0x03488d48                                                     // leaq         $3(%rax), %rcx
	WORD $0x8948; BYTE $0x0b                                             // movq         %rcx, (%rbx)
	WORD $0x8548; BYTE $0xc0                                             // testq        %rax, %rax
	LONG $0x040d8e0f; WORD $0x0000                                       // jle          LBB25_50, $1037(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB25_27:
	LONG $0x240c8b49 // movq         (%r12), %rcx

LBB25_28:
	WORD $0x894d; BYTE $0xf5       // movq         %r14, %r13
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x03cc840f; WORD $0x0000 // je           LBB25_66, $972(%rip)

LBB25_2:
	LONG $0xd06d8b4c               // movq         $-48(%rbp), %r13
	WORD $0x894c; BYTE $0xef       // movq         %r13, %rdi
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	WORD $0x8948; BYTE $0xde       // movq         %rbx, %rsi
	LONG $0xffe30de8; BYTE $0xff   // callq        _advance_ns, $-7411(%rip)
	LONG $0xfffe8349               // cmpq         $-1, %r14
	LONG $0x0006850f; WORD $0x0000 // jne          LBB25_4, $6(%rip)
	WORD $0x8b4c; BYTE $0x33       // movq         (%rbx), %r14
	WORD $0xff49; BYTE $0xce       // decq         %r14

LBB25_4:
	LONG $0x24148b49                           // movq         (%r12), %rdx
	LONG $0xff4a8d48                           // leaq         $-1(%rdx), %rcx
	LONG $0xd4348b41                           // movl         (%r12,%rdx,8), %esi
	WORD $0xceff                               // decl         %esi
	WORD $0xfe83; BYTE $0x05                   // cmpl         $5, %esi
	LONG $0x002a870f; WORD $0x0000             // ja           LBB25_10, $42(%rip)
	LONG $0x773d8d48; WORD $0x0004; BYTE $0x00 // leaq         $1143(%rip), %rdi  /* LJTI25_0+0(%rip) */
	LONG $0xb7346348                           // movslq       (%rdi,%rsi,4), %rsi
	WORD $0x0148; BYTE $0xfe                   // addq         %rdi, %rsi
	JMP  SI

LBB25_7:
	WORD $0xbe0f; BYTE $0xc0       // movsbl       %al, %eax
	WORD $0xf883; BYTE $0x2c       // cmpl         $44, %eax
	LONG $0x013e840f; WORD $0x0000 // je           LBB25_29, $318(%rip)
	WORD $0xf883; BYTE $0x5d       // cmpl         $93, %eax
	LONG $0x012c840f; WORD $0x0000 // je           LBB25_9, $300(%rip)
	LONG $0x000361e9; BYTE $0x00   // jmp          LBB25_65, $865(%rip)

LBB25_10:
	LONG $0x240c8949               // movq         %rcx, (%r12)
	WORD $0xbe0f; BYTE $0xc0       // movsbl       %al, %eax
	WORD $0xf883; BYTE $0x7b       // cmpl         $123, %eax
	LONG $0x00a7860f; WORD $0x0000 // jbe          LBB25_22, $167(%rip)
	LONG $0x00034ce9; BYTE $0x00   // jmp          LBB25_65, $844(%rip)

LBB25_11:
	WORD $0xbe0f; BYTE $0xc0                   // movsbl       %al, %eax
	WORD $0xf883; BYTE $0x2c                   // cmpl         $44, %eax
	LONG $0x00fd850f; WORD $0x0000             // jne          LBB25_12, $253(%rip)
	LONG $0xfffa8148; WORD $0x000f; BYTE $0x00 // cmpq         $4095, %rdx
	LONG $0x02ff870f; WORD $0x0000             // ja           LBB25_71, $767(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	LONG $0x240c8949                           // movq         %rcx, (%r12)
	QUAD $0x00000308d444c749; BYTE $0x00       // movq         $3, $8(%r12,%rdx,8)
	LONG $0xffff4ce9; BYTE $0xff               // jmp          LBB25_28, $-180(%rip)

LBB25_13:
	WORD $0x223c                   // cmpb         $34, %al
	LONG $0x0315850f; WORD $0x0000 // jne          LBB25_65, $789(%rip)
	QUAD $0x00000004d404c749       // movq         $4, (%r12,%rdx,8)
	WORD $0x8b4c; BYTE $0x3b       // movq         (%rbx), %r15
	WORD $0x894c; BYTE $0xef       // movq         %r13, %rdi

LBB25_15:
	WORD $0x894c; BYTE $0xfe       // movq         %r15, %rsi
	LONG $0xb8558d48               // leaq         $-72(%rbp), %rdx
	LONG $0xffeb96e8; BYTE $0xff   // callq        _advance_string, $-5226(%rip)
	WORD $0x8949; BYTE $0xc5       // movq         %rax, %r13
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x02c7880f; WORD $0x0000 // js           LBB25_62, $711(%rip)
	WORD $0x894c; BYTE $0x2b       // movq         %r13, (%rbx)
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	LONG $0xff0e8f0f; WORD $0xffff // jg           LBB25_27, $-242(%rip)
	LONG $0x0002c6e9; BYTE $0x00   // jmp          LBB25_17, $710(%rip)

LBB25_18:
	WORD $0x3a3c                   // cmpb         $58, %al
	LONG $0x02d6850f; WORD $0x0000 // jne          LBB25_65, $726(%rip)
	QUAD $0x00000000d404c749       // movq         $0, (%r12,%rdx,8)
	LONG $0xfffef4e9; BYTE $0xff   // jmp          LBB25_27, $-268(%rip)

LBB25_20:
	WORD $0x5d3c                   // cmpb         $93, %al
	LONG $0x0087840f; WORD $0x0000 // je           LBB25_9, $135(%rip)
	QUAD $0x00000001d404c749       // movq         $1, (%r12,%rdx,8)
	WORD $0x8948; BYTE $0xd1       // movq         %rdx, %rcx
	WORD $0xbe0f; BYTE $0xc0       // movsbl       %al, %eax
	WORD $0xf883; BYTE $0x7b       // cmpl         $123, %eax
	LONG $0x02aa870f; WORD $0x0000 // ja           LBB25_65, $682(%rip)

LBB25_22:
	LONG $0xffc5c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r13
	LONG $0xa7158d48; WORD $0x0003; BYTE $0x00 // leaq         $935(%rip), %rdx  /* LJTI25_1+0(%rip) */
	LONG $0x82046348                           // movslq       (%rdx,%rax,4), %rax
	WORD $0x0148; BYTE $0xd0                   // addq         %rdx, %rax
	JMP  AX

LBB25_25:
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	WORD $0x8b4c; BYTE $0x3b       // movq         (%rbx), %r15
	LONG $0xff6f8d4d               // leaq         $-1(%r15), %r13
	LONG $0xd0458b48               // movq         $-48(%rbp), %rax
	WORD $0x8b48; BYTE $0x38       // movq         (%rax), %rdi
	WORD $0x014c; BYTE $0xef       // addq         %r13, %rdi
	LONG $0x08708b48               // movq         $8(%rax), %rsi
	WORD $0x294c; BYTE $0xee       // subq         %r13, %rsi
	LONG $0xfff87de8; BYTE $0xff   // callq        _skip_number, $-1923(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x025c880f; WORD $0x0000 // js           LBB25_63, $604(%rip)
	WORD $0x8b48; BYTE $0x0b       // movq         (%rbx), %rcx
	WORD $0x0148; BYTE $0xc8       // addq         %rcx, %rax
	WORD $0xff48; BYTE $0xc8       // decq         %rax
	WORD $0x8948; BYTE $0x03       // movq         %rax, (%rbx)
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	LONG $0xfe7f8f0f; WORD $0xffff // jg           LBB25_27, $-385(%rip)
	LONG $0x000256e9; BYTE $0x00   // jmp          LBB25_66, $598(%rip)

LBB25_23:
	WORD $0xbe0f; BYTE $0xc0       // movsbl       %al, %eax
	WORD $0xf883; BYTE $0x22       // cmpl         $34, %eax
	LONG $0x0035840f; WORD $0x0000 // je           LBB25_33, $53(%rip)

LBB25_12:
	WORD $0xf883; BYTE $0x7d       // cmpl         $125, %eax
	LONG $0x023a850f; WORD $0x0000 // jne          LBB25_65, $570(%rip)

LBB25_9:
	LONG $0x240c8949             // movq         %rcx, (%r12)
	LONG $0xfffe60e9; BYTE $0xff // jmp          LBB25_28, $-416(%rip)

LBB25_29:
	LONG $0xfffa8148; WORD $0x000f; BYTE $0x00 // cmpq         $4095, %rdx
	LONG $0x01f0870f; WORD $0x0000             // ja           LBB25_71, $496(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	LONG $0x240c8949                           // movq         %rcx, (%r12)
	QUAD $0x00000008d444c749; BYTE $0x00       // movq         $0, $8(%r12,%rdx,8)
	LONG $0xfffe3de9; BYTE $0xff               // jmp          LBB25_28, $-451(%rip)

LBB25_33:
	QUAD $0x00000002d404c749       // movq         $2, (%r12,%rdx,8)
	LONG $0x00c47d83               // cmpl         $0, $-60(%rbp)
	LONG $0x0019840f; WORD $0x0000 // je           LBB25_36, $25(%rip)
	WORD $0x894c; BYTE $0xef       // movq         %r13, %rdi
	WORD $0x8948; BYTE $0xde       // movq         %rbx, %rsi
	LONG $0x00062ce8; BYTE $0x00   // callq        _validate_string, $1580(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x002f890f; WORD $0x0000 // jns          LBB25_38, $47(%rip)
	LONG $0x0001fce9; BYTE $0x00   // jmp          LBB25_35, $508(%rip)

LBB25_36:
	WORD $0x8b4c; BYTE $0x3b       // movq         (%rbx), %r15
	WORD $0x894c; BYTE $0xef       // movq         %r13, %rdi
	WORD $0x894c; BYTE $0xfe       // movq         %r15, %rsi
	LONG $0xb8558d48               // leaq         $-72(%rbp), %rdx
	LONG $0xffea6ce8; BYTE $0xff   // callq        _advance_string, $-5524(%rip)
	WORD $0x8949; BYTE $0xc5       // movq         %rax, %r13
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x019d880f; WORD $0x0000 // js           LBB25_62, $413(%rip)
	WORD $0x894c; BYTE $0x2b       // movq         %r13, (%rbx)
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	LONG $0x01a18e0f; WORD $0x0000 // jle          LBB25_17, $417(%rip)

LBB25_38:
	LONG $0x24048b49                     // movq         (%r12), %rax
	LONG $0x0fff3d48; WORD $0x0000       // cmpq         $4095, %rax
	LONG $0x0175870f; WORD $0x0000       // ja           LBB25_71, $373(%rip)
	LONG $0x01488d48                     // leaq         $1(%rax), %rcx
	LONG $0x240c8949                     // movq         %rcx, (%r12)
	QUAD $0x00000408c444c749; BYTE $0x00 // movq         $4, $8(%r12,%rax,8)
	LONG $0xfffdc2e9; BYTE $0xff         // jmp          LBB25_28, $-574(%rip)

LBB25_40:
	LONG $0x00c47d83               // cmpl         $0, $-60(%rbp)
	LONG $0x0145840f; WORD $0x0000 // je           LBB25_61, $325(%rip)
	LONG $0xd07d8b48               // movq         $-48(%rbp), %rdi
	LONG $0xc8758b48               // movq         $-56(%rbp), %rsi
	LONG $0x0005b7e8; BYTE $0x00   // callq        _validate_string, $1463(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xfd9e890f; WORD $0xffff // jns          LBB25_27, $-610(%rip)
	LONG $0x000187e9; BYTE $0x00   // jmp          LBB25_35, $391(%rip)

LBB25_42:
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	WORD $0x8b4c; BYTE $0x2b       // movq         (%rbx), %r13
	LONG $0xd0458b48               // movq         $-48(%rbp), %rax
	WORD $0x8b48; BYTE $0x38       // movq         (%rax), %rdi
	WORD $0x014c; BYTE $0xef       // addq         %r13, %rdi
	LONG $0x08708b48               // movq         $8(%rax), %rsi
	WORD $0x294c; BYTE $0xee       // subq         %r13, %rsi
	LONG $0xfff75ce8; BYTE $0xff   // callq        _skip_number, $-2212(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x017c880f; WORD $0x0000 // js           LBB25_64, $380(%rip)
	WORD $0x0148; BYTE $0x03       // addq         %rax, (%rbx)
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0xfd678f0f; WORD $0xffff // jg           LBB25_27, $-665(%rip)
	LONG $0x000176e9; BYTE $0x00   // jmp          LBB25_44, $374(%rip)

LBB25_45:
	LONG $0xfff98148; WORD $0x000f; BYTE $0x00 // cmpq         $4095, %rcx
	LONG $0x00f6870f; WORD $0x0000             // ja           LBB25_71, $246(%rip)
	LONG $0x01418d48                           // leaq         $1(%rcx), %rax
	LONG $0x24048949                           // movq         %rax, (%r12)
	QUAD $0x00000508cc44c749; BYTE $0x00       // movq         $5, $8(%r12,%rcx,8)
	WORD $0x8948; BYTE $0xc1                   // movq         %rax, %rcx
	LONG $0xfffd40e9; BYTE $0xff               // jmp          LBB25_28, $-704(%rip)

LBB25_47:
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	WORD $0x8b48; BYTE $0x03       // movq         (%rbx), %rax
	LONG $0xd0758b48               // movq         $-48(%rbp), %rsi
	LONG $0x084e8b48               // movq         $8(%rsi), %rcx
	LONG $0xfc518d48               // leaq         $-4(%rcx), %rdx
	WORD $0x3948; BYTE $0xd0       // cmpq         %rdx, %rax
	LONG $0x0116870f; WORD $0x0000 // ja           LBB25_70, $278(%rip)
	WORD $0x8b48; BYTE $0x0e       // movq         (%rsi), %rcx
	WORD $0x148b; BYTE $0x01       // movl         (%rcx,%rax), %edx
	LONG $0x6c61fa81; WORD $0x6573 // cmpl         $1702063201, %edx
	LONG $0x012a850f; WORD $0x0000 // jne          LBB25_67, $298(%rip)
	LONG $0x04488d48               // leaq         $4(%rax), %rcx
	WORD $0x8948; BYTE $0x0b       // movq         %rcx, (%rbx)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xfcfe8f0f; WORD $0xffff // jg           LBB25_27, $-770(%rip)
	LONG $0x0000f7e9; BYTE $0x00   // jmp          LBB25_50, $247(%rip)

LBB25_51:
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	WORD $0x8b48; BYTE $0x03       // movq         (%rbx), %rax
	LONG $0xd0758b48               // movq         $-48(%rbp), %rsi
	LONG $0x084e8b48               // movq         $8(%rsi), %rcx
	LONG $0xfd518d48               // leaq         $-3(%rcx), %rdx
	WORD $0x3948; BYTE $0xd0       // cmpq         %rdx, %rax
	LONG $0x00d3870f; WORD $0x0000 // ja           LBB25_70, $211(%rip)
	WORD $0x8b48; BYTE $0x0e       // movq         (%rsi), %rcx
	QUAD $0x6c6c756eff017c81       // cmpl         $1819047278, $-1(%rcx,%rax)
	LONG $0xfcad840f; WORD $0xffff // je           LBB25_53, $-851(%rip)
	LONG $0x000153e9; BYTE $0x00   // jmp          LBB25_72, $339(%rip)

LBB25_54:
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	WORD $0x8b48; BYTE $0x03       // movq         (%rbx), %rax
	LONG $0xd0758b48               // movq         $-48(%rbp), %rsi
	LONG $0x084e8b48               // movq         $8(%rsi), %rcx
	LONG $0xfd518d48               // leaq         $-3(%rcx), %rdx
	WORD $0x3948; BYTE $0xd0       // cmpq         %rdx, %rax
	LONG $0x00a1870f; WORD $0x0000 // ja           LBB25_70, $161(%rip)
	WORD $0x8b48; BYTE $0x0e       // movq         (%rsi), %rcx
	QUAD $0x65757274ff017c81       // cmpl         $1702195828, $-1(%rcx,%rax)
	LONG $0xfc7b840f; WORD $0xffff // je           LBB25_53, $-901(%rip)
	LONG $0x0000e6e9; BYTE $0x00   // jmp          LBB25_56, $230(%rip)

LBB25_59:
	LONG $0xfff98148; WORD $0x000f; BYTE $0x00 // cmpq         $4095, %rcx
	LONG $0x0029870f; WORD $0x0000             // ja           LBB25_71, $41(%rip)
	LONG $0x01418d48                           // leaq         $1(%rcx), %rax
	LONG $0x24048949                           // movq         %rax, (%r12)
	QUAD $0x00000608cc44c749; BYTE $0x00       // movq         $6, $8(%r12,%rcx,8)
	WORD $0x8948; BYTE $0xc1                   // movq         %rax, %rcx
	LONG $0xfffc73e9; BYTE $0xff               // jmp          LBB25_28, $-909(%rip)

LBB25_61:
	LONG $0xc85d8b48             // movq         $-56(%rbp), %rbx
	WORD $0x8b4c; BYTE $0x3b     // movq         (%rbx), %r15
	LONG $0xd07d8b48             // movq         $-48(%rbp), %rdi
	LONG $0xfffd2de9; BYTE $0xff // jmp          LBB25_15, $-723(%rip)

LBB25_71:
	LONG $0xf9c5c749; WORD $0xffff; BYTE $0xff // movq         $-7, %r13
	LONG $0x00002fe9; BYTE $0x00               // jmp          LBB25_66, $47(%rip)

LBB25_62:
	LONG $0xd0458b48             // movq         $-48(%rbp), %rax
	LONG $0x08408b48             // movq         $8(%rax), %rax
	WORD $0x8948; BYTE $0x03     // movq         %rax, (%rbx)
	LONG $0x00001fe9; BYTE $0x00 // jmp          LBB25_66, $31(%rip)

LBB25_17:
	WORD $0xff49; BYTE $0xcf     // decq         %r15
	WORD $0x894d; BYTE $0xfd     // movq         %r15, %r13
	LONG $0x000014e9; BYTE $0x00 // jmp          LBB25_66, $20(%rip)

LBB25_63:
	WORD $0x8b48; BYTE $0x0b // movq         (%rbx), %rcx
	WORD $0x2948; BYTE $0xc1 // subq         %rax, %rcx
	LONG $0xfec18348         // addq         $-2, %rcx
	WORD $0x8948; BYTE $0x0b // movq         %rcx, (%rbx)

LBB25_65:
	LONG $0xfec5c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r13

LBB25_66:
	WORD $0x894c; BYTE $0xe8 // movq         %r13, %rax
	LONG $0x28c48348         // addq         $40, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB25_35:
	WORD $0x8949; BYTE $0xc5     // movq         %rax, %r13
	LONG $0xffffe6e9; BYTE $0xff // jmp          LBB25_66, $-26(%rip)

LBB25_70:
	WORD $0x8948; BYTE $0x0b     // movq         %rcx, (%rbx)
	LONG $0xffffdee9; BYTE $0xff // jmp          LBB25_66, $-34(%rip)

LBB25_50:
	WORD $0xff48; BYTE $0xc8     // decq         %rax
	WORD $0x8949; BYTE $0xc5     // movq         %rax, %r13
	LONG $0xffffd3e9; BYTE $0xff // jmp          LBB25_66, $-45(%rip)

LBB25_64:
	WORD $0xf748; BYTE $0xd0     // notq         %rax
	WORD $0x0148; BYTE $0x03     // addq         %rax, (%rbx)
	LONG $0xffffc1e9; BYTE $0xff // jmp          LBB25_65, $-63(%rip)

LBB25_44:
	WORD $0xff49; BYTE $0xcd     // decq         %r13
	LONG $0xffffc0e9; BYTE $0xff // jmp          LBB25_66, $-64(%rip)

LBB25_67:
	LONG $0xfec5c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r13
	WORD $0xfa80; BYTE $0x61                   // cmpb         $97, %dl
	LONG $0xffb0850f; WORD $0xffff             // jne          LBB25_66, $-80(%rip)
	WORD $0xff48; BYTE $0xc0                   // incq         %rax
	LONG $0x736c61ba; BYTE $0x65               // movl         $1702063201, %edx

LBB25_69:
	WORD $0xeac1; BYTE $0x08       // shrl         $8, %edx
	WORD $0x8948; BYTE $0x03       // movq         %rax, (%rbx)
	LONG $0x0134be0f               // movsbl       (%rcx,%rax), %esi
	WORD $0xb60f; BYTE $0xfa       // movzbl       %dl, %edi
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xf739                   // cmpl         %esi, %edi
	LONG $0xffe8840f; WORD $0xffff // je           LBB25_69, $-24(%rip)
	LONG $0xffff8be9; BYTE $0xff   // jmp          LBB25_66, $-117(%rip)

LBB25_56:
	LONG $0xff508d48                           // leaq         $-1(%rax), %rdx
	WORD $0x8948; BYTE $0x13                   // movq         %rdx, (%rbx)
	LONG $0xfec5c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r13
	LONG $0xff017c80; BYTE $0x74               // cmpb         $116, $-1(%rcx,%rax)
	LONG $0xff72850f; WORD $0xffff             // jne          LBB25_66, $-142(%rip)
	LONG $0x757274ba; BYTE $0x65               // movl         $1702195828, %edx

LBB25_58:
	WORD $0xeac1; BYTE $0x08       // shrl         $8, %edx
	WORD $0x8948; BYTE $0x03       // movq         %rax, (%rbx)
	LONG $0x0134be0f               // movsbl       (%rcx,%rax), %esi
	WORD $0xb60f; BYTE $0xfa       // movzbl       %dl, %edi
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xf739                   // cmpl         %esi, %edi
	LONG $0xffe8840f; WORD $0xffff // je           LBB25_58, $-24(%rip)
	LONG $0xffff50e9; BYTE $0xff   // jmp          LBB25_66, $-176(%rip)

LBB25_72:
	LONG $0xff508d48                           // leaq         $-1(%rax), %rdx
	WORD $0x8948; BYTE $0x13                   // movq         %rdx, (%rbx)
	LONG $0xfec5c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r13
	LONG $0xff017c80; BYTE $0x6e               // cmpb         $110, $-1(%rcx,%rax)
	LONG $0xff37850f; WORD $0xffff             // jne          LBB25_66, $-201(%rip)
	LONG $0x6c756eba; BYTE $0x6c               // movl         $1819047278, %edx

LBB25_74:
	WORD $0xeac1; BYTE $0x08       // shrl         $8, %edx
	WORD $0x8948; BYTE $0x03       // movq         %rax, (%rbx)
	LONG $0x0134be0f               // movsbl       (%rcx,%rax), %esi
	WORD $0xb60f; BYTE $0xfa       // movzbl       %dl, %edi
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xf739                   // cmpl         %esi, %edi
	LONG $0xffe8840f; WORD $0xffff // je           LBB25_74, $-24(%rip)
	LONG $0xffff15e9; BYTE $0xff   // jmp          LBB25_66, $-235(%rip)
	BYTE $0x90                     // .p2align 2, 0x90

	// .set L25_0_set_7, LBB25_7-LJTI25_0
	// .set L25_0_set_11, LBB25_11-LJTI25_0
	// .set L25_0_set_13, LBB25_13-LJTI25_0
	// .set L25_0_set_18, LBB25_18-LJTI25_0
	// .set L25_0_set_20, LBB25_20-LJTI25_0
	// .set L25_0_set_23, LBB25_23-LJTI25_0
LJTI25_0:
	LONG $0xfffffb92 // .long L25_0_set_7
	LONG $0xfffffbc1 // .long L25_0_set_11
	LONG $0xfffffbf0 // .long L25_0_set_13
	LONG $0xfffffc2f // .long L25_0_set_18
	LONG $0xfffffc44 // .long L25_0_set_20
	LONG $0xfffffcbe // .long L25_0_set_23

	// .set L25_1_set_66, LBB25_66-LJTI25_1
	// .set L25_1_set_65, LBB25_65-LJTI25_1
	// .set L25_1_set_40, LBB25_40-LJTI25_1
	// .set L25_1_set_42, LBB25_42-LJTI25_1
	// .set L25_1_set_25, LBB25_25-LJTI25_1
	// .set L25_1_set_45, LBB25_45-LJTI25_1
	// .set L25_1_set_47, LBB25_47-LJTI25_1
	// .set L25_1_set_51, LBB25_51-LJTI25_1
	// .set L25_1_set_54, LBB25_54-LJTI25_1
	// .set L25_1_set_59, LBB25_59-LJTI25_1
LJTI25_1:
	LONG $0xfffffefc // .long L25_1_set_66
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffd62 // .long L25_1_set_40
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffd87 // .long L25_1_set_42
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffc62 // .long L25_1_set_25
	LONG $0xfffffc62 // .long L25_1_set_25
	LONG $0xfffffc62 // .long L25_1_set_25
	LONG $0xfffffc62 // .long L25_1_set_25
	LONG $0xfffffc62 // .long L25_1_set_25
	LONG $0xfffffc62 // .long L25_1_set_25
	LONG $0xfffffc62 // .long L25_1_set_25
	LONG $0xfffffc62 // .long L25_1_set_25
	LONG $0xfffffc62 // .long L25_1_set_25
	LONG $0xfffffc62 // .long L25_1_set_25
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffdbe // .long L25_1_set_45
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffde4 // .long L25_1_set_47
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffe27 // .long L25_1_set_51
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffe59 // .long L25_1_set_54
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffef5 // .long L25_1_set_65
	LONG $0xfffffe8b // .long L25_1_set_59

	// .p2align 4, 0x00
LCPI26_0:
	QUAD $0x0000000000000001 // .quad 1
	QUAD $0x0000000000000005 // .quad 5

	// .p2align 4, 0x90
_skip_array:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	WORD $0x8948; BYTE $0xf2                   // movq         %rsi, %rdx
	WORD $0x8948; BYTE $0xfe                   // movq         %rdi, %rsi
	QUAD $0xffffffdb0528f8c5                   // vmovaps      $-37(%rip), %xmm0  /* LCPI26_0+0(%rip) */
	LONG $0x0011f8c5                           // vmovups      %xmm0, (%rax)
	WORD $0x8948; BYTE $0xc7                   // movq         %rax, %rdi
	WORD $0xc931                               // xorl         %ecx, %ecx
	BYTE $0x5d                                 // popq         %rbp
	LONG $0xfff89ce9; BYTE $0xff               // jmp          _fsm_exec, $-1892(%rip)
	QUAD $0x0000000000000000; LONG $0x00000000 // .p2align 4, 0x00

LCPI27_0:
	QUAD $0x0000000000000001 // .quad 1
	QUAD $0x0000000000000006 // .quad 6

	// .p2align 4, 0x90
_skip_object:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	WORD $0x8948; BYTE $0xf2                   // movq         %rsi, %rdx
	WORD $0x8948; BYTE $0xfe                   // movq         %rdi, %rsi
	QUAD $0xffffffdb0528f8c5                   // vmovaps      $-37(%rip), %xmm0  /* LCPI27_0+0(%rip) */
	LONG $0x0011f8c5                           // vmovups      %xmm0, (%rax)
	WORD $0x8948; BYTE $0xc7                   // movq         %rax, %rdi
	WORD $0xc931                               // xorl         %ecx, %ecx
	BYTE $0x5d                                 // popq         %rbp
	LONG $0xfff85ce9; BYTE $0xff               // jmp          _fsm_exec, $-1956(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

_skip_string:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	BYTE $0x53                     // pushq        %rbx
	BYTE $0x50                     // pushq        %rax
	WORD $0x8949; BYTE $0xf6       // movq         %rsi, %r14
	WORD $0x8949; BYTE $0xff       // movq         %rdi, %r15
	WORD $0x8b48; BYTE $0x1e       // movq         (%rsi), %rbx
	LONG $0xe0558d48               // leaq         $-32(%rbp), %rdx
	WORD $0x8948; BYTE $0xde       // movq         %rbx, %rsi
	LONG $0xffe501e8; BYTE $0xff   // callq        _advance_string, $-6911(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x000e880f; WORD $0x0000 // js           LBB28_2, $14(%rip)
	WORD $0xff48; BYTE $0xcb       // decq         %rbx
	WORD $0x8948; BYTE $0xc1       // movq         %rax, %rcx
	WORD $0x8948; BYTE $0xd8       // movq         %rbx, %rax
	LONG $0x000004e9; BYTE $0x00   // jmp          LBB28_3, $4(%rip)

LBB28_2:
	LONG $0x084f8b49 // movq         $8(%r15), %rcx

LBB28_3:
	WORD $0x8949; BYTE $0x0e                                                     // movq         %rcx, (%r14)
	LONG $0x08c48348                                                             // addq         $8, %rsp
	BYTE $0x5b                                                                   // popq         %rbx
	WORD $0x5e41                                                                 // popq         %r14
	WORD $0x5f41                                                                 // popq         %r15
	BYTE $0x5d                                                                   // popq         %rbp
	BYTE $0xc3                                                                   // retq
	QUAD $0x0000000000000000; QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .p2align 5, 0x00

LCPI29_0:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI29_1:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

LCPI29_2:
	QUAD $0x1f1f1f1f1f1f1f1f; QUAD $0x1f1f1f1f1f1f1f1f // .space 16, '\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f'
	QUAD $0x1f1f1f1f1f1f1f1f; QUAD $0x1f1f1f1f1f1f1f1f // .space 16, '\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f'

	// .p2align 4, 0x90
_validate_string:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	BYTE $0x50                                 // pushq        %rax
	WORD $0x8949; BYTE $0xf6                   // movq         %rsi, %r14
	WORD $0x8b4c; BYTE $0x3e                   // movq         (%rsi), %r15
	LONG $0x08478b4c                           // movq         $8(%rdi), %r8
	WORD $0x894d; BYTE $0xc5                   // movq         %r8, %r13
	WORD $0x294d; BYTE $0xfd                   // subq         %r15, %r13
	LONG $0x019e840f; WORD $0x0000             // je           LBB29_54, $414(%rip)
	WORD $0x8b4c; BYTE $0x1f                   // movq         (%rdi), %r11
	LONG $0x3b3c8d4b                           // leaq         (%r11,%r15), %rdi
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x3145; BYTE $0xe4                   // xorl         %r12d, %r12d
	LONG $0x40fd8349                           // cmpq         $64, %r13
	LONG $0x0242820f; WORD $0x0000             // jb           LBB29_2, $578(%rip)
	QUAD $0xffffff59056ffdc5                   // vmovdqa      $-167(%rip), %ymm0  /* LCPI29_0+0(%rip) */
	QUAD $0xffffff710d6ffdc5                   // vmovdqa      $-143(%rip), %ymm1  /* LCPI29_1+0(%rip) */
	QUAD $0xffffff89156ffdc5                   // vmovdqa      $-119(%rip), %ymm2  /* LCPI29_2+0(%rip) */
	WORD $0x894c; BYTE $0xfa                   // movq         %r15, %rdx
	LONG $0x90909090; WORD $0x9090             // .p2align 4, 0x90

LBB29_4:
	LONG $0x6f7ec1c4; WORD $0x131c             // vmovdqu      (%r11,%rdx), %ymm3
	LONG $0x6f7ec1c4; WORD $0x1364; BYTE $0x20 // vmovdqu      $32(%r11,%rdx), %ymm4
	LONG $0xe874e5c5                           // vpcmpeqb     %ymm0, %ymm3, %ymm5
	LONG $0xddd7fdc5                           // vpmovmskb    %ymm5, %ebx
	LONG $0xe874ddc5                           // vpcmpeqb     %ymm0, %ymm4, %ymm5
	LONG $0xcdd77dc5                           // vpmovmskb    %ymm5, %r9d
	LONG $0xe974e5c5                           // vpcmpeqb     %ymm1, %ymm3, %ymm5
	LONG $0xcdd7fdc5                           // vpmovmskb    %ymm5, %ecx
	LONG $0xe974ddc5                           // vpcmpeqb     %ymm1, %ymm4, %ymm5
	LONG $0xd5d77dc5                           // vpmovmskb    %ymm5, %r10d
	LONG $0xeadaddc5                           // vpminub      %ymm2, %ymm4, %ymm5
	LONG $0xe574ddc5                           // vpcmpeqb     %ymm5, %ymm4, %ymm4
	LONG $0xf4d7fdc5                           // vpmovmskb    %ymm4, %esi
	LONG $0x20e1c149                           // shlq         $32, %r9
	WORD $0x094c; BYTE $0xcb                   // orq          %r9, %rbx
	LONG $0x20e2c149                           // shlq         $32, %r10
	LONG $0x20e6c148                           // shlq         $32, %rsi
	WORD $0x094c; BYTE $0xd1                   // orq          %r10, %rcx
	LONG $0x0044850f; WORD $0x0000             // jne          LBB29_5, $68(%rip)
	WORD $0x854d; BYTE $0xe4                   // testq        %r12, %r12
	LONG $0x0055850f; WORD $0x0000             // jne          LBB29_8, $85(%rip)
	WORD $0x3145; BYTE $0xe4                   // xorl         %r12d, %r12d

LBB29_10:
	LONG $0xe2dae5c5               // vpminub      %ymm2, %ymm3, %ymm4
	LONG $0xdc74e5c5               // vpcmpeqb     %ymm4, %ymm3, %ymm3
	LONG $0xcbd7fdc5               // vpmovmskb    %ymm3, %ecx
	WORD $0x0948; BYTE $0xce       // orq          %rcx, %rsi
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x0090850f; WORD $0x0000 // jne          LBB29_11, $144(%rip)
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0114850f; WORD $0x0000 // jne          LBB29_16, $276(%rip)
	LONG $0xc0c58349               // addq         $-64, %r13
	LONG $0x40c28348               // addq         $64, %rdx
	LONG $0x3ffd8349               // cmpq         $63, %r13
	LONG $0xff70870f; WORD $0xffff // ja           LBB29_4, $-144(%rip)
	LONG $0x00011ae9; BYTE $0x00   // jmp          LBB29_19, $282(%rip)

LBB29_5:
	LONG $0xd07d8948               // movq         %rdi, $-48(%rbp)
	LONG $0xfff88348               // cmpq         $-1, %rax
	LONG $0x0010850f; WORD $0x0000 // jne          LBB29_9, $16(%rip)
	LONG $0xc1bc0f48               // bsfq         %rcx, %rax
	WORD $0x0148; BYTE $0xd0       // addq         %rdx, %rax
	LONG $0x000004e9; BYTE $0x00   // jmp          LBB29_9, $4(%rip)

LBB29_8:
	LONG $0xd07d8948 // movq         %rdi, $-48(%rbp)

LBB29_9:
	WORD $0x894d; BYTE $0xe1               // movq         %r12, %r9
	WORD $0xf749; BYTE $0xd1               // notq         %r9
	WORD $0x2149; BYTE $0xc9               // andq         %rcx, %r9
	LONG $0x093c8d4b                       // leaq         (%r9,%r9), %rdi
	WORD $0x094c; BYTE $0xe7               // orq          %r12, %rdi
	WORD $0x8949; BYTE $0xfa               // movq         %rdi, %r10
	WORD $0xf749; BYTE $0xd2               // notq         %r10
	WORD $0x2149; BYTE $0xca               // andq         %rcx, %r10
	QUAD $0xaaaaaaaaaaaab948; WORD $0xaaaa // movabsq      $-6148914691236517206, %rcx
	WORD $0x2149; BYTE $0xca               // andq         %rcx, %r10
	WORD $0x3145; BYTE $0xe4               // xorl         %r12d, %r12d
	WORD $0x014d; BYTE $0xca               // addq         %r9, %r10
	LONG $0xc4920f41                       // setb         %r12b
	WORD $0x014d; BYTE $0xd2               // addq         %r10, %r10
	QUAD $0x555555555555b948; WORD $0x5555 // movabsq      $6148914691236517205, %rcx
	WORD $0x3149; BYTE $0xca               // xorq         %rcx, %r10
	WORD $0x2149; BYTE $0xfa               // andq         %rdi, %r10
	WORD $0xf749; BYTE $0xd2               // notq         %r10
	WORD $0x214c; BYTE $0xd3               // andq         %r10, %rbx
	LONG $0xd07d8b48                       // movq         $-48(%rbp), %rdi
	LONG $0xffff58e9; BYTE $0xff           // jmp          LBB29_10, $-168(%rip)

LBB29_11:
	LONG $0xdbbc0f48               // bsfq         %rbx, %rbx
	LONG $0x13248d4c               // leaq         (%rbx,%rdx), %r12
	WORD $0xff49; BYTE $0xc4       // incq         %r12
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x000d840f; WORD $0x0000 // je           LBB29_52, $13(%rip)

LBB29_13:
	LONG $0xcebc0f48               // bsfq         %rsi, %rcx
	WORD $0x3948; BYTE $0xd9       // cmpq         %rbx, %rcx
	LONG $0x010d860f; WORD $0x0000 // jbe          LBB29_14, $269(%rip)

LBB29_52:
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x0029880f; WORD $0x0000 // js           LBB29_53, $41(%rip)
	WORD $0x894c; BYTE $0xfe       // movq         %r15, %rsi
	WORD $0xf748; BYTE $0xd6       // notq         %rsi
	WORD $0x014c; BYTE $0xe6       // addq         %r12, %rsi
	WORD $0xf8c5; BYTE $0x77       // vzeroupper
	LONG $0x0002b0e8; BYTE $0x00   // callq        _utf8_validate, $688(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0028880f; WORD $0x0000 // js           LBB29_56, $40(%rip)
	WORD $0x0349; BYTE $0x06       // addq         (%r14), %rax

LBB29_58:
	LONG $0xfec4c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r12
	LONG $0x000022e9; BYTE $0x00               // jmp          LBB29_59, $34(%rip)

LBB29_53:
	LONG $0xfffc8349               // cmpq         $-1, %r12
	LONG $0x0018850f; WORD $0x0000 // jne          LBB29_59, $24(%rip)

LBB29_54:
	LONG $0xffc4c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r12
	WORD $0x894c; BYTE $0xc0                   // movq         %r8, %rax
	LONG $0x000009e9; BYTE $0x00               // jmp          LBB29_59, $9(%rip)

LBB29_56:
	WORD $0xff49; BYTE $0xcf // decq         %r15
	WORD $0x894c; BYTE $0xe0 // movq         %r12, %rax
	WORD $0x894d; BYTE $0xfc // movq         %r15, %r12

LBB29_59:
	WORD $0x8949; BYTE $0x06 // movq         %rax, (%r14)
	WORD $0x894c; BYTE $0xe0 // movq         %r12, %rax
	LONG $0x08c48348         // addq         $8, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB29_16:
	LONG $0xfec4c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r12
	LONG $0xfff88348                           // cmpq         $-1, %rax
	LONG $0xffd7850f; WORD $0xffff             // jne          LBB29_59, $-41(%rip)

LBB29_17:
	LONG $0xc6bc0f48             // bsfq         %rsi, %rax
	WORD $0x0148; BYTE $0xd0     // addq         %rdx, %rax
	LONG $0xffffcbe9; BYTE $0xff // jmp          LBB29_59, $-53(%rip)

LBB29_19:
	WORD $0x014c; BYTE $0xda       // addq         %r11, %rdx
	LONG $0x20fd8349               // cmpq         $32, %r13
	LONG $0x00fd820f; WORD $0x0000 // jb           LBB29_33, $253(%rip)

LBB29_21:
	LONG $0x026ffec5               // vmovdqu      (%rdx), %ymm0
	QUAD $0xfffffd780d74fdc5       // vpcmpeqb     $-648(%rip), %ymm0, %ymm1  /* LCPI29_0+0(%rip) */
	LONG $0xd9d7fdc5               // vpmovmskb    %ymm1, %ebx
	QUAD $0xfffffd8c0d74fdc5       // vpcmpeqb     $-628(%rip), %ymm0, %ymm1  /* LCPI29_1+0(%rip) */
	QUAD $0xfffffda415dafdc5       // vpminub      $-604(%rip), %ymm0, %ymm2  /* LCPI29_2+0(%rip) */
	LONG $0xc9d7fdc5               // vpmovmskb    %ymm1, %ecx
	LONG $0xc274fdc5               // vpcmpeqb     %ymm2, %ymm0, %ymm0
	LONG $0xf0d7fdc5               // vpmovmskb    %ymm0, %esi
	WORD $0xc985                   // testl        %ecx, %ecx
	LONG $0x0053850f; WORD $0x0000 // jne          LBB29_22, $83(%rip)
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x006a850f; WORD $0x0000 // jne          LBB29_25, $106(%rip)
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x00a3840f; WORD $0x0000 // je           LBB29_29, $163(%rip)

LBB29_28:
	WORD $0x294c; BYTE $0xda       // subq         %r11, %rdx
	LONG $0xdbbc0f48               // bsfq         %rbx, %rbx
	LONG $0x1a248d4c               // leaq         (%rdx,%rbx), %r12
	WORD $0xff49; BYTE $0xc4       // incq         %r12
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xfefd850f; WORD $0xffff // jne          LBB29_13, $-259(%rip)
	LONG $0xffff05e9; BYTE $0xff   // jmp          LBB29_52, $-251(%rip)

LBB29_2:
	WORD $0x8948; BYTE $0xfa       // movq         %rdi, %rdx
	LONG $0x20fd8349               // cmpq         $32, %r13
	LONG $0xff8e830f; WORD $0xffff // jae          LBB29_21, $-114(%rip)
	LONG $0x000086e9; BYTE $0x00   // jmp          LBB29_33, $134(%rip)

LBB29_14:
	WORD $0x0148; BYTE $0xd1     // addq         %rdx, %rcx
	LONG $0xfff88348             // cmpq         $-1, %rax
	LONG $0xc1440f48             // cmoveq       %rcx, %rax
	LONG $0xffff09e9; BYTE $0xff // jmp          LBB29_58, $-247(%rip)

LBB29_22:
	LONG $0xd07d8948               // movq         %rdi, $-48(%rbp)
	LONG $0xfff88348               // cmpq         $-1, %rax
	LONG $0x0016850f; WORD $0x0000 // jne          LBB29_26, $22(%rip)
	WORD $0x8948; BYTE $0xd7       // movq         %rdx, %rdi
	WORD $0x294c; BYTE $0xdf       // subq         %r11, %rdi
	LONG $0xc1bc0f48               // bsfq         %rcx, %rax
	WORD $0x0148; BYTE $0xf8       // addq         %rdi, %rax
	LONG $0x000004e9; BYTE $0x00   // jmp          LBB29_26, $4(%rip)

LBB29_25:
	LONG $0xd07d8948 // movq         %rdi, $-48(%rbp)

LBB29_26:
	WORD $0x8945; BYTE $0xe1       // movl         %r12d, %r9d
	WORD $0xf741; BYTE $0xd1       // notl         %r9d
	WORD $0x2141; BYTE $0xc9       // andl         %ecx, %r9d
	LONG $0x093c8d43               // leal         (%r9,%r9), %edi
	LONG $0x4c148d47               // leal         (%r12,%r9,2), %r10d
	WORD $0xd7f7                   // notl         %edi
	WORD $0xcf21                   // andl         %ecx, %edi
	LONG $0xaaaae781; WORD $0xaaaa // andl         $-1431655766, %edi
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	WORD $0x0144; BYTE $0xcf       // addl         %r9d, %edi
	LONG $0xc4920f41               // setb         %r12b
	WORD $0xff01                   // addl         %edi, %edi
	LONG $0x5555f781; WORD $0x5555 // xorl         $1431655765, %edi
	WORD $0x2144; BYTE $0xd7       // andl         %r10d, %edi
	WORD $0xd7f7                   // notl         %edi
	WORD $0xfb21                   // andl         %edi, %ebx
	LONG $0xd07d8b48               // movq         $-48(%rbp), %rdi
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0xff5d850f; WORD $0xffff // jne          LBB29_28, $-163(%rip)

LBB29_29:
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x00c3850f; WORD $0x0000 // jne          LBB29_30, $195(%rip)
	LONG $0x20c28348               // addq         $32, %rdx
	LONG $0xe0c58349               // addq         $-32, %r13

LBB29_33:
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x00cb850f; WORD $0x0000 // jne          LBB29_35, $203(%rip)
	WORD $0x8949; BYTE $0xc1       // movq         %rax, %r9
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0x008a840f; WORD $0x0000 // je           LBB29_51, $138(%rip)

LBB29_38:
	WORD $0x894c; BYTE $0xde // movq         %r11, %rsi
	WORD $0xf748; BYTE $0xde // negq         %rsi

LBB29_39:
	WORD $0xc931 // xorl         %ecx, %ecx

LBB29_40:
	LONG $0x0a1cb60f               // movzbl       (%rdx,%rcx), %ebx
	WORD $0xfb80; BYTE $0x22       // cmpb         $34, %bl
	LONG $0x006f840f; WORD $0x0000 // je           LBB29_50, $111(%rip)
	WORD $0xfb80; BYTE $0x5c       // cmpb         $92, %bl
	LONG $0x001a840f; WORD $0x0000 // je           LBB29_42, $26(%rip)
	WORD $0xfb80; BYTE $0x1f       // cmpb         $31, %bl
	LONG $0x00d0860f; WORD $0x0000 // jbe          LBB29_45, $208(%rip)
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	WORD $0x3949; BYTE $0xcd       // cmpq         %rcx, %r13
	LONG $0xffd5850f; WORD $0xffff // jne          LBB29_40, $-43(%rip)
	LONG $0x00005de9; BYTE $0x00   // jmp          LBB29_48, $93(%rip)

LBB29_42:
	WORD $0x8948; BYTE $0xfb       // movq         %rdi, %rbx
	LONG $0xff7d8d49               // leaq         $-1(%r13), %rdi
	WORD $0x3948; BYTE $0xcf       // cmpq         %rcx, %rdi
	LONG $0xfe4c840f; WORD $0xffff // je           LBB29_54, $-436(%rip)
	LONG $0x163c8d48               // leaq         (%rsi,%rdx), %rdi
	WORD $0x0148; BYTE $0xcf       // addq         %rcx, %rdi
	LONG $0xfff98349               // cmpq         $-1, %r9
	LONG $0xc7440f48               // cmoveq       %rdi, %rax
	LONG $0xcf440f4c               // cmoveq       %rdi, %r9
	WORD $0x0148; BYTE $0xca       // addq         %rcx, %rdx
	LONG $0x02c28348               // addq         $2, %rdx
	WORD $0x894c; BYTE $0xef       // movq         %r13, %rdi
	WORD $0x2948; BYTE $0xcf       // subq         %rcx, %rdi
	LONG $0xfec78348               // addq         $-2, %rdi
	LONG $0xfec58349               // addq         $-2, %r13
	WORD $0x3949; BYTE $0xcd       // cmpq         %rcx, %r13
	WORD $0x8949; BYTE $0xfd       // movq         %rdi, %r13
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	LONG $0xff87850f; WORD $0xffff // jne          LBB29_39, $-121(%rip)
	LONG $0xfffe10e9; BYTE $0xff   // jmp          LBB29_54, $-496(%rip)

LBB29_50:
	WORD $0x0148; BYTE $0xca // addq         %rcx, %rdx
	WORD $0xff48; BYTE $0xc2 // incq         %rdx

LBB29_51:
	WORD $0x294c; BYTE $0xda     // subq         %r11, %rdx
	WORD $0x8949; BYTE $0xd4     // movq         %rdx, %r12
	LONG $0xfffdc3e9; BYTE $0xff // jmp          LBB29_52, $-573(%rip)

LBB29_48:
	WORD $0xfb80; BYTE $0x22       // cmpb         $34, %bl
	LONG $0xfdf6850f; WORD $0xffff // jne          LBB29_54, $-522(%rip)
	WORD $0x014c; BYTE $0xea       // addq         %r13, %rdx
	LONG $0xffffe4e9; BYTE $0xff   // jmp          LBB29_51, $-28(%rip)

LBB29_30:
	LONG $0xfec4c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r12
	LONG $0xfff88348                           // cmpq         $-1, %rax
	LONG $0xfdf5850f; WORD $0xffff             // jne          LBB29_59, $-523(%rip)
	WORD $0x294c; BYTE $0xda                   // subq         %r11, %rdx
	LONG $0xfffe16e9; BYTE $0xff               // jmp          LBB29_17, $-490(%rip)

LBB29_35:
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0xfdcc840f; WORD $0xffff // je           LBB29_54, $-564(%rip)
	WORD $0x894d; BYTE $0xd9       // movq         %r11, %r9
	WORD $0xf749; BYTE $0xd1       // notq         %r9
	WORD $0x0149; BYTE $0xd1       // addq         %rdx, %r9
	LONG $0xfff88348               // cmpq         $-1, %rax
	WORD $0x8948; BYTE $0xc1       // movq         %rax, %rcx
	LONG $0xc9440f49               // cmoveq       %r9, %rcx
	LONG $0xc8450f4c               // cmovneq      %rax, %r9
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0xff49; BYTE $0xcd       // decq         %r13
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0xff0e850f; WORD $0xffff // jne          LBB29_38, $-242(%rip)
	LONG $0xffff93e9; BYTE $0xff   // jmp          LBB29_51, $-109(%rip)

LBB29_45:
	LONG $0xfec4c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r12
	LONG $0xfff98349                           // cmpq         $-1, %r9
	LONG $0xfda4850f; WORD $0xffff             // jne          LBB29_59, $-604(%rip)
	WORD $0x294c; BYTE $0xda                   // subq         %r11, %rdx
	WORD $0x0148; BYTE $0xca                   // addq         %rcx, %rdx
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	LONG $0xfffd96e9; BYTE $0xff               // jmp          LBB29_59, $-618(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

_utf8_validate:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	BYTE $0x53                                 // pushq        %rbx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x8548; BYTE $0xf6                   // testq        %rsi, %rsi
	LONG $0x01b78e0f; WORD $0x0000             // jle          LBB30_33, $439(%rip)
	LONG $0x90058d4c; WORD $0x0111; BYTE $0x00 // leaq         $70032(%rip), %r8  /* _first+0(%rip) */
	LONG $0x890d8d4c; WORD $0x0112; BYTE $0x00 // leaq         $70281(%rip), %r9  /* _ranges+0(%rip) */
	LONG $0xae158d4c; WORD $0x0001; BYTE $0x00 // leaq         $430(%rip), %r10  /* LJTI30_0+0(%rip) */
	WORD $0x8949; BYTE $0xfb                   // movq         %rdi, %r11

LBB30_2:
	LONG $0x003b8041               // cmpb         $0, (%r11)
	LONG $0x0095880f; WORD $0x0000 // js           LBB30_3, $149(%rip)
	WORD $0x8949; BYTE $0xf6       // movq         %rsi, %r14
	WORD $0x894c; BYTE $0xda       // movq         %r11, %rdx
	LONG $0x20fe8348               // cmpq         $32, %rsi
	LONG $0x0041820f; WORD $0x0000 // jb           LBB30_16, $65(%rip)
	WORD $0xdb31                   // xorl         %ebx, %ebx
	WORD $0xc931                   // xorl         %ecx, %ecx
	BYTE $0x90                     // .p2align 4, 0x90

LBB30_6:
	LONG $0x6f7ec1c4; WORD $0x1b04 // vmovdqu      (%r11,%rbx), %ymm0
	LONG $0xd0d7fdc5               // vpmovmskb    %ymm0, %edx
	WORD $0xd285                   // testl        %edx, %edx
	LONG $0x014f850f; WORD $0x0000 // jne          LBB30_7, $335(%rip)
	LONG $0x20c38348               // addq         $32, %rbx
	LONG $0x0e148d48               // leaq         (%rsi,%rcx), %rdx
	LONG $0xe0c28348               // addq         $-32, %rdx
	LONG $0xe0c18348               // addq         $-32, %rcx
	LONG $0x20c28348               // addq         $32, %rdx
	LONG $0x3ffa8348               // cmpq         $63, %rdx
	LONG $0xffd08f0f; WORD $0xffff // jg           LBB30_6, $-48(%rip)
	WORD $0x894c; BYTE $0xda       // movq         %r11, %rdx
	WORD $0x2948; BYTE $0xca       // subq         %rcx, %rdx
	WORD $0x8949; BYTE $0xf6       // movq         %rsi, %r14
	WORD $0x2949; BYTE $0xde       // subq         %rbx, %r14

LBB30_16:
	WORD $0xf8c5; BYTE $0x77       // vzeroupper
	LONG $0x10fe8349               // cmpq         $16, %r14
	LONG $0x00d78c0f; WORD $0x0000 // jl           LBB30_17, $215(%rip)
	WORD $0x894c; BYTE $0xd9       // movq         %r11, %rcx
	WORD $0x2948; BYTE $0xd1       // subq         %rdx, %rcx
	BYTE $0x90                     // .p2align 4, 0x90

LBB30_23:
	LONG $0x026ffac5               // vmovdqu      (%rdx), %xmm0
	LONG $0xd8d7f9c5               // vpmovmskb    %xmm0, %ebx
	WORD $0xdb85                   // testl        %ebx, %ebx
	LONG $0x010a850f; WORD $0x0000 // jne          LBB30_24, $266(%rip)
	LONG $0xf05e8d49               // leaq         $-16(%r14), %rbx
	LONG $0x10c28348               // addq         $16, %rdx
	LONG $0xf0c18348               // addq         $-16, %rcx
	LONG $0x1ffe8349               // cmpq         $31, %r14
	WORD $0x8949; BYTE $0xde       // movq         %rbx, %r14
	LONG $0xffd7870f; WORD $0xffff // ja           LBB30_23, $-41(%rip)
	LONG $0x0000a5e9; BYTE $0x00   // jmp          LBB30_18, $165(%rip)
	WORD $0x9090                   // .p2align 4, 0x90

LBB30_3:
	WORD $0x3145; BYTE $0xf6 // xorl         %r14d, %r14d

LBB30_9:
	LONG $0xfffe8349               // cmpq         $-1, %r14
	LONG $0x00f3840f; WORD $0x0000 // je           LBB30_33, $243(%rip)
	WORD $0x294c; BYTE $0xf6       // subq         %r14, %rsi
	LONG $0x00ea8e0f; WORD $0x0000 // jle          LBB30_33, $234(%rip)
	LONG $0x333c8d4f               // leaq         (%r11,%r14), %r15
	LONG $0x1cb60f47; BYTE $0x33   // movzbl       (%r11,%r14), %r11d
	LONG $0x0cb60f43; BYTE $0x03   // movzbl       (%r11,%r8), %ecx
	WORD $0xcb89                   // movl         %ecx, %ebx
	WORD $0xe383; BYTE $0x07       // andl         $7, %ebx
	WORD $0x3948; BYTE $0xde       // cmpq         %rbx, %rsi
	LONG $0x00c8820f; WORD $0x0000 // jb           LBB30_31, $200(%rip)
	WORD $0xfb80; BYTE $0x04       // cmpb         $4, %bl
	LONG $0x00bf870f; WORD $0x0000 // ja           LBB30_31, $191(%rip)
	LONG $0x0001be41; WORD $0x0000 // movl         $1, %r14d
	WORD $0xb60f; BYTE $0xd3       // movzbl       %bl, %edx
	LONG $0x92146349               // movslq       (%r10,%rdx,4), %rdx
	WORD $0x014c; BYTE $0xd2       // addq         %r10, %rdx
	JMP  DX

LBB30_26:
	LONG $0x037f8041; BYTE $0xbf   // cmpb         $-65, $3(%r15)
	LONG $0x00a28f0f; WORD $0x0000 // jg           LBB30_31, $162(%rip)

LBB30_27:
	LONG $0x027f8041; BYTE $0xbf   // cmpb         $-65, $2(%r15)
	LONG $0x00978f0f; WORD $0x0000 // jg           LBB30_31, $151(%rip)

LBB30_28:
	LONG $0x04e9c148               // shrq         $4, %rcx
	LONG $0x01578a41               // movb         $1(%r15), %dl
	LONG $0x49143a41               // cmpb         (%r9,%rcx,2), %dl
	LONG $0x0085820f; WORD $0x0000 // jb           LBB30_31, $133(%rip)
	LONG $0x49543841; BYTE $0x01   // cmpb         %dl, $1(%r9,%rcx,2)
	LONG $0x007a820f; WORD $0x0000 // jb           LBB30_31, $122(%rip)
	WORD $0x8949; BYTE $0xde       // movq         %rbx, %r14
	WORD $0x8445; BYTE $0xdb       // testb        %r11b, %r11b
	LONG $0x006e890f; WORD $0x0000 // jns          LBB30_31, $110(%rip)

LBB30_32:
	WORD $0x014d; BYTE $0xf7       // addq         %r14, %r15
	WORD $0x894d; BYTE $0xfb       // movq         %r15, %r11
	WORD $0x294c; BYTE $0xf6       // subq         %r14, %rsi
	LONG $0xfec68f0f; WORD $0xffff // jg           LBB30_2, $-314(%rip)
	LONG $0x000060e9; BYTE $0x00   // jmp          LBB30_33, $96(%rip)

	// .p2align 4, 0x90
LBB30_17:
	WORD $0x894c; BYTE $0xf3 // movq         %r14, %rbx

LBB30_18:
	WORD $0x8548; BYTE $0xdb                           // testq        %rbx, %rbx
	LONG $0x00548e0f; WORD $0x0000                     // jle          LBB30_33, $84(%rip)
	WORD $0xff48; BYTE $0xc3                           // incq         %rbx
	WORD $0x8949; BYTE $0xd6                           // movq         %rdx, %r14
	WORD $0x294d; BYTE $0xde                           // subq         %r11, %r14
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB30_20:
	WORD $0x3a80; BYTE $0x00       // cmpb         $0, (%rdx)
	LONG $0xff3a880f; WORD $0xffff // js           LBB30_9, $-198(%rip)
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0xff48; BYTE $0xcb       // decq         %rbx
	WORD $0xff49; BYTE $0xc6       // incq         %r14
	LONG $0x01fb8348               // cmpq         $1, %rbx
	LONG $0xffe48f0f; WORD $0xffff // jg           LBB30_20, $-28(%rip)
	LONG $0x00001fe9; BYTE $0x00   // jmp          LBB30_33, $31(%rip)

LBB30_7:
	LONG $0xf2bc0f44             // bsfl         %edx, %r14d
	LONG $0x000008e9; BYTE $0x00 // jmp          LBB30_8, $8(%rip)

LBB30_24:
	LONG $0xd3bc0f66 // bsfw         %bx, %dx
	LONG $0xf2b70f44 // movzwl       %dx, %r14d

LBB30_8:
	WORD $0x2949; BYTE $0xce     // subq         %rcx, %r14
	LONG $0xffff09e9; BYTE $0xff // jmp          LBB30_9, $-247(%rip)

LBB30_31:
	WORD $0x2949; BYTE $0xff // subq         %rdi, %r15
	WORD $0x894c; BYTE $0xf8 // movq         %r15, %rax

LBB30_33:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq
	WORD $0x9090             // .p2align 2, 0x90

	// .set L30_0_set_32, LBB30_32-LJTI30_0
	// .set L30_0_set_31, LBB30_31-LJTI30_0
	// .set L30_0_set_28, LBB30_28-LJTI30_0
	// .set L30_0_set_27, LBB30_27-LJTI30_0
	// .set L30_0_set_26, LBB30_26-LJTI30_0
LJTI30_0:
	LONG $0xffffff80 // .long L30_0_set_32
	LONG $0xffffffee // .long L30_0_set_31
	LONG $0xffffff57 // .long L30_0_set_28
	LONG $0xffffff4c // .long L30_0_set_27
	LONG $0xffffff41 // .long L30_0_set_26

	// .p2align 4, 0x90
_skip_negative:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5641                   // pushq        %r14
	BYTE $0x53                     // pushq        %rbx
	WORD $0x8949; BYTE $0xf6       // movq         %rsi, %r14
	WORD $0x8b48; BYTE $0x1e       // movq         (%rsi), %rbx
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	WORD $0x0148; BYTE $0xd8       // addq         %rbx, %rax
	LONG $0x08778b48               // movq         $8(%rdi), %rsi
	WORD $0x2948; BYTE $0xde       // subq         %rbx, %rsi
	WORD $0x8948; BYTE $0xc7       // movq         %rax, %rdi
	LONG $0xffeb6ee8; BYTE $0xff   // callq        _skip_number, $-5266(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x000b880f; WORD $0x0000 // js           LBB31_1, $11(%rip)
	WORD $0x0149; BYTE $0x06       // addq         %rax, (%r14)
	WORD $0xff48; BYTE $0xcb       // decq         %rbx
	LONG $0x00000de9; BYTE $0x00   // jmp          LBB31_3, $13(%rip)

LBB31_1:
	WORD $0xf748; BYTE $0xd0                   // notq         %rax
	WORD $0x0149; BYTE $0x06                   // addq         %rax, (%r14)
	LONG $0xfec3c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rbx

LBB31_3:
	WORD $0x8948; BYTE $0xd8     // movq         %rbx, %rax
	BYTE $0x5b                   // popq         %rbx
	WORD $0x5e41                 // popq         %r14
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_skip_positive:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5641                   // pushq        %r14
	BYTE $0x53                     // pushq        %rbx
	WORD $0x8949; BYTE $0xf6       // movq         %rsi, %r14
	WORD $0x8b48; BYTE $0x1e       // movq         (%rsi), %rbx
	WORD $0xff48; BYTE $0xcb       // decq         %rbx
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	WORD $0x0148; BYTE $0xd8       // addq         %rbx, %rax
	LONG $0x08778b48               // movq         $8(%rdi), %rsi
	WORD $0x2948; BYTE $0xde       // subq         %rbx, %rsi
	WORD $0x8948; BYTE $0xc7       // movq         %rax, %rdi
	LONG $0xffeb1be8; BYTE $0xff   // callq        _skip_number, $-5349(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x000e880f; WORD $0x0000 // js           LBB32_1, $14(%rip)
	WORD $0x8b49; BYTE $0x0e       // movq         (%r14), %rcx
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	WORD $0xff48; BYTE $0xc9       // decq         %rcx
	LONG $0x000011e9; BYTE $0x00   // jmp          LBB32_3, $17(%rip)

LBB32_1:
	WORD $0x8b49; BYTE $0x0e                   // movq         (%r14), %rcx
	WORD $0x2948; BYTE $0xc1                   // subq         %rax, %rcx
	LONG $0xfec18348                           // addq         $-2, %rcx
	LONG $0xfec3c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rbx

LBB32_3:
	WORD $0x8949; BYTE $0x0e // movq         %rcx, (%r14)
	WORD $0x8948; BYTE $0xd8 // movq         %rbx, %rax
	BYTE $0x5b               // popq         %rbx
	WORD $0x5e41             // popq         %r14
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	QUAD $0x0000000000000000 // .p2align 4, 0x00

LCPI33_0:
	LONG $0x00000001 // .long 1
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0

	// .p2align 4, 0x90
_validate_one:
	BYTE $0x55                           // pushq        %rbp
	WORD $0x8948; BYTE $0xe5             // movq         %rsp, %rbp
	WORD $0x8948; BYTE $0xd0             // movq         %rdx, %rax
	WORD $0x8948; BYTE $0xf2             // movq         %rsi, %rdx
	WORD $0x8948; BYTE $0xfe             // movq         %rdi, %rsi
	QUAD $0xffffffdb0528f8c5             // vmovaps      $-37(%rip), %xmm0  /* LCPI33_0+0(%rip) */
	LONG $0x0011f8c5                     // vmovups      %xmm0, (%rax)
	WORD $0x8948; BYTE $0xc7             // movq         %rax, %rdi
	LONG $0x000001b9; BYTE $0x00         // movl         $1, %ecx
	BYTE $0x5d                           // popq         %rbp
	LONG $0xfff069e9; BYTE $0xff         // jmp          _fsm_exec, $-3991(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

_find_non_ascii:
	BYTE $0x55                                               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                                 // movq         %rsp, %rbp
	LONG $0x20fe8348                                         // cmpq         $32, %rsi
	LONG $0x005f8c0f; WORD $0x0000                           // jl           LBB34_1, $95(%rip)
	WORD $0xc031                                             // xorl         %eax, %eax
	WORD $0xd231                                             // xorl         %edx, %edx
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB34_3:
	LONG $0x046ffec5; BYTE $0x07   // vmovdqu      (%rdi,%rax), %ymm0
	LONG $0xc8d7fdc5               // vpmovmskb    %ymm0, %ecx
	WORD $0xc985                   // testl        %ecx, %ecx
	LONG $0x00d2850f; WORD $0x0000 // jne          LBB34_4, $210(%rip)
	LONG $0x20c08348               // addq         $32, %rax
	LONG $0x160c8d48               // leaq         (%rsi,%rdx), %rcx
	LONG $0xe0c18348               // addq         $-32, %rcx
	LONG $0xe0c28348               // addq         $-32, %rdx
	LONG $0x20c18348               // addq         $32, %rcx
	LONG $0x3ff98348               // cmpq         $63, %rcx
	LONG $0xffd18f0f; WORD $0xffff // jg           LBB34_3, $-47(%rip)
	WORD $0x8948; BYTE $0xf9       // movq         %rdi, %rcx
	WORD $0x2948; BYTE $0xd1       // subq         %rdx, %rcx
	WORD $0x2948; BYTE $0xc6       // subq         %rax, %rsi
	WORD $0xf8c5; BYTE $0x77       // vzeroupper
	LONG $0x10fe8348               // cmpq         $16, %rsi
	LONG $0x00188d0f; WORD $0x0000 // jge          LBB34_13, $24(%rip)

LBB34_8:
	WORD $0x8948; BYTE $0xf2     // movq         %rsi, %rdx
	LONG $0x00004ce9; BYTE $0x00 // jmp          LBB34_9, $76(%rip)

LBB34_1:
	WORD $0x8948; BYTE $0xf9       // movq         %rdi, %rcx
	WORD $0xf8c5; BYTE $0x77       // vzeroupper
	LONG $0x10fe8348               // cmpq         $16, %rsi
	LONG $0xffe88c0f; WORD $0xffff // jl           LBB34_8, $-24(%rip)

LBB34_13:
	WORD $0x8949; BYTE $0xf8                               // movq         %rdi, %r8
	WORD $0x2949; BYTE $0xc8                               // subq         %rcx, %r8
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB34_14:
	LONG $0x016ffac5               // vmovdqu      (%rcx), %xmm0
	LONG $0xc0d7f9c5               // vpmovmskb    %xmm0, %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x006e850f; WORD $0x0000 // jne          LBB34_15, $110(%rip)
	LONG $0xf0568d48               // leaq         $-16(%rsi), %rdx
	LONG $0x10c18348               // addq         $16, %rcx
	LONG $0xf0c08349               // addq         $-16, %r8
	LONG $0x1ffe8348               // cmpq         $31, %rsi
	WORD $0x8948; BYTE $0xd6       // movq         %rdx, %rsi
	LONG $0xffd7870f; WORD $0xffff // ja           LBB34_14, $-41(%rip)

LBB34_9:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff               // movq         $-1, %rax
	WORD $0x8548; BYTE $0xd2                                 // testq        %rdx, %rdx
	LONG $0x00338e0f; WORD $0x0000                           // jle          LBB34_18, $51(%rip)
	WORD $0xff48; BYTE $0xc2                                 // incq         %rdx
	WORD $0x8948; BYTE $0xce                                 // movq         %rcx, %rsi
	WORD $0x2948; BYTE $0xfe                                 // subq         %rdi, %rsi
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB34_11:
	WORD $0x3980; BYTE $0x00       // cmpb         $0, (%rcx)
	LONG $0x0015880f; WORD $0x0000 // js           LBB34_12, $21(%rip)
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	WORD $0xff48; BYTE $0xca       // decq         %rdx
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	LONG $0x01fa8348               // cmpq         $1, %rdx
	LONG $0xffe48f0f; WORD $0xffff // jg           LBB34_11, $-28(%rip)

LBB34_18:
	BYTE $0x5d // popq         %rbp
	BYTE $0xc3 // retq

LBB34_12:
	WORD $0x8948; BYTE $0xf0 // movq         %rsi, %rax
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB34_4:
	WORD $0xbc0f; BYTE $0xc1 // bsfl         %ecx, %eax
	WORD $0x2948; BYTE $0xd0 // subq         %rdx, %rax
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB34_15:
	LONG $0xc0bc0f66                                                                   // bsfw         %ax, %ax
	WORD $0xb70f; BYTE $0xc0                                                           // movzwl       %ax, %eax
	WORD $0x294c; BYTE $0xc0                                                           // subq         %r8, %rax
	BYTE $0x5d                                                                         // popq         %rbp
	BYTE $0xc3                                                                         // retq
	QUAD $0x0000000000000000; QUAD $0x0000000000000000; LONG $0x00000000; WORD $0x0000 // .p2align 5, 0x00

LCPI35_0:
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10

LCPI35_1:
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032

LCPI35_2:
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024

LCPI35_3:
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63

LCPI35_4:
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'

LCPI35_5:
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'

LCPI35_6:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

	// .p2align 4, 0x90
_b64encode:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x084e8b4c                           // movq         $8(%rsi), %r9
	WORD $0x854d; BYTE $0xc9                   // testq        %r9, %r9
	LONG $0x0327840f; WORD $0x0000             // je           LBB35_25, $807(%rip)
	WORD $0x8b4c; BYTE $0x07                   // movq         (%rdi), %r8
	LONG $0x0847034c                           // addq         $8(%rdi), %r8
	WORD $0x8b4c; BYTE $0x26                   // movq         (%rsi), %r12
	WORD $0x014d; BYTE $0xe1                   // addq         %r12, %r9
	WORD $0xc2f6; BYTE $0x01                   // testb        $1, %dl
	LONG $0x710d8d48; WORD $0x0096; BYTE $0x00 // leaq         $38513(%rip), %rcx  /* _VecEncodeCharsetStd+0(%rip) */
	LONG $0xca158d4c; WORD $0x0096; BYTE $0x00 // leaq         $38602(%rip), %r10  /* _VecEncodeCharsetURL+0(%rip) */
	LONG $0xd1440f4c                           // cmoveq       %rcx, %r10
	LONG $0x1f0d8d48; WORD $0x0096; BYTE $0x00 // leaq         $38431(%rip), %rcx  /* _TabEncodeCharsetStd+0(%rip) */
	LONG $0x781d8d4c; WORD $0x0096; BYTE $0x00 // leaq         $38520(%rip), %r11  /* _TabEncodeCharsetURL+0(%rip) */
	LONG $0xd9440f4c                           // cmoveq       %rcx, %r11
	WORD $0xd189                               // movl         %edx, %ecx
	WORD $0xe183; BYTE $0x04                   // andl         $4, %ecx
	WORD $0xcb89                               // movl         %ecx, %ebx
	WORD $0xebc1; BYTE $0x02                   // shrl         $2, %ebx
	WORD $0xc985                               // testl        %ecx, %ecx
	LONG $0x00c9840f; WORD $0x0000             // je           LBB35_7, $201(%rip)
	LONG $0xe4718d49                           // leaq         $-28(%r9), %rsi
	WORD $0x3949; BYTE $0xf4                   // cmpq         %rsi, %r12
	LONG $0x00bc870f; WORD $0x0000             // ja           LBB35_7, $188(%rip)
	LONG $0x6f7ec1c4; BYTE $0x02               // vmovdqu      (%r10), %ymm0
	QUAD $0xfffffea80d6ffdc5                   // vmovdqa      $-344(%rip), %ymm1  /* LCPI35_0+0(%rip) */
	QUAD $0xfffffec0156ffdc5                   // vmovdqa      $-320(%rip), %ymm2  /* LCPI35_1+0(%rip) */
	QUAD $0xfffffed81d6ffdc5                   // vmovdqa      $-296(%rip), %ymm3  /* LCPI35_2+0(%rip) */
	QUAD $0xfffffef0256ffdc5                   // vmovdqa      $-272(%rip), %ymm4  /* LCPI35_3+0(%rip) */
	QUAD $0xffffff082d6ffdc5                   // vmovdqa      $-248(%rip), %ymm5  /* LCPI35_4+0(%rip) */
	QUAD $0xffffff20356ffdc5                   // vmovdqa      $-224(%rip), %ymm6  /* LCPI35_5+0(%rip) */
	QUAD $0xffffff383d6ffdc5                   // vmovdqa      $-200(%rip), %ymm7  /* LCPI35_6+0(%rip) */
	WORD $0x894d; BYTE $0xc6                   // movq         %r8, %r14
	LONG $0x90909090; BYTE $0x90               // .p2align 4, 0x90

LBB35_4:
	LONG $0x6f7a41c4; WORD $0x2404 // vmovdqu      (%r12), %xmm8
	QUAD $0x010c2444383d43c4       // vinserti128  $1, $12(%r12), %ymm8, %ymm8
	LONG $0x003d62c4; BYTE $0xc1   // vpshufb      %ymm1, %ymm8, %ymm8
	LONG $0xcadb3dc5               // vpand        %ymm2, %ymm8, %ymm9
	LONG $0xcbe435c5               // vpmulhuw     %ymm3, %ymm9, %ymm9
	LONG $0xc4db3dc5               // vpand        %ymm4, %ymm8, %ymm8
	LONG $0x712dc1c4; WORD $0x08f0 // vpsllw       $8, %ymm8, %ymm10
	LONG $0x713dc1c4; WORD $0x04f0 // vpsllw       $4, %ymm8, %ymm8
	LONG $0x0e3d43c4; WORD $0xaac2 // vpblendw     $170, %ymm10, %ymm8, %ymm8
	LONG $0xeb3d41c4; BYTE $0xc1   // vpor         %ymm9, %ymm8, %ymm8
	LONG $0x645541c4; BYTE $0xc8   // vpcmpgtb     %ymm8, %ymm5, %ymm9
	LONG $0xcfdb35c5               // vpand        %ymm7, %ymm9, %ymm9
	LONG $0xd6d83dc5               // vpsubusb     %ymm6, %ymm8, %ymm10
	LONG $0xeb3541c4; BYTE $0xca   // vpor         %ymm10, %ymm9, %ymm9
	LONG $0x007d42c4; BYTE $0xc9   // vpshufb      %ymm9, %ymm0, %ymm9
	LONG $0xfc3541c4; BYTE $0xc0   // vpaddb       %ymm8, %ymm9, %ymm8
	LONG $0x7f7e41c4; BYTE $0x06   // vmovdqu      %ymm8, (%r14)
	LONG $0x20c68349               // addq         $32, %r14
	LONG $0x18c48349               // addq         $24, %r12
	WORD $0x3949; BYTE $0xf4       // cmpq         %rsi, %r12
	LONG $0xff98860f; WORD $0xffff // jbe          LBB35_4, $-104(%rip)
	WORD $0x01b3                   // movb         $1, %bl
	WORD $0xdb84                   // testb        %bl, %bl
	LONG $0x0010850f; WORD $0x0000 // jne          LBB35_8, $16(%rip)
	LONG $0x0000a0e9; BYTE $0x00   // jmp          LBB35_10, $160(%rip)

LBB35_7:
	WORD $0x894d; BYTE $0xc6       // movq         %r8, %r14
	WORD $0xdb84                   // testb        %bl, %bl
	LONG $0x0095840f; WORD $0x0000 // je           LBB35_10, $149(%rip)

LBB35_8:
	LONG $0xe8718d49                           // leaq         $-24(%r9), %rsi
	WORD $0x3949; BYTE $0xf4                   // cmpq         %rsi, %r12
	LONG $0x0088870f; WORD $0x0000             // ja           LBB35_10, $136(%rip)
	LONG $0x6f7ac1c4; WORD $0x2404             // vmovdqu      (%r12), %xmm0
	LONG $0x6f7ac1c4; WORD $0x244c; BYTE $0x08 // vmovdqu      $8(%r12), %xmm1
	LONG $0xd973f1c5; BYTE $0x04               // vpsrldq      $4, %xmm1, %xmm1
	LONG $0x6f7ec1c4; BYTE $0x12               // vmovdqu      (%r10), %ymm2
	LONG $0x387de3c4; WORD $0x01c1             // vinserti128  $1, %xmm1, %ymm0, %ymm0
	QUAD $0xfffdbb05007de2c4; BYTE $0xff       // vpshufb      $-581(%rip), %ymm0, %ymm0  /* LCPI35_0+0(%rip) */
	QUAD $0xfffffdd30ddbfdc5                   // vpand        $-557(%rip), %ymm0, %ymm1  /* LCPI35_1+0(%rip) */
	QUAD $0xfffffdeb0de4f5c5                   // vpmulhuw     $-533(%rip), %ymm1, %ymm1  /* LCPI35_2+0(%rip) */
	QUAD $0xfffffe0305dbfdc5                   // vpand        $-509(%rip), %ymm0, %ymm0  /* LCPI35_3+0(%rip) */
	LONG $0xf071e5c5; BYTE $0x08               // vpsllw       $8, %ymm0, %ymm3
	LONG $0xf071fdc5; BYTE $0x04               // vpsllw       $4, %ymm0, %ymm0
	LONG $0x0e7de3c4; WORD $0xaac3             // vpblendw     $170, %ymm3, %ymm0, %ymm0
	LONG $0xc1ebfdc5                           // vpor         %ymm1, %ymm0, %ymm0
	QUAD $0xfffffe070d6ffdc5                   // vmovdqa      $-505(%rip), %ymm1  /* LCPI35_4+0(%rip) */
	LONG $0xc864f5c5                           // vpcmpgtb     %ymm0, %ymm1, %ymm1
	QUAD $0xfffffe1b1dd8fdc5                   // vpsubusb     $-485(%rip), %ymm0, %ymm3  /* LCPI35_5+0(%rip) */
	QUAD $0xfffffe330ddbf5c5                   // vpand        $-461(%rip), %ymm1, %ymm1  /* LCPI35_6+0(%rip) */
	LONG $0xcbebf5c5                           // vpor         %ymm3, %ymm1, %ymm1
	LONG $0x006de2c4; BYTE $0xc9               // vpshufb      %ymm1, %ymm2, %ymm1
	LONG $0xc0fcf5c5                           // vpaddb       %ymm0, %ymm1, %ymm0
	LONG $0x7f7ec1c4; BYTE $0x06               // vmovdqu      %ymm0, (%r14)
	LONG $0x20c68349                           // addq         $32, %r14
	LONG $0x18c48349                           // addq         $24, %r12

LBB35_10:
	WORD $0x394d; BYTE $0xcc       // cmpq         %r9, %r12
	LONG $0x0168840f; WORD $0x0000 // je           LBB35_24, $360(%rip)
	LONG $0xfc518d4d               // leaq         $-4(%r9), %r10
	WORD $0x394d; BYTE $0xd4       // cmpq         %r10, %r12
	LONG $0x005a870f; WORD $0x0000 // ja           LBB35_13, $90(%rip)
	WORD $0x9090; BYTE $0x90       // .p2align 4, 0x90

LBB35_12:
	LONG $0x24348b41               // movl         (%r12), %esi
	WORD $0xce0f                   // bswapl       %esi
	WORD $0x8949; BYTE $0xf7       // movq         %rsi, %r15
	LONG $0x1aefc149               // shrq         $26, %r15
	WORD $0xf189                   // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x14       // shrl         $20, %ecx
	WORD $0xe183; BYTE $0x3f       // andl         $63, %ecx
	WORD $0xf389                   // movl         %esi, %ebx
	WORD $0xebc1; BYTE $0x0e       // shrl         $14, %ebx
	WORD $0xe383; BYTE $0x3f       // andl         $63, %ebx
	WORD $0xeec1; BYTE $0x08       // shrl         $8, %esi
	WORD $0xe683; BYTE $0x3f       // andl         $63, %esi
	LONG $0x03c48349               // addq         $3, %r12
	LONG $0x04b60f43; BYTE $0x3b   // movzbl       (%r11,%r15), %eax
	WORD $0x8841; BYTE $0x06       // movb         %al, (%r14)
	LONG $0x04b60f41; BYTE $0x0b   // movzbl       (%r11,%rcx), %eax
	LONG $0x01468841               // movb         %al, $1(%r14)
	LONG $0x04b60f41; BYTE $0x1b   // movzbl       (%r11,%rbx), %eax
	LONG $0x02468841               // movb         %al, $2(%r14)
	LONG $0x04b60f41; BYTE $0x33   // movzbl       (%r11,%rsi), %eax
	LONG $0x03468841               // movb         %al, $3(%r14)
	LONG $0x04c68349               // addq         $4, %r14
	WORD $0x394d; BYTE $0xd4       // cmpq         %r10, %r12
	LONG $0xffa9860f; WORD $0xffff // jbe          LBB35_12, $-87(%rip)

LBB35_13:
	WORD $0x294d; BYTE $0xe1       // subq         %r12, %r9
	LONG $0x14b60f45; BYTE $0x24   // movzbl       (%r12), %r10d
	LONG $0x01f98349               // cmpq         $1, %r9
	LONG $0x00ab840f; WORD $0x0000 // je           LBB35_19, $171(%rip)
	WORD $0x894c; BYTE $0xd6       // movq         %r10, %rsi
	LONG $0x10e6c148               // shlq         $16, %rsi
	LONG $0x02f98349               // cmpq         $2, %r9
	LONG $0x0056840f; WORD $0x0000 // je           LBB35_17, $86(%rip)
	LONG $0x03f98349               // cmpq         $3, %r9
	LONG $0x00d4850f; WORD $0x0000 // jne          LBB35_24, $212(%rip)
	LONG $0x54b60f41; WORD $0x0224 // movzbl       $2(%r12), %edx
	WORD $0xd609                   // orl          %edx, %esi
	LONG $0x44b60f41; WORD $0x0124 // movzbl       $1(%r12), %eax
	WORD $0xe0c1; BYTE $0x08       // shll         $8, %eax
	WORD $0xf009                   // orl          %esi, %eax
	LONG $0x02eac149               // shrq         $2, %r10
	LONG $0x130c8a43               // movb         (%r11,%r10), %cl
	WORD $0x8841; BYTE $0x0e       // movb         %cl, (%r14)
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xe9c1; BYTE $0x0c       // shrl         $12, %ecx
	WORD $0xe183; BYTE $0x3f       // andl         $63, %ecx
	LONG $0x0b0c8a41               // movb         (%r11,%rcx), %cl
	LONG $0x014e8841               // movb         %cl, $1(%r14)
	WORD $0xe8c1; BYTE $0x06       // shrl         $6, %eax
	WORD $0xe083; BYTE $0x3f       // andl         $63, %eax
	LONG $0x03048a41               // movb         (%r11,%rax), %al
	LONG $0x02468841               // movb         %al, $2(%r14)
	WORD $0xe283; BYTE $0x3f       // andl         $63, %edx
	LONG $0x13048a41               // movb         (%r11,%rdx), %al
	LONG $0x03468841               // movb         %al, $3(%r14)
	LONG $0x000072e9; BYTE $0x00   // jmp          LBB35_21, $114(%rip)

LBB35_17:
	LONG $0x44b60f41; WORD $0x0124 // movzbl       $1(%r12), %eax
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xe1c1; BYTE $0x08       // shll         $8, %ecx
	WORD $0xf109                   // orl          %esi, %ecx
	LONG $0x02eac149               // shrq         $2, %r10
	LONG $0x131c8a43               // movb         (%r11,%r10), %bl
	WORD $0x8841; BYTE $0x1e       // movb         %bl, (%r14)
	WORD $0xe9c1; BYTE $0x0c       // shrl         $12, %ecx
	WORD $0xe183; BYTE $0x3f       // andl         $63, %ecx
	LONG $0x0b0c8a41               // movb         (%r11,%rcx), %cl
	LONG $0x014e8841               // movb         %cl, $1(%r14)
	WORD $0xe083; BYTE $0x0f       // andl         $15, %eax
	LONG $0x83048a41               // movb         (%r11,%rax,4), %al
	LONG $0x02468841               // movb         %al, $2(%r14)
	WORD $0xc2f6; BYTE $0x02       // testb        $2, %dl
	LONG $0x0041850f; WORD $0x0000 // jne          LBB35_22, $65(%rip)
	LONG $0x0346c641; BYTE $0x3d   // movb         $61, $3(%r14)
	LONG $0x00002ee9; BYTE $0x00   // jmp          LBB35_21, $46(%rip)

LBB35_19:
	WORD $0x894c; BYTE $0xd0                   // movq         %r10, %rax
	LONG $0x02e8c148                           // shrq         $2, %rax
	LONG $0x03048a41                           // movb         (%r11,%rax), %al
	WORD $0x8841; BYTE $0x06                   // movb         %al, (%r14)
	LONG $0x04e2c141                           // shll         $4, %r10d
	LONG $0x30e28341                           // andl         $48, %r10d
	LONG $0x13048a43                           // movb         (%r11,%r10), %al
	LONG $0x01468841                           // movb         %al, $1(%r14)
	WORD $0xc2f6; BYTE $0x02                   // testb        $2, %dl
	LONG $0x0019850f; WORD $0x0000             // jne          LBB35_23, $25(%rip)
	LONG $0x46c74166; WORD $0x3d02; BYTE $0x3d // movw         $15677, $2(%r14)

LBB35_21:
	LONG $0x04c68349             // addq         $4, %r14
	LONG $0x00000de9; BYTE $0x00 // jmp          LBB35_24, $13(%rip)

LBB35_22:
	LONG $0x03c68349             // addq         $3, %r14
	LONG $0x000004e9; BYTE $0x00 // jmp          LBB35_24, $4(%rip)

LBB35_23:
	LONG $0x02c68349 // addq         $2, %r14

LBB35_24:
	WORD $0x294d; BYTE $0xc6 // subq         %r8, %r14
	LONG $0x0877014c         // addq         %r14, $8(%rdi)

LBB35_25:
	BYTE $0x5b                                                                       // popq         %rbx
	WORD $0x5c41                                                                     // popq         %r12
	WORD $0x5e41                                                                     // popq         %r14
	WORD $0x5f41                                                                     // popq         %r15
	BYTE $0x5d                                                                       // popq         %rbp
	WORD $0xf8c5; BYTE $0x77                                                         // vzeroupper
	BYTE $0xc3                                                                       // retq
	QUAD $0x0000000000000000; QUAD $0x0000000000000000; LONG $0x00000000; BYTE $0x00 // .p2align 5, 0x00

LCPI36_0:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI36_1:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI36_2:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84

LCPI36_3:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112

LCPI36_4:
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'

LCPI36_5:
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'

LCPI36_6:
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'

LCPI36_7:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI36_8:
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'

LCPI36_9:
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI36_10:
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'

LCPI36_11:
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1

LCPI36_12:
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1

LCPI36_14:
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'

	// .p2align 4, 0x00
LCPI36_13:
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6

	// .p2align 4, 0x90
_b64decode:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x60ec8348                           // subq         $96, %rsp
	WORD $0x8548; BYTE $0xd2                   // testq        %rdx, %rdx
	LONG $0x00a3840f; WORD $0x0000             // je           LBB36_1, $163(%rip)
	WORD $0x8b48; BYTE $0x07                   // movq         (%rdi), %rax
	LONG $0x085f8b48                           // movq         $8(%rdi), %rbx
	WORD $0x0148; BYTE $0xc3                   // addq         %rax, %rbx
	LONG $0x907d8948                           // movq         %rdi, $-112(%rbp)
	LONG $0x10470348                           // addq         $16(%rdi), %rax
	LONG $0xa8458948                           // movq         %rax, $-88(%rbp)
	WORD $0x8949; BYTE $0xf4                   // movq         %rsi, %r12
	WORD $0xc889                               // movl         %ecx, %eax
	LONG $0x163c8d48                           // leaq         (%rsi,%rdx), %rdi
	WORD $0x01a8                               // testb        $1, %al
	LONG $0xae0d8d48; WORD $0x0091; BYTE $0x00 // leaq         $37294(%rip), %rcx  /* _VecDecodeCharsetStd+0(%rip) */
	LONG $0xa7158d4c; WORD $0x0092; BYTE $0x00 // leaq         $37543(%rip), %r10  /* _VecDecodeCharsetURL+0(%rip) */
	LONG $0xd1440f4c                           // cmoveq       %rcx, %r10
	LONG $0xb05d8948                           // movq         %rbx, $-80(%rbp)
	LONG $0xc8758948                           // movq         %rsi, $-56(%rbp)
	WORD $0x4589; BYTE $0xd4                   // movl         %eax, $-44(%rbp)
	WORD $0x04a8                               // testb        $4, %al
	LONG $0x0359840f; WORD $0x0000             // je           LBB36_27, $857(%rip)
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	LONG $0x10048d4c                           // leaq         (%rax,%rdx), %r8
	LONG $0xe0c08349                           // addq         $-32, %r8
	LONG $0xb05d8b48                           // movq         $-80(%rbp), %rbx
	WORD $0x8949; BYTE $0xc4                   // movq         %rax, %r12
	WORD $0x3949; BYTE $0xc0                   // cmpq         %rax, %r8
	LONG $0x033d820f; WORD $0x0000             // jb           LBB36_27, $829(%rip)
	LONG $0x01d445f6                           // testb        $1, $-44(%rbp)
	LONG $0x003e840f; WORD $0x0000             // je           LBB36_5, $62(%rip)
	QUAD $0xfffffdc2056ffdc5                   // vmovdqa      $-574(%rip), %ymm0  /* LCPI36_1+0(%rip) */
	LONG $0x003e850f; WORD $0x0000             // jne          LBB36_9, $62(%rip)

LBB36_8:
	QUAD $0xfffffdd40d6ffdc5       // vmovdqa      $-556(%rip), %ymm1  /* LCPI36_2+0(%rip) */
	LONG $0x003e850f; WORD $0x0000 // jne          LBB36_12, $62(%rip)

LBB36_11:
	QUAD $0xfffffe06156ffdc5       // vmovdqa      $-506(%rip), %ymm2  /* LCPI36_4+0(%rip) */
	LONG $0x003e850f; WORD $0x0000 // jne          LBB36_15, $62(%rip)

LBB36_14:
	QUAD $0xfffffe381d6ffdc5     // vmovdqa      $-456(%rip), %ymm3  /* LCPI36_6+0(%rip) */
	LONG $0x000039e9; BYTE $0x00 // jmp          LBB36_16, $57(%rip)

LBB36_1:
	WORD $0xc031                 // xorl         %eax, %eax
	LONG $0x000a52e9; BYTE $0x00 // jmp          LBB36_179, $2642(%rip)

LBB36_5:
	QUAD $0xfffffd64056ffdc5       // vmovdqa      $-668(%rip), %ymm0  /* LCPI36_0+0(%rip) */
	LONG $0xffc2840f; WORD $0xffff // je           LBB36_8, $-62(%rip)

LBB36_9:
	QUAD $0xfffffdb60d6ffdc5       // vmovdqa      $-586(%rip), %ymm1  /* LCPI36_3+0(%rip) */
	LONG $0xffc2840f; WORD $0xffff // je           LBB36_11, $-62(%rip)

LBB36_12:
	QUAD $0xfffffde8156ffdc5       // vmovdqa      $-536(%rip), %ymm2  /* LCPI36_5+0(%rip) */
	LONG $0xffc2840f; WORD $0xffff // je           LBB36_14, $-62(%rip)

LBB36_15:
	QUAD $0xfffffe1a1d6ffdc5 // vmovdqa      $-486(%rip), %ymm3  /* LCPI36_7+0(%rip) */

LBB36_16:
	LONG $0xa8458b48                                                     // movq         $-88(%rbp), %rax
	LONG $0xe0708d4c                                                     // leaq         $-32(%rax), %r14
	LONG $0xff7f8d4c                                                     // leaq         $-1(%rdi), %r15
	LONG $0x015f8d4c                                                     // leaq         $1(%rdi), %r11
	QUAD $0xfffffe22256ffdc5                                             // vmovdqa      $-478(%rip), %ymm4  /* LCPI36_8+0(%rip) */
	QUAD $0xfffffe3a2d6ffdc5                                             // vmovdqa      $-454(%rip), %ymm5  /* LCPI36_9+0(%rip) */
	LONG $0xf6efc9c5                                                     // vpxor        %xmm6, %xmm6, %xmm6
	QUAD $0xfffffe6e056f7dc5                                             // vmovdqa      $-402(%rip), %ymm8  /* LCPI36_11+0(%rip) */
	QUAD $0xfffffe860d6f7dc5                                             // vmovdqa      $-378(%rip), %ymm9  /* LCPI36_12+0(%rip) */
	QUAD $0xfffffebe156f79c5                                             // vmovdqa      $-322(%rip), %xmm10  /* LCPI36_13+0(%rip) */
	QUAD $0xfffffe961d6f7dc5                                             // vmovdqa      $-362(%rip), %ymm11  /* LCPI36_14+0(%rip) */
	QUAD $0xffff00000000bd49; WORD $0xffff                               // movabsq      $-4294967296, %r13
	LONG $0xc8658b4c                                                     // movq         $-56(%rbp), %r12
	LONG $0xb05d8b48                                                     // movq         $-80(%rbp), %rbx
	LONG $0x00002fe9; BYTE $0x00                                         // jmp          LBB36_17, $47(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB36_69:
	LONG $0x237f7ac5               // vmovdqu      %xmm12, (%rbx)
	LONG $0x397d63c4; WORD $0x01e7 // vextracti128 $1, %ymm12, %xmm7
	LONG $0x7bd6f9c5; BYTE $0x10   // vmovq        %xmm7, $16(%rbx)

LBB36_70:
	LONG $0x20c48349 // addq         $32, %r12
	LONG $0x18c38348 // addq         $24, %rbx

LBB36_71:
	WORD $0x394d; BYTE $0xc4       // cmpq         %r8, %r12
	LONG $0x0239870f; WORD $0x0000 // ja           LBB36_27, $569(%rip)

LBB36_17:
	LONG $0x6f7e41c4; WORD $0x2424 // vmovdqu      (%r12), %ymm12
	LONG $0x7215c1c4; WORD $0x04d4 // vpsrld       $4, %ymm12, %ymm13
	LONG $0xecdb15c5               // vpand        %ymm4, %ymm13, %ymm13
	LONG $0xf4db1dc5               // vpand        %ymm4, %ymm12, %ymm14
	LONG $0x007542c4; BYTE $0xf6   // vpshufb      %ymm14, %ymm1, %ymm14
	LONG $0x005542c4; BYTE $0xfd   // vpshufb      %ymm13, %ymm5, %ymm15
	LONG $0xdb0541c4; BYTE $0xf6   // vpand        %ymm14, %ymm15, %ymm14
	LONG $0xf6740dc5               // vpcmpeqb     %ymm6, %ymm14, %ymm14
	LONG $0xd77dc1c4; BYTE $0xc6   // vpmovmskb    %ymm14, %eax
	WORD $0x094c; BYTE $0xe8       // orq          %r13, %rax
	LONG $0xc0bc0f48               // bsfq         %rax, %rax
	WORD $0x20a8                   // testb        $32, %al
	LONG $0x0075850f; WORD $0x0000 // jne          LBB36_67, $117(%rip)
	WORD $0x3949; BYTE $0xfc       // cmpq         %rdi, %r12
	LONG $0x00cc830f; WORD $0x0000 // jae          LBB36_48, $204(%rip)
	LONG $0xe07e79c5               // vmovd        %xmm12, %eax
	LONG $0x24748d49; BYTE $0x01   // leaq         $1(%r12), %rsi
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0x0a3c                   // cmpb         $10, %al
	LONG $0x0029840f; WORD $0x0000 // je           LBB36_24, $41(%rip)
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB36_21:
	WORD $0x0d3c                   // cmpb         $13, %al
	LONG $0x001b840f; WORD $0x0000 // je           LBB36_24, $27(%rip)
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	LONG $0x04b60f41; BYTE $0x02   // movzbl       (%r10,%rax), %eax
	LONG $0x0000ff3d; BYTE $0x00   // cmpl         $255, %eax
	LONG $0x00dd840f; WORD $0x0000 // je           LBB36_40, $221(%rip)
	WORD $0xff41; BYTE $0xc1       // incl         %r9d
	WORD $0xe2c1; BYTE $0x06       // shll         $6, %edx
	WORD $0xc209                   // orl          %eax, %edx

LBB36_24:
	LONG $0x03f98341                           // cmpl         $3, %r9d
	LONG $0x00ce8f0f; WORD $0x0000             // jg           LBB36_41, $206(%rip)
	WORD $0x3948; BYTE $0xfe                   // cmpq         %rdi, %rsi
	LONG $0x00c5830f; WORD $0x0000             // jae          LBB36_41, $197(%rip)
	WORD $0xb60f; BYTE $0x06                   // movzbl       (%rsi), %eax
	WORD $0xff48; BYTE $0xc6                   // incq         %rsi
	WORD $0x0a3c                               // cmpb         $10, %al
	LONG $0xffbc850f; WORD $0xffff             // jne          LBB36_21, $-68(%rip)
	LONG $0xffffdae9; BYTE $0xff               // jmp          LBB36_24, $-38(%rip)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB36_67:
	LONG $0x007d42c4; BYTE $0xed               // vpshufb      %ymm13, %ymm0, %ymm13
	LONG $0xf2741dc5                           // vpcmpeqb     %ymm2, %ymm12, %ymm14
	LONG $0x4c1563c4; WORD $0xe0eb             // vpblendvb    %ymm14, %ymm3, %ymm13, %ymm13
	LONG $0xfc1541c4; BYTE $0xe4               // vpaddb       %ymm12, %ymm13, %ymm12
	QUAD $0xfffffd2425db1dc5                   // vpand        $-732(%rip), %ymm12, %ymm12  /* LCPI36_10+0(%rip) */
	LONG $0x041d42c4; BYTE $0xe0               // vpmaddubsw   %ymm8, %ymm12, %ymm12
	LONG $0xf51d41c4; BYTE $0xe1               // vpmaddwd     %ymm9, %ymm12, %ymm12
	LONG $0x397d63c4; WORD $0x01e7             // vextracti128 $1, %ymm12, %xmm7
	LONG $0x0041c2c4; BYTE $0xfa               // vpshufb      %xmm10, %xmm7, %xmm7
	LONG $0x001d42c4; BYTE $0xe3               // vpshufb      %ymm11, %ymm12, %ymm12
	LONG $0x021de3c4; WORD $0x08ff             // vpblendd     $8, %ymm7, %ymm12, %ymm7
	LONG $0x024563c4; WORD $0xc0e6             // vpblendd     $192, %ymm6, %ymm7, %ymm12
	WORD $0x394c; BYTE $0xf3                   // cmpq         %r14, %rbx
	LONG $0xfee5870f; WORD $0xffff             // ja           LBB36_69, $-283(%rip)
	LONG $0x237f7ec5                           // vmovdqu      %ymm12, (%rbx)
	LONG $0xfffeebe9; BYTE $0xff               // jmp          LBB36_70, $-277(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

LBB36_48:
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	LONG $0x000000ba; BYTE $0x00   // movl         $0, %edx
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	WORD $0x3949; BYTE $0xfc       // cmpq         %rdi, %r12
	LONG $0x0099840f; WORD $0x0000 // je           LBB36_49, $153(%rip)

LBB36_51:
	WORD $0x394c; BYTE $0xfe       // cmpq         %r15, %rsi
	LONG $0x0038830f; WORD $0x0000 // jae          LBB36_42, $56(%rip)
	WORD $0x3e80; BYTE $0x3d       // cmpb         $61, (%rsi)
	LONG $0x00b0850f; WORD $0x0000 // jne          LBB36_53, $176(%rip)
	LONG $0x02468d48               // leaq         $2(%rsi), %rax
	LONG $0x3d017e80               // cmpb         $61, $1(%rsi)
	LONG $0x0065850f; WORD $0x0000 // jne          LBB36_47, $101(%rip)

LBB36_55:
	WORD $0x3948; BYTE $0xf8       // cmpq         %rdi, %rax
	LONG $0x00ad830f; WORD $0x0000 // jae          LBB36_56, $173(%rip)
	WORD $0x294c; BYTE $0xe0       // subq         %r12, %rax
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	LONG $0x000054e9; BYTE $0x00   // jmp          LBB36_64, $84(%rip)

LBB36_40:
	WORD $0xff48; BYTE $0xce // decq         %rsi

LBB36_41:
	LONG $0x01f98341               // cmpl         $1, %r9d
	LONG $0x0014850f; WORD $0x0000 // jne          LBB36_43, $20(%rip)

LBB36_42:
	WORD $0x294c; BYTE $0xe6       // subq         %r12, %rsi
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xfe83840f; WORD $0xffff // je           LBB36_71, $-381(%rip)
	LONG $0x0007fce9; BYTE $0x00   // jmp          LBB36_66, $2044(%rip)

LBB36_43:
	LONG $0x03f98341               // cmpl         $3, %r9d
	LONG $0x005b8f0f; WORD $0x0000 // jg           LBB36_59, $91(%rip)
	WORD $0x3948; BYTE $0xfe       // cmpq         %rdi, %rsi
	LONG $0x0031840f; WORD $0x0000 // je           LBB36_49, $49(%rip)
	LONG $0x03f98341               // cmpl         $3, %r9d
	LONG $0xff8e850f; WORD $0xffff // jne          LBB36_51, $-114(%rip)
	LONG $0x01468d48               // leaq         $1(%rsi), %rax
	LONG $0x0003b941; WORD $0x0000 // movl         $3, %r9d
	WORD $0x3e80; BYTE $0x3d       // cmpb         $61, (%rsi)
	LONG $0xff9b840f; WORD $0xffff // je           LBB36_55, $-101(%rip)

LBB36_47:
	WORD $0x294c; BYTE $0xe0 // subq         %r12, %rax

LBB36_64:
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xfe3f840f; WORD $0xffff // je           LBB36_71, $-449(%rip)
	LONG $0x0007b8e9; BYTE $0x00   // jmp          LBB36_66, $1976(%rip)

LBB36_49:
	WORD $0x8948; BYTE $0xfe       // movq         %rdi, %rsi
	LONG $0x02d445f6               // testb        $2, $-44(%rbp)
	LONG $0x0033850f; WORD $0x0000 // jne          LBB36_57, $51(%rip)
	WORD $0x894c; BYTE $0xde       // movq         %r11, %rsi
	WORD $0x294c; BYTE $0xe6       // subq         %r12, %rsi
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xfe1e840f; WORD $0xffff // je           LBB36_71, $-482(%rip)
	LONG $0x000797e9; BYTE $0x00   // jmp          LBB36_66, $1943(%rip)

LBB36_59:
	WORD $0x5388; BYTE $0x02     // movb         %dl, $2(%rbx)
	LONG $0x00003ae9; BYTE $0x00 // jmp          LBB36_60, $58(%rip)

LBB36_53:
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x294c; BYTE $0xe6       // subq         %r12, %rsi
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xfe02840f; WORD $0xffff // je           LBB36_71, $-510(%rip)
	LONG $0x00077be9; BYTE $0x00   // jmp          LBB36_66, $1915(%rip)

LBB36_56:
	WORD $0x8948; BYTE $0xc6 // movq         %rax, %rsi

LBB36_57:
	WORD $0x04b0                   // movb         $4, %al
	WORD $0x2844; BYTE $0xc8       // subb         %r9b, %al
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	WORD $0xc001                   // addl         %eax, %eax
	WORD $0x0c8d; BYTE $0x40       // leal         (%rax,%rax,2), %ecx
	WORD $0xe2d3                   // shll         %cl, %edx
	LONG $0x02f98341               // cmpl         $2, %r9d
	LONG $0x000d840f; WORD $0x0000 // je           LBB36_61, $13(%rip)
	LONG $0x03f98341               // cmpl         $3, %r9d
	LONG $0x0008850f; WORD $0x0000 // jne          LBB36_62, $8(%rip)

LBB36_60:
	WORD $0x7388; BYTE $0x01 // movb         %dh, $1(%rbx)

LBB36_61:
	WORD $0xeac1; BYTE $0x10 // shrl         $16, %edx
	WORD $0x1388             // movb         %dl, (%rbx)

LBB36_62:
	WORD $0x6349; BYTE $0xc1     // movslq       %r9d, %rax
	WORD $0x0148; BYTE $0xc3     // addq         %rax, %rbx
	WORD $0xff48; BYTE $0xcb     // decq         %rbx
	WORD $0x8949; BYTE $0xf4     // movq         %rsi, %r12
	LONG $0xfffdbee9; BYTE $0xff // jmp          LBB36_71, $-578(%rip)

LBB36_27:
	LONG $0xf8478d48                           // leaq         $-8(%rdi), %rax
	LONG $0x78858948; WORD $0xffff; BYTE $0xff // movq         %rax, $-136(%rbp)
	WORD $0x3949; BYTE $0xc4                   // cmpq         %rax, %r12
	LONG $0xb87d8948                           // movq         %rdi, $-72(%rbp)
	LONG $0x0316870f; WORD $0x0000             // ja           LBB36_72, $790(%rip)
	LONG $0xa8458b48                           // movq         $-88(%rbp), %rax
	LONG $0xf8c08348                           // addq         $-8, %rax
	LONG $0x80458948                           // movq         %rax, $-128(%rbp)
	WORD $0x3948; BYTE $0xc3                   // cmpq         %rax, %rbx
	LONG $0x0301870f; WORD $0x0000             // ja           LBB36_72, $769(%rip)
	LONG $0xff478d48                           // leaq         $-1(%rdi), %rax
	LONG $0x88458948                           // movq         %rax, $-120(%rbp)
	LONG $0x01478d48                           // leaq         $1(%rdi), %rax
	LONG $0x98458948                           // movq         %rax, $-104(%rbp)
	LONG $0xc055894c                           // movq         %r10, $-64(%rbp)
	LONG $0x90909090; WORD $0x9090             // .p2align 4, 0x90

LBB36_30:
	LONG $0xa05d8948               // movq         %rbx, $-96(%rbp)
	LONG $0x2cb60f45; BYTE $0x24   // movzbl       (%r12), %r13d
	LONG $0x3cb60f43; BYTE $0x2a   // movzbl       (%r10,%r13), %edi
	LONG $0x44b60f41; WORD $0x0124 // movzbl       $1(%r12), %eax
	LONG $0x34b60f41; BYTE $0x02   // movzbl       (%r10,%rax), %esi
	LONG $0x44b60f41; WORD $0x0224 // movzbl       $2(%r12), %eax
	LONG $0x04b60f45; BYTE $0x02   // movzbl       (%r10,%rax), %r8d
	LONG $0x44b60f41; WORD $0x0324 // movzbl       $3(%r12), %eax
	LONG $0x14b60f41; BYTE $0x02   // movzbl       (%r10,%rax), %edx
	LONG $0x44b60f41; WORD $0x0424 // movzbl       $4(%r12), %eax
	LONG $0x1cb60f45; BYTE $0x02   // movzbl       (%r10,%rax), %r11d
	LONG $0x44b60f41; WORD $0x0524 // movzbl       $5(%r12), %eax
	LONG $0x04b60f41; BYTE $0x02   // movzbl       (%r10,%rax), %eax
	LONG $0x5cb60f41; WORD $0x0624 // movzbl       $6(%r12), %ebx
	LONG $0x3cb60f45; BYTE $0x1a   // movzbl       (%r10,%rbx), %r15d
	WORD $0xf389                   // movl         %esi, %ebx
	WORD $0xfb09                   // orl          %edi, %ebx
	WORD $0x8941; BYTE $0xd1       // movl         %edx, %r9d
	WORD $0x0945; BYTE $0xc1       // orl          %r8d, %r9d
	WORD $0x0941; BYTE $0xd9       // orl          %ebx, %r9d
	WORD $0xc389                   // movl         %eax, %ebx
	WORD $0x0944; BYTE $0xdb       // orl          %r11d, %ebx
	WORD $0x894c; BYTE $0xd1       // movq         %r10, %rcx
	WORD $0x8945; BYTE $0xfa       // movl         %r15d, %r10d
	WORD $0x0941; BYTE $0xda       // orl          %ebx, %r10d
	LONG $0x5cb60f41; WORD $0x0724 // movzbl       $7(%r12), %ebx
	LONG $0x34b60f44; BYTE $0x19   // movzbl       (%rcx,%rbx), %r14d
	WORD $0x0945; BYTE $0xca       // orl          %r9d, %r10d
	WORD $0x8944; BYTE $0xf3       // movl         %r14d, %ebx
	WORD $0x0944; BYTE $0xd3       // orl          %r10d, %ebx
	WORD $0xfb80; BYTE $0xff       // cmpb         $-1, %bl
	LONG $0x0058840f; WORD $0x0000 // je           LBB36_31, $88(%rip)
	LONG $0x3ae7c148               // shlq         $58, %rdi
	LONG $0x34e6c148               // shlq         $52, %rsi
	WORD $0x0948; BYTE $0xfe       // orq          %rdi, %rsi
	LONG $0x2ee0c149               // shlq         $46, %r8
	LONG $0x28e2c148               // shlq         $40, %rdx
	WORD $0x094c; BYTE $0xc2       // orq          %r8, %rdx
	WORD $0x0948; BYTE $0xf2       // orq          %rsi, %rdx
	LONG $0x22e3c149               // shlq         $34, %r11
	LONG $0x1ce0c148               // shlq         $28, %rax
	WORD $0x094c; BYTE $0xd8       // orq          %r11, %rax
	LONG $0x16e7c149               // shlq         $22, %r15
	WORD $0x0949; BYTE $0xc7       // orq          %rax, %r15
	WORD $0x0949; BYTE $0xd7       // orq          %rdx, %r15
	LONG $0x10e6c149               // shlq         $16, %r14
	WORD $0x094d; BYTE $0xfe       // orq          %r15, %r14
	WORD $0x0f49; BYTE $0xce       // bswapq       %r14
	LONG $0xa05d8b48               // movq         $-96(%rbp), %rbx
	WORD $0x894c; BYTE $0x33       // movq         %r14, (%rbx)
	LONG $0x08c48349               // addq         $8, %r12
	LONG $0x06c38348               // addq         $6, %rbx
	LONG $0xc0558b4c               // movq         $-64(%rbp), %r10
	LONG $0x0001f8e9; BYTE $0x00   // jmp          LBB36_114, $504(%rip)
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB36_31:
	LONG $0xb85d8b48               // movq         $-72(%rbp), %rbx
	WORD $0x3949; BYTE $0xdc       // cmpq         %rbx, %r12
	LONG $0xa0458b4c               // movq         $-96(%rbp), %r8
	LONG $0x006c830f; WORD $0x0000 // jae          LBB36_95, $108(%rip)
	LONG $0x24748d49; BYTE $0x01   // leaq         $1(%r12), %rsi
	WORD $0xff31                   // xorl         %edi, %edi
	WORD $0xd231                   // xorl         %edx, %edx
	LONG $0xc0558b4c               // movq         $-64(%rbp), %r10
	LONG $0x0afd8041               // cmpb         $10, %r13b
	LONG $0x002d840f; WORD $0x0000 // je           LBB36_37, $45(%rip)
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB36_34:
	LONG $0x0dfd8041               // cmpb         $13, %r13b
	LONG $0x001b840f; WORD $0x0000 // je           LBB36_37, $27(%rip)
	LONG $0xc5b60f41               // movzbl       %r13b, %eax
	LONG $0x04b60f41; BYTE $0x02   // movzbl       (%r10,%rax), %eax
	LONG $0x0000ff3d; BYTE $0x00   // cmpl         $255, %eax
	LONG $0x00a5840f; WORD $0x0000 // je           LBB36_86, $165(%rip)
	WORD $0xc7ff                   // incl         %edi
	WORD $0xe2c1; BYTE $0x06       // shll         $6, %edx
	WORD $0xc209                   // orl          %eax, %edx

LBB36_37:
	WORD $0xff83; BYTE $0x03       // cmpl         $3, %edi
	LONG $0x00988f0f; WORD $0x0000 // jg           LBB36_87, $152(%rip)
	WORD $0x3948; BYTE $0xde       // cmpq         %rbx, %rsi
	LONG $0x008f830f; WORD $0x0000 // jae          LBB36_87, $143(%rip)
	LONG $0x2eb60f44               // movzbl       (%rsi), %r13d
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	LONG $0x0afd8041               // cmpb         $10, %r13b
	LONG $0xffb8850f; WORD $0xffff // jne          LBB36_34, $-72(%rip)
	LONG $0xffffd8e9; BYTE $0xff   // jmp          LBB36_37, $-40(%rip)

LBB36_95:
	WORD $0xff31                   // xorl         %edi, %edi
	LONG $0x000000ba; BYTE $0x00   // movl         $0, %edx
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	WORD $0x3949; BYTE $0xdc       // cmpq         %rbx, %r12
	LONG $0x00ca840f; WORD $0x0000 // je           LBB36_96, $202(%rip)

LBB36_99:
	LONG $0x88753b48               // cmpq         $-120(%rbp), %rsi
	LONG $0x003e830f; WORD $0x0000 // jae          LBB36_100, $62(%rip)
	WORD $0x3e80; BYTE $0x3d       // cmpb         $61, (%rsi)
	LONG $0x00ec850f; WORD $0x0000 // jne          LBB36_103, $236(%rip)
	LONG $0x02468d48               // leaq         $2(%rsi), %rax
	LONG $0x3d017e80               // cmpb         $61, $1(%rsi)
	LONG $0xc0558b4c               // movq         $-64(%rbp), %r10
	LONG $0x008e850f; WORD $0x0000 // jne          LBB36_93, $142(%rip)

LBB36_105:
	WORD $0x3948; BYTE $0xd8       // cmpq         %rbx, %rax
	LONG $0x00ec830f; WORD $0x0000 // jae          LBB36_106, $236(%rip)
	WORD $0x294c; BYTE $0xe0       // subq         %r12, %rax
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	WORD $0x894c; BYTE $0xc3       // movq         %r8, %rbx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x011d840f; WORD $0x0000 // je           LBB36_114, $285(%rip)
	LONG $0x00053de9; BYTE $0x00   // jmp          LBB36_66, $1341(%rip)

LBB36_100:
	WORD $0x294c; BYTE $0xe6       // subq         %r12, %rsi
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	LONG $0xc0558b4c               // movq         $-64(%rbp), %r10
	WORD $0x894c; BYTE $0xc3       // movq         %r8, %rbx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0102840f; WORD $0x0000 // je           LBB36_114, $258(%rip)
	LONG $0x000522e9; BYTE $0x00   // jmp          LBB36_66, $1314(%rip)

LBB36_86:
	WORD $0xff48; BYTE $0xce // decq         %rsi

LBB36_87:
	WORD $0xff83; BYTE $0x01       // cmpl         $1, %edi
	LONG $0x0017850f; WORD $0x0000 // jne          LBB36_89, $23(%rip)
	WORD $0x294c; BYTE $0xe6       // subq         %r12, %rsi
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x894c; BYTE $0xc3       // movq         %r8, %rbx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x00df840f; WORD $0x0000 // je           LBB36_114, $223(%rip)
	LONG $0x0004ffe9; BYTE $0x00   // jmp          LBB36_66, $1279(%rip)

LBB36_89:
	WORD $0xff83; BYTE $0x03       // cmpl         $3, %edi
	LONG $0x00648f0f; WORD $0x0000 // jg           LBB36_109, $100(%rip)
	WORD $0x3948; BYTE $0xde       // cmpq         %rbx, %rsi
	LONG $0x0032840f; WORD $0x0000 // je           LBB36_96, $50(%rip)
	WORD $0xff83; BYTE $0x03       // cmpl         $3, %edi
	LONG $0xff5f850f; WORD $0xffff // jne          LBB36_99, $-161(%rip)
	LONG $0x01468d48               // leaq         $1(%rsi), %rax
	LONG $0x000003bf; BYTE $0x00   // movl         $3, %edi
	WORD $0x3e80; BYTE $0x3d       // cmpb         $61, (%rsi)
	LONG $0xff72840f; WORD $0xffff // je           LBB36_105, $-142(%rip)

LBB36_93:
	WORD $0x294c; BYTE $0xe0       // subq         %r12, %rax
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	WORD $0x894c; BYTE $0xc3       // movq         %r8, %rbx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x009b840f; WORD $0x0000 // je           LBB36_114, $155(%rip)
	LONG $0x0004bbe9; BYTE $0x00   // jmp          LBB36_66, $1211(%rip)

LBB36_96:
	WORD $0x8948; BYTE $0xde       // movq         %rbx, %rsi
	LONG $0x02d445f6               // testb        $2, $-44(%rbp)
	LONG $0xc0558b4c               // movq         $-64(%rbp), %r10
	LONG $0x0042850f; WORD $0x0000 // jne          LBB36_107, $66(%rip)
	LONG $0x98758b48               // movq         $-104(%rbp), %rsi
	WORD $0x294c; BYTE $0xe6       // subq         %r12, %rsi
	WORD $0x894c; BYTE $0xc3       // movq         %r8, %rbx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0072840f; WORD $0x0000 // je           LBB36_114, $114(%rip)
	LONG $0x000492e9; BYTE $0x00   // jmp          LBB36_66, $1170(%rip)

LBB36_109:
	WORD $0x894c; BYTE $0xc3     // movq         %r8, %rbx
	LONG $0x02508841             // movb         %dl, $2(%r8)
	LONG $0x000042e9; BYTE $0x00 // jmp          LBB36_110, $66(%rip)

LBB36_103:
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x294c; BYTE $0xe6       // subq         %r12, %rsi
	LONG $0xc0558b4c               // movq         $-64(%rbp), %r10
	WORD $0x894c; BYTE $0xc3       // movq         %r8, %rbx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x004b840f; WORD $0x0000 // je           LBB36_114, $75(%rip)
	LONG $0x00046be9; BYTE $0x00   // jmp          LBB36_66, $1131(%rip)

LBB36_106:
	WORD $0x8948; BYTE $0xc6 // movq         %rax, %rsi

LBB36_107:
	WORD $0x04b0                   // movb         $4, %al
	WORD $0x2840; BYTE $0xf8       // subb         %dil, %al
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	WORD $0xc001                   // addl         %eax, %eax
	WORD $0x0c8d; BYTE $0x40       // leal         (%rax,%rax,2), %ecx
	WORD $0xe2d3                   // shll         %cl, %edx
	WORD $0xff83; BYTE $0x02       // cmpl         $2, %edi
	WORD $0x894c; BYTE $0xc3       // movq         %r8, %rbx
	LONG $0x000c840f; WORD $0x0000 // je           LBB36_111, $12(%rip)
	WORD $0xff83; BYTE $0x03       // cmpl         $3, %edi
	LONG $0x0008850f; WORD $0x0000 // jne          LBB36_112, $8(%rip)

LBB36_110:
	WORD $0x7388; BYTE $0x01 // movb         %dh, $1(%rbx)

LBB36_111:
	WORD $0xeac1; BYTE $0x10 // shrl         $16, %edx
	WORD $0x1388             // movb         %dl, (%rbx)

LBB36_112:
	WORD $0x6348; BYTE $0xc7                           // movslq       %edi, %rax
	WORD $0x0148; BYTE $0xc3                           // addq         %rax, %rbx
	WORD $0xff48; BYTE $0xcb                           // decq         %rbx
	WORD $0x8949; BYTE $0xf4                           // movq         %rsi, %r12
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB36_114:
	LONG $0x78a53b4c; WORD $0xffff; BYTE $0xff // cmpq         $-136(%rbp), %r12
	LONG $0x000a870f; WORD $0x0000             // ja           LBB36_72, $10(%rip)
	LONG $0x805d3b48                           // cmpq         $-128(%rbp), %rbx
	LONG $0xfd19860f; WORD $0xffff             // jbe          LBB36_30, $-743(%rip)

LBB36_72:
	WORD $0x8949; BYTE $0xd8                                             // movq         %rbx, %r8
	LONG $0xb85d8b48                                                     // movq         $-72(%rbp), %rbx
	LONG $0xfc4b8d4c                                                     // leaq         $-4(%rbx), %r9
	WORD $0x394d; BYTE $0xcc                                             // cmpq         %r9, %r12
	LONG $0x0293870f; WORD $0x0000                                       // ja           LBB36_74, $659(%rip)
	LONG $0xa8458b48                                                     // movq         $-88(%rbp), %rax
	LONG $0xfcc08348                                                     // addq         $-4, %rax
	WORD $0x894c; BYTE $0xc2                                             // movq         %r8, %rdx
	WORD $0x3949; BYTE $0xc0                                             // cmpq         %rax, %r8
	LONG $0x027f870f; WORD $0x0000                                       // ja           LBB36_74, $639(%rip)
	WORD $0x8949; BYTE $0xc5                                             // movq         %rax, %r13
	LONG $0xff7b8d4c                                                     // leaq         $-1(%rbx), %r15
	LONG $0x02d46583                                                     // andl         $2, $-44(%rbp)
	LONG $0x01738d4c                                                     // leaq         $1(%rbx), %r14
	WORD $0x894c; BYTE $0xc3                                             // movq         %r8, %rbx
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB36_117:
	WORD $0x8949; BYTE $0xdb                                 // movq         %rbx, %r11
	LONG $0x04b60f41; BYTE $0x24                             // movzbl       (%r12), %eax
	WORD $0x894c; BYTE $0xe1                                 // movq         %r12, %rcx
	LONG $0x04b60f45; BYTE $0x02                             // movzbl       (%r10,%rax), %r8d
	LONG $0x54b60f41; WORD $0x0124                           // movzbl       $1(%r12), %edx
	LONG $0x3cb60f41; BYTE $0x12                             // movzbl       (%r10,%rdx), %edi
	LONG $0x74b60f41; WORD $0x0224                           // movzbl       $2(%r12), %esi
	LONG $0x24b60f45; BYTE $0x32                             // movzbl       (%r10,%rsi), %r12d
	LONG $0x0371b60f                                         // movzbl       $3(%rcx), %esi
	LONG $0x34b60f41; BYTE $0x32                             // movzbl       (%r10,%rsi), %esi
	WORD $0xfa89                                             // movl         %edi, %edx
	WORD $0x0944; BYTE $0xc2                                 // orl          %r8d, %edx
	WORD $0x8944; BYTE $0xe3                                 // movl         %r12d, %ebx
	WORD $0xf309                                             // orl          %esi, %ebx
	WORD $0xd309                                             // orl          %edx, %ebx
	WORD $0xfb80; BYTE $0xff                                 // cmpb         $-1, %bl
	LONG $0x003c840f; WORD $0x0000                           // je           LBB36_118, $60(%rip)
	LONG $0x1ae0c141                                         // shll         $26, %r8d
	WORD $0xe7c1; BYTE $0x14                                 // shll         $20, %edi
	WORD $0x0944; BYTE $0xc7                                 // orl          %r8d, %edi
	LONG $0x0ee4c141                                         // shll         $14, %r12d
	WORD $0xe6c1; BYTE $0x08                                 // shll         $8, %esi
	WORD $0x0944; BYTE $0xe6                                 // orl          %r12d, %esi
	WORD $0xfe09                                             // orl          %edi, %esi
	WORD $0xce0f                                             // bswapl       %esi
	WORD $0x894c; BYTE $0xdb                                 // movq         %r11, %rbx
	WORD $0x8941; BYTE $0x33                                 // movl         %esi, (%r11)
	LONG $0x04c18348                                         // addq         $4, %rcx
	LONG $0x03c38348                                         // addq         $3, %rbx
	WORD $0x8949; BYTE $0xcc                                 // movq         %rcx, %r12
	LONG $0x0001cee9; BYTE $0x00                             // jmp          LBB36_154, $462(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB36_118:
	LONG $0xb85d8b48                                                     // movq         $-72(%rbp), %rbx
	WORD $0x3948; BYTE $0xd9                                             // cmpq         %rbx, %rcx
	WORD $0x8949; BYTE $0xcc                                             // movq         %rcx, %r12
	LONG $0x0067830f; WORD $0x0000                                       // jae          LBB36_137, $103(%rip)
	LONG $0x24748d49; BYTE $0x01                                         // leaq         $1(%r12), %rsi
	WORD $0xff31                                                         // xorl         %edi, %edi
	WORD $0xd231                                                         // xorl         %edx, %edx
	WORD $0x0a3c                                                         // cmpb         $10, %al
	LONG $0x0031840f; WORD $0x0000                                       // je           LBB36_124, $49(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB36_121:
	WORD $0x0d3c                   // cmpb         $13, %al
	LONG $0x001a840f; WORD $0x0000 // je           LBB36_124, $26(%rip)
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	LONG $0x04b60f41; BYTE $0x02   // movzbl       (%r10,%rax), %eax
	LONG $0x0000ff3d; BYTE $0x00   // cmpl         $255, %eax
	LONG $0x0082840f; WORD $0x0000 // je           LBB36_127, $130(%rip)
	WORD $0xc7ff                   // incl         %edi
	WORD $0xe2c1; BYTE $0x06       // shll         $6, %edx
	WORD $0xc209                   // orl          %eax, %edx

LBB36_124:
	WORD $0xff83; BYTE $0x03       // cmpl         $3, %edi
	LONG $0x00758f0f; WORD $0x0000 // jg           LBB36_128, $117(%rip)
	WORD $0x3948; BYTE $0xde       // cmpq         %rbx, %rsi
	LONG $0x006c830f; WORD $0x0000 // jae          LBB36_128, $108(%rip)
	WORD $0xb60f; BYTE $0x06       // movzbl       (%rsi), %eax
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x0a3c                   // cmpb         $10, %al
	LONG $0xffbe850f; WORD $0xffff // jne          LBB36_121, $-66(%rip)
	LONG $0xffffdbe9; BYTE $0xff   // jmp          LBB36_124, $-37(%rip)

LBB36_137:
	WORD $0xff31                   // xorl         %edi, %edi
	LONG $0x000000ba; BYTE $0x00   // movl         $0, %edx
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	WORD $0x3949; BYTE $0xdc       // cmpq         %rbx, %r12
	LONG $0x00aa840f; WORD $0x0000 // je           LBB36_138, $170(%rip)

LBB36_141:
	WORD $0x394c; BYTE $0xfe       // cmpq         %r15, %rsi
	LONG $0x0046830f; WORD $0x0000 // jae          LBB36_129, $70(%rip)
	WORD $0x3e80; BYTE $0x3d       // cmpb         $61, (%rsi)
	LONG $0x00c8850f; WORD $0x0000 // jne          LBB36_143, $200(%rip)
	LONG $0x02468d48               // leaq         $2(%rsi), %rax
	LONG $0x3d017e80               // cmpb         $61, $1(%rsi)
	LONG $0x0073850f; WORD $0x0000 // jne          LBB36_135, $115(%rip)

LBB36_145:
	WORD $0x3948; BYTE $0xd8       // cmpq         %rbx, %rax
	LONG $0x00c8830f; WORD $0x0000 // jae          LBB36_146, $200(%rip)
	WORD $0x294c; BYTE $0xe0       // subq         %r12, %rax
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	WORD $0x894c; BYTE $0xdb       // movq         %r11, %rbx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x00f8840f; WORD $0x0000 // je           LBB36_154, $248(%rip)
	LONG $0x000278e9; BYTE $0x00   // jmp          LBB36_66, $632(%rip)

LBB36_127:
	WORD $0xff48; BYTE $0xce // decq         %rsi

LBB36_128:
	WORD $0xff83; BYTE $0x01       // cmpl         $1, %edi
	LONG $0x0017850f; WORD $0x0000 // jne          LBB36_131, $23(%rip)

LBB36_129:
	WORD $0x294c; BYTE $0xe6       // subq         %r12, %rsi
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x894c; BYTE $0xdb       // movq         %r11, %rbx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x00d5840f; WORD $0x0000 // je           LBB36_154, $213(%rip)
	LONG $0x000255e9; BYTE $0x00   // jmp          LBB36_66, $597(%rip)

LBB36_131:
	WORD $0xff83; BYTE $0x03       // cmpl         $3, %edi
	LONG $0x005f8f0f; WORD $0x0000 // jg           LBB36_149, $95(%rip)
	WORD $0x3948; BYTE $0xde       // cmpq         %rbx, %rsi
	LONG $0x0032840f; WORD $0x0000 // je           LBB36_138, $50(%rip)
	WORD $0xff83; BYTE $0x03       // cmpl         $3, %edi
	LONG $0xff7f850f; WORD $0xffff // jne          LBB36_141, $-129(%rip)
	LONG $0x01468d48               // leaq         $1(%rsi), %rax
	LONG $0x000003bf; BYTE $0x00   // movl         $3, %edi
	WORD $0x3e80; BYTE $0x3d       // cmpb         $61, (%rsi)
	LONG $0xff8d840f; WORD $0xffff // je           LBB36_145, $-115(%rip)

LBB36_135:
	WORD $0x294c; BYTE $0xe0       // subq         %r12, %rax
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	WORD $0x894c; BYTE $0xdb       // movq         %r11, %rbx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0091840f; WORD $0x0000 // je           LBB36_154, $145(%rip)
	LONG $0x000211e9; BYTE $0x00   // jmp          LBB36_66, $529(%rip)

LBB36_138:
	WORD $0x8948; BYTE $0xde       // movq         %rbx, %rsi
	LONG $0x00d47d83               // cmpl         $0, $-44(%rbp)
	LONG $0x003d850f; WORD $0x0000 // jne          LBB36_147, $61(%rip)
	WORD $0x894c; BYTE $0xf6       // movq         %r14, %rsi
	WORD $0x294c; BYTE $0xe6       // subq         %r12, %rsi
	WORD $0x894c; BYTE $0xdb       // movq         %r11, %rbx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x006d840f; WORD $0x0000 // je           LBB36_154, $109(%rip)
	LONG $0x0001ede9; BYTE $0x00   // jmp          LBB36_66, $493(%rip)

LBB36_149:
	WORD $0x894c; BYTE $0xdb     // movq         %r11, %rbx
	LONG $0x02538841             // movb         %dl, $2(%r11)
	LONG $0x00003ee9; BYTE $0x00 // jmp          LBB36_150, $62(%rip)

LBB36_143:
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x294c; BYTE $0xe6       // subq         %r12, %rsi
	WORD $0x894c; BYTE $0xdb       // movq         %r11, %rbx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x004a840f; WORD $0x0000 // je           LBB36_154, $74(%rip)
	LONG $0x0001cae9; BYTE $0x00   // jmp          LBB36_66, $458(%rip)

LBB36_146:
	WORD $0x8948; BYTE $0xc6 // movq         %rax, %rsi

LBB36_147:
	WORD $0x04b0                   // movb         $4, %al
	WORD $0x2840; BYTE $0xf8       // subb         %dil, %al
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	WORD $0xc001                   // addl         %eax, %eax
	WORD $0x0c8d; BYTE $0x40       // leal         (%rax,%rax,2), %ecx
	WORD $0xe2d3                   // shll         %cl, %edx
	WORD $0xff83; BYTE $0x02       // cmpl         $2, %edi
	WORD $0x894c; BYTE $0xdb       // movq         %r11, %rbx
	LONG $0x000c840f; WORD $0x0000 // je           LBB36_151, $12(%rip)
	WORD $0xff83; BYTE $0x03       // cmpl         $3, %edi
	LONG $0x0008850f; WORD $0x0000 // jne          LBB36_152, $8(%rip)

LBB36_150:
	WORD $0x7388; BYTE $0x01 // movb         %dh, $1(%rbx)

LBB36_151:
	WORD $0xeac1; BYTE $0x10 // shrl         $16, %edx
	WORD $0x1388             // movb         %dl, (%rbx)

LBB36_152:
	WORD $0x6348; BYTE $0xc7               // movslq       %edi, %rax
	WORD $0x0148; BYTE $0xc3               // addq         %rax, %rbx
	WORD $0xff48; BYTE $0xcb               // decq         %rbx
	WORD $0x8949; BYTE $0xf4               // movq         %rsi, %r12
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB36_154:
	WORD $0x394d; BYTE $0xcc       // cmpq         %r9, %r12
	LONG $0x0009870f; WORD $0x0000 // ja           LBB36_155, $9(%rip)
	WORD $0x394c; BYTE $0xeb       // cmpq         %r13, %rbx
	LONG $0xfdae860f; WORD $0xffff // jbe          LBB36_117, $-594(%rip)

LBB36_155:
	WORD $0x8949; BYTE $0xd8     // movq         %rbx, %r8
	LONG $0xb85d8b48             // movq         $-72(%rbp), %rbx
	LONG $0x000008e9; BYTE $0x00 // jmp          LBB36_75, $8(%rip)

LBB36_74:
	LONG $0x02d46583 // andl         $2, $-44(%rbp)
	LONG $0x01738d4c // leaq         $1(%rbx), %r14

LBB36_75:
	LONG $0xff4b8d4c             // leaq         $-1(%rbx), %r9
	LONG $0x000010e9; BYTE $0x00 // jmp          LBB36_76, $16(%rip)
	BYTE $0x90                   // .p2align 4, 0x90

LBB36_85:
	WORD $0x294c; BYTE $0xe6 // subq         %r12, %rsi
	WORD $0xff48; BYTE $0xc6 // incq         %rsi

LBB36_177:
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0146850f; WORD $0x0000 // jne          LBB36_66, $326(%rip)

LBB36_76:
	WORD $0x3949; BYTE $0xdc       // cmpq         %rbx, %r12
	LONG $0x014c830f; WORD $0x0000 // jae          LBB36_178, $332(%rip)
	WORD $0xff31                   // xorl         %edi, %edi
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	WORD $0xd231                   // xorl         %edx, %edx
	BYTE $0x90                     // .p2align 4, 0x90

LBB36_78:
	WORD $0xb60f; BYTE $0x06       // movzbl       (%rsi), %eax
	LONG $0x0af88348               // cmpq         $10, %rax
	LONG $0x001f840f; WORD $0x0000 // je           LBB36_82, $31(%rip)
	WORD $0x0d3c                   // cmpb         $13, %al
	LONG $0x0017840f; WORD $0x0000 // je           LBB36_82, $23(%rip)
	LONG $0x04b60f41; BYTE $0x02   // movzbl       (%r10,%rax), %eax
	LONG $0x0000ff3d; BYTE $0x00   // cmpl         $255, %eax
	LONG $0x001c840f; WORD $0x0000 // je           LBB36_84, $28(%rip)
	WORD $0xc7ff                   // incl         %edi
	WORD $0xe2c1; BYTE $0x06       // shll         $6, %edx
	WORD $0xc209                   // orl          %eax, %edx

LBB36_82:
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0xff83; BYTE $0x03       // cmpl         $3, %edi
	LONG $0x00098f0f; WORD $0x0000 // jg           LBB36_84, $9(%rip)
	WORD $0x3948; BYTE $0xde       // cmpq         %rbx, %rsi
	LONG $0xffbf820f; WORD $0xffff // jb           LBB36_78, $-65(%rip)

LBB36_84:
	WORD $0xff83; BYTE $0x01       // cmpl         $1, %edi
	LONG $0xff96840f; WORD $0xffff // je           LBB36_85, $-106(%rip)
	WORD $0xff83; BYTE $0x03       // cmpl         $3, %edi
	LONG $0x003d8f0f; WORD $0x0000 // jg           LBB36_173, $61(%rip)
	WORD $0x3948; BYTE $0xde       // cmpq         %rbx, %rsi
	LONG $0x0057840f; WORD $0x0000 // je           LBB36_159, $87(%rip)
	WORD $0xff83; BYTE $0x03       // cmpl         $3, %edi
	LONG $0x0066850f; WORD $0x0000 // jne          LBB36_164, $102(%rip)
	LONG $0x01468d48               // leaq         $1(%rsi), %rax
	WORD $0x3e80; BYTE $0x3d       // cmpb         $61, (%rsi)
	LONG $0x0079850f; WORD $0x0000 // jne          LBB36_163, $121(%rip)

LBB36_168:
	WORD $0x3948; BYTE $0xd8                   // cmpq         %rbx, %rax
	LONG $0x007b830f; WORD $0x0000             // jae          LBB36_169, $123(%rip)
	WORD $0x294c; BYTE $0xe0                   // subq         %r12, %rax
	WORD $0xff48; BYTE $0xc0                   // incq         %rax
	WORD $0x8948; BYTE $0xc6                   // movq         %rax, %rsi
	LONG $0xffff5de9; BYTE $0xff               // jmp          LBB36_177, $-163(%rip)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB36_173:
	WORD $0x894c; BYTE $0xc1 // movq         %r8, %rcx
	LONG $0x02508841         // movb         %dl, $2(%r8)

LBB36_174:
	WORD $0x7188; BYTE $0x01 // movb         %dh, $1(%rcx)

LBB36_175:
	WORD $0xeac1; BYTE $0x10 // shrl         $16, %edx
	WORD $0x1188             // movb         %dl, (%rcx)

LBB36_176:
	WORD $0x6348; BYTE $0xc7     // movslq       %edi, %rax
	LONG $0x01048d4c             // leaq         (%rcx,%rax), %r8
	WORD $0xff49; BYTE $0xc8     // decq         %r8
	WORD $0x8949; BYTE $0xf4     // movq         %rsi, %r12
	WORD $0xf631                 // xorl         %esi, %esi
	LONG $0xffff33e9; BYTE $0xff // jmp          LBB36_177, $-205(%rip)

LBB36_159:
	WORD $0x8948; BYTE $0xde       // movq         %rbx, %rsi
	LONG $0x00d47d83               // cmpl         $0, $-44(%rbp)
	LONG $0x0039850f; WORD $0x0000 // jne          LBB36_170, $57(%rip)
	WORD $0x894c; BYTE $0xf6       // movq         %r14, %rsi
	WORD $0x294c; BYTE $0xe6       // subq         %r12, %rsi
	LONG $0xffff1be9; BYTE $0xff   // jmp          LBB36_177, $-229(%rip)

LBB36_164:
	WORD $0x394c; BYTE $0xce       // cmpq         %r9, %rsi
	LONG $0xff0c830f; WORD $0xffff // jae          LBB36_85, $-244(%rip)
	WORD $0x3e80; BYTE $0x3d       // cmpb         $61, (%rsi)
	LONG $0x004d850f; WORD $0x0000 // jne          LBB36_166, $77(%rip)
	LONG $0x02468d48               // leaq         $2(%rsi), %rax
	LONG $0x3d017e80               // cmpb         $61, $1(%rsi)
	LONG $0xff87840f; WORD $0xffff // je           LBB36_168, $-121(%rip)

LBB36_163:
	WORD $0x294c; BYTE $0xe0     // subq         %r12, %rax
	WORD $0x8948; BYTE $0xc6     // movq         %rax, %rsi
	LONG $0xfffef0e9; BYTE $0xff // jmp          LBB36_177, $-272(%rip)

LBB36_169:
	WORD $0x8948; BYTE $0xc6 // movq         %rax, %rsi

LBB36_170:
	WORD $0x04b0                   // movb         $4, %al
	WORD $0x2840; BYTE $0xf8       // subb         %dil, %al
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	WORD $0xc001                   // addl         %eax, %eax
	WORD $0x0c8d; BYTE $0x40       // leal         (%rax,%rax,2), %ecx
	WORD $0xe2d3                   // shll         %cl, %edx
	WORD $0xff83; BYTE $0x02       // cmpl         $2, %edi
	LONG $0x0011840f; WORD $0x0000 // je           LBB36_171, $17(%rip)
	WORD $0xff83; BYTE $0x03       // cmpl         $3, %edi
	WORD $0x894c; BYTE $0xc1       // movq         %r8, %rcx
	LONG $0xff7a840f; WORD $0xffff // je           LBB36_174, $-134(%rip)
	LONG $0xffff7de9; BYTE $0xff   // jmp          LBB36_176, $-131(%rip)

LBB36_171:
	WORD $0x894c; BYTE $0xc1     // movq         %r8, %rcx
	LONG $0xffff70e9; BYTE $0xff // jmp          LBB36_175, $-144(%rip)

LBB36_166:
	WORD $0xff48; BYTE $0xc6     // incq         %rsi
	WORD $0x294c; BYTE $0xe6     // subq         %r12, %rsi
	LONG $0xfffeb1e9; BYTE $0xff // jmp          LBB36_177, $-335(%rip)

LBB36_66:
	WORD $0x014c; BYTE $0xe6     // addq         %r12, %rsi
	LONG $0xc8458b48             // movq         $-56(%rbp), %rax
	WORD $0x2948; BYTE $0xf0     // subq         %rsi, %rax
	LONG $0x000012e9; BYTE $0x00 // jmp          LBB36_179, $18(%rip)

LBB36_178:
	WORD $0x894c; BYTE $0xc1 // movq         %r8, %rcx
	LONG $0xb04d2b48         // subq         $-80(%rbp), %rcx
	LONG $0x90458b48         // movq         $-112(%rbp), %rax
	LONG $0x08480148         // addq         %rcx, $8(%rax)
	WORD $0x8948; BYTE $0xc8 // movq         %rcx, %rax

LBB36_179:
	LONG $0x60c48348         // addq         $96, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq
	QUAD $0x9090909090909090 // .p2align 4, 0x90

_memcpy2:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x8548; BYTE $0xd2                   // testq        %rdx, %rdx
	LONG $0x01da840f; WORD $0x0000             // je           LBB37_20, $474(%rip)
	WORD $0x3145; BYTE $0xd2                   // xorl         %r10d, %r10d
	LONG $0x10fa8348                           // cmpq         $16, %rdx
	LONG $0x0156820f; WORD $0x0000             // jb           LBB37_16, $342(%rip)
	WORD $0x8948; BYTE $0xf9                   // movq         %rdi, %rcx
	WORD $0x2948; BYTE $0xf1                   // subq         %rsi, %rcx
	LONG $0x80f98148; WORD $0x0000; BYTE $0x00 // cmpq         $128, %rcx
	LONG $0x0143820f; WORD $0x0000             // jb           LBB37_16, $323(%rip)
	LONG $0x80fa8148; WORD $0x0000; BYTE $0x00 // cmpq         $128, %rdx
	LONG $0x0008830f; WORD $0x0000             // jae          LBB37_5, $8(%rip)
	WORD $0x3145; BYTE $0xd2                   // xorl         %r10d, %r10d
	LONG $0x0000ffe9; BYTE $0x00               // jmp          LBB37_13, $255(%rip)

LBB37_5:
	WORD $0x8949; BYTE $0xd2                   // movq         %rdx, %r10
	LONG $0x80e28349                           // andq         $-128, %r10
	LONG $0x804a8d49                           // leaq         $-128(%r10), %rcx
	WORD $0x8949; BYTE $0xc8                   // movq         %rcx, %r8
	LONG $0x07e8c149                           // shrq         $7, %r8
	WORD $0xff49; BYTE $0xc0                   // incq         %r8
	WORD $0x8548; BYTE $0xc9                   // testq        %rcx, %rcx
	LONG $0x018c840f; WORD $0x0000             // je           LBB37_6, $396(%rip)
	WORD $0x894d; BYTE $0xc1                   // movq         %r8, %r9
	LONG $0xfee18349                           // andq         $-2, %r9
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB37_8:
	LONG $0x0410fcc5; BYTE $0x0e               // vmovups      (%rsi,%rcx), %ymm0
	LONG $0x4c10fcc5; WORD $0x200e             // vmovups      $32(%rsi,%rcx), %ymm1
	LONG $0x5410fcc5; WORD $0x400e             // vmovups      $64(%rsi,%rcx), %ymm2
	LONG $0x5c10fcc5; WORD $0x600e             // vmovups      $96(%rsi,%rcx), %ymm3
	LONG $0x0411fcc5; BYTE $0x0f               // vmovups      %ymm0, (%rdi,%rcx)
	LONG $0x4c11fcc5; WORD $0x200f             // vmovups      %ymm1, $32(%rdi,%rcx)
	LONG $0x5411fcc5; WORD $0x400f             // vmovups      %ymm2, $64(%rdi,%rcx)
	LONG $0x5c11fcc5; WORD $0x600f             // vmovups      %ymm3, $96(%rdi,%rcx)
	QUAD $0x0000800e8410fcc5; BYTE $0x00       // vmovups      $128(%rsi,%rcx), %ymm0
	QUAD $0x0000a00e8c10fcc5; BYTE $0x00       // vmovups      $160(%rsi,%rcx), %ymm1
	QUAD $0x0000c00e9410fcc5; BYTE $0x00       // vmovups      $192(%rsi,%rcx), %ymm2
	QUAD $0x0000e00e9c10fcc5; BYTE $0x00       // vmovups      $224(%rsi,%rcx), %ymm3
	QUAD $0x0000800f8411fcc5; BYTE $0x00       // vmovups      %ymm0, $128(%rdi,%rcx)
	QUAD $0x0000a00f8c11fcc5; BYTE $0x00       // vmovups      %ymm1, $160(%rdi,%rcx)
	QUAD $0x0000c00f9411fcc5; BYTE $0x00       // vmovups      %ymm2, $192(%rdi,%rcx)
	QUAD $0x0000e00f9c11fcc5; BYTE $0x00       // vmovups      %ymm3, $224(%rdi,%rcx)
	LONG $0x00c18148; WORD $0x0001; BYTE $0x00 // addq         $256, %rcx
	LONG $0xfec18349                           // addq         $-2, %r9
	LONG $0xff79850f; WORD $0xffff             // jne          LBB37_8, $-135(%rip)
	LONG $0x01c0f641                           // testb        $1, %r8b
	LONG $0x002e840f; WORD $0x0000             // je           LBB37_11, $46(%rip)

LBB37_10:
	LONG $0x0410fcc5; BYTE $0x0e   // vmovups      (%rsi,%rcx), %ymm0
	LONG $0x4c10fcc5; WORD $0x200e // vmovups      $32(%rsi,%rcx), %ymm1
	LONG $0x5410fcc5; WORD $0x400e // vmovups      $64(%rsi,%rcx), %ymm2
	LONG $0x5c10fcc5; WORD $0x600e // vmovups      $96(%rsi,%rcx), %ymm3
	LONG $0x0411fcc5; BYTE $0x0f   // vmovups      %ymm0, (%rdi,%rcx)
	LONG $0x4c11fcc5; WORD $0x200f // vmovups      %ymm1, $32(%rdi,%rcx)
	LONG $0x5411fcc5; WORD $0x400f // vmovups      %ymm2, $64(%rdi,%rcx)
	LONG $0x5c11fcc5; WORD $0x600f // vmovups      %ymm3, $96(%rdi,%rcx)

LBB37_11:
	WORD $0x3949; BYTE $0xd2       // cmpq         %rdx, %r10
	LONG $0x00af840f; WORD $0x0000 // je           LBB37_20, $175(%rip)
	WORD $0xc2f6; BYTE $0x70       // testb        $112, %dl
	LONG $0x002f840f; WORD $0x0000 // je           LBB37_16, $47(%rip)

LBB37_13:
	WORD $0x894c; BYTE $0xd1     // movq         %r10, %rcx
	WORD $0x8949; BYTE $0xd2     // movq         %rdx, %r10
	LONG $0xf0e28349             // andq         $-16, %r10
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB37_14:
	LONG $0x0410f8c5; BYTE $0x0e   // vmovups      (%rsi,%rcx), %xmm0
	LONG $0x0411f8c5; BYTE $0x0f   // vmovups      %xmm0, (%rdi,%rcx)
	LONG $0x10c18348               // addq         $16, %rcx
	WORD $0x3949; BYTE $0xca       // cmpq         %rcx, %r10
	LONG $0xffe9850f; WORD $0xffff // jne          LBB37_14, $-23(%rip)
	WORD $0x3949; BYTE $0xd2       // cmpq         %rdx, %r10
	LONG $0x0077840f; WORD $0x0000 // je           LBB37_20, $119(%rip)

LBB37_16:
	WORD $0x894d; BYTE $0xd0               // movq         %r10, %r8
	WORD $0xf749; BYTE $0xd0               // notq         %r8
	WORD $0x0149; BYTE $0xd0               // addq         %rdx, %r8
	WORD $0x8948; BYTE $0xd1               // movq         %rdx, %rcx
	LONG $0x03e18348                       // andq         $3, %rcx
	LONG $0x001f840f; WORD $0x0000         // je           LBB37_18, $31(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB37_17:
	LONG $0x04b60f42; BYTE $0x16   // movzbl       (%rsi,%r10), %eax
	LONG $0x17048842               // movb         %al, (%rdi,%r10)
	WORD $0xff49; BYTE $0xc2       // incq         %r10
	WORD $0xff48; BYTE $0xc9       // decq         %rcx
	LONG $0xffeb850f; WORD $0xffff // jne          LBB37_17, $-21(%rip)

LBB37_18:
	LONG $0x03f88349               // cmpq         $3, %r8
	LONG $0x0038820f; WORD $0x0000 // jb           LBB37_20, $56(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB37_19:
	LONG $0x04b60f42; BYTE $0x16   // movzbl       (%rsi,%r10), %eax
	LONG $0x17048842               // movb         %al, (%rdi,%r10)
	LONG $0x44b60f42; WORD $0x0116 // movzbl       $1(%rsi,%r10), %eax
	LONG $0x17448842; BYTE $0x01   // movb         %al, $1(%rdi,%r10)
	LONG $0x44b60f42; WORD $0x0216 // movzbl       $2(%rsi,%r10), %eax
	LONG $0x17448842; BYTE $0x02   // movb         %al, $2(%rdi,%r10)
	LONG $0x44b60f42; WORD $0x0316 // movzbl       $3(%rsi,%r10), %eax
	LONG $0x17448842; BYTE $0x03   // movb         %al, $3(%rdi,%r10)
	LONG $0x04c28349               // addq         $4, %r10
	WORD $0x394c; BYTE $0xd2       // cmpq         %r10, %rdx
	LONG $0xffc9850f; WORD $0xffff // jne          LBB37_19, $-55(%rip)

LBB37_20:
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB37_6:
	WORD $0xc931                   // xorl         %ecx, %ecx
	LONG $0x01c0f641               // testb        $1, %r8b
	LONG $0xff09850f; WORD $0xffff // jne          LBB37_10, $-247(%rip)
	LONG $0xffff32e9; BYTE $0xff   // jmp          LBB37_11, $-206(%rip)
	WORD $0x9090; BYTE $0x90       // .p2align 4, 0x90

_memeq:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x003a840f; WORD $0x0000 // je           LBB38_1, $58(%rip)
	WORD $0x078a                   // movb         (%rdi), %al
	WORD $0x063a                   // cmpb         (%rsi), %al
	LONG $0x0034850f; WORD $0x0000 // jne          LBB38_3, $52(%rip)
	LONG $0x000001b9; BYTE $0x00   // movl         $1, %ecx
	LONG $0x90909090               // .p2align 4, 0x90

LBB38_5:
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	WORD $0x3948; BYTE $0xca       // cmpq         %rcx, %rdx
	LONG $0x0013840f; WORD $0x0000 // je           LBB38_7, $19(%rip)
	LONG $0x04b60f44; BYTE $0x07   // movzbl       (%rdi,%rax), %r8d
	LONG $0x01488d48               // leaq         $1(%rax), %rcx
	LONG $0x06043a44               // cmpb         (%rsi,%rax), %r8b
	LONG $0xffe1840f; WORD $0xffff // je           LBB38_5, $-31(%rip)

LBB38_7:
	WORD $0x3948; BYTE $0xd0 // cmpq         %rdx, %rax
	WORD $0x930f; BYTE $0xc0 // setae        %al
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB38_1:
	WORD $0x01b0 // movb         $1, %al
	BYTE $0x5d   // popq         %rbp
	BYTE $0xc3   // retq

LBB38_3:
	WORD $0xc031 // xorl         %eax, %eax
	BYTE $0x5d   // popq         %rbp
	BYTE $0xc3   // retq
	BYTE $0x90   // .p2align 4, 0x90

_xprintf:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_hash_DJB32:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0021840f; WORD $0x0000 // je           LBB40_1, $33(%rip)
	LONG $0xff468d48               // leaq         $-1(%rsi), %rax
	WORD $0x8941; BYTE $0xf0       // movl         %esi, %r8d
	LONG $0x03e08341               // andl         $3, %r8d
	LONG $0x03f88348               // cmpq         $3, %rax
	LONG $0x0013830f; WORD $0x0000 // jae          LBB40_8, $19(%rip)
	LONG $0x001505b8; BYTE $0x00   // movl         $5381, %eax
	WORD $0xd231                   // xorl         %edx, %edx
	LONG $0x000056e9; BYTE $0x00   // jmp          LBB40_4, $86(%rip)

LBB40_1:
	LONG $0x001505b8; BYTE $0x00 // movl         $5381, %eax
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq

LBB40_8:
	LONG $0xfce68348             // andq         $-4, %rsi
	LONG $0x001505b8; BYTE $0x00 // movl         $5381, %eax
	WORD $0xd231                 // xorl         %edx, %edx

	// .p2align 4, 0x90
LBB40_9:
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xe1c1; BYTE $0x05       // shll         $5, %ecx
	WORD $0xc101                   // addl         %eax, %ecx
	LONG $0x1704be0f               // movsbl       (%rdi,%rdx), %eax
	WORD $0xc801                   // addl         %ecx, %eax
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xe1c1; BYTE $0x05       // shll         $5, %ecx
	WORD $0xc101                   // addl         %eax, %ecx
	LONG $0x1744be0f; BYTE $0x01   // movsbl       $1(%rdi,%rdx), %eax
	WORD $0xc801                   // addl         %ecx, %eax
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xe1c1; BYTE $0x05       // shll         $5, %ecx
	WORD $0xc101                   // addl         %eax, %ecx
	LONG $0x1744be0f; BYTE $0x02   // movsbl       $2(%rdi,%rdx), %eax
	WORD $0xc801                   // addl         %ecx, %eax
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xe1c1; BYTE $0x05       // shll         $5, %ecx
	WORD $0xc101                   // addl         %eax, %ecx
	LONG $0x1744be0f; BYTE $0x03   // movsbl       $3(%rdi,%rdx), %eax
	WORD $0xc801                   // addl         %ecx, %eax
	LONG $0x04c28348               // addq         $4, %rdx
	WORD $0x3948; BYTE $0xd6       // cmpq         %rdx, %rsi
	LONG $0xffbc850f; WORD $0xffff // jne          LBB40_9, $-68(%rip)

LBB40_4:
	WORD $0x854d; BYTE $0xc0                                 // testq        %r8, %r8
	LONG $0x002c840f; WORD $0x0000                           // je           LBB40_7, $44(%rip)
	WORD $0x0148; BYTE $0xd7                                 // addq         %rdx, %rdi
	WORD $0xd231                                             // xorl         %edx, %edx
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB40_6:
	WORD $0xc689                   // movl         %eax, %esi
	WORD $0xe6c1; BYTE $0x05       // shll         $5, %esi
	WORD $0xc601                   // addl         %eax, %esi
	LONG $0x1704be0f               // movsbl       (%rdi,%rdx), %eax
	WORD $0xf001                   // addl         %esi, %eax
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0x3949; BYTE $0xd0       // cmpq         %rdx, %r8
	LONG $0xffe7850f; WORD $0xffff // jne          LBB40_6, $-25(%rip)

LBB40_7:
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_hm_get:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5641                   // pushq        %r14
	BYTE $0x53                     // pushq        %rbx
	LONG $0x08468b4c               // movq         $8(%rsi), %r8
	WORD $0x854d; BYTE $0xc0       // testq        %r8, %r8
	LONG $0x0024840f; WORD $0x0000 // je           LBB41_19, $36(%rip)
	WORD $0x8b4c; BYTE $0x36       // movq         (%rsi), %r14
	LONG $0xff408d49               // leaq         $-1(%r8), %rax
	WORD $0x8945; BYTE $0xc1       // movl         %r8d, %r9d
	LONG $0x03e18341               // andl         $3, %r9d
	LONG $0x03f88348               // cmpq         $3, %rax
	LONG $0x003d830f; WORD $0x0000 // jae          LBB41_3, $61(%rip)
	LONG $0x001505be; BYTE $0x00   // movl         $5381, %esi
	WORD $0xd231                   // xorl         %edx, %edx
	LONG $0x000090e9; BYTE $0x00   // jmp          LBB41_5, $144(%rip)

LBB41_19:
	LONG $0x0c578b44               // movl         $12(%rdi), %r10d
	WORD $0x8b4c; BYTE $0x1f       // movq         (%rdi), %r11
	LONG $0x001505be; BYTE $0x00   // movl         $5381, %esi
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	LONG $0x001505b8; BYTE $0x00   // movl         $5381, %eax
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0xf741; BYTE $0xf2       // divl         %r10d
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x05e0c148               // shlq         $5, %rax
	LONG $0x033c8b41               // movl         (%r11,%rax), %edi
	WORD $0xff85                   // testl        %edi, %edi
	LONG $0x014f850f; WORD $0x0000 // jne          LBB41_20, $335(%rip)
	LONG $0x000196e9; BYTE $0x00   // jmp          LBB41_25, $406(%rip)

LBB41_3:
	WORD $0x894c; BYTE $0xc0             // movq         %r8, %rax
	LONG $0xfce08348                     // andq         $-4, %rax
	LONG $0x001505be; BYTE $0x00         // movl         $5381, %esi
	WORD $0xd231                         // xorl         %edx, %edx
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB41_4:
	WORD $0xf189                   // movl         %esi, %ecx
	WORD $0xe1c1; BYTE $0x05       // shll         $5, %ecx
	WORD $0xf101                   // addl         %esi, %ecx
	LONG $0x34be0f41; BYTE $0x16   // movsbl       (%r14,%rdx), %esi
	WORD $0xce01                   // addl         %ecx, %esi
	WORD $0xf189                   // movl         %esi, %ecx
	WORD $0xe1c1; BYTE $0x05       // shll         $5, %ecx
	WORD $0xf101                   // addl         %esi, %ecx
	LONG $0x74be0f41; WORD $0x0116 // movsbl       $1(%r14,%rdx), %esi
	WORD $0xce01                   // addl         %ecx, %esi
	WORD $0xf189                   // movl         %esi, %ecx
	WORD $0xe1c1; BYTE $0x05       // shll         $5, %ecx
	WORD $0xf101                   // addl         %esi, %ecx
	LONG $0x74be0f41; WORD $0x0216 // movsbl       $2(%r14,%rdx), %esi
	WORD $0xce01                   // addl         %ecx, %esi
	WORD $0xf189                   // movl         %esi, %ecx
	WORD $0xe1c1; BYTE $0x05       // shll         $5, %ecx
	WORD $0xf101                   // addl         %esi, %ecx
	LONG $0x74be0f41; WORD $0x0316 // movsbl       $3(%r14,%rdx), %esi
	WORD $0xce01                   // addl         %ecx, %esi
	LONG $0x04c28348               // addq         $4, %rdx
	WORD $0x3948; BYTE $0xd0       // cmpq         %rdx, %rax
	LONG $0xffb8850f; WORD $0xffff // jne          LBB41_4, $-72(%rip)

LBB41_5:
	WORD $0x854d; BYTE $0xc9               // testq        %r9, %r9
	LONG $0x0028840f; WORD $0x0000         // je           LBB41_8, $40(%rip)
	WORD $0x014c; BYTE $0xf2               // addq         %r14, %rdx
	WORD $0xc031                           // xorl         %eax, %eax
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB41_7:
	WORD $0xf189                   // movl         %esi, %ecx
	WORD $0xe1c1; BYTE $0x05       // shll         $5, %ecx
	WORD $0xf101                   // addl         %esi, %ecx
	LONG $0x0234be0f               // movsbl       (%rdx,%rax), %esi
	WORD $0xce01                   // addl         %ecx, %esi
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x3949; BYTE $0xc1       // cmpq         %rax, %r9
	LONG $0xffe7850f; WORD $0xffff // jne          LBB41_7, $-25(%rip)

LBB41_8:
	LONG $0x0c578b44               // movl         $12(%rdi), %r10d
	WORD $0x8b4c; BYTE $0x1f       // movq         (%rdi), %r11
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0xf089                   // movl         %esi, %eax
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0xf741; BYTE $0xf2       // divl         %r10d
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x05e0c148               // shlq         $5, %rax
	LONG $0x033c8b41               // movl         (%r11,%rax), %edi
	WORD $0xff85                   // testl        %edi, %edi
	LONG $0x00e2840f; WORD $0x0000 // je           LBB41_25, $226(%rip)
	WORD $0x854d; BYTE $0xc0       // testq        %r8, %r8
	LONG $0x008d840f; WORD $0x0000 // je           LBB41_20, $141(%rip)
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0xd089                   // movl         %edx, %eax
	LONG $0x000025e9; BYTE $0x00   // jmp          LBB41_11, $37(%rip)

	// .p2align 4, 0x90
LBB41_17:
	WORD $0x394c; BYTE $0xc7       // cmpq         %r8, %rdi
	LONG $0x00bb830f; WORD $0x0000 // jae          LBB41_24, $187(%rip)

LBB41_18:
	WORD $0xc0ff                   // incl         %eax
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0xf741; BYTE $0xf2       // divl         %r10d
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x05e0c148               // shlq         $5, %rax
	LONG $0x033c8b41               // movl         (%r11,%rax), %edi
	WORD $0xd089                   // movl         %edx, %eax
	WORD $0xff85                   // testl        %edi, %edi
	LONG $0x00aa840f; WORD $0x0000 // je           LBB41_25, $170(%rip)

LBB41_11:
	WORD $0xf739                                                         // cmpl         %esi, %edi
	LONG $0xffdc850f; WORD $0xffff                                       // jne          LBB41_18, $-36(%rip)
	LONG $0x05e2c148                                                     // shlq         $5, %rdx
	LONG $0x1344394d; BYTE $0x10                                         // cmpq         %r8, $16(%r11,%rdx)
	LONG $0xffcd850f; WORD $0xffff                                       // jne          LBB41_18, $-51(%rip)
	LONG $0x13548b49; BYTE $0x08                                         // movq         $8(%r11,%rdx), %rdx
	WORD $0x8a41; BYTE $0x0e                                             // movb         (%r14), %cl
	WORD $0x0a3a                                                         // cmpb         (%rdx), %cl
	LONG $0xffbd850f; WORD $0xffff                                       // jne          LBB41_18, $-67(%rip)
	LONG $0x000001bb; BYTE $0x00                                         // movl         $1, %ebx
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB41_15:
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	WORD $0x3949; BYTE $0xd8       // cmpq         %rbx, %r8
	LONG $0xff94840f; WORD $0xffff // je           LBB41_17, $-108(%rip)
	LONG $0x0cb60f41; BYTE $0x3e   // movzbl       (%r14,%rdi), %ecx
	LONG $0x015f8d48               // leaq         $1(%rdi), %rbx
	WORD $0x0c3a; BYTE $0x3a       // cmpb         (%rdx,%rdi), %cl
	LONG $0xffe2840f; WORD $0xffff // je           LBB41_15, $-30(%rip)
	LONG $0xffff7de9; BYTE $0xff   // jmp          LBB41_17, $-131(%rip)

LBB41_20:
	WORD $0x3145; BYTE $0xc9     // xorl         %r9d, %r9d
	WORD $0xd089                 // movl         %edx, %eax
	LONG $0x00001fe9; BYTE $0x00 // jmp          LBB41_21, $31(%rip)
	WORD $0x9090; BYTE $0x90     // .p2align 4, 0x90

LBB41_23:
	WORD $0xc0ff                   // incl         %eax
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0xf741; BYTE $0xf2       // divl         %r10d
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x05e0c148               // shlq         $5, %rax
	LONG $0x033c8b41               // movl         (%r11,%rax), %edi
	WORD $0xd089                   // movl         %edx, %eax
	WORD $0xff85                   // testl        %edi, %edi
	LONG $0x0023840f; WORD $0x0000 // je           LBB41_25, $35(%rip)

LBB41_21:
	WORD $0xf739                   // cmpl         %esi, %edi
	LONG $0xffdc850f; WORD $0xffff // jne          LBB41_23, $-36(%rip)
	LONG $0x05e2c148               // shlq         $5, %rdx
	LONG $0x137c8349; WORD $0x0010 // cmpq         $0, $16(%r11,%rdx)
	LONG $0xffcc850f; WORD $0xffff // jne          LBB41_23, $-52(%rip)

LBB41_24:
	WORD $0xc089                 // movl         %eax, %eax
	LONG $0x05e0c148             // shlq         $5, %rax
	LONG $0x034c8b4d; BYTE $0x18 // movq         $24(%r11,%rax), %r9

LBB41_25:
	WORD $0x894c; BYTE $0xc8             // movq         %r9, %rax
	BYTE $0x5b                           // popq         %rbx
	WORD $0x5e41                         // popq         %r14
	BYTE $0x5d                           // popq         %rbp
	BYTE $0xc3                           // retq
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

_hm_set:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	BYTE $0x53                     // pushq        %rbx
	WORD $0x8949; BYTE $0xd0       // movq         %rdx, %r8
	LONG $0x08568b4c               // movq         $8(%rsi), %r10
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x0025840f; WORD $0x0000 // je           LBB42_1, $37(%rip)
	WORD $0x8b48; BYTE $0x1e       // movq         (%rsi), %rbx
	LONG $0xff4a8d49               // leaq         $-1(%r10), %rcx
	WORD $0x8945; BYTE $0xd1       // movl         %r10d, %r9d
	LONG $0x03e18341               // andl         $3, %r9d
	LONG $0x03f98348               // cmpq         $3, %rcx
	LONG $0x0018830f; WORD $0x0000 // jae          LBB42_4, $24(%rip)
	LONG $0x1505bb41; WORD $0x0000 // movl         $5381, %r11d
	WORD $0xd231                   // xorl         %edx, %edx
	LONG $0x00006ee9; BYTE $0x00   // jmp          LBB42_6, $110(%rip)

LBB42_1:
	LONG $0x1505bb41; WORD $0x0000 // movl         $5381, %r11d
	LONG $0x000098e9; BYTE $0x00   // jmp          LBB42_9, $152(%rip)

LBB42_4:
	LONG $0xfce28349                                                     // andq         $-4, %r10
	LONG $0x1505bb41; WORD $0x0000                                       // movl         $5381, %r11d
	WORD $0xd231                                                         // xorl         %edx, %edx
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB42_5:
	WORD $0x8944; BYTE $0xd9       // movl         %r11d, %ecx
	WORD $0xe1c1; BYTE $0x05       // shll         $5, %ecx
	WORD $0x0144; BYTE $0xd9       // addl         %r11d, %ecx
	LONG $0x1304be0f               // movsbl       (%rbx,%rdx), %eax
	WORD $0xc801                   // addl         %ecx, %eax
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xe1c1; BYTE $0x05       // shll         $5, %ecx
	WORD $0xc101                   // addl         %eax, %ecx
	LONG $0x1344be0f; BYTE $0x01   // movsbl       $1(%rbx,%rdx), %eax
	WORD $0xc801                   // addl         %ecx, %eax
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xe1c1; BYTE $0x05       // shll         $5, %ecx
	WORD $0xc101                   // addl         %eax, %ecx
	LONG $0x1344be0f; BYTE $0x02   // movsbl       $2(%rbx,%rdx), %eax
	WORD $0xc801                   // addl         %ecx, %eax
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xe1c1; BYTE $0x05       // shll         $5, %ecx
	WORD $0xc101                   // addl         %eax, %ecx
	LONG $0x5cbe0f44; WORD $0x0313 // movsbl       $3(%rbx,%rdx), %r11d
	WORD $0x0141; BYTE $0xcb       // addl         %ecx, %r11d
	LONG $0x04c28348               // addq         $4, %rdx
	WORD $0x3949; BYTE $0xd2       // cmpq         %rdx, %r10
	LONG $0xffb8850f; WORD $0xffff // jne          LBB42_5, $-72(%rip)

LBB42_6:
	WORD $0x854d; BYTE $0xc9               // testq        %r9, %r9
	LONG $0x002c840f; WORD $0x0000         // je           LBB42_9, $44(%rip)
	WORD $0x0148; BYTE $0xd3               // addq         %rdx, %rbx
	WORD $0xd231                           // xorl         %edx, %edx
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB42_8:
	WORD $0x8944; BYTE $0xd8       // movl         %r11d, %eax
	WORD $0xe0c1; BYTE $0x05       // shll         $5, %eax
	WORD $0x0144; BYTE $0xd8       // addl         %r11d, %eax
	LONG $0x1cbe0f44; BYTE $0x13   // movsbl       (%rbx,%rdx), %r11d
	WORD $0x0141; BYTE $0xc3       // addl         %eax, %r11d
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0x3949; BYTE $0xd1       // cmpq         %rdx, %r9
	LONG $0xffe3850f; WORD $0xffff // jne          LBB42_8, $-29(%rip)

LBB42_9:
	LONG $0x0c578b44                     // movl         $12(%rdi), %r10d
	WORD $0x8b4c; BYTE $0x0f             // movq         (%rdi), %r9
	WORD $0x8944; BYTE $0xd8             // movl         %r11d, %eax
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB42_10:
	WORD $0xd231                               // xorl         %edx, %edx
	WORD $0xf741; BYTE $0xf2                   // divl         %r10d
	WORD $0x8948; BYTE $0xd1                   // movq         %rdx, %rcx
	LONG $0x05e1c148                           // shlq         $5, %rcx
	WORD $0x428d; BYTE $0x01                   // leal         $1(%rdx), %eax
	LONG $0x093c8341; BYTE $0x00               // cmpl         $0, (%r9,%rcx)
	LONG $0xffe6850f; WORD $0xffff             // jne          LBB42_10, $-26(%rip)
	WORD $0x014c; BYTE $0xc9                   // addq         %r9, %rcx
	WORD $0xd089                               // movl         %edx, %eax
	LONG $0x05e0c148                           // shlq         $5, %rax
	LONG $0x0144894d; BYTE $0x18               // movq         %r8, $24(%r9,%rax)
	WORD $0x8944; BYTE $0x19                   // movl         %r11d, (%rcx)
	LONG $0x0610f8c5                           // vmovups      (%rsi), %xmm0
	LONG $0x1178c1c4; WORD $0x0144; BYTE $0x08 // vmovups      %xmm0, $8(%r9,%rax)
	WORD $0x47ff; BYTE $0x08                   // incl         $8(%rdi)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	LONG $0x90909090                           // .p2align 4, 0x90

_ascii2int:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	LONG $0x2eff8040                       // cmpb         $46, %dil
	LONG $0x00df8040                       // sbbb         $0, %dil
	LONG $0xd2c78040                       // addb         $-46, %dil
	LONG $0xc7b60f40                       // movzbl       %dil, %eax
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_trie_get:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	BYTE $0x53                     // pushq        %rbx
	LONG $0x08768b4c               // movq         $8(%rsi), %r14
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x00fe840f; WORD $0x0000 // je           LBB44_1, $254(%rip)
	LONG $0x10478b4c               // movq         $16(%rdi), %r8
	WORD $0x854d; BYTE $0xc0       // testq        %r8, %r8
	LONG $0x00fd840f; WORD $0x0000 // je           LBB44_4, $253(%rip)
	LONG $0xff5e8d4d               // leaq         $-1(%r14), %r11
	LONG $0x307f8d4c               // leaq         $48(%rdi), %r15
	LONG $0x084f8b4c               // movq         $8(%rdi), %r9
	LONG $0x38c78348               // addq         $56, %rdi
	WORD $0x8b4c; BYTE $0x16       // movq         (%rsi), %r10
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0xd231                   // xorl         %edx, %edx
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB44_8:
	LONG $0xd10c8b49               // movq         (%r9,%rdx,8), %rcx
	WORD $0x394c; BYTE $0xd9       // cmpq         %r11, %rcx
	LONG $0xcb430f49               // cmovaeq      %r11, %rcx
	LONG $0x0cb60f41; BYTE $0x0a   // movzbl       (%r10,%rcx), %ecx
	WORD $0xf980; BYTE $0x2e       // cmpb         $46, %cl
	WORD $0xd980; BYTE $0x00       // sbbb         $0, %cl
	WORD $0xc180; BYTE $0xd2       // addb         $-46, %cl
	WORD $0xb60f; BYTE $0xd9       // movzbl       %cl, %ebx
	WORD $0x3948; BYTE $0x1f       // cmpq         %rbx, (%rdi)
	LONG $0x00ce820f; WORD $0x0000 // jb           LBB44_19, $206(%rip)
	WORD $0x8b49; BYTE $0x3f       // movq         (%r15), %rdi
	LONG $0x05e3c148               // shlq         $5, %rbx
	LONG $0x1f0c8b48               // movq         (%rdi,%rbx), %rcx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x00ba840f; WORD $0x0000 // je           LBB44_19, $186(%rip)
	WORD $0x0148; BYTE $0xdf       // addq         %rbx, %rdi
	LONG $0x087f8d4c               // leaq         $8(%rdi), %r15
	LONG $0x10c78348               // addq         $16, %rdi
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0x3949; BYTE $0xd0       // cmpq         %rdx, %r8
	LONG $0xffb0850f; WORD $0xffff // jne          LBB44_8, $-80(%rip)
	LONG $0x08418b4c               // movq         $8(%rcx), %r8
	WORD $0x854d; BYTE $0xc0       // testq        %r8, %r8
	LONG $0x0094840f; WORD $0x0000 // je           LBB44_6, $148(%rip)

LBB44_11:
	WORD $0x8b4c; BYTE $0x09       // movq         (%rcx), %r9
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0x3145; BYTE $0xff       // xorl         %r15d, %r15d
	LONG $0x00001be9; BYTE $0x00   // jmp          LBB44_12, $27(%rip)
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB44_17:
	WORD $0x394c; BYTE $0xf1       // cmpq         %r14, %rcx
	LONG $0x005f830f; WORD $0x0000 // jae          LBB44_2, $95(%rip)

LBB44_18:
	WORD $0xff49; BYTE $0xc7       // incq         %r15
	WORD $0x394d; BYTE $0xc7       // cmpq         %r8, %r15
	LONG $0x006e840f; WORD $0x0000 // je           LBB44_19, $110(%rip)

LBB44_12:
	LONG $0x7f0c8d4b               // leaq         (%r15,%r15,2), %rcx
	LONG $0xc9743b4d; BYTE $0x10   // cmpq         $16(%r9,%rcx,8), %r14
	LONG $0xffe5850f; WORD $0xffff // jne          LBB44_18, $-27(%rip)
	LONG $0xc93c8d49               // leaq         (%r9,%rcx,8), %rdi
	WORD $0x8b4c; BYTE $0x16       // movq         (%rsi), %r10
	LONG $0x085f8b4c               // movq         $8(%rdi), %r11
	WORD $0x8a41; BYTE $0x0a       // movb         (%r10), %cl
	WORD $0x3a41; BYTE $0x0b       // cmpb         (%r11), %cl
	LONG $0xffce850f; WORD $0xffff // jne          LBB44_18, $-50(%rip)
	LONG $0x000001ba; BYTE $0x00   // movl         $1, %edx

	// .p2align 4, 0x90
LBB44_15:
	WORD $0x8948; BYTE $0xd1       // movq         %rdx, %rcx
	WORD $0x3949; BYTE $0xd6       // cmpq         %rdx, %r14
	LONG $0xffb4840f; WORD $0xffff // je           LBB44_17, $-76(%rip)
	LONG $0x1cb60f41; BYTE $0x0a   // movzbl       (%r10,%rcx), %ebx
	LONG $0x01518d48               // leaq         $1(%rcx), %rdx
	LONG $0x0b1c3a41               // cmpb         (%r11,%rcx), %bl
	LONG $0xffe1840f; WORD $0xffff // je           LBB44_15, $-31(%rip)
	LONG $0xffff9ce9; BYTE $0xff   // jmp          LBB44_17, $-100(%rip)

LBB44_1:
	LONG $0x20c78348 // addq         $32, %rdi

LBB44_2:
	WORD $0x8b48; BYTE $0x07     // movq         (%rdi), %rax
	LONG $0x000013e9; BYTE $0x00 // jmp          LBB44_19, $19(%rip)

LBB44_4:
	LONG $0x284f8b48               // movq         $40(%rdi), %rcx
	LONG $0x08418b4c               // movq         $8(%rcx), %r8
	WORD $0x854d; BYTE $0xc0       // testq        %r8, %r8
	LONG $0xff6c850f; WORD $0xffff // jne          LBB44_11, $-148(%rip)

LBB44_6:
	WORD $0xc031 // xorl         %eax, %eax

LBB44_19:
	BYTE $0x5b                     // popq         %rbx
	WORD $0x5e41                   // popq         %r14
	WORD $0x5f41                   // popq         %r15
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_bm_is_set:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0xd089                               // movl         %edx, %eax
	WORD $0xe8c1; BYTE $0x03                   // shrl         $3, %eax
	WORD $0xe083; BYTE $0xf8                   // andl         $-8, %eax
	LONG $0x07048b48                           // movq         (%rdi,%rax), %rax
	LONG $0xd0a30f48                           // btq          %rdx, %rax
	WORD $0x920f; BYTE $0xc0                   // setb         %al
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_bm_set_req:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0xd089                   // movl         %edx, %eax
	LONG $0x06e8c148               // shrq         $6, %rax
	WORD $0x718d; BYTE $0xff       // leal         $-1(%rcx), %esi
	WORD $0xfe83; BYTE $0x02       // cmpl         $2, %esi
	LONG $0x000d830f; WORD $0x0000 // jae          LBB46_1, $13(%rip)
	LONG $0xc70c8b48               // movq         (%rdi,%rax,8), %rcx
	LONG $0xd1ab0f48               // btsq         %rdx, %rcx
	LONG $0x000010e9; BYTE $0x00   // jmp          LBB46_3, $16(%rip)

LBB46_1:
	WORD $0xc985                   // testl        %ecx, %ecx
	LONG $0x000c850f; WORD $0x0000 // jne          LBB46_4, $12(%rip)
	LONG $0xc70c8b48               // movq         (%rdi,%rax,8), %rcx
	LONG $0xd1b30f48               // btrq         %rdx, %rcx

LBB46_3:
	LONG $0xc70c8948 // movq         %rcx, (%rdi,%rax,8)

LBB46_4:
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_buf_malloc:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x001f840f; WORD $0x0000 // je           LBB47_4, $31(%rip)
	LONG $0x08770348               // addq         $8(%rdi), %rsi
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB47_3, $10(%rip)
	LONG $0x08e0c148               // shlq         $8, %rax
	LONG $0x11c88348               // orq          $17, %rax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB47_3:
	LONG $0x08778948 // movq         %rsi, $8(%rdi)

LBB47_4:
	WORD $0xc031 // xorl         %eax, %eax
	BYTE $0x5d   // popq         %rbp
	BYTE $0xc3   // retq

	// .p2align 4, 0x90
_tb_write_byte:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x084f8b48               // movq         $8(%rdi), %rcx
	LONG $0x01518d48               // leaq         $1(%rcx), %rdx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB48_1, $10(%rip)
	LONG $0x08e0c148               // shlq         $8, %rax
	LONG $0x11c88348               // orq          $17, %rax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB48_1:
	LONG $0x08578948                                         // movq         %rdx, $8(%rdi)
	WORD $0x8b48; BYTE $0x07                                 // movq         (%rdi), %rax
	LONG $0x08348840                                         // movb         %sil, (%rax,%rcx)
	WORD $0xc031                                             // xorl         %eax, %eax
	BYTE $0x5d                                               // popq         %rbp
	BYTE $0xc3                                               // retq
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_tb_write_bool:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x08478b4c               // movq         $8(%rdi), %r8
	LONG $0x104f8b48               // movq         $16(%rdi), %rcx
	LONG $0x01508d49               // leaq         $1(%r8), %rdx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0xf685                   // testl        %esi, %esi
	LONG $0x0019840f; WORD $0x0000 // je           LBB49_3, $25(%rip)
	WORD $0x2948; BYTE $0xc8       // subq         %rcx, %rax
	LONG $0x0019870f; WORD $0x0000 // ja           LBB49_5, $25(%rip)
	LONG $0x08578948               // movq         %rdx, $8(%rdi)
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	LONG $0x0004c642; BYTE $0x01   // movb         $1, (%rax,%r8)
	WORD $0xc031                   // xorl         %eax, %eax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB49_3:
	WORD $0x2948; BYTE $0xc8       // subq         %rcx, %rax
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB49_4, $10(%rip)

LBB49_5:
	LONG $0x08e0c148 // shlq         $8, %rax
	LONG $0x11c88348 // orq          $17, %rax
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB49_4:
	LONG $0x08578948                     // movq         %rdx, $8(%rdi)
	WORD $0x8b48; BYTE $0x07             // movq         (%rdi), %rax
	LONG $0x0004c642; BYTE $0x00         // movb         $0, (%rax,%r8)
	WORD $0xc031                         // xorl         %eax, %eax
	BYTE $0x5d                           // popq         %rbp
	BYTE $0xc3                           // retq
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

_tb_write_i16:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x084f8b48               // movq         $8(%rdi), %rcx
	LONG $0x02518d48               // leaq         $2(%rcx), %rdx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB50_1, $10(%rip)
	LONG $0x08e0c148               // shlq         $8, %rax
	LONG $0x11c88348               // orq          $17, %rax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB50_1:
	LONG $0x08c6c166                       // rolw         $8, %si
	LONG $0x08578948                       // movq         %rdx, $8(%rdi)
	WORD $0x8b48; BYTE $0x07               // movq         (%rdi), %rax
	LONG $0x08348966                       // movw         %si, (%rax,%rcx)
	WORD $0xc031                           // xorl         %eax, %eax
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_tb_write_i32:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x084f8b48               // movq         $8(%rdi), %rcx
	LONG $0x04518d48               // leaq         $4(%rcx), %rdx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB51_1, $10(%rip)
	LONG $0x08e0c148               // shlq         $8, %rax
	LONG $0x11c88348               // orq          $17, %rax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB51_1:
	LONG $0x08578948                                       // movq         %rdx, $8(%rdi)
	WORD $0xce0f                                           // bswapl       %esi
	WORD $0x8b48; BYTE $0x07                               // movq         (%rdi), %rax
	WORD $0x3489; BYTE $0x08                               // movl         %esi, (%rax,%rcx)
	WORD $0xc031                                           // xorl         %eax, %eax
	BYTE $0x5d                                             // popq         %rbp
	BYTE $0xc3                                             // retq
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_tb_write_i64:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x084f8b48               // movq         $8(%rdi), %rcx
	LONG $0x08518d48               // leaq         $8(%rcx), %rdx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB52_1, $10(%rip)
	LONG $0x08e0c148               // shlq         $8, %rax
	LONG $0x11c88348               // orq          $17, %rax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB52_1:
	WORD $0x0f48; BYTE $0xce                           // bswapq       %rsi
	LONG $0x08578948                                   // movq         %rdx, $8(%rdi)
	WORD $0x8b48; BYTE $0x07                           // movq         (%rdi), %rax
	LONG $0x08348948                                   // movq         %rsi, (%rax,%rcx)
	WORD $0xc031                                       // xorl         %eax, %eax
	BYTE $0x5d                                         // popq         %rbp
	BYTE $0xc3                                         // retq
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_tb_write_double:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x084f8b48               // movq         $8(%rdi), %rcx
	LONG $0x08518d48               // leaq         $8(%rcx), %rdx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB53_1, $10(%rip)
	LONG $0x08e0c148               // shlq         $8, %rax
	LONG $0x11c88348               // orq          $17, %rax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB53_1:
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq        %xmm0, %rax
	WORD $0x0f48; BYTE $0xc8       // bswapq       %rax
	LONG $0x08578948               // movq         %rdx, $8(%rdi)
	WORD $0x8b48; BYTE $0x17       // movq         (%rdi), %rdx
	LONG $0x0a048948               // movq         %rax, (%rdx,%rcx)
	WORD $0xc031                   // xorl         %eax, %eax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_tb_write_string:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x08478b4c               // movq         $8(%rdi), %r8
	WORD $0x8948; BYTE $0xd1       // movq         %rdx, %rcx
	LONG $0x04c18348               // addq         $4, %rcx
	LONG $0x001a840f; WORD $0x0000 // je           LBB54_3, $26(%rip)
	WORD $0x014c; BYTE $0xc1       // addq         %r8, %rcx
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x002e860f; WORD $0x0000 // jbe          LBB54_4, $46(%rip)
	LONG $0x08e0c148               // shlq         $8, %rax
	LONG $0x11c88348               // orq          $17, %rax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB54_3:
	WORD $0xd089                   // movl         %edx, %eax
	WORD $0xc80f                   // bswapl       %eax
	WORD $0x8b48; BYTE $0x0f       // movq         (%rdi), %rcx
	LONG $0x01048942               // movl         %eax, (%rcx,%r8)
	LONG $0x01148d4e               // leaq         (%rcx,%r8), %r10
	LONG $0x04c28349               // addq         $4, %r10
	WORD $0xff31                   // xorl         %edi, %edi
	LONG $0x10fa8348               // cmpq         $16, %rdx
	LONG $0x0031830f; WORD $0x0000 // jae          LBB54_6, $49(%rip)
	LONG $0x000195e9; BYTE $0x00   // jmp          LBB54_22, $405(%rip)

LBB54_4:
	LONG $0x084f8948               // movq         %rcx, $8(%rdi)
	WORD $0xd189                   // movl         %edx, %ecx
	WORD $0xc90f                   // bswapl       %ecx
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	LONG $0x000c8942               // movl         %ecx, (%rax,%r8)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x0176840f; WORD $0x0000 // je           LBB54_15, $374(%rip)
	LONG $0x00148d4e               // leaq         (%rax,%r8), %r10
	LONG $0x04c28349               // addq         $4, %r10
	WORD $0xff31                   // xorl         %edi, %edi
	LONG $0x10fa8348               // cmpq         $16, %rdx
	LONG $0x0169820f; WORD $0x0000 // jb           LBB54_22, $361(%rip)

LBB54_6:
	WORD $0x894c; BYTE $0xd0                   // movq         %r10, %rax
	WORD $0x2948; BYTE $0xf0                   // subq         %rsi, %rax
	LONG $0x00803d48; WORD $0x0000             // cmpq         $128, %rax
	LONG $0x0157820f; WORD $0x0000             // jb           LBB54_22, $343(%rip)
	LONG $0x80fa8148; WORD $0x0000; BYTE $0x00 // cmpq         $128, %rdx
	LONG $0x0007830f; WORD $0x0000             // jae          LBB54_9, $7(%rip)
	WORD $0xff31                               // xorl         %edi, %edi
	LONG $0x000107e9; BYTE $0x00               // jmp          LBB54_18, $263(%rip)

LBB54_9:
	WORD $0x8948; BYTE $0xd7       // movq         %rdx, %rdi
	LONG $0x80e78348               // andq         $-128, %rdi
	LONG $0x80478d48               // leaq         $-128(%rdi), %rax
	WORD $0x8949; BYTE $0xc0       // movq         %rax, %r8
	LONG $0x07e8c149               // shrq         $7, %r8
	WORD $0xff49; BYTE $0xc0       // incq         %r8
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0195840f; WORD $0x0000 // je           LBB54_27, $405(%rip)
	WORD $0x894d; BYTE $0xc1       // movq         %r8, %r9
	LONG $0xfee18349               // andq         $-2, %r9
	WORD $0xc031                   // xorl         %eax, %eax
	LONG $0x90909090               // .p2align 4, 0x90

LBB54_11:
	LONG $0x0410fcc5; BYTE $0x06               // vmovups      (%rsi,%rax), %ymm0
	LONG $0x4c10fcc5; WORD $0x2006             // vmovups      $32(%rsi,%rax), %ymm1
	LONG $0x5410fcc5; WORD $0x4006             // vmovups      $64(%rsi,%rax), %ymm2
	LONG $0x5c10fcc5; WORD $0x6006             // vmovups      $96(%rsi,%rax), %ymm3
	LONG $0x117cc1c4; WORD $0x0204             // vmovups      %ymm0, (%r10,%rax)
	LONG $0x117cc1c4; WORD $0x024c; BYTE $0x20 // vmovups      %ymm1, $32(%r10,%rax)
	LONG $0x117cc1c4; WORD $0x0254; BYTE $0x40 // vmovups      %ymm2, $64(%r10,%rax)
	LONG $0x117cc1c4; WORD $0x025c; BYTE $0x60 // vmovups      %ymm3, $96(%r10,%rax)
	QUAD $0x000080068410fcc5; BYTE $0x00       // vmovups      $128(%rsi,%rax), %ymm0
	QUAD $0x0000a0068c10fcc5; BYTE $0x00       // vmovups      $160(%rsi,%rax), %ymm1
	QUAD $0x0000c0069410fcc5; BYTE $0x00       // vmovups      $192(%rsi,%rax), %ymm2
	QUAD $0x0000e0069c10fcc5; BYTE $0x00       // vmovups      $224(%rsi,%rax), %ymm3
	QUAD $0x00800284117cc1c4; WORD $0x0000     // vmovups      %ymm0, $128(%r10,%rax)
	QUAD $0x00a0028c117cc1c4; WORD $0x0000     // vmovups      %ymm1, $160(%r10,%rax)
	QUAD $0x00c00294117cc1c4; WORD $0x0000     // vmovups      %ymm2, $192(%r10,%rax)
	QUAD $0x00e0029c117cc1c4; WORD $0x0000     // vmovups      %ymm3, $224(%r10,%rax)
	LONG $0x01000548; WORD $0x0000             // addq         $256, %rax
	LONG $0xfec18349                           // addq         $-2, %r9
	LONG $0xff72850f; WORD $0xffff             // jne          LBB54_11, $-142(%rip)
	LONG $0x01c0f641                           // testb        $1, %r8b
	LONG $0x0032840f; WORD $0x0000             // je           LBB54_14, $50(%rip)

LBB54_13:
	LONG $0x0410fcc5; BYTE $0x06               // vmovups      (%rsi,%rax), %ymm0
	LONG $0x4c10fcc5; WORD $0x2006             // vmovups      $32(%rsi,%rax), %ymm1
	LONG $0x5410fcc5; WORD $0x4006             // vmovups      $64(%rsi,%rax), %ymm2
	LONG $0x5c10fcc5; WORD $0x6006             // vmovups      $96(%rsi,%rax), %ymm3
	LONG $0x117cc1c4; WORD $0x0204             // vmovups      %ymm0, (%r10,%rax)
	LONG $0x117cc1c4; WORD $0x024c; BYTE $0x20 // vmovups      %ymm1, $32(%r10,%rax)
	LONG $0x117cc1c4; WORD $0x0254; BYTE $0x40 // vmovups      %ymm2, $64(%r10,%rax)
	LONG $0x117cc1c4; WORD $0x025c; BYTE $0x60 // vmovups      %ymm3, $96(%r10,%rax)

LBB54_14:
	WORD $0x3948; BYTE $0xd7       // cmpq         %rdx, %rdi
	LONG $0x003e840f; WORD $0x0000 // je           LBB54_15, $62(%rip)
	WORD $0xc2f6; BYTE $0x70       // testb        $112, %dl
	LONG $0x003c840f; WORD $0x0000 // je           LBB54_22, $60(%rip)

LBB54_18:
	WORD $0x8948; BYTE $0xf8               // movq         %rdi, %rax
	WORD $0x8948; BYTE $0xd7               // movq         %rdx, %rdi
	LONG $0xf0e78348                       // andq         $-16, %rdi
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB54_19:
	LONG $0x0410f8c5; BYTE $0x06   // vmovups      (%rsi,%rax), %xmm0
	LONG $0x1178c1c4; WORD $0x0204 // vmovups      %xmm0, (%r10,%rax)
	LONG $0x10c08348               // addq         $16, %rax
	WORD $0x3948; BYTE $0xc7       // cmpq         %rax, %rdi
	LONG $0xffe8850f; WORD $0xffff // jne          LBB54_19, $-24(%rip)
	WORD $0x3948; BYTE $0xd7       // cmpq         %rdx, %rdi
	LONG $0x0007850f; WORD $0x0000 // jne          LBB54_22, $7(%rip)

LBB54_15:
	WORD $0xc031             // xorl         %eax, %eax
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB54_22:
	WORD $0x8949; BYTE $0xf8       // movq         %rdi, %r8
	WORD $0xf749; BYTE $0xd0       // notq         %r8
	WORD $0x0149; BYTE $0xd0       // addq         %rdx, %r8
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x03e08348               // andq         $3, %rax
	LONG $0x0016840f; WORD $0x0000 // je           LBB54_24, $22(%rip)
	WORD $0x9090                   // .p2align 4, 0x90

LBB54_23:
	LONG $0x3e0cb60f               // movzbl       (%rsi,%rdi), %ecx
	LONG $0x3a0c8841               // movb         %cl, (%r10,%rdi)
	WORD $0xff48; BYTE $0xc7       // incq         %rdi
	WORD $0xff48; BYTE $0xc8       // decq         %rax
	LONG $0xffec850f; WORD $0xffff // jne          LBB54_23, $-20(%rip)

LBB54_24:
	WORD $0xc031                   // xorl         %eax, %eax
	LONG $0x03f88349               // cmpq         $3, %r8
	LONG $0x0033820f; WORD $0x0000 // jb           LBB54_26, $51(%rip)

	// .p2align 4, 0x90
LBB54_25:
	LONG $0x3e0cb60f               // movzbl       (%rsi,%rdi), %ecx
	LONG $0x3a0c8841               // movb         %cl, (%r10,%rdi)
	LONG $0x3e4cb60f; BYTE $0x01   // movzbl       $1(%rsi,%rdi), %ecx
	LONG $0x3a4c8841; BYTE $0x01   // movb         %cl, $1(%r10,%rdi)
	LONG $0x3e4cb60f; BYTE $0x02   // movzbl       $2(%rsi,%rdi), %ecx
	LONG $0x3a4c8841; BYTE $0x02   // movb         %cl, $2(%r10,%rdi)
	LONG $0x3e4cb60f; BYTE $0x03   // movzbl       $3(%rsi,%rdi), %ecx
	LONG $0x3a4c8841; BYTE $0x03   // movb         %cl, $3(%r10,%rdi)
	LONG $0x04c78348               // addq         $4, %rdi
	WORD $0x3948; BYTE $0xfa       // cmpq         %rdi, %rdx
	LONG $0xffcd850f; WORD $0xffff // jne          LBB54_25, $-51(%rip)

LBB54_26:
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB54_27:
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x01c0f641                           // testb        $1, %r8b
	LONG $0xff04850f; WORD $0xffff             // jne          LBB54_13, $-252(%rip)
	LONG $0xffff31e9; BYTE $0xff               // jmp          LBB54_14, $-207(%rip)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_tb_write_binary:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	BYTE $0x53                     // pushq        %rbx
	LONG $0x08578b4c               // movq         $8(%rdi), %r10
	LONG $0x185d8b4c               // movq         $24(%rbp), %r11
	WORD $0x894c; BYTE $0xd9       // movq         %r11, %rcx
	LONG $0x04c18348               // addq         $4, %rcx
	LONG $0x0021840f; WORD $0x0000 // je           LBB55_5, $33(%rip)
	WORD $0x014c; BYTE $0xd1       // addq         %r10, %rcx
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x000d860f; WORD $0x0000 // jbe          LBB55_4, $13(%rip)
	LONG $0x08e0c148               // shlq         $8, %rax
	LONG $0x11c88348               // orq          $17, %rax
	LONG $0x0000c8e9; BYTE $0x00   // jmp          LBB55_3, $200(%rip)

LBB55_4:
	LONG $0x084f8948 // movq         %rcx, $8(%rdi)

LBB55_5:
	WORD $0x8944; BYTE $0xd8                   // movl         %r11d, %eax
	WORD $0xc80f                               // bswapl       %eax
	WORD $0x8b4c; BYTE $0x07                   // movq         (%rdi), %r8
	LONG $0x10048943                           // movl         %eax, (%r8,%r10)
	WORD $0x854d; BYTE $0xdb                   // testq        %r11, %r11
	LONG $0x006d840f; WORD $0x0000             // je           LBB55_13, $109(%rip)
	LONG $0x104d8d48                           // leaq         $16(%rbp), %rcx
	LONG $0x10048d4b                           // leaq         (%r8,%r10), %rax
	LONG $0x04c08348                           // addq         $4, %rax
	WORD $0x8b48; BYTE $0x31                   // movq         (%rcx), %rsi
	LONG $0x10fb8349                           // cmpq         $16, %r11
	LONG $0x0018820f; WORD $0x0000             // jb           LBB55_8, $24(%rip)
	LONG $0x020c8d4b                           // leaq         (%r10,%r8), %rcx
	WORD $0x2948; BYTE $0xf1                   // subq         %rsi, %rcx
	LONG $0x04c18348                           // addq         $4, %rcx
	LONG $0x80f98148; WORD $0x0000; BYTE $0x00 // cmpq         $128, %rcx
	LONG $0x0084830f; WORD $0x0000             // jae          LBB55_16, $132(%rip)

LBB55_8:
	WORD $0xff31 // xorl         %edi, %edi

LBB55_9:
	WORD $0x8948; BYTE $0xf9                   // movq         %rdi, %rcx
	WORD $0xf748; BYTE $0xd1                   // notq         %rcx
	WORD $0x014c; BYTE $0xd9                   // addq         %r11, %rcx
	WORD $0x894c; BYTE $0xda                   // movq         %r11, %rdx
	LONG $0x03e28348                           // andq         $3, %rdx
	LONG $0x001a840f; WORD $0x0000             // je           LBB55_11, $26(%rip)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB55_10:
	LONG $0x3e1cb60f               // movzbl       (%rsi,%rdi), %ebx
	WORD $0x1c88; BYTE $0x38       // movb         %bl, (%rax,%rdi)
	WORD $0xff48; BYTE $0xc7       // incq         %rdi
	WORD $0xff48; BYTE $0xca       // decq         %rdx
	LONG $0xffed850f; WORD $0xffff // jne          LBB55_10, $-19(%rip)

LBB55_11:
	LONG $0x03f98348               // cmpq         $3, %rcx
	LONG $0x0008830f; WORD $0x0000 // jae          LBB55_14, $8(%rip)

LBB55_13:
	WORD $0xc031             // xorl         %eax, %eax
	BYTE $0x5b               // popq         %rbx
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB55_14:
	LONG $0x020c8d4b // leaq         (%r10,%r8), %rcx
	LONG $0x07c18348 // addq         $7, %rcx
	WORD $0xc031     // xorl         %eax, %eax
	BYTE $0x90       // .p2align 4, 0x90

LBB55_15:
	LONG $0x3e14b60f               // movzbl       (%rsi,%rdi), %edx
	LONG $0xfd395488               // movb         %dl, $-3(%rcx,%rdi)
	LONG $0x3e54b60f; BYTE $0x01   // movzbl       $1(%rsi,%rdi), %edx
	LONG $0xfe395488               // movb         %dl, $-2(%rcx,%rdi)
	LONG $0x3e54b60f; BYTE $0x02   // movzbl       $2(%rsi,%rdi), %edx
	LONG $0xff395488               // movb         %dl, $-1(%rcx,%rdi)
	LONG $0x3e54b60f; BYTE $0x03   // movzbl       $3(%rsi,%rdi), %edx
	WORD $0x1488; BYTE $0x39       // movb         %dl, (%rcx,%rdi)
	LONG $0x04c78348               // addq         $4, %rdi
	WORD $0x3949; BYTE $0xfb       // cmpq         %rdi, %r11
	LONG $0xffd1850f; WORD $0xffff // jne          LBB55_15, $-47(%rip)

LBB55_3:
	BYTE $0x5b               // popq         %rbx
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB55_16:
	LONG $0x80fb8149; WORD $0x0000; BYTE $0x00 // cmpq         $128, %r11
	LONG $0x0007830f; WORD $0x0000             // jae          LBB55_18, $7(%rip)
	WORD $0xff31                               // xorl         %edi, %edi
	LONG $0x000106e9; BYTE $0x00               // jmp          LBB55_26, $262(%rip)

LBB55_18:
	WORD $0x894c; BYTE $0xdf                   // movq         %r11, %rdi
	LONG $0x80e78348                           // andq         $-128, %rdi
	LONG $0x804f8d48                           // leaq         $-128(%rdi), %rcx
	WORD $0x8949; BYTE $0xc9                   // movq         %rcx, %r9
	LONG $0x07e9c149                           // shrq         $7, %r9
	WORD $0xff49; BYTE $0xc1                   // incq         %r9
	WORD $0x8548; BYTE $0xc9                   // testq        %rcx, %rcx
	LONG $0x011e840f; WORD $0x0000             // je           LBB55_30, $286(%rip)
	WORD $0x894c; BYTE $0xc9                   // movq         %r9, %rcx
	LONG $0xfee18348                           // andq         $-2, %rcx
	LONG $0x021c8d4b                           // leaq         (%r10,%r8), %rbx
	LONG $0xe4c38148; WORD $0x0000; BYTE $0x00 // addq         $228, %rbx
	WORD $0xd231                               // xorl         %edx, %edx
	LONG $0x90909090; BYTE $0x90               // .p2align 4, 0x90

LBB55_20:
	LONG $0x0410fcc5; BYTE $0x16               // vmovups      (%rsi,%rdx), %ymm0
	LONG $0x4c10fcc5; WORD $0x2016             // vmovups      $32(%rsi,%rdx), %ymm1
	LONG $0x5410fcc5; WORD $0x4016             // vmovups      $64(%rsi,%rdx), %ymm2
	LONG $0x5c10fcc5; WORD $0x6016             // vmovups      $96(%rsi,%rdx), %ymm3
	QUAD $0xffff20138411fcc5; BYTE $0xff       // vmovups      %ymm0, $-224(%rbx,%rdx)
	QUAD $0xffff40138c11fcc5; BYTE $0xff       // vmovups      %ymm1, $-192(%rbx,%rdx)
	QUAD $0xffff60139411fcc5; BYTE $0xff       // vmovups      %ymm2, $-160(%rbx,%rdx)
	LONG $0x5c11fcc5; WORD $0x8013             // vmovups      %ymm3, $-128(%rbx,%rdx)
	QUAD $0x000080168410fcc5; BYTE $0x00       // vmovups      $128(%rsi,%rdx), %ymm0
	QUAD $0x0000a0168c10fcc5; BYTE $0x00       // vmovups      $160(%rsi,%rdx), %ymm1
	QUAD $0x0000c0169410fcc5; BYTE $0x00       // vmovups      $192(%rsi,%rdx), %ymm2
	QUAD $0x0000e0169c10fcc5; BYTE $0x00       // vmovups      $224(%rsi,%rdx), %ymm3
	LONG $0x4411fcc5; WORD $0xa013             // vmovups      %ymm0, $-96(%rbx,%rdx)
	LONG $0x4c11fcc5; WORD $0xc013             // vmovups      %ymm1, $-64(%rbx,%rdx)
	LONG $0x5411fcc5; WORD $0xe013             // vmovups      %ymm2, $-32(%rbx,%rdx)
	LONG $0x1c11fcc5; BYTE $0x13               // vmovups      %ymm3, (%rbx,%rdx)
	LONG $0x00c28148; WORD $0x0001; BYTE $0x00 // addq         $256, %rdx
	LONG $0xfec18348                           // addq         $-2, %rcx
	LONG $0xff7c850f; WORD $0xffff             // jne          LBB55_20, $-132(%rip)
	LONG $0x01c1f641                           // testb        $1, %r9b
	LONG $0x002e840f; WORD $0x0000             // je           LBB55_23, $46(%rip)

LBB55_22:
	LONG $0x0410fcc5; BYTE $0x16   // vmovups      (%rsi,%rdx), %ymm0
	LONG $0x4c10fcc5; WORD $0x2016 // vmovups      $32(%rsi,%rdx), %ymm1
	LONG $0x5410fcc5; WORD $0x4016 // vmovups      $64(%rsi,%rdx), %ymm2
	LONG $0x5c10fcc5; WORD $0x6016 // vmovups      $96(%rsi,%rdx), %ymm3
	LONG $0x0411fcc5; BYTE $0x10   // vmovups      %ymm0, (%rax,%rdx)
	LONG $0x4c11fcc5; WORD $0x2010 // vmovups      %ymm1, $32(%rax,%rdx)
	LONG $0x5411fcc5; WORD $0x4010 // vmovups      %ymm2, $64(%rax,%rdx)
	LONG $0x5c11fcc5; WORD $0x6010 // vmovups      %ymm3, $96(%rax,%rdx)

LBB55_23:
	WORD $0x3949; BYTE $0xfb       // cmpq         %rdi, %r11
	LONG $0xfea8840f; WORD $0xffff // je           LBB55_13, $-344(%rip)
	LONG $0x70c3f641               // testb        $112, %r11b
	LONG $0xfe64840f; WORD $0xffff // je           LBB55_9, $-412(%rip)

LBB55_26:
	WORD $0x8948; BYTE $0xf9                   // movq         %rdi, %rcx
	WORD $0x894c; BYTE $0xdf                   // movq         %r11, %rdi
	LONG $0xf0e78348                           // andq         $-16, %rdi
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB55_27:
	LONG $0x0410f8c5; BYTE $0x0e   // vmovups      (%rsi,%rcx), %xmm0
	LONG $0x0411f8c5; BYTE $0x08   // vmovups      %xmm0, (%rax,%rcx)
	LONG $0x10c18348               // addq         $16, %rcx
	WORD $0x3948; BYTE $0xcf       // cmpq         %rcx, %rdi
	LONG $0xffe9850f; WORD $0xffff // jne          LBB55_27, $-23(%rip)
	WORD $0x3949; BYTE $0xfb       // cmpq         %rdi, %r11
	LONG $0xfe33850f; WORD $0xffff // jne          LBB55_9, $-461(%rip)
	LONG $0xfffe68e9; BYTE $0xff   // jmp          LBB55_13, $-408(%rip)

LBB55_30:
	WORD $0xd231                           // xorl         %edx, %edx
	LONG $0x01c1f641                       // testb        $1, %r9b
	LONG $0xff7d850f; WORD $0xffff         // jne          LBB55_22, $-131(%rip)
	LONG $0xffffa6e9; BYTE $0xff           // jmp          LBB55_23, $-90(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_tb_write_struct_begin:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_tb_write_struct_end:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x084f8b48               // movq         $8(%rdi), %rcx
	LONG $0x01518d48               // leaq         $1(%rcx), %rdx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB57_1, $10(%rip)
	LONG $0x08e0c148               // shlq         $8, %rax
	LONG $0x11c88348               // orq          $17, %rax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB57_1:
	LONG $0x08578948                                         // movq         %rdx, $8(%rdi)
	WORD $0x8b48; BYTE $0x07                                 // movq         (%rdi), %rax
	LONG $0x000804c6                                         // movb         $0, (%rax,%rcx)
	WORD $0xc031                                             // xorl         %eax, %eax
	BYTE $0x5d                                               // popq         %rbp
	BYTE $0xc3                                               // retq
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_tb_write_field_begin:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x08478b4c               // movq         $8(%rdi), %r8
	LONG $0x01488d49               // leaq         $1(%r8), %rcx
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x0020870f; WORD $0x0000 // ja           LBB58_3, $32(%rip)
	LONG $0x084f8948               // movq         %rcx, $8(%rdi)
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	LONG $0x00348842               // movb         %sil, (%rax,%r8)
	LONG $0x084f8b48               // movq         $8(%rdi), %rcx
	LONG $0x02718d48               // leaq         $2(%rcx), %rsi
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB58_2, $10(%rip)

LBB58_3:
	LONG $0x08e0c148 // shlq         $8, %rax
	LONG $0x11c88348 // orq          $17, %rax
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB58_2:
	LONG $0x08c2c166                       // rolw         $8, %dx
	LONG $0x08778948                       // movq         %rsi, $8(%rdi)
	WORD $0x8b48; BYTE $0x07               // movq         (%rdi), %rax
	LONG $0x08148966                       // movw         %dx, (%rax,%rcx)
	WORD $0xc031                           // xorl         %eax, %eax
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_tb_write_map_n:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x08478b4c               // movq         $8(%rdi), %r8
	LONG $0x01488d4d               // leaq         $1(%r8), %r9
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x0040870f; WORD $0x0000 // ja           LBB59_4, $64(%rip)
	LONG $0x084f894c               // movq         %r9, $8(%rdi)
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	LONG $0x00348842               // movb         %sil, (%rax,%r8)
	LONG $0x08478b4c               // movq         $8(%rdi), %r8
	LONG $0x01708d49               // leaq         $1(%r8), %rsi
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x0020870f; WORD $0x0000 // ja           LBB59_4, $32(%rip)
	LONG $0x08778948               // movq         %rsi, $8(%rdi)
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	LONG $0x00148842               // movb         %dl, (%rax,%r8)
	LONG $0x08578b48               // movq         $8(%rdi), %rdx
	LONG $0x04728d48               // leaq         $4(%rdx), %rsi
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB59_3, $10(%rip)

LBB59_4:
	LONG $0x08e0c148 // shlq         $8, %rax
	LONG $0x11c88348 // orq          $17, %rax
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB59_3:
	LONG $0x08778948                                       // movq         %rsi, $8(%rdi)
	WORD $0xc90f                                           // bswapl       %ecx
	WORD $0x8b48; BYTE $0x07                               // movq         (%rdi), %rax
	WORD $0x0c89; BYTE $0x10                               // movl         %ecx, (%rax,%rdx)
	WORD $0xc031                                           // xorl         %eax, %eax
	BYTE $0x5d                                             // popq         %rbp
	BYTE $0xc3                                             // retq
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_tb_write_map_begin:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x08478b4c               // movq         $8(%rdi), %r8
	LONG $0x01488d4d               // leaq         $1(%r8), %r9
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x0047870f; WORD $0x0000 // ja           LBB60_3, $71(%rip)
	LONG $0x084f894c               // movq         %r9, $8(%rdi)
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	LONG $0x00348842               // movb         %sil, (%rax,%r8)
	LONG $0x08478b4c               // movq         $8(%rdi), %r8
	LONG $0x01708d49               // leaq         $1(%r8), %rsi
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x0027870f; WORD $0x0000 // ja           LBB60_3, $39(%rip)
	LONG $0x08778948               // movq         %rsi, $8(%rdi)
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	LONG $0x00148842               // movb         %dl, (%rax,%r8)
	LONG $0x08478b48               // movq         $8(%rdi), %rax
	WORD $0x8948; BYTE $0x01       // movq         %rax, (%rcx)
	LONG $0x084f8b48               // movq         $8(%rdi), %rcx
	LONG $0x04c18348               // addq         $4, %rcx
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB60_4, $10(%rip)

LBB60_3:
	LONG $0x08e0c148 // shlq         $8, %rax
	LONG $0x11c88348 // orq          $17, %rax
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB60_4:
	LONG $0x084f8948                                         // movq         %rcx, $8(%rdi)
	WORD $0xc031                                             // xorl         %eax, %eax
	BYTE $0x5d                                               // popq         %rbp
	BYTE $0xc3                                               // retq
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_tb_write_map_end:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD $0xca0f             // bswapl       %edx
	WORD $0x8b48; BYTE $0x07 // movq         (%rdi), %rax
	WORD $0x1489; BYTE $0x30 // movl         %edx, (%rax,%rsi)
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x9090             // .p2align 4, 0x90

_tb_write_list_begin:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x08478b4c               // movq         $8(%rdi), %r8
	LONG $0x01488d49               // leaq         $1(%r8), %rcx
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x0027870f; WORD $0x0000 // ja           LBB62_2, $39(%rip)
	LONG $0x084f8948               // movq         %rcx, $8(%rdi)
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	LONG $0x00348842               // movb         %sil, (%rax,%r8)
	LONG $0x08478b48               // movq         $8(%rdi), %rax
	WORD $0x8948; BYTE $0x02       // movq         %rax, (%rdx)
	LONG $0x084f8b48               // movq         $8(%rdi), %rcx
	LONG $0x04c18348               // addq         $4, %rcx
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB62_3, $10(%rip)

LBB62_2:
	LONG $0x08e0c148 // shlq         $8, %rax
	LONG $0x11c88348 // orq          $17, %rax
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB62_3:
	LONG $0x084f8948                                         // movq         %rcx, $8(%rdi)
	WORD $0xc031                                             // xorl         %eax, %eax
	BYTE $0x5d                                               // popq         %rbp
	BYTE $0xc3                                               // retq
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_tb_write_list_end:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD $0xca0f             // bswapl       %edx
	WORD $0x8b48; BYTE $0x07 // movq         (%rdi), %rax
	WORD $0x1489; BYTE $0x30 // movl         %edx, (%rax,%rsi)
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x9090             // .p2align 4, 0x90

_tb_write_list_n:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x08478b4c               // movq         $8(%rdi), %r8
	LONG $0x01488d49               // leaq         $1(%r8), %rcx
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x0020870f; WORD $0x0000 // ja           LBB64_3, $32(%rip)
	LONG $0x084f8948               // movq         %rcx, $8(%rdi)
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	LONG $0x00348842               // movb         %sil, (%rax,%r8)
	LONG $0x084f8b48               // movq         $8(%rdi), %rcx
	LONG $0x04718d48               // leaq         $4(%rcx), %rsi
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB64_2, $10(%rip)

LBB64_3:
	LONG $0x08e0c148 // shlq         $8, %rax
	LONG $0x11c88348 // orq          $17, %rax
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB64_2:
	LONG $0x08778948                                       // movq         %rsi, $8(%rdi)
	WORD $0xca0f                                           // bswapl       %edx
	WORD $0x8b48; BYTE $0x07                               // movq         (%rdi), %rax
	WORD $0x1489; BYTE $0x08                               // movl         %edx, (%rax,%rcx)
	WORD $0xc031                                           // xorl         %eax, %eax
	BYTE $0x5d                                             // popq         %rbp
	BYTE $0xc3                                             // retq
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_tb_write_default_or_empty:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	WORD $0x5541                   // pushq        %r13
	WORD $0x5441                   // pushq        %r12
	BYTE $0x53                     // pushq        %rbx
	BYTE $0x50                     // pushq        %rax
	WORD $0x8949; BYTE $0xfe       // movq         %rdi, %r14
	LONG $0x10468b48               // movq         $16(%rsi), %rax
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x00d6840f; WORD $0x0000 // je           LBB65_10, $214(%rip)
	LONG $0x28588b4c               // movq         $40(%rax), %r11
	WORD $0x854d; BYTE $0xdb       // testq        %r11, %r11
	LONG $0x0415840f; WORD $0x0000 // je           LBB65_14, $1045(%rip)
	LONG $0x08568b4d               // movq         $8(%r14), %r10
	LONG $0x1a0c8d4b               // leaq         (%r10,%r11), %rcx
	WORD $0x8949; BYTE $0xcd       // movq         %rcx, %r13
	LONG $0x106e2b4d               // subq         $16(%r14), %r13
	LONG $0x02b8870f; WORD $0x0000 // ja           LBB65_38, $696(%rip)
	LONG $0x084e8949               // movq         %rcx, $8(%r14)
	WORD $0x8b4d; BYTE $0x0e       // movq         (%r14), %r9
	LONG $0x111c8d4b               // leaq         (%r9,%r10), %rbx
	LONG $0x20488b48               // movq         $32(%rax), %rcx
	LONG $0x10fb8349               // cmpq         $16, %r11
	LONG $0x0012820f; WORD $0x0000 // jb           LBB65_5, $18(%rip)
	WORD $0x8948; BYTE $0xd8       // movq         %rbx, %rax
	WORD $0x2948; BYTE $0xc8       // subq         %rcx, %rax
	LONG $0x00803d48; WORD $0x0000 // cmpq         $128, %rax
	LONG $0x0153830f; WORD $0x0000 // jae          LBB65_23, $339(%rip)

LBB65_5:
	WORD $0xf631 // xorl         %esi, %esi

LBB65_6:
	WORD $0x8948; BYTE $0xf7                               // movq         %rsi, %rdi
	WORD $0xf748; BYTE $0xd7                               // notq         %rdi
	WORD $0x014c; BYTE $0xdf                               // addq         %r11, %rdi
	WORD $0x894c; BYTE $0xda                               // movq         %r11, %rdx
	LONG $0x03e28348                                       // andq         $3, %rdx
	LONG $0x0020840f; WORD $0x0000                         // je           LBB65_8, $32(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB65_7:
	LONG $0x3104b60f               // movzbl       (%rcx,%rsi), %eax
	WORD $0x0488; BYTE $0x33       // movb         %al, (%rbx,%rsi)
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0xff48; BYTE $0xca       // decq         %rdx
	LONG $0xffed850f; WORD $0xffff // jne          LBB65_7, $-19(%rip)

LBB65_8:
	LONG $0x03ff8348               // cmpq         $3, %rdi
	LONG $0x0393820f; WORD $0x0000 // jb           LBB65_14, $915(%rip)
	LONG $0x0a048d4b               // leaq         (%r10,%r9), %rax
	LONG $0x03c08348               // addq         $3, %rax
	WORD $0x3145; BYTE $0xed       // xorl         %r13d, %r13d
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB65_16:
	LONG $0x3114b60f               // movzbl       (%rcx,%rsi), %edx
	LONG $0xfd305488               // movb         %dl, $-3(%rax,%rsi)
	LONG $0x3154b60f; BYTE $0x01   // movzbl       $1(%rcx,%rsi), %edx
	LONG $0xfe305488               // movb         %dl, $-2(%rax,%rsi)
	LONG $0x3154b60f; BYTE $0x02   // movzbl       $2(%rcx,%rsi), %edx
	LONG $0xff305488               // movb         %dl, $-1(%rax,%rsi)
	LONG $0x3154b60f; BYTE $0x03   // movzbl       $3(%rcx,%rsi), %edx
	WORD $0x1488; BYTE $0x30       // movb         %dl, (%rax,%rsi)
	LONG $0x04c68348               // addq         $4, %rsi
	WORD $0x3949; BYTE $0xf3       // cmpq         %rsi, %r11
	LONG $0xffd1850f; WORD $0xffff // jne          LBB65_16, $-47(%rip)
	LONG $0x00034fe9; BYTE $0x00   // jmp          LBB65_39, $847(%rip)

LBB65_10:
	WORD $0x8949; BYTE $0xd5                   // movq         %rdx, %r13
	LONG $0x08468b48                           // movq         $8(%rsi), %rax
	WORD $0xb60f; BYTE $0x08                   // movzbl       (%rax), %ecx
	WORD $0x518d; BYTE $0xfe                   // leal         $-2(%rcx), %edx
	WORD $0xfa80; BYTE $0x0d                   // cmpb         $13, %dl
	LONG $0x00c8870f; WORD $0x0000             // ja           LBB65_25, $200(%rip)
	WORD $0xb60f; BYTE $0xd2                   // movzbl       %dl, %edx
	LONG $0x74358d48; WORD $0x0003; BYTE $0x00 // leaq         $884(%rip), %rsi  /* LJTI65_0+0(%rip) */
	LONG $0x96146348                           // movslq       (%rsi,%rdx,4), %rdx
	WORD $0x0148; BYTE $0xf2                   // addq         %rsi, %rdx
	JMP  DX

LBB65_12:
	LONG $0x08468b49               // movq         $8(%r14), %rax
	LONG $0x01488d48               // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0xcd       // movq         %rcx, %r13
	LONG $0x106e2b4d               // subq         $16(%r14), %r13
	LONG $0x01c6870f; WORD $0x0000 // ja           LBB65_38, $454(%rip)
	LONG $0x084e8949               // movq         %rcx, $8(%r14)
	WORD $0x8b49; BYTE $0x0e       // movq         (%r14), %rcx
	LONG $0x000104c6               // movb         $0, (%rcx,%rax)
	LONG $0x0002fee9; BYTE $0x00   // jmp          LBB65_14, $766(%rip)

LBB65_17:
	LONG $0x08468b49               // movq         $8(%r14), %rax
	LONG $0x08488d48               // leaq         $8(%rax), %rcx
	WORD $0x8949; BYTE $0xcd       // movq         %rcx, %r13
	LONG $0x106e2b4d               // subq         $16(%r14), %r13
	LONG $0x01a1870f; WORD $0x0000 // ja           LBB65_38, $417(%rip)
	LONG $0x084e8949               // movq         %rcx, $8(%r14)
	WORD $0x8b49; BYTE $0x0e       // movq         (%r14), %rcx
	QUAD $0x000000000104c748       // movq         $0, (%rcx,%rax)
	WORD $0x3145; BYTE $0xed       // xorl         %r13d, %r13d
	LONG $0x0002d5e9; BYTE $0x00   // jmp          LBB65_39, $725(%rip)

LBB65_19:
	LONG $0x084e8b49               // movq         $8(%r14), %rcx
	LONG $0x01518d48               // leaq         $1(%rcx), %rdx
	WORD $0x8949; BYTE $0xd5       // movq         %rdx, %r13
	LONG $0x106e2b4d               // subq         $16(%r14), %r13
	LONG $0x0175870f; WORD $0x0000 // ja           LBB65_38, $373(%rip)
	LONG $0x20408b48               // movq         $32(%rax), %rax
	WORD $0x008a                   // movb         (%rax), %al
	LONG $0x08568949               // movq         %rdx, $8(%r14)
	WORD $0x8b49; BYTE $0x16       // movq         (%r14), %rdx
	WORD $0x0488; BYTE $0x0a       // movb         %al, (%rdx,%rcx)

LBB65_21:
	LONG $0x08468b49                           // movq         $8(%r14), %rax
	LONG $0x04488d48                           // leaq         $4(%rax), %rcx
	WORD $0x8949; BYTE $0xcd                   // movq         %rcx, %r13
	LONG $0x106e2b4d                           // subq         $16(%r14), %r13
	LONG $0x0150870f; WORD $0x0000             // ja           LBB65_38, $336(%rip)
	LONG $0x084e8949                           // movq         %rcx, $8(%r14)
	WORD $0x8b49; BYTE $0x0e                   // movq         (%r14), %rcx
	LONG $0x000104c7; WORD $0x0000; BYTE $0x00 // movl         $0, (%rcx,%rax)
	WORD $0x3145; BYTE $0xed                   // xorl         %r13d, %r13d
	LONG $0x000285e9; BYTE $0x00               // jmp          LBB65_39, $645(%rip)

LBB65_23:
	LONG $0x80fb8149; WORD $0x0000; BYTE $0x00 // cmpq         $128, %r11
	LONG $0x013a830f; WORD $0x0000             // jae          LBB65_40, $314(%rip)
	WORD $0xf631                               // xorl         %esi, %esi
	LONG $0x000244e9; BYTE $0x00               // jmp          LBB65_49, $580(%rip)

LBB65_25:
	LONG $0x28e1c148             // shlq         $40, %rcx
	LONG $0x08e5c149             // shlq         $8, %r13
	WORD $0x0949; BYTE $0xcd     // orq          %rcx, %r13
	LONG $0x0bcd8349             // orq          $11, %r13
	LONG $0x00025de9; BYTE $0x00 // jmp          LBB65_39, $605(%rip)

LBB65_26:
	LONG $0x08468b49               // movq         $8(%r14), %rax
	LONG $0x02488d48               // leaq         $2(%rax), %rcx
	WORD $0x8949; BYTE $0xcd       // movq         %rcx, %r13
	LONG $0x106e2b4d               // subq         $16(%r14), %r13
	LONG $0x00fd870f; WORD $0x0000 // ja           LBB65_38, $253(%rip)
	LONG $0x084e8949               // movq         %rcx, $8(%r14)
	WORD $0x8b49; BYTE $0x0e       // movq         (%r14), %rcx
	LONG $0x0104c766; WORD $0x0000 // movw         $0, (%rcx,%rax)
	WORD $0x3145; BYTE $0xed       // xorl         %r13d, %r13d
	LONG $0x000233e9; BYTE $0x00   // jmp          LBB65_39, $563(%rip)

LBB65_28:
	LONG $0x28408b48               // movq         $40(%rax), %rax
	LONG $0x38788b4c               // movq         $56(%rax), %r15
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	LONG $0xfefc840f; WORD $0xffff // je           LBB65_12, $-260(%rip)
	LONG $0x30608b4c               // movq         $48(%rax), %r12
	WORD $0xdb31                   // xorl         %ebx, %ebx
	LONG $0x000010e9; BYTE $0x00   // jmp          LBB65_31, $16(%rip)
	LONG $0x90909090               // .p2align 4, 0x90

LBB65_30:
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	WORD $0x3949; BYTE $0xdf       // cmpq         %rbx, %r15
	LONG $0xfee1840f; WORD $0xffff // je           LBB65_12, $-287(%rip)

LBB65_31:
	LONG $0xdc0c8b49               // movq         (%r12,%rbx,8), %rcx
	LONG $0x00027980               // cmpb         $0, $2(%rcx)
	LONG $0xffe6840f; WORD $0xffff // je           LBB65_30, $-26(%rip)
	LONG $0x08568b49               // movq         $8(%r14), %rdx
	LONG $0x01728d48               // leaq         $1(%rdx), %rsi
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	LONG $0x10462b49               // subq         $16(%r14), %rax
	LONG $0x0208870f; WORD $0x0000 // ja           LBB65_54, $520(%rip)
	LONG $0x0641b70f               // movzwl       $6(%rcx), %eax
	LONG $0x08498b48               // movq         $8(%rcx), %rcx
	WORD $0xb60f; BYTE $0x09       // movzbl       (%rcx), %ecx
	LONG $0x08768949               // movq         %rsi, $8(%r14)
	WORD $0x8b49; BYTE $0x36       // movq         (%r14), %rsi
	WORD $0x0c88; BYTE $0x16       // movb         %cl, (%rsi,%rdx)
	LONG $0x084e8b49               // movq         $8(%r14), %rcx
	LONG $0x02718d48               // leaq         $2(%rcx), %rsi
	WORD $0x8948; BYTE $0xf2       // movq         %rsi, %rdx
	LONG $0x10562b49               // subq         $16(%r14), %rdx
	LONG $0x01ee870f; WORD $0x0000 // ja           LBB65_55, $494(%rip)
	LONG $0x08c0c166               // rolw         $8, %ax
	LONG $0x08768949               // movq         %rsi, $8(%r14)
	WORD $0x8b49; BYTE $0x16       // movq         (%r14), %rdx
	LONG $0x0a048966               // movw         %ax, (%rdx,%rcx)
	LONG $0xdc348b49               // movq         (%r12,%rbx,8), %rsi
	WORD $0x894c; BYTE $0xf7       // movq         %r14, %rdi
	WORD $0x894c; BYTE $0xea       // movq         %r13, %rdx
	LONG $0xfffd59e8; BYTE $0xff   // callq        _tb_write_default_or_empty, $-679(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xff80840f; WORD $0xffff // je           LBB65_30, $-128(%rip)
	WORD $0x8949; BYTE $0xc5       // movq         %rax, %r13
	LONG $0x00018be9; BYTE $0x00   // jmp          LBB65_39, $395(%rip)

LBB65_36:
	LONG $0x08568b49               // movq         $8(%r14), %rdx
	LONG $0x01728d48               // leaq         $1(%rdx), %rsi
	WORD $0x8949; BYTE $0xf5       // movq         %rsi, %r13
	LONG $0x106e2b4d               // subq         $16(%r14), %r13
	LONG $0x002b870f; WORD $0x0000 // ja           LBB65_38, $43(%rip)
	LONG $0x20488b48               // movq         $32(%rax), %rcx
	WORD $0x098a                   // movb         (%rcx), %cl
	LONG $0x18408b48               // movq         $24(%rax), %rax
	WORD $0x008a                   // movb         (%rax), %al
	LONG $0x08768949               // movq         %rsi, $8(%r14)
	WORD $0x8b49; BYTE $0x36       // movq         (%r14), %rsi
	WORD $0x0488; BYTE $0x16       // movb         %al, (%rsi,%rdx)
	LONG $0x08468b49               // movq         $8(%r14), %rax
	LONG $0x01508d48               // leaq         $1(%rax), %rdx
	WORD $0x8949; BYTE $0xd5       // movq         %rdx, %r13
	LONG $0x106e2b4d               // subq         $16(%r14), %r13
	LONG $0x0160860f; WORD $0x0000 // jbe          LBB65_53, $352(%rip)

LBB65_38:
	LONG $0x08e5c149             // shlq         $8, %r13
	LONG $0x11cd8349             // orq          $17, %r13
	LONG $0x00013ee9; BYTE $0x00 // jmp          LBB65_39, $318(%rip)

LBB65_40:
	WORD $0x894c; BYTE $0xde               // movq         %r11, %rsi
	LONG $0x80e68348                       // andq         $-128, %rsi
	LONG $0x80468d48                       // leaq         $-128(%rsi), %rax
	WORD $0x8949; BYTE $0xc0               // movq         %rax, %r8
	LONG $0x07e8c149                       // shrq         $7, %r8
	WORD $0xff49; BYTE $0xc0               // incq         %r8
	WORD $0x8548; BYTE $0xc0               // testq        %rax, %rax
	LONG $0x00a6840f; WORD $0x0000         // je           LBB65_43, $166(%rip)
	WORD $0x894c; BYTE $0xc2               // movq         %r8, %rdx
	LONG $0xfee28348                       // andq         $-2, %rdx
	LONG $0x0a048d4b                       // leaq         (%r10,%r9), %rax
	LONG $0x00e00548; WORD $0x0000         // addq         $224, %rax
	WORD $0xff31                           // xorl         %edi, %edi
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB65_42:
	LONG $0x0410fcc5; BYTE $0x39               // vmovups      (%rcx,%rdi), %ymm0
	LONG $0x4c10fcc5; WORD $0x2039             // vmovups      $32(%rcx,%rdi), %ymm1
	LONG $0x5410fcc5; WORD $0x4039             // vmovups      $64(%rcx,%rdi), %ymm2
	LONG $0x5c10fcc5; WORD $0x6039             // vmovups      $96(%rcx,%rdi), %ymm3
	QUAD $0xffff20388411fcc5; BYTE $0xff       // vmovups      %ymm0, $-224(%rax,%rdi)
	QUAD $0xffff40388c11fcc5; BYTE $0xff       // vmovups      %ymm1, $-192(%rax,%rdi)
	QUAD $0xffff60389411fcc5; BYTE $0xff       // vmovups      %ymm2, $-160(%rax,%rdi)
	LONG $0x5c11fcc5; WORD $0x8038             // vmovups      %ymm3, $-128(%rax,%rdi)
	QUAD $0x000080398410fcc5; BYTE $0x00       // vmovups      $128(%rcx,%rdi), %ymm0
	QUAD $0x0000a0398c10fcc5; BYTE $0x00       // vmovups      $160(%rcx,%rdi), %ymm1
	QUAD $0x0000c0399410fcc5; BYTE $0x00       // vmovups      $192(%rcx,%rdi), %ymm2
	QUAD $0x0000e0399c10fcc5; BYTE $0x00       // vmovups      $224(%rcx,%rdi), %ymm3
	LONG $0x4411fcc5; WORD $0xa038             // vmovups      %ymm0, $-96(%rax,%rdi)
	LONG $0x4c11fcc5; WORD $0xc038             // vmovups      %ymm1, $-64(%rax,%rdi)
	LONG $0x5411fcc5; WORD $0xe038             // vmovups      %ymm2, $-32(%rax,%rdi)
	LONG $0x1c11fcc5; BYTE $0x38               // vmovups      %ymm3, (%rax,%rdi)
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // addq         $256, %rdi
	LONG $0xfec28348                           // addq         $-2, %rdx
	LONG $0xff7c850f; WORD $0xffff             // jne          LBB65_42, $-132(%rip)
	LONG $0x000002e9; BYTE $0x00               // jmp          LBB65_44, $2(%rip)

LBB65_43:
	WORD $0xff31 // xorl         %edi, %edi

LBB65_44:
	LONG $0x01c0f641               // testb        $1, %r8b
	LONG $0x002e840f; WORD $0x0000 // je           LBB65_46, $46(%rip)
	LONG $0x0410fcc5; BYTE $0x39   // vmovups      (%rcx,%rdi), %ymm0
	LONG $0x4c10fcc5; WORD $0x2039 // vmovups      $32(%rcx,%rdi), %ymm1
	LONG $0x5410fcc5; WORD $0x4039 // vmovups      $64(%rcx,%rdi), %ymm2
	LONG $0x5c10fcc5; WORD $0x6039 // vmovups      $96(%rcx,%rdi), %ymm3
	LONG $0x0411fcc5; BYTE $0x3b   // vmovups      %ymm0, (%rbx,%rdi)
	LONG $0x4c11fcc5; WORD $0x203b // vmovups      %ymm1, $32(%rbx,%rdi)
	LONG $0x5411fcc5; WORD $0x403b // vmovups      %ymm2, $64(%rbx,%rdi)
	LONG $0x5c11fcc5; WORD $0x603b // vmovups      %ymm3, $96(%rbx,%rdi)

LBB65_46:
	WORD $0x3949; BYTE $0xf3       // cmpq         %rsi, %r11
	LONG $0x0034840f; WORD $0x0000 // je           LBB65_14, $52(%rip)
	LONG $0x70c3f641               // testb        $112, %r11b
	LONG $0xfc57840f; WORD $0xffff // je           LBB65_6, $-937(%rip)

LBB65_49:
	WORD $0x8948; BYTE $0xf0 // movq         %rsi, %rax
	WORD $0x894c; BYTE $0xde // movq         %r11, %rsi
	LONG $0xf0e68348         // andq         $-16, %rsi

	// .p2align 4, 0x90
LBB65_50:
	LONG $0x0410f8c5; BYTE $0x01   // vmovups      (%rcx,%rax), %xmm0
	LONG $0x0411f8c5; BYTE $0x03   // vmovups      %xmm0, (%rbx,%rax)
	LONG $0x10c08348               // addq         $16, %rax
	WORD $0x3948; BYTE $0xc6       // cmpq         %rax, %rsi
	LONG $0xffe9850f; WORD $0xffff // jne          LBB65_50, $-23(%rip)
	WORD $0x3949; BYTE $0xf3       // cmpq         %rsi, %r11
	LONG $0xfc2d850f; WORD $0xffff // jne          LBB65_6, $-979(%rip)

LBB65_14:
	WORD $0x3145; BYTE $0xed // xorl         %r13d, %r13d

LBB65_39:
	WORD $0x894c; BYTE $0xe8 // movq         %r13, %rax
	LONG $0x08c48348         // addq         $8, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB65_53:
	LONG $0x08568949             // movq         %rdx, $8(%r14)
	WORD $0x8b49; BYTE $0x16     // movq         (%r14), %rdx
	WORD $0x0c88; BYTE $0x02     // movb         %cl, (%rdx,%rax)
	LONG $0xfffd2ce9; BYTE $0xff // jmp          LBB65_21, $-724(%rip)

LBB65_54:
	LONG $0x08e0c148             // shlq         $8, %rax
	LONG $0x11c88348             // orq          $17, %rax
	WORD $0x8949; BYTE $0xc5     // movq         %rax, %r13
	LONG $0xffffcce9; BYTE $0xff // jmp          LBB65_39, $-52(%rip)

LBB65_55:
	LONG $0x08e2c148             // shlq         $8, %rdx
	LONG $0x11ca8348             // orq          $17, %rdx
	WORD $0x8949; BYTE $0xd5     // movq         %rdx, %r13
	LONG $0xffffbce9; BYTE $0xff // jmp          LBB65_39, $-68(%rip)
	BYTE $0x90                   // .p2align 2, 0x90

	// .set L65_0_set_12, LBB65_12-LJTI65_0
	// .set L65_0_set_17, LBB65_17-LJTI65_0
	// .set L65_0_set_25, LBB65_25-LJTI65_0
	// .set L65_0_set_26, LBB65_26-LJTI65_0
	// .set L65_0_set_21, LBB65_21-LJTI65_0
	// .set L65_0_set_28, LBB65_28-LJTI65_0
	// .set L65_0_set_36, LBB65_36-LJTI65_0
	// .set L65_0_set_19, LBB65_19-LJTI65_0
LJTI65_0:
	LONG $0xfffffc95 // .long L65_0_set_12
	LONG $0xfffffc95 // .long L65_0_set_12
	LONG $0xfffffcba // .long L65_0_set_17
	LONG $0xfffffd4a // .long L65_0_set_25
	LONG $0xfffffd5e // .long L65_0_set_26
	LONG $0xfffffd4a // .long L65_0_set_25
	LONG $0xfffffd0b // .long L65_0_set_21
	LONG $0xfffffd4a // .long L65_0_set_25
	LONG $0xfffffcba // .long L65_0_set_17
	LONG $0xfffffd0b // .long L65_0_set_21
	LONG $0xfffffd88 // .long L65_0_set_28
	LONG $0xfffffe30 // .long L65_0_set_36
	LONG $0xfffffce6 // .long L65_0_set_19
	LONG $0xfffffce6 // .long L65_0_set_19

	// .p2align 4, 0x90
_tb_write_message_begin:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	BYTE $0x53                     // pushq        %rbx
	LONG $0x084f8b4c               // movq         $8(%rdi), %r9
	LONG $0x105f8b4c               // movq         $16(%rdi), %r11
	LONG $0x04598d49               // leaq         $4(%r9), %rbx
	WORD $0x8948; BYTE $0xd8       // movq         %rbx, %rax
	WORD $0x294c; BYTE $0xd8       // subq         %r11, %rax
	LONG $0x0126870f; WORD $0x0000 // ja           LBB66_29, $294(%rip)
	LONG $0x0000c981; WORD $0x8001 // orl          $-2147418112, %ecx
	LONG $0x085f8948               // movq         %rbx, $8(%rdi)
	WORD $0xc90f                   // bswapl       %ecx
	WORD $0x8b4c; BYTE $0x17       // movq         (%rdi), %r10
	LONG $0x0a0c8943               // movl         %ecx, (%r10,%r9)
	WORD $0x8948; BYTE $0xd1       // movq         %rdx, %rcx
	LONG $0x04c18348               // addq         $4, %rcx
	LONG $0x003b840f; WORD $0x0000 // je           LBB66_6, $59(%rip)
	WORD $0x0148; BYTE $0xd9       // addq         %rbx, %rcx
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	WORD $0x294c; BYTE $0xd8       // subq         %r11, %rax
	LONG $0x00f7870f; WORD $0x0000 // ja           LBB66_29, $247(%rip)
	LONG $0x084f8948               // movq         %rcx, $8(%rdi)
	WORD $0xd089                   // movl         %edx, %eax
	WORD $0xc80f                   // bswapl       %eax
	LONG $0x1a048941               // movl         %eax, (%r10,%rbx)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x00d2840f; WORD $0x0000 // je           LBB66_28, $210(%rip)
	LONG $0x11348d4f               // leaq         (%r9,%r10), %r14
	LONG $0x08c68349               // addq         $8, %r14
	LONG $0x10fa8348               // cmpq         $16, %rdx
	LONG $0x001f830f; WORD $0x0000 // jae          LBB66_7, $31(%rip)
	LONG $0x000031e9; BYTE $0x00   // jmp          LBB66_5, $49(%rip)

LBB66_6:
	WORD $0xd089                   // movl         %edx, %eax
	WORD $0xc80f                   // bswapl       %eax
	LONG $0x1a048941               // movl         %eax, (%r10,%rbx)
	LONG $0x11348d4f               // leaq         (%r9,%r10), %r14
	LONG $0x08c68349               // addq         $8, %r14
	LONG $0x10fa8348               // cmpq         $16, %rdx
	LONG $0x0017820f; WORD $0x0000 // jb           LBB66_5, $23(%rip)

LBB66_7:
	LONG $0x11048d4b               // leaq         (%r9,%r10), %rax
	WORD $0x2948; BYTE $0xf0       // subq         %rsi, %rax
	LONG $0x08c08348               // addq         $8, %rax
	LONG $0x00803d48; WORD $0x0000 // cmpq         $128, %rax
	LONG $0x00c1830f; WORD $0x0000 // jae          LBB66_9, $193(%rip)

LBB66_5:
	WORD $0xc031 // xorl         %eax, %eax

LBB66_22:
	WORD $0x8949; BYTE $0xc3                           // movq         %rax, %r11
	WORD $0xf749; BYTE $0xd3                           // notq         %r11
	WORD $0x0149; BYTE $0xd3                           // addq         %rdx, %r11
	WORD $0x8948; BYTE $0xd3                           // movq         %rdx, %rbx
	LONG $0x03e38348                                   // andq         $3, %rbx
	LONG $0x001f840f; WORD $0x0000                     // je           LBB66_24, $31(%rip)
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB66_23:
	LONG $0x060cb60f               // movzbl       (%rsi,%rax), %ecx
	LONG $0x060c8841               // movb         %cl, (%r14,%rax)
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xff48; BYTE $0xcb       // decq         %rbx
	LONG $0xffec850f; WORD $0xffff // jne          LBB66_23, $-20(%rip)

LBB66_24:
	LONG $0x03fb8349                       // cmpq         $3, %r11
	LONG $0x0041820f; WORD $0x0000         // jb           LBB66_27, $65(%rip)
	LONG $0x110c8d4b                       // leaq         (%r9,%r10), %rcx
	LONG $0x0bc18348                       // addq         $11, %rcx
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB66_26:
	LONG $0x061cb60f               // movzbl       (%rsi,%rax), %ebx
	LONG $0xfd015c88               // movb         %bl, $-3(%rcx,%rax)
	LONG $0x065cb60f; BYTE $0x01   // movzbl       $1(%rsi,%rax), %ebx
	LONG $0xfe015c88               // movb         %bl, $-2(%rcx,%rax)
	LONG $0x065cb60f; BYTE $0x02   // movzbl       $2(%rsi,%rax), %ebx
	LONG $0xff015c88               // movb         %bl, $-1(%rcx,%rax)
	LONG $0x065cb60f; BYTE $0x03   // movzbl       $3(%rsi,%rax), %ebx
	WORD $0x1c88; BYTE $0x01       // movb         %bl, (%rcx,%rax)
	LONG $0x04c08348               // addq         $4, %rax
	WORD $0x3948; BYTE $0xc2       // cmpq         %rax, %rdx
	LONG $0xffd1850f; WORD $0xffff // jne          LBB66_26, $-47(%rip)

LBB66_27:
	LONG $0x084f8b48 // movq         $8(%rdi), %rcx
	LONG $0x105f8b4c // movq         $16(%rdi), %r11

LBB66_28:
	LONG $0x04518d48               // leaq         $4(%rcx), %rdx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0x294c; BYTE $0xd8       // subq         %r11, %rax
	LONG $0x0012860f; WORD $0x0000 // jbe          LBB66_31, $18(%rip)

LBB66_29:
	LONG $0x08e0c148 // shlq         $8, %rax
	LONG $0x11c88348 // orq          $17, %rax

LBB66_30:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB66_31:
	LONG $0x08578948             // movq         %rdx, $8(%rdi)
	WORD $0x0f41; BYTE $0xc8     // bswapl       %r8d
	WORD $0x8b48; BYTE $0x07     // movq         (%rdi), %rax
	LONG $0x08048944             // movl         %r8d, (%rax,%rcx)
	WORD $0xc031                 // xorl         %eax, %eax
	LONG $0xffffe1e9; BYTE $0xff // jmp          LBB66_30, $-31(%rip)

LBB66_9:
	LONG $0x80fa8148; WORD $0x0000; BYTE $0x00 // cmpq         $128, %rdx
	LONG $0x0007830f; WORD $0x0000             // jae          LBB66_11, $7(%rip)
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x000117e9; BYTE $0x00               // jmp          LBB66_19, $279(%rip)

LBB66_11:
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	LONG $0x80e08348                           // andq         $-128, %rax
	LONG $0x80488d48                           // leaq         $-128(%rax), %rcx
	WORD $0x8949; BYTE $0xcb                   // movq         %rcx, %r11
	LONG $0x07ebc149                           // shrq         $7, %r11
	WORD $0xff49; BYTE $0xc3                   // incq         %r11
	WORD $0x8548; BYTE $0xc9                   // testq        %rcx, %rcx
	LONG $0x00a9840f; WORD $0x0000             // je           LBB66_14, $169(%rip)
	WORD $0x894d; BYTE $0xdf                   // movq         %r11, %r15
	LONG $0xfee78349                           // andq         $-2, %r15
	LONG $0x110c8d4b                           // leaq         (%r9,%r10), %rcx
	LONG $0xe8c18148; WORD $0x0000; BYTE $0x00 // addq         $232, %rcx
	WORD $0xdb31                               // xorl         %ebx, %ebx
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

LBB66_13:
	LONG $0x0410fcc5; BYTE $0x1e               // vmovups      (%rsi,%rbx), %ymm0
	LONG $0x4c10fcc5; WORD $0x201e             // vmovups      $32(%rsi,%rbx), %ymm1
	LONG $0x5410fcc5; WORD $0x401e             // vmovups      $64(%rsi,%rbx), %ymm2
	LONG $0x5c10fcc5; WORD $0x601e             // vmovups      $96(%rsi,%rbx), %ymm3
	QUAD $0xffff20198411fcc5; BYTE $0xff       // vmovups      %ymm0, $-224(%rcx,%rbx)
	QUAD $0xffff40198c11fcc5; BYTE $0xff       // vmovups      %ymm1, $-192(%rcx,%rbx)
	QUAD $0xffff60199411fcc5; BYTE $0xff       // vmovups      %ymm2, $-160(%rcx,%rbx)
	LONG $0x5c11fcc5; WORD $0x8019             // vmovups      %ymm3, $-128(%rcx,%rbx)
	QUAD $0x0000801e8410fcc5; BYTE $0x00       // vmovups      $128(%rsi,%rbx), %ymm0
	QUAD $0x0000a01e8c10fcc5; BYTE $0x00       // vmovups      $160(%rsi,%rbx), %ymm1
	QUAD $0x0000c01e9410fcc5; BYTE $0x00       // vmovups      $192(%rsi,%rbx), %ymm2
	QUAD $0x0000e01e9c10fcc5; BYTE $0x00       // vmovups      $224(%rsi,%rbx), %ymm3
	LONG $0x4411fcc5; WORD $0xa019             // vmovups      %ymm0, $-96(%rcx,%rbx)
	LONG $0x4c11fcc5; WORD $0xc019             // vmovups      %ymm1, $-64(%rcx,%rbx)
	LONG $0x5411fcc5; WORD $0xe019             // vmovups      %ymm2, $-32(%rcx,%rbx)
	LONG $0x1c11fcc5; BYTE $0x19               // vmovups      %ymm3, (%rcx,%rbx)
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // addq         $256, %rbx
	LONG $0xfec78349                           // addq         $-2, %r15
	LONG $0xff7c850f; WORD $0xffff             // jne          LBB66_13, $-132(%rip)
	LONG $0x000002e9; BYTE $0x00               // jmp          LBB66_15, $2(%rip)

LBB66_14:
	WORD $0xdb31 // xorl         %ebx, %ebx

LBB66_15:
	LONG $0x01c3f641                           // testb        $1, %r11b
	LONG $0x0032840f; WORD $0x0000             // je           LBB66_17, $50(%rip)
	LONG $0x0410fcc5; BYTE $0x1e               // vmovups      (%rsi,%rbx), %ymm0
	LONG $0x4c10fcc5; WORD $0x201e             // vmovups      $32(%rsi,%rbx), %ymm1
	LONG $0x5410fcc5; WORD $0x401e             // vmovups      $64(%rsi,%rbx), %ymm2
	LONG $0x5c10fcc5; WORD $0x601e             // vmovups      $96(%rsi,%rbx), %ymm3
	LONG $0x117cc1c4; WORD $0x1e04             // vmovups      %ymm0, (%r14,%rbx)
	LONG $0x117cc1c4; WORD $0x1e4c; BYTE $0x20 // vmovups      %ymm1, $32(%r14,%rbx)
	LONG $0x117cc1c4; WORD $0x1e54; BYTE $0x40 // vmovups      %ymm2, $64(%r14,%rbx)
	LONG $0x117cc1c4; WORD $0x1e5c; BYTE $0x60 // vmovups      %ymm3, $96(%r14,%rbx)

LBB66_17:
	WORD $0x3948; BYTE $0xd0       // cmpq         %rdx, %rax
	LONG $0xfe9f840f; WORD $0xffff // je           LBB66_27, $-353(%rip)
	WORD $0xc2f6; BYTE $0x70       // testb        $112, %dl
	LONG $0xfe16840f; WORD $0xffff // je           LBB66_22, $-490(%rip)

LBB66_19:
	WORD $0x8948; BYTE $0xc1                               // movq         %rax, %rcx
	WORD $0x8948; BYTE $0xd0                               // movq         %rdx, %rax
	LONG $0xf0e08348                                       // andq         $-16, %rax
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB66_20:
	LONG $0x0410f8c5; BYTE $0x0e           // vmovups      (%rsi,%rcx), %xmm0
	LONG $0x1178c1c4; WORD $0x0e04         // vmovups      %xmm0, (%r14,%rcx)
	LONG $0x10c18348                       // addq         $16, %rcx
	WORD $0x3948; BYTE $0xc8               // cmpq         %rcx, %rax
	LONG $0xffe8850f; WORD $0xffff         // jne          LBB66_20, $-24(%rip)
	WORD $0x3948; BYTE $0xd0               // cmpq         %rdx, %rax
	LONG $0xfe5e840f; WORD $0xffff         // je           LBB66_27, $-418(%rip)
	LONG $0xfffdd9e9; BYTE $0xff           // jmp          LBB66_22, $-551(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_tb_write_message_end:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_bm_malloc_reqs:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	WORD $0x5441                   // pushq        %r12
	BYTE $0x53                     // pushq        %rbx
	LONG $0x084f8b4c               // movq         $8(%rdi), %r9
	LONG $0xd1048d4d               // leaq         (%r9,%rdx,8), %r8
	WORD $0x894c; BYTE $0xc0       // movq         %r8, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x01f7870f; WORD $0x0000 // ja           LBB68_23, $503(%rip)
	QUAD $0x00000000d53c8d4c       // leaq         (,%rdx,8), %r15
	WORD $0x8b4c; BYTE $0x17       // movq         (%rdi), %r10
	LONG $0x0a1c8d4f               // leaq         (%r10,%r9), %r11
	WORD $0x894c; BYTE $0x19       // movq         %r11, (%rcx)
	LONG $0x08518948               // movq         %rdx, $8(%rcx)
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	LONG $0x0060840f; WORD $0x0000 // je           LBB68_20, $96(%rip)
	LONG $0x10ff8349               // cmpq         $16, %r15
	LONG $0x0012820f; WORD $0x0000 // jb           LBB68_3, $18(%rip)
	WORD $0x894c; BYTE $0xd8       // movq         %r11, %rax
	WORD $0x2948; BYTE $0xf0       // subq         %rsi, %rax
	LONG $0x00803d48; WORD $0x0000 // cmpq         $128, %rax
	LONG $0x0056830f; WORD $0x0000 // jae          LBB68_6, $86(%rip)

LBB68_3:
	WORD $0xc931 // xorl         %ecx, %ecx

LBB68_18:
	LONG $0x11048d4b                                   // leaq         (%r9,%r10), %rax
	LONG $0x03c08348                                   // addq         $3, %rax
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB68_19:
	LONG $0x0e14b60f               // movzbl       (%rsi,%rcx), %edx
	LONG $0xfd085488               // movb         %dl, $-3(%rax,%rcx)
	LONG $0x0e54b60f; BYTE $0x01   // movzbl       $1(%rsi,%rcx), %edx
	LONG $0xfe085488               // movb         %dl, $-2(%rax,%rcx)
	LONG $0x0e54b60f; BYTE $0x02   // movzbl       $2(%rsi,%rcx), %edx
	LONG $0xff085488               // movb         %dl, $-1(%rax,%rcx)
	LONG $0x0e54b60f; BYTE $0x03   // movzbl       $3(%rsi,%rcx), %edx
	WORD $0x1488; BYTE $0x08       // movb         %dl, (%rax,%rcx)
	LONG $0x04c18348               // addq         $4, %rcx
	WORD $0x3949; BYTE $0xcf       // cmpq         %rcx, %r15
	LONG $0xffd1850f; WORD $0xffff // jne          LBB68_19, $-47(%rip)

LBB68_20:
	LONG $0x0847894c // movq         %r8, $8(%rdi)
	WORD $0xc031     // xorl         %eax, %eax

LBB68_21:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB68_6:
	LONG $0x80ff8149; WORD $0x0000; BYTE $0x00 // cmpq         $128, %r15
	LONG $0x0007830f; WORD $0x0000             // jae          LBB68_8, $7(%rip)
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0x00010de9; BYTE $0x00               // jmp          LBB68_15, $269(%rip)

LBB68_8:
	WORD $0x894c; BYTE $0xf9               // movq         %r15, %rcx
	LONG $0x80e18348                       // andq         $-128, %rcx
	LONG $0x80418d48                       // leaq         $-128(%rcx), %rax
	WORD $0x8949; BYTE $0xc6               // movq         %rax, %r14
	LONG $0x07eec149                       // shrq         $7, %r14
	WORD $0xff49; BYTE $0xc6               // incq         %r14
	WORD $0x8548; BYTE $0xc0               // testq        %rax, %rax
	LONG $0x0123840f; WORD $0x0000         // je           LBB68_22, $291(%rip)
	WORD $0x894d; BYTE $0xf4               // movq         %r14, %r12
	LONG $0xfee48349                       // andq         $-2, %r12
	LONG $0x11048d4b                       // leaq         (%r9,%r10), %rax
	LONG $0x00e00548; WORD $0x0000         // addq         $224, %rax
	WORD $0xdb31                           // xorl         %ebx, %ebx
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB68_10:
	LONG $0x0410fcc5; BYTE $0x1e               // vmovups      (%rsi,%rbx), %ymm0
	LONG $0x4c10fcc5; WORD $0x201e             // vmovups      $32(%rsi,%rbx), %ymm1
	LONG $0x5410fcc5; WORD $0x401e             // vmovups      $64(%rsi,%rbx), %ymm2
	LONG $0x5c10fcc5; WORD $0x601e             // vmovups      $96(%rsi,%rbx), %ymm3
	QUAD $0xffff20188411fcc5; BYTE $0xff       // vmovups      %ymm0, $-224(%rax,%rbx)
	QUAD $0xffff40188c11fcc5; BYTE $0xff       // vmovups      %ymm1, $-192(%rax,%rbx)
	QUAD $0xffff60189411fcc5; BYTE $0xff       // vmovups      %ymm2, $-160(%rax,%rbx)
	LONG $0x5c11fcc5; WORD $0x8018             // vmovups      %ymm3, $-128(%rax,%rbx)
	QUAD $0x0000801e8410fcc5; BYTE $0x00       // vmovups      $128(%rsi,%rbx), %ymm0
	QUAD $0x0000a01e8c10fcc5; BYTE $0x00       // vmovups      $160(%rsi,%rbx), %ymm1
	QUAD $0x0000c01e9410fcc5; BYTE $0x00       // vmovups      $192(%rsi,%rbx), %ymm2
	QUAD $0x0000e01e9c10fcc5; BYTE $0x00       // vmovups      $224(%rsi,%rbx), %ymm3
	LONG $0x4411fcc5; WORD $0xa018             // vmovups      %ymm0, $-96(%rax,%rbx)
	LONG $0x4c11fcc5; WORD $0xc018             // vmovups      %ymm1, $-64(%rax,%rbx)
	LONG $0x5411fcc5; WORD $0xe018             // vmovups      %ymm2, $-32(%rax,%rbx)
	LONG $0x1c11fcc5; BYTE $0x18               // vmovups      %ymm3, (%rax,%rbx)
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // addq         $256, %rbx
	LONG $0xfec48349                           // addq         $-2, %r12
	LONG $0xff7c850f; WORD $0xffff             // jne          LBB68_10, $-132(%rip)
	LONG $0x01c6f641                           // testb        $1, %r14b
	LONG $0x0032840f; WORD $0x0000             // je           LBB68_13, $50(%rip)

LBB68_12:
	LONG $0x0410fcc5; BYTE $0x1e               // vmovups      (%rsi,%rbx), %ymm0
	LONG $0x4c10fcc5; WORD $0x201e             // vmovups      $32(%rsi,%rbx), %ymm1
	LONG $0x5410fcc5; WORD $0x401e             // vmovups      $64(%rsi,%rbx), %ymm2
	LONG $0x5c10fcc5; WORD $0x601e             // vmovups      $96(%rsi,%rbx), %ymm3
	LONG $0x117cc1c4; WORD $0x1b04             // vmovups      %ymm0, (%r11,%rbx)
	LONG $0x117cc1c4; WORD $0x1b4c; BYTE $0x20 // vmovups      %ymm1, $32(%r11,%rbx)
	LONG $0x117cc1c4; WORD $0x1b54; BYTE $0x40 // vmovups      %ymm2, $64(%r11,%rbx)
	LONG $0x117cc1c4; WORD $0x1b5c; BYTE $0x60 // vmovups      %ymm3, $96(%r11,%rbx)

LBB68_13:
	WORD $0x3949; BYTE $0xcf       // cmpq         %rcx, %r15
	LONG $0xfed6840f; WORD $0xffff // je           LBB68_20, $-298(%rip)
	WORD $0xc2f6; BYTE $0x0e       // testb        $14, %dl
	LONG $0xfe8b840f; WORD $0xffff // je           LBB68_18, $-373(%rip)

LBB68_15:
	WORD $0x8948; BYTE $0xc8 // movq         %rcx, %rax
	WORD $0x894c; BYTE $0xf9 // movq         %r15, %rcx
	LONG $0xf0e18348         // andq         $-16, %rcx
	LONG $0x90909090         // .p2align 4, 0x90

LBB68_16:
	LONG $0x0410f8c5; BYTE $0x06   // vmovups      (%rsi,%rax), %xmm0
	LONG $0x1178c1c4; WORD $0x0304 // vmovups      %xmm0, (%r11,%rax)
	LONG $0x10c08348               // addq         $16, %rax
	WORD $0x3948; BYTE $0xc1       // cmpq         %rax, %rcx
	LONG $0xffe8850f; WORD $0xffff // jne          LBB68_16, $-24(%rip)
	WORD $0x3949; BYTE $0xcf       // cmpq         %rcx, %r15
	LONG $0xfe9e840f; WORD $0xffff // je           LBB68_20, $-354(%rip)
	LONG $0xfffe57e9; BYTE $0xff   // jmp          LBB68_18, $-425(%rip)

LBB68_22:
	WORD $0xdb31                   // xorl         %ebx, %ebx
	LONG $0x01c6f641               // testb        $1, %r14b
	LONG $0xff7c850f; WORD $0xffff // jne          LBB68_12, $-132(%rip)
	LONG $0xffffa9e9; BYTE $0xff   // jmp          LBB68_13, $-87(%rip)

LBB68_23:
	LONG $0x08e0c148                           // shlq         $8, %rax
	LONG $0x10c88348                           // orq          $16, %rax
	LONG $0xfffe81e9; BYTE $0xff               // jmp          LBB68_21, $-383(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

_bm_free_reqs:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	LONG $0x03e6c148         // shlq         $3, %rsi
	LONG $0x08772948         // subq         %rsi, $8(%rdi)
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x9090             // .p2align 4, 0x90

_j2t_write_unset_fields:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x5741                           // pushq        %r15
	WORD $0x5641                           // pushq        %r14
	WORD $0x5541                           // pushq        %r13
	WORD $0x5441                           // pushq        %r12
	BYTE $0x53                             // pushq        %rbx
	LONG $0x38ec8348                       // subq         $56, %rsp
	LONG $0xd045894c                       // movq         %r8, $-48(%rbp)
	WORD $0x854d; BYTE $0xc0               // testq        %r8, %r8
	LONG $0x020d840f; WORD $0x0000         // je           LBB70_27, $525(%rip)
	WORD $0x8949; BYTE $0xd2               // movq         %rdx, %r10
	WORD $0x8949; BYTE $0xf3               // movq         %rsi, %r11
	WORD $0x8949; BYTE $0xff               // movq         %rdi, %r15
	LONG $0x10558b48                       // movq         $16(%rbp), %rdx
	QUAD $0x010000000000b849; WORD $0x0000 // movabsq      $1099511627776, %r8
	WORD $0x3145; BYTE $0xed               // xorl         %r13d, %r13d
	WORD $0xc031                           // xorl         %eax, %eax
	LONG $0xc055894c                       // movq         %r10, $-64(%rbp)
	LONG $0xc87d8948                       // movq         %rdi, $-56(%rbp)
	LONG $0x000026e9; BYTE $0x00           // jmp          LBB70_2, $38(%rip)
	QUAD $0x9090909090909090; BYTE $0x90   // .p2align 4, 0x90

LBB70_26:
	LONG $0xb04d8b48               // movq         $-80(%rbp), %rcx
	LONG $0x08c18348               // addq         $8, %rcx
	LONG $0xb8458b48               // movq         $-72(%rbp), %rax
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	LONG $0x40c58341               // addl         $64, %r13d
	LONG $0xd0453b48               // cmpq         $-48(%rbp), %rax
	LONG $0x01be840f; WORD $0x0000 // je           LBB70_27, $446(%rip)

LBB70_2:
	LONG $0xb8458948               // movq         %rax, $-72(%rbp)
	LONG $0xedb70f45               // movzwl       %r13w, %r13d
	LONG $0xb04d8948               // movq         %rcx, $-80(%rbp)
	WORD $0x8b4c; BYTE $0x21       // movq         (%rcx), %r12
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0xffcb840f; WORD $0xffff // je           LBB70_26, $-53(%rip)
	WORD $0x894d; BYTE $0xee       // movq         %r13, %r14
	LONG $0x28e6c149               // shlq         $40, %r14
	QUAD $0x00000000ed048d4a       // leaq         (,%r13,8), %rax
	LONG $0xa0458948               // movq         %rax, $-96(%rbp)
	WORD $0xdb31                   // xorl         %ebx, %ebx
	LONG $0xa86d894c               // movq         %r13, $-88(%rbp)
	WORD $0x9090                   // .p2align 4, 0x90

LBB70_4:
	LONG $0x01c4f641               // testb        $1, %r12b
	LONG $0x0016850f; WORD $0x0000 // jne          LBB70_5, $22(%rip)

LBB70_23:
	WORD $0xd149; BYTE $0xec                                 // shrq         %r12
	LONG $0x00007ee9; BYTE $0x00                             // jmp          LBB70_24, $126(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB70_5:
	LONG $0x2b048d4a                           // leaq         (%rbx,%r13), %rax
	LONG $0x20423949                           // cmpq         %rax, $32(%r10)
	LONG $0x0062860f; WORD $0x0000             // jbe          LBB70_24, $98(%rip)
	LONG $0x18428b49                           // movq         $24(%r10), %rax
	LONG $0xa0450348                           // addq         $-96(%rbp), %rax
	LONG $0xd8348b48                           // movq         (%rax,%rbx,8), %rsi
	LONG $0x00c1f741; WORD $0x0001; BYTE $0x00 // testl        $256, %r9d
	LONG $0x006b840f; WORD $0x0000             // je           LBB70_11, $107(%rip)
	LONG $0x02027e80                           // cmpb         $2, $2(%rsi)
	LONG $0x000a840f; WORD $0x0000             // je           LBB70_9, $10(%rip)
	LONG $0x013f8349                           // cmpq         $1, (%r15)
	LONG $0x0057850f; WORD $0x0000             // jne          LBB70_11, $87(%rip)

LBB70_9:
	LONG $0x78878b49; WORD $0x0380; BYTE $0x00 // movq         $229496(%r15), %rax
	LONG $0x80873949; WORD $0x0380; BYTE $0x00 // cmpq         %rax, $229504(%r15)
	LONG $0x0123860f; WORD $0x0000             // jbe          LBB70_10, $291(%rip)
	LONG $0x064eb70f                           // movzwl       $6(%rsi), %ecx
	LONG $0x70bf8b49; WORD $0x0380; BYTE $0x00 // movq         $229488(%r15), %rdi
	LONG $0x01708d48                           // leaq         $1(%rax), %rsi
	LONG $0x78b78949; WORD $0x0380; BYTE $0x00 // movq         %rsi, $229496(%r15)
	WORD $0x0c89; BYTE $0x87                   // movl         %ecx, (%rdi,%rax,4)
	LONG $0xffff7de9; BYTE $0xff               // jmp          LBB70_23, $-131(%rip)
	WORD $0x9090; BYTE $0x90                   // .p2align 4, 0x90

LBB70_24:
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0xff17840f; WORD $0xffff // je           LBB70_26, $-233(%rip)
	LONG $0x01438d48               // leaq         $1(%rbx), %rax
	WORD $0x014d; BYTE $0xc6       // addq         %r8, %r14
	LONG $0x3ffb8348               // cmpq         $63, %rbx
	WORD $0x8948; BYTE $0xc3       // movq         %rax, %rbx
	LONG $0xff53820f; WORD $0xffff // jb           LBB70_4, $-173(%rip)
	LONG $0xfffefee9; BYTE $0xff   // jmp          LBB70_26, $-258(%rip)

LBB70_11:
	LONG $0x0246b60f               // movzbl       $2(%rsi), %eax
	LONG $0x20c1f641               // testb        $32, %r9b
	LONG $0x000d850f; WORD $0x0000 // jne          LBB70_14, $13(%rip)
	WORD $0x023c                   // cmpb         $2, %al
	LONG $0x000d850f; WORD $0x0000 // jne          LBB70_15, $13(%rip)
	LONG $0x0000f2e9; BYTE $0x00   // jmp          LBB70_13, $242(%rip)

LBB70_14:
	WORD $0x023c                   // cmpb         $2, %al
	LONG $0x0027840f; WORD $0x0000 // je           LBB70_17, $39(%rip)

LBB70_15:
	WORD $0x8944; BYTE $0xc9       // movl         %r9d, %ecx
	WORD $0xe9d0                   // shrb         %cl
	WORD $0x013c                   // cmpb         $1, %al
	LONG $0xc7940f40               // sete         %dil
	WORD $0xc084                   // testb        %al, %al
	WORD $0x940f; BYTE $0xc0       // sete         %al
	WORD $0x8440; BYTE $0xf9       // testb        %dil, %cl
	LONG $0x000e850f; WORD $0x0000 // jne          LBB70_17, $14(%rip)
	WORD $0x8944; BYTE $0xc9       // movl         %r9d, %ecx
	WORD $0xe9c0; BYTE $0x07       // shrb         $7, %cl
	WORD $0xc120                   // andb         %al, %cl
	LONG $0xff0e840f; WORD $0xffff // je           LBB70_23, $-242(%rip)

LBB70_17:
	LONG $0x08438b4d                       // movq         $8(%r11), %r8
	LONG $0x01488d49                       // leaq         $1(%r8), %rcx
	WORD $0x8948; BYTE $0xc8               // movq         %rcx, %rax
	LONG $0x10432b49                       // subq         $16(%r11), %rax
	LONG $0x008e870f; WORD $0x0000         // ja           LBB70_29, $142(%rip)
	LONG $0x0646b70f                       // movzwl       $6(%rsi), %eax
	LONG $0x087e8b48                       // movq         $8(%rsi), %rdi
	WORD $0xb60f; BYTE $0x3f               // movzbl       (%rdi), %edi
	LONG $0x084b8949                       // movq         %rcx, $8(%r11)
	WORD $0x8b49; BYTE $0x0b               // movq         (%r11), %rcx
	LONG $0x013c8842                       // movb         %dil, (%rcx,%r8)
	LONG $0x08438b4d                       // movq         $8(%r11), %r8
	LONG $0x02488d49                       // leaq         $2(%r8), %rcx
	WORD $0x8948; BYTE $0xcf               // movq         %rcx, %rdi
	LONG $0x107b2b49                       // subq         $16(%r11), %rdi
	LONG $0x0073870f; WORD $0x0000         // ja           LBB70_19, $115(%rip)
	LONG $0x084b8949                       // movq         %rcx, $8(%r11)
	LONG $0x08c0c166                       // rolw         $8, %ax
	WORD $0x8b49; BYTE $0x0b               // movq         (%r11), %rcx
	LONG $0x04894266; BYTE $0x01           // movw         %ax, (%rcx,%r8)
	WORD $0x894c; BYTE $0xdf               // movq         %r11, %rdi
	WORD $0x894d; BYTE $0xcd               // movq         %r9, %r13
	WORD $0x894d; BYTE $0xdf               // movq         %r11, %r15
	LONG $0xfff416e8; BYTE $0xff           // callq        _tb_write_default_or_empty, $-3050(%rip)
	WORD $0x894d; BYTE $0xfb               // movq         %r15, %r11
	LONG $0xc87d8b4c                       // movq         $-56(%rbp), %r15
	LONG $0xc0558b4c                       // movq         $-64(%rbp), %r10
	WORD $0x894d; BYTE $0xe9               // movq         %r13, %r9
	LONG $0xa86d8b4c                       // movq         $-88(%rbp), %r13
	QUAD $0x010000000000b849; WORD $0x0000 // movabsq      $1099511627776, %r8
	LONG $0x10558b48                       // movq         $16(%rbp), %rdx
	WORD $0x8548; BYTE $0xc0               // testq        %rax, %rax
	LONG $0xfe87840f; WORD $0xffff         // je           LBB70_23, $-377(%rip)
	WORD $0x8948; BYTE $0xc2               // movq         %rax, %rdx
	LONG $0x00003fe9; BYTE $0x00           // jmp          LBB70_28, $63(%rip)

LBB70_27:
	WORD $0xd231                 // xorl         %edx, %edx
	LONG $0x000038e9; BYTE $0x00 // jmp          LBB70_28, $56(%rip)

LBB70_10:
	LONG $0x08e2c148             // shlq         $8, %rdx
	LONG $0x16ca8348             // orq          $22, %rdx
	LONG $0x00002be9; BYTE $0x00 // jmp          LBB70_28, $43(%rip)

LBB70_29:
	LONG $0x08e0c148             // shlq         $8, %rax
	LONG $0x11c88348             // orq          $17, %rax
	WORD $0x8948; BYTE $0xc2     // movq         %rax, %rdx
	LONG $0x00001be9; BYTE $0x00 // jmp          LBB70_28, $27(%rip)

LBB70_19:
	LONG $0x08e7c148             // shlq         $8, %rdi
	LONG $0x11cf8348             // orq          $17, %rdi
	WORD $0x8948; BYTE $0xfa     // movq         %rdi, %rdx
	LONG $0x00000be9; BYTE $0x00 // jmp          LBB70_28, $11(%rip)

LBB70_13:
	LONG $0x08e2c148         // shlq         $8, %rdx
	WORD $0x094c; BYTE $0xf2 // orq          %r14, %rdx
	LONG $0x0aca8348         // orq          $10, %rdx

LBB70_28:
	WORD $0x8948; BYTE $0xd0 // movq         %rdx, %rax
	LONG $0x38c48348         // addq         $56, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	LONG $0x00000000         // .p2align 4, 0x00

LCPI71_0:
	LONG $0x43300000 // .long 1127219200
	LONG $0x45300000 // .long 1160773632
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0

LCPI71_1:
	QUAD $0x4330000000000000 // .quad 0x4330000000000000
	QUAD $0x4530000000000000 // .quad 0x4530000000000000

	// .p2align 4, 0x90
_j2t_number:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	BYTE $0x50                                 // pushq        %rax
	WORD $0x894d; BYTE $0xc7                   // movq         %r8, %r15
	WORD $0x8948; BYTE $0xcb                   // movq         %rcx, %rbx
	WORD $0x8949; BYTE $0xf4                   // movq         %rsi, %r12
	WORD $0x8949; BYTE $0xfe                   // movq         %rdi, %r14
	WORD $0x8b4c; BYTE $0x29                   // movq         (%rcx), %r13
	WORD $0x8948; BYTE $0xd7                   // movq         %rdx, %rdi
	WORD $0x8948; BYTE $0xce                   // movq         %rcx, %rsi
	WORD $0x894c; BYTE $0xc2                   // movq         %r8, %rdx
	LONG $0xffafe5e8; BYTE $0xff               // callq        _vnumber, $-20507(%rip)
	WORD $0x8b49; BYTE $0x07                   // movq         (%r15), %rax
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x0059880f; WORD $0x0000             // js           LBB71_6, $89(%rip)
	LONG $0x0cb60f41; BYTE $0x24               // movzbl       (%r12), %ecx
	WORD $0x518d; BYTE $0xfd                   // leal         $-3(%rcx), %edx
	WORD $0xfa80; BYTE $0x07                   // cmpb         $7, %dl
	LONG $0x008e870f; WORD $0x0000             // ja           LBB71_10, $142(%rip)
	WORD $0xb60f; BYTE $0xd2                   // movzbl       %dl, %edx
	LONG $0x16358d48; WORD $0x0002; BYTE $0x00 // leaq         $534(%rip), %rsi  /* LJTI71_0+0(%rip) */
	LONG $0x96146348                           // movslq       (%rsi,%rdx,4), %rdx
	WORD $0x0148; BYTE $0xf2                   // addq         %rsi, %rdx
	JMP  DX

LBB71_3:
	LONG $0x084e8b49               // movq         $8(%r14), %rcx
	LONG $0x10768b49               // movq         $16(%r14), %rsi
	LONG $0x01518d48               // leaq         $1(%rcx), %rdx
	LONG $0x09f88348               // cmpq         $9, %rax
	LONG $0x0116850f; WORD $0x0000 // jne          LBB71_20, $278(%rip)
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0x2948; BYTE $0xf0       // subq         %rsi, %rax
	LONG $0x01b6870f; WORD $0x0000 // ja           LBB71_30, $438(%rip)
	LONG $0x10478a41               // movb         $16(%r15), %al
	LONG $0x08568949               // movq         %rdx, $8(%r14)
	WORD $0x8b49; BYTE $0x16       // movq         (%r14), %rdx
	WORD $0x0488; BYTE $0x0a       // movb         %al, (%rdx,%rcx)
	LONG $0x0001c4e9; BYTE $0x00   // jmp          LBB71_33, $452(%rip)

LBB71_6:
	LONG $0x28e5c149             // shlq         $40, %r13
	WORD $0x8b48; BYTE $0x0b     // movq         (%rbx), %rcx
	LONG $0x08e1c148             // shlq         $8, %rcx
	WORD $0xd8f7                 // negl         %eax
	WORD $0xb60f; BYTE $0xc0     // movzbl       %al, %eax
	WORD $0x0948; BYTE $0xc8     // orq          %rcx, %rax
	WORD $0x094c; BYTE $0xe8     // orq          %r13, %rax
	LONG $0x0001abe9; BYTE $0x00 // jmp          LBB71_34, $427(%rip)

LBB71_7:
	LONG $0x084e8b49               // movq         $8(%r14), %rcx
	LONG $0x10768b49               // movq         $16(%r14), %rsi
	LONG $0x08518d48               // leaq         $8(%rcx), %rdx
	LONG $0x08f88348               // cmpq         $8, %rax
	LONG $0x00e7850f; WORD $0x0000 // jne          LBB71_22, $231(%rip)
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0x2948; BYTE $0xf0       // subq         %rsi, %rax
	LONG $0x0166870f; WORD $0x0000 // ja           LBB71_30, $358(%rip)
	LONG $0x08478b49               // movq         $8(%r15), %rax
	LONG $0x000170e9; BYTE $0x00   // jmp          LBB71_32, $368(%rip)

LBB71_10:
	LONG $0x30e1c148                       // shlq         $48, %rcx
	WORD $0x8b48; BYTE $0x13               // movq         (%rbx), %rdx
	LONG $0x08e2c148                       // shlq         $8, %rdx
	WORD $0x0948; BYTE $0xca               // orq          %rcx, %rdx
	QUAD $0x090000000009b848; WORD $0x0000 // movabsq      $9895604649993, %rax
	WORD $0x0948; BYTE $0xd0               // orq          %rdx, %rax
	LONG $0x000160e9; BYTE $0x00           // jmp          LBB71_34, $352(%rip)

LBB71_11:
	LONG $0x084e8b49               // movq         $8(%r14), %rcx
	LONG $0x10768b49               // movq         $16(%r14), %rsi
	LONG $0x02518d48               // leaq         $2(%rcx), %rdx
	LONG $0x09f88348               // cmpq         $9, %rax
	LONG $0x00d2850f; WORD $0x0000 // jne          LBB71_24, $210(%rip)
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0x2948; BYTE $0xf0       // subq         %rsi, %rax
	LONG $0x011b870f; WORD $0x0000 // ja           LBB71_30, $283(%rip)
	LONG $0x47b70f41; BYTE $0x10   // movzwl       $16(%r15), %eax
	LONG $0x08c0c166               // rolw         $8, %ax
	LONG $0x08568949               // movq         %rdx, $8(%r14)
	WORD $0x8b49; BYTE $0x16       // movq         (%r14), %rdx
	LONG $0x0a048966               // movw         %ax, (%rdx,%rcx)
	LONG $0x000123e9; BYTE $0x00   // jmp          LBB71_33, $291(%rip)

LBB71_14:
	LONG $0x084e8b49               // movq         $8(%r14), %rcx
	LONG $0x10768b49               // movq         $16(%r14), %rsi
	LONG $0x04518d48               // leaq         $4(%rcx), %rdx
	LONG $0x09f88348               // cmpq         $9, %rax
	LONG $0x00bd850f; WORD $0x0000 // jne          LBB71_26, $189(%rip)
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0x2948; BYTE $0xf0       // subq         %rsi, %rax
	LONG $0x00e0870f; WORD $0x0000 // ja           LBB71_30, $224(%rip)
	LONG $0x10478b41               // movl         $16(%r15), %eax
	LONG $0x0000bae9; BYTE $0x00   // jmp          LBB71_28, $186(%rip)

LBB71_17:
	LONG $0x084e8b49               // movq         $8(%r14), %rcx
	LONG $0x10768b49               // movq         $16(%r14), %rsi
	LONG $0x08518d48               // leaq         $8(%rcx), %rdx
	LONG $0x09f88348               // cmpq         $9, %rax
	LONG $0x00b5850f; WORD $0x0000 // jne          LBB71_29, $181(%rip)
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0x2948; BYTE $0xf0       // subq         %rsi, %rax
	LONG $0x00b5870f; WORD $0x0000 // ja           LBB71_30, $181(%rip)
	LONG $0x10478b49               // movq         $16(%r15), %rax
	LONG $0x0000bfe9; BYTE $0x00   // jmp          LBB71_32, $191(%rip)

LBB71_20:
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0x2948; BYTE $0xf0       // subq         %rsi, %rax
	LONG $0x00a0870f; WORD $0x0000 // ja           LBB71_30, $160(%rip)
	LONG $0x2c7bc1c4; WORD $0x0847 // vcvttsd2si   $8(%r15), %eax
	LONG $0x08568949               // movq         %rdx, $8(%r14)
	WORD $0x8b49; BYTE $0x16       // movq         (%r14), %rdx
	WORD $0x0488; BYTE $0x0a       // movb         %al, (%rdx,%rcx)
	LONG $0x0000ace9; BYTE $0x00   // jmp          LBB71_33, $172(%rip)

LBB71_22:
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0x2948; BYTE $0xf0       // subq         %rsi, %rax
	LONG $0x007f870f; WORD $0x0000 // ja           LBB71_30, $127(%rip)
	LONG $0x107bc1c4; WORD $0x1047 // vmovsd       $16(%r15), %xmm0
	QUAD $0xfffffe1e0514f8c5       // vunpcklps    $-482(%rip), %xmm0, %xmm0  /* LCPI71_0+0(%rip) */
	QUAD $0xfffffe26055cf9c5       // vsubpd       $-474(%rip), %xmm0, %xmm0  /* LCPI71_1+0(%rip) */
	LONG $0x0579e3c4; WORD $0x01c8 // vpermilpd    $1, %xmm0, %xmm1
	LONG $0xc058f3c5               // vaddsd       %xmm0, %xmm1, %xmm0
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq        %xmm0, %rax
	LONG $0x000068e9; BYTE $0x00   // jmp          LBB71_32, $104(%rip)

LBB71_24:
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0x2948; BYTE $0xf0       // subq         %rsi, %rax
	LONG $0x0049870f; WORD $0x0000 // ja           LBB71_30, $73(%rip)
	LONG $0x2c7bc1c4; WORD $0x0847 // vcvttsd2si   $8(%r15), %eax
	LONG $0x08c0c166               // rolw         $8, %ax
	LONG $0x08568949               // movq         %rdx, $8(%r14)
	WORD $0x8b49; BYTE $0x16       // movq         (%r14), %rdx
	LONG $0x0a048966               // movw         %ax, (%rdx,%rcx)
	LONG $0x000050e9; BYTE $0x00   // jmp          LBB71_33, $80(%rip)

LBB71_26:
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0x2948; BYTE $0xf0       // subq         %rsi, %rax
	LONG $0x0023870f; WORD $0x0000 // ja           LBB71_30, $35(%rip)
	LONG $0x2c7bc1c4; WORD $0x0847 // vcvttsd2si   $8(%r15), %eax

LBB71_28:
	LONG $0x08568949             // movq         %rdx, $8(%r14)
	WORD $0xc80f                 // bswapl       %eax
	WORD $0x8b49; BYTE $0x16     // movq         (%r14), %rdx
	WORD $0x0489; BYTE $0x0a     // movl         %eax, (%rdx,%rcx)
	LONG $0x00002de9; BYTE $0x00 // jmp          LBB71_33, $45(%rip)

LBB71_29:
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0x2948; BYTE $0xf0       // subq         %rsi, %rax
	LONG $0x000d860f; WORD $0x0000 // jbe          LBB71_31, $13(%rip)

LBB71_30:
	LONG $0x08e0c148             // shlq         $8, %rax
	LONG $0x11c88348             // orq          $17, %rax
	LONG $0x000016e9; BYTE $0x00 // jmp          LBB71_34, $22(%rip)

LBB71_31:
	LONG $0x2cfbc1c4; WORD $0x0847 // vcvttsd2si   $8(%r15), %rax

LBB71_32:
	WORD $0x0f48; BYTE $0xc8 // bswapq       %rax
	LONG $0x08568949         // movq         %rdx, $8(%r14)
	WORD $0x8b49; BYTE $0x16 // movq         (%r14), %rdx
	LONG $0x0a048948         // movq         %rax, (%rdx,%rcx)

LBB71_33:
	WORD $0xc031 // xorl         %eax, %eax

LBB71_34:
	LONG $0x08c48348         // addq         $8, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x9090; BYTE $0x90 // .p2align 2, 0x90

	// .set L71_0_set_3, LBB71_3-LJTI71_0
	// .set L71_0_set_7, LBB71_7-LJTI71_0
	// .set L71_0_set_10, LBB71_10-LJTI71_0
	// .set L71_0_set_11, LBB71_11-LJTI71_0
	// .set L71_0_set_14, LBB71_14-LJTI71_0
	// .set L71_0_set_17, LBB71_17-LJTI71_0
LJTI71_0:
	LONG $0xfffffdf3         // .long L71_0_set_3
	LONG $0xfffffe43         // .long L71_0_set_7
	LONG $0xfffffe6e         // .long L71_0_set_10
	LONG $0xfffffe8e         // .long L71_0_set_11
	LONG $0xfffffe6e         // .long L71_0_set_10
	LONG $0xfffffec9         // .long L71_0_set_14
	LONG $0xfffffe6e         // .long L71_0_set_10
	LONG $0xfffffef4         // .long L71_0_set_17
	QUAD $0x9090909090909090 // .p2align 4, 0x90

_j2t_string:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	WORD $0x5541                   // pushq        %r13
	WORD $0x5441                   // pushq        %r12
	BYTE $0x53                     // pushq        %rbx
	LONG $0x18ec8348               // subq         $24, %rsp
	WORD $0x8949; BYTE $0xcc       // movq         %rcx, %r12
	WORD $0x8949; BYTE $0xd7       // movq         %rdx, %r15
	WORD $0x8948; BYTE $0xf3       // movq         %rsi, %rbx
	WORD $0x8949; BYTE $0xfd       // movq         %rdi, %r13
	WORD $0x8b4c; BYTE $0x32       // movq         (%rdx), %r14
	LONG $0xd0558d48               // leaq         $-48(%rbp), %rdx
	WORD $0x8948; BYTE $0xf7       // movq         %rsi, %rdi
	WORD $0x894c; BYTE $0xf6       // movq         %r14, %rsi
	LONG $0xffaa11e8; BYTE $0xff   // callq        _advance_string, $-21999(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x02d7880f; WORD $0x0000 // js           LBB72_36, $727(%rip)
	WORD $0x8949; BYTE $0x07       // movq         %rax, (%r15)
	WORD $0x894c; BYTE $0xf6       // movq         %r14, %rsi
	WORD $0xf748; BYTE $0xd6       // notq         %rsi
	WORD $0x0148; BYTE $0xc6       // addq         %rax, %rsi
	LONG $0xd04d8b48               // movq         $-48(%rbp), %rcx
	WORD $0x394c; BYTE $0xf1       // cmpq         %r14, %rcx
	LONG $0x00098c0f; WORD $0x0000 // jl           LBB72_3, $9(%rip)
	WORD $0x3948; BYTE $0xc1       // cmpq         %rax, %rcx
	LONG $0x022c8c0f; WORD $0x0000 // jl           LBB72_30, $556(%rip)

LBB72_3:
	WORD $0x8b48; BYTE $0x1b       // movq         (%rbx), %rbx
	LONG $0x084d8b49               // movq         $8(%r13), %rcx
	WORD $0x8948; BYTE $0xf2       // movq         %rsi, %rdx
	LONG $0x04c28348               // addq         $4, %rdx
	LONG $0x001d840f; WORD $0x0000 // je           LBB72_6, $29(%rip)
	WORD $0x0148; BYTE $0xca       // addq         %rcx, %rdx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x10452b49               // subq         $16(%r13), %rax
	LONG $0x0032860f; WORD $0x0000 // jbe          LBB72_7, $50(%rip)

LBB72_5:
	LONG $0x08e0c148             // shlq         $8, %rax
	LONG $0x11c88348             // orq          $17, %rax
	LONG $0x0001d8e9; BYTE $0x00 // jmp          LBB72_13, $472(%rip)

LBB72_6:
	WORD $0xf089                   // movl         %esi, %eax
	WORD $0xc80f                   // bswapl       %eax
	LONG $0x00558b49               // movq         (%r13), %rdx
	WORD $0x0489; BYTE $0x0a       // movl         %eax, (%rdx,%rcx)
	WORD $0x0148; BYTE $0xd1       // addq         %rdx, %rcx
	LONG $0x04c18348               // addq         $4, %rcx
	LONG $0x330c8d4e               // leaq         (%rbx,%r14), %r9
	LONG $0x10fe8348               // cmpq         $16, %rsi
	LONG $0x0032830f; WORD $0x0000 // jae          LBB72_9, $50(%rip)
	LONG $0x00003fe9; BYTE $0x00   // jmp          LBB72_10, $63(%rip)

LBB72_7:
	LONG $0x08558949               // movq         %rdx, $8(%r13)
	WORD $0xf289                   // movl         %esi, %edx
	WORD $0xca0f                   // bswapl       %edx
	LONG $0x00458b49               // movq         (%r13), %rax
	WORD $0x1489; BYTE $0x08       // movl         %edx, (%rax,%rcx)
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0199840f; WORD $0x0000 // je           LBB72_23, $409(%rip)
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	LONG $0x04c18348               // addq         $4, %rcx
	LONG $0x330c8d4e               // leaq         (%rbx,%r14), %r9
	LONG $0x10fe8348               // cmpq         $16, %rsi
	LONG $0x0012820f; WORD $0x0000 // jb           LBB72_10, $18(%rip)

LBB72_9:
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	WORD $0x294c; BYTE $0xc8       // subq         %r9, %rax
	LONG $0x00803d48; WORD $0x0000 // cmpq         $128, %rax
	LONG $0x002a830f; WORD $0x0000 // jae          LBB72_14, $42(%rip)

LBB72_10:
	WORD $0xff31 // xorl         %edi, %edi

LBB72_11:
	WORD $0xc031                                           // xorl         %eax, %eax
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB72_12:
	LONG $0x14b60f41; BYTE $0x39   // movzbl       (%r9,%rdi), %edx
	WORD $0x1488; BYTE $0x39       // movb         %dl, (%rcx,%rdi)
	WORD $0xff48; BYTE $0xc7       // incq         %rdi
	WORD $0x3948; BYTE $0xfe       // cmpq         %rdi, %rsi
	LONG $0xffec850f; WORD $0xffff // jne          LBB72_12, $-20(%rip)
	LONG $0x00014ae9; BYTE $0x00   // jmp          LBB72_13, $330(%rip)

LBB72_14:
	LONG $0x80fe8148; WORD $0x0000; BYTE $0x00 // cmpq         $128, %rsi
	LONG $0x0007830f; WORD $0x0000             // jae          LBB72_17, $7(%rip)
	WORD $0xff31                               // xorl         %edi, %edi
	LONG $0x000106e9; BYTE $0x00               // jmp          LBB72_25, $262(%rip)

LBB72_17:
	WORD $0x8948; BYTE $0xf7                   // movq         %rsi, %rdi
	LONG $0x80e78348                           // andq         $-128, %rdi
	LONG $0x80478d48                           // leaq         $-128(%rdi), %rax
	WORD $0x8949; BYTE $0xc0                   // movq         %rax, %r8
	LONG $0x07e8c149                           // shrq         $7, %r8
	WORD $0xff49; BYTE $0xc0                   // incq         %r8
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x012a840f; WORD $0x0000             // je           LBB72_29, $298(%rip)
	WORD $0x894c; BYTE $0xc0                   // movq         %r8, %rax
	LONG $0xfee08348                           // andq         $-2, %rax
	LONG $0x1e148d49                           // leaq         (%r14,%rbx), %rdx
	LONG $0xe0c28148; WORD $0x0000; BYTE $0x00 // addq         $224, %rdx
	WORD $0xdb31                               // xorl         %ebx, %ebx
	BYTE $0x90                                 // .p2align 4, 0x90

LBB72_19:
	QUAD $0xffff201a8410fcc5; BYTE $0xff       // vmovups      $-224(%rdx,%rbx), %ymm0
	QUAD $0xffff401a8c10fcc5; BYTE $0xff       // vmovups      $-192(%rdx,%rbx), %ymm1
	QUAD $0xffff601a9410fcc5; BYTE $0xff       // vmovups      $-160(%rdx,%rbx), %ymm2
	LONG $0x5c10fcc5; WORD $0x801a             // vmovups      $-128(%rdx,%rbx), %ymm3
	LONG $0x0411fcc5; BYTE $0x19               // vmovups      %ymm0, (%rcx,%rbx)
	LONG $0x4c11fcc5; WORD $0x2019             // vmovups      %ymm1, $32(%rcx,%rbx)
	LONG $0x5411fcc5; WORD $0x4019             // vmovups      %ymm2, $64(%rcx,%rbx)
	LONG $0x5c11fcc5; WORD $0x6019             // vmovups      %ymm3, $96(%rcx,%rbx)
	LONG $0x4410fcc5; WORD $0xa01a             // vmovups      $-96(%rdx,%rbx), %ymm0
	LONG $0x4c10fcc5; WORD $0xc01a             // vmovups      $-64(%rdx,%rbx), %ymm1
	LONG $0x5410fcc5; WORD $0xe01a             // vmovups      $-32(%rdx,%rbx), %ymm2
	LONG $0x1c10fcc5; BYTE $0x1a               // vmovups      (%rdx,%rbx), %ymm3
	QUAD $0x000080198411fcc5; BYTE $0x00       // vmovups      %ymm0, $128(%rcx,%rbx)
	QUAD $0x0000a0198c11fcc5; BYTE $0x00       // vmovups      %ymm1, $160(%rcx,%rbx)
	QUAD $0x0000c0199411fcc5; BYTE $0x00       // vmovups      %ymm2, $192(%rcx,%rbx)
	QUAD $0x0000e0199c11fcc5; BYTE $0x00       // vmovups      %ymm3, $224(%rcx,%rbx)
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // addq         $256, %rbx
	LONG $0xfec08348                           // addq         $-2, %rax
	LONG $0xff7c850f; WORD $0xffff             // jne          LBB72_19, $-132(%rip)
	LONG $0x01c0f641                           // testb        $1, %r8b
	LONG $0x0032840f; WORD $0x0000             // je           LBB72_22, $50(%rip)

LBB72_21:
	LONG $0x107cc1c4; WORD $0x1904             // vmovups      (%r9,%rbx), %ymm0
	LONG $0x107cc1c4; WORD $0x194c; BYTE $0x20 // vmovups      $32(%r9,%rbx), %ymm1
	LONG $0x107cc1c4; WORD $0x1954; BYTE $0x40 // vmovups      $64(%r9,%rbx), %ymm2
	LONG $0x107cc1c4; WORD $0x195c; BYTE $0x60 // vmovups      $96(%r9,%rbx), %ymm3
	LONG $0x0411fcc5; BYTE $0x19               // vmovups      %ymm0, (%rcx,%rbx)
	LONG $0x4c11fcc5; WORD $0x2019             // vmovups      %ymm1, $32(%rcx,%rbx)
	LONG $0x5411fcc5; WORD $0x4019             // vmovups      %ymm2, $64(%rcx,%rbx)
	LONG $0x5c11fcc5; WORD $0x6019             // vmovups      %ymm3, $96(%rcx,%rbx)

LBB72_22:
	WORD $0x3948; BYTE $0xfe       // cmpq         %rdi, %rsi
	LONG $0x0038840f; WORD $0x0000 // je           LBB72_23, $56(%rip)
	LONG $0x70c6f640               // testb        $112, %sil
	LONG $0xfebe840f; WORD $0xffff // je           LBB72_11, $-322(%rip)

LBB72_25:
	WORD $0x8948; BYTE $0xf8 // movq         %rdi, %rax
	WORD $0x8948; BYTE $0xf7 // movq         %rsi, %rdi
	LONG $0xf0e78348         // andq         $-16, %rdi
	WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB72_26:
	LONG $0x1078c1c4; WORD $0x0104 // vmovups      (%r9,%rax), %xmm0
	LONG $0x0411f8c5; BYTE $0x01   // vmovups      %xmm0, (%rcx,%rax)
	LONG $0x10c08348               // addq         $16, %rax
	WORD $0x3948; BYTE $0xc7       // cmpq         %rax, %rdi
	LONG $0xffe8850f; WORD $0xffff // jne          LBB72_26, $-24(%rip)
	WORD $0x3948; BYTE $0xfe       // cmpq         %rdi, %rsi
	LONG $0xfe90850f; WORD $0xffff // jne          LBB72_11, $-368(%rip)

LBB72_23:
	WORD $0xc031 // xorl         %eax, %eax

LBB72_13:
	LONG $0x18c48348         // addq         $24, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB72_29:
	WORD $0xdb31                   // xorl         %ebx, %ebx
	LONG $0x01c0f641               // testb        $1, %r8b
	LONG $0xff6d850f; WORD $0xffff // jne          LBB72_21, $-147(%rip)
	LONG $0xffff9ae9; BYTE $0xff   // jmp          LBB72_22, $-102(%rip)

LBB72_30:
	LONG $0x087d8b49               // movq         $8(%r13), %rdi
	LONG $0x04478d4c               // leaq         $4(%rdi), %r8
	LONG $0x104d8b49               // movq         $16(%r13), %rcx
	WORD $0x894c; BYTE $0xc0       // movq         %r8, %rax
	WORD $0x2948; BYTE $0xc8       // subq         %rcx, %rax
	LONG $0xfde0870f; WORD $0xffff // ja           LBB72_5, $-544(%rip)
	LONG $0x004d8b4d               // movq         (%r13), %r9
	LONG $0x0845894d               // movq         %r8, $8(%r13)
	QUAD $0xffffffffd045c748       // movq         $-1, $-48(%rbp)
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0014840f; WORD $0x0000 // je           LBB72_34, $20(%rip)
	LONG $0x30148d49               // leaq         (%r8,%rsi), %rdx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0x2948; BYTE $0xc8       // subq         %rcx, %rax
	LONG $0xfdb7870f; WORD $0xffff // ja           LBB72_5, $-585(%rip)
	LONG $0x08558949               // movq         %rdx, $8(%r13)

LBB72_34:
	LONG $0xc87d8948               // movq         %rdi, $-56(%rbp)
	WORD $0x8b48; BYTE $0x3b       // movq         (%rbx), %rdi
	WORD $0x014c; BYTE $0xf7       // addq         %r14, %rdi
	LONG $0x01148d4b               // leaq         (%r9,%r8), %rdx
	LONG $0xd04d8d48               // leaq         $-48(%rbp), %rcx
	WORD $0x894c; BYTE $0xc3       // movq         %r8, %rbx
	WORD $0x894d; BYTE $0xe0       // movq         %r12, %r8
	WORD $0x894d; BYTE $0xcc       // movq         %r9, %r12
	LONG $0xff7f25e8; BYTE $0xff   // callq        _unquote, $-32987(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x001b880f; WORD $0x0000 // js           LBB72_36, $27(%rip)
	WORD $0x8948; BYTE $0xc1       // movq         %rax, %rcx
	WORD $0x0148; BYTE $0xd9       // addq         %rbx, %rcx
	LONG $0x084d8949               // movq         %rcx, $8(%r13)
	WORD $0xc80f                   // bswapl       %eax
	LONG $0xc84d8b48               // movq         $-56(%rbp), %rcx
	LONG $0x0c048941               // movl         %eax, (%r12,%rcx)
	WORD $0xc031                   // xorl         %eax, %eax
	LONG $0xffff54e9; BYTE $0xff   // jmp          LBB72_13, $-172(%rip)

LBB72_36:
	WORD $0xd8f7                   // negl         %eax
	LONG $0x28e6c149               // shlq         $40, %r14
	WORD $0x8b49; BYTE $0x0f       // movq         (%r15), %rcx
	LONG $0x08e1c148               // shlq         $8, %rcx
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	WORD $0x0948; BYTE $0xc8       // orq          %rcx, %rax
	WORD $0x094c; BYTE $0xf0       // orq          %r14, %rax
	LONG $0xffff39e9; BYTE $0xff   // jmp          LBB72_13, $-199(%rip)
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_j2t_binary:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	WORD $0x5541                   // pushq        %r13
	WORD $0x5441                   // pushq        %r12
	BYTE $0x53                     // pushq        %rbx
	LONG $0x18ec8348               // subq         $24, %rsp
	WORD $0x8949; BYTE $0xd6       // movq         %rdx, %r14
	WORD $0x8949; BYTE $0xf4       // movq         %rsi, %r12
	WORD $0x8948; BYTE $0xfb       // movq         %rdi, %rbx
	WORD $0x8b4c; BYTE $0x3a       // movq         (%rdx), %r15
	LONG $0xc8558d48               // leaq         $-56(%rbp), %rdx
	WORD $0x8948; BYTE $0xf7       // movq         %rsi, %rdi
	WORD $0x894c; BYTE $0xfe       // movq         %r15, %rsi
	LONG $0xffa6e4e8; BYTE $0xff   // callq        _advance_string, $-22812(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x008d880f; WORD $0x0000 // js           LBB73_1, $141(%rip)
	WORD $0x8949; BYTE $0x06       // movq         %rax, (%r14)
	LONG $0x086b8b4c               // movq         $8(%rbx), %r13
	LONG $0x04558d49               // leaq         $4(%r13), %rdx
	WORD $0x8948; BYTE $0xd1       // movq         %rdx, %rcx
	LONG $0x104b2b48               // subq         $16(%rbx), %rcx
	LONG $0x000d860f; WORD $0x0000 // jbe          LBB73_3, $13(%rip)
	LONG $0x08e1c148               // shlq         $8, %rcx
	LONG $0x11c98348               // orq          $17, %rcx
	LONG $0x000056e9; BYTE $0x00   // jmp          LBB73_6, $86(%rip)

LBB73_3:
	WORD $0x8b48; BYTE $0x0b       // movq         (%rbx), %rcx
	LONG $0xd04d8948               // movq         %rcx, $-48(%rbp)
	WORD $0x894c; BYTE $0xf9       // movq         %r15, %rcx
	WORD $0xf748; BYTE $0xd1       // notq         %rcx
	WORD $0x0148; BYTE $0xc8       // addq         %rcx, %rax
	LONG $0x08538948               // movq         %rdx, $8(%rbx)
	LONG $0x243c034d               // addq         (%r12), %r15
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	WORD $0x894c; BYTE $0xfe       // movq         %r15, %rsi
	WORD $0x8948; BYTE $0xc2       // movq         %rax, %rdx
	WORD $0xc931                   // xorl         %ecx, %ecx
	LONG $0xffd09ee8; BYTE $0xff   // callq        _b64decode, $-12130(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0011880f; WORD $0x0000 // js           LBB73_4, $17(%rip)
	WORD $0xc80f                   // bswapl       %eax
	LONG $0xd04d8b48               // movq         $-48(%rbp), %rcx
	LONG $0x29048942               // movl         %eax, (%rcx,%r13)
	WORD $0xc931                   // xorl         %ecx, %ecx
	LONG $0x000014e9; BYTE $0x00   // jmp          LBB73_6, $20(%rip)

LBB73_4:
	WORD $0xd0f7             // notl         %eax
	LONG $0x28e0c148         // shlq         $40, %rax
	WORD $0x8b49; BYTE $0x0e // movq         (%r14), %rcx
	LONG $0x08e1c148         // shlq         $8, %rcx
	WORD $0x0948; BYTE $0xc1 // orq          %rax, %rcx
	LONG $0x0ec98348         // orq          $14, %rcx

LBB73_6:
	WORD $0x8948; BYTE $0xc8 // movq         %rcx, %rax
	LONG $0x18c48348         // addq         $24, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB73_1:
	WORD $0xd8f7                 // negl         %eax
	LONG $0x28e7c149             // shlq         $40, %r15
	WORD $0x8b49; BYTE $0x16     // movq         (%r14), %rdx
	LONG $0x08e2c148             // shlq         $8, %rdx
	WORD $0xb60f; BYTE $0xc8     // movzbl       %al, %ecx
	WORD $0x0948; BYTE $0xd1     // orq          %rdx, %rcx
	WORD $0x094c; BYTE $0xf9     // orq          %r15, %rcx
	LONG $0xffffd3e9; BYTE $0xff // jmp          LBB73_6, $-45(%rip)
	WORD $0x9090; BYTE $0x90     // .p2align 4, 0x90

_j2t_map_key:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x20ec8348               // subq         $32, %rsp
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	LONG $0x09b60f44               // movzbl       (%rcx), %r9d
	LONG $0x0bf98349               // cmpq         $11, %r9
	LONG $0x007b870f; WORD $0x0000 // ja           LBB74_28, $123(%rip)
	LONG $0x0558ba41; WORD $0x0000 // movl         $1368, %r10d
	LONG $0xcaa30f4d               // btq          %r9, %r10
	LONG $0x0032830f; WORD $0x0000 // jae          LBB74_2, $50(%rip)
	LONG $0xe8758948               // movq         %rsi, $-24(%rbp)
	LONG $0xf0558948               // movq         %rdx, $-16(%rbp)
	QUAD $0x00000000f845c748       // movq         $0, $-8(%rbp)
	LONG $0xe8558d48               // leaq         $-24(%rbp), %rdx
	LONG $0xf8458d48               // leaq         $-8(%rbp), %rax
	WORD $0x8948; BYTE $0xce       // movq         %rcx, %rsi
	WORD $0x8948; BYTE $0xc1       // movq         %rax, %rcx
	LONG $0xfff914e8; BYTE $0xff   // callq        _j2t_number, $-1772(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x027e840f; WORD $0x0000 // je           LBB74_30, $638(%rip)
	LONG $0x20c48348               // addq         $32, %rsp
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB74_2:
	LONG $0x0bf98349               // cmpq         $11, %r9
	LONG $0x002f850f; WORD $0x0000 // jne          LBB74_28, $47(%rip)
	LONG $0x08478b4c               // movq         $8(%rdi), %r8
	WORD $0x8948; BYTE $0xd1       // movq         %rdx, %rcx
	LONG $0x04c18348               // addq         $4, %rcx
	LONG $0x0033840f; WORD $0x0000 // je           LBB74_4, $51(%rip)
	WORD $0x014c; BYTE $0xc1       // addq         %r8, %rcx
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	LONG $0x10472b48               // subq         $16(%rdi), %rax
	LONG $0x0047860f; WORD $0x0000 // jbe          LBB74_6, $71(%rip)
	LONG $0x08e0c148               // shlq         $8, %rax
	LONG $0x11c88348               // orq          $17, %rax
	LONG $0x20c48348               // addq         $32, %rsp
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB74_28:
	LONG $0x28e1c149         // shlq         $40, %r9
	LONG $0x08e0c148         // shlq         $8, %rax
	WORD $0x094c; BYTE $0xc8 // orq          %r9, %rax
	LONG $0x0bc88348         // orq          $11, %rax
	LONG $0x20c48348         // addq         $32, %rsp
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB74_4:
	WORD $0xd089                   // movl         %edx, %eax
	WORD $0xc80f                   // bswapl       %eax
	WORD $0x8b48; BYTE $0x0f       // movq         (%rdi), %rcx
	LONG $0x01048942               // movl         %eax, (%rcx,%r8)
	LONG $0x01148d4e               // leaq         (%rcx,%r8), %r10
	LONG $0x04c28349               // addq         $4, %r10
	WORD $0xc931                   // xorl         %ecx, %ecx
	LONG $0x10fa8348               // cmpq         $16, %rdx
	LONG $0x0031830f; WORD $0x0000 // jae          LBB74_9, $49(%rip)
	LONG $0x000194e9; BYTE $0x00   // jmp          LBB74_23, $404(%rip)

LBB74_6:
	LONG $0x084f8948               // movq         %rcx, $8(%rdi)
	WORD $0xd189                   // movl         %edx, %ecx
	WORD $0xc90f                   // bswapl       %ecx
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	LONG $0x000c8942               // movl         %ecx, (%rax,%r8)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x01ee840f; WORD $0x0000 // je           LBB74_30, $494(%rip)
	LONG $0x00148d4e               // leaq         (%rax,%r8), %r10
	LONG $0x04c28349               // addq         $4, %r10
	WORD $0xc931                   // xorl         %ecx, %ecx
	LONG $0x10fa8348               // cmpq         $16, %rdx
	LONG $0x0168820f; WORD $0x0000 // jb           LBB74_23, $360(%rip)

LBB74_9:
	WORD $0x894c; BYTE $0xd7                   // movq         %r10, %rdi
	WORD $0x2948; BYTE $0xf7                   // subq         %rsi, %rdi
	LONG $0x80ff8148; WORD $0x0000; BYTE $0x00 // cmpq         $128, %rdi
	LONG $0x0155820f; WORD $0x0000             // jb           LBB74_23, $341(%rip)
	LONG $0x80fa8148; WORD $0x0000; BYTE $0x00 // cmpq         $128, %rdx
	LONG $0x0007830f; WORD $0x0000             // jae          LBB74_12, $7(%rip)
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0x000114e9; BYTE $0x00               // jmp          LBB74_20, $276(%rip)

LBB74_12:
	WORD $0x8948; BYTE $0xd1             // movq         %rdx, %rcx
	LONG $0x80e18348                     // andq         $-128, %rcx
	LONG $0x80798d48                     // leaq         $-128(%rcx), %rdi
	WORD $0x8949; BYTE $0xf8             // movq         %rdi, %r8
	LONG $0x07e8c149                     // shrq         $7, %r8
	WORD $0xff49; BYTE $0xc0             // incq         %r8
	WORD $0x8548; BYTE $0xff             // testq        %rdi, %rdi
	LONG $0x00a6840f; WORD $0x0000       // je           LBB74_13, $166(%rip)
	WORD $0x894d; BYTE $0xc1             // movq         %r8, %r9
	LONG $0xfee18349                     // andq         $-2, %r9
	WORD $0xff31                         // xorl         %edi, %edi
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB74_15:
	LONG $0x0410fcc5; BYTE $0x3e               // vmovups      (%rsi,%rdi), %ymm0
	LONG $0x4c10fcc5; WORD $0x203e             // vmovups      $32(%rsi,%rdi), %ymm1
	LONG $0x5410fcc5; WORD $0x403e             // vmovups      $64(%rsi,%rdi), %ymm2
	LONG $0x5c10fcc5; WORD $0x603e             // vmovups      $96(%rsi,%rdi), %ymm3
	LONG $0x117cc1c4; WORD $0x3a04             // vmovups      %ymm0, (%r10,%rdi)
	LONG $0x117cc1c4; WORD $0x3a4c; BYTE $0x20 // vmovups      %ymm1, $32(%r10,%rdi)
	LONG $0x117cc1c4; WORD $0x3a54; BYTE $0x40 // vmovups      %ymm2, $64(%r10,%rdi)
	LONG $0x117cc1c4; WORD $0x3a5c; BYTE $0x60 // vmovups      %ymm3, $96(%r10,%rdi)
	QUAD $0x0000803e8410fcc5; BYTE $0x00       // vmovups      $128(%rsi,%rdi), %ymm0
	QUAD $0x0000a03e8c10fcc5; BYTE $0x00       // vmovups      $160(%rsi,%rdi), %ymm1
	QUAD $0x0000c03e9410fcc5; BYTE $0x00       // vmovups      $192(%rsi,%rdi), %ymm2
	QUAD $0x0000e03e9c10fcc5; BYTE $0x00       // vmovups      $224(%rsi,%rdi), %ymm3
	QUAD $0x00803a84117cc1c4; WORD $0x0000     // vmovups      %ymm0, $128(%r10,%rdi)
	QUAD $0x00a03a8c117cc1c4; WORD $0x0000     // vmovups      %ymm1, $160(%r10,%rdi)
	QUAD $0x00c03a94117cc1c4; WORD $0x0000     // vmovups      %ymm2, $192(%r10,%rdi)
	QUAD $0x00e03a9c117cc1c4; WORD $0x0000     // vmovups      %ymm3, $224(%r10,%rdi)
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // addq         $256, %rdi
	LONG $0xfec18349                           // addq         $-2, %r9
	LONG $0xff71850f; WORD $0xffff             // jne          LBB74_15, $-143(%rip)
	LONG $0x000002e9; BYTE $0x00               // jmp          LBB74_16, $2(%rip)

LBB74_13:
	WORD $0xff31 // xorl         %edi, %edi

LBB74_16:
	LONG $0x01c0f641                           // testb        $1, %r8b
	LONG $0x0032840f; WORD $0x0000             // je           LBB74_18, $50(%rip)
	LONG $0x0410fcc5; BYTE $0x3e               // vmovups      (%rsi,%rdi), %ymm0
	LONG $0x4c10fcc5; WORD $0x203e             // vmovups      $32(%rsi,%rdi), %ymm1
	LONG $0x5410fcc5; WORD $0x403e             // vmovups      $64(%rsi,%rdi), %ymm2
	LONG $0x5c10fcc5; WORD $0x603e             // vmovups      $96(%rsi,%rdi), %ymm3
	LONG $0x117cc1c4; WORD $0x3a04             // vmovups      %ymm0, (%r10,%rdi)
	LONG $0x117cc1c4; WORD $0x3a4c; BYTE $0x20 // vmovups      %ymm1, $32(%r10,%rdi)
	LONG $0x117cc1c4; WORD $0x3a54; BYTE $0x40 // vmovups      %ymm2, $64(%r10,%rdi)
	LONG $0x117cc1c4; WORD $0x3a5c; BYTE $0x60 // vmovups      %ymm3, $96(%r10,%rdi)

LBB74_18:
	WORD $0x3948; BYTE $0xd1       // cmpq         %rdx, %rcx
	LONG $0x00a8840f; WORD $0x0000 // je           LBB74_30, $168(%rip)
	WORD $0xc2f6; BYTE $0x70       // testb        $112, %dl
	LONG $0x002d840f; WORD $0x0000 // je           LBB74_23, $45(%rip)

LBB74_20:
	WORD $0x8948; BYTE $0xcf // movq         %rcx, %rdi
	WORD $0x8948; BYTE $0xd1 // movq         %rdx, %rcx
	LONG $0xf0e18348         // andq         $-16, %rcx
	WORD $0x9090             // .p2align 4, 0x90

LBB74_21:
	LONG $0x0410f8c5; BYTE $0x3e   // vmovups      (%rsi,%rdi), %xmm0
	LONG $0x1178c1c4; WORD $0x3a04 // vmovups      %xmm0, (%r10,%rdi)
	LONG $0x10c78348               // addq         $16, %rdi
	WORD $0x3948; BYTE $0xf9       // cmpq         %rdi, %rcx
	LONG $0xffe8850f; WORD $0xffff // jne          LBB74_21, $-24(%rip)
	WORD $0x3948; BYTE $0xd1       // cmpq         %rdx, %rcx
	LONG $0x0072840f; WORD $0x0000 // je           LBB74_30, $114(%rip)

LBB74_23:
	WORD $0x8949; BYTE $0xc8             // movq         %rcx, %r8
	WORD $0xf749; BYTE $0xd0             // notq         %r8
	WORD $0x0149; BYTE $0xd0             // addq         %rdx, %r8
	WORD $0x8948; BYTE $0xd7             // movq         %rdx, %rdi
	LONG $0x03e78348                     // andq         $3, %rdi
	LONG $0x001d840f; WORD $0x0000       // je           LBB74_25, $29(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB74_24:
	LONG $0x0e04b60f               // movzbl       (%rsi,%rcx), %eax
	LONG $0x0a048841               // movb         %al, (%r10,%rcx)
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	WORD $0xff48; BYTE $0xcf       // decq         %rdi
	LONG $0xffec850f; WORD $0xffff // jne          LBB74_24, $-20(%rip)

LBB74_25:
	LONG $0x03f88349               // cmpq         $3, %r8
	LONG $0x0035820f; WORD $0x0000 // jb           LBB74_30, $53(%rip)
	WORD $0x9090                   // .p2align 4, 0x90

LBB74_26:
	LONG $0x0e04b60f               // movzbl       (%rsi,%rcx), %eax
	LONG $0x0a048841               // movb         %al, (%r10,%rcx)
	LONG $0x0e44b60f; BYTE $0x01   // movzbl       $1(%rsi,%rcx), %eax
	LONG $0x0a448841; BYTE $0x01   // movb         %al, $1(%r10,%rcx)
	LONG $0x0e44b60f; BYTE $0x02   // movzbl       $2(%rsi,%rcx), %eax
	LONG $0x0a448841; BYTE $0x02   // movb         %al, $2(%r10,%rcx)
	LONG $0x0e44b60f; BYTE $0x03   // movzbl       $3(%rsi,%rcx), %eax
	LONG $0x0a448841; BYTE $0x03   // movb         %al, $3(%r10,%rcx)
	LONG $0x04c18348               // addq         $4, %rcx
	WORD $0x3948; BYTE $0xca       // cmpq         %rcx, %rdx
	LONG $0xffcd850f; WORD $0xffff // jne          LBB74_26, $-51(%rip)

LBB74_30:
	WORD $0xc031             // xorl         %eax, %eax
	LONG $0x20c48348         // addq         $32, %rsp
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq
	WORD $0x9090             // .p2align 4, 0x90

_j2t_find_field_key:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	WORD $0x5441                   // pushq        %r12
	BYTE $0x53                     // pushq        %rbx
	WORD $0x8949; BYTE $0xf8       // movq         %rdi, %r8
	LONG $0x707e8b48               // movq         $112(%rsi), %rdi
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x013b850f; WORD $0x0000 // jne          LBB75_21, $315(%rip)
	LONG $0x687e8b48               // movq         $104(%rsi), %rdi
	LONG $0x08488b4d               // movq         $8(%r8), %r9
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x0102840f; WORD $0x0000 // je           LBB75_2, $258(%rip)
	LONG $0xff798d4d               // leaq         $-1(%r9), %r15
	LONG $0x10778b4c               // movq         $16(%rdi), %r14
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x0101840f; WORD $0x0000 // je           LBB75_5, $257(%rip)
	LONG $0x305f8d48               // leaq         $48(%rdi), %rbx
	LONG $0x08578b4c               // movq         $8(%rdi), %r10
	LONG $0x38c78348               // addq         $56, %rdi
	WORD $0x8b4d; BYTE $0x18       // movq         (%r8), %r11
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0xd231                   // xorl         %edx, %edx

	// .p2align 4, 0x90
LBB75_9:
	LONG $0xd20c8b49               // movq         (%r10,%rdx,8), %rcx
	WORD $0x394c; BYTE $0xf9       // cmpq         %r15, %rcx
	LONG $0xcf430f49               // cmovaeq      %r15, %rcx
	LONG $0x0cb60f41; BYTE $0x0b   // movzbl       (%r11,%rcx), %ecx
	WORD $0xf980; BYTE $0x2e       // cmpb         $46, %cl
	WORD $0xd980; BYTE $0x00       // sbbb         $0, %cl
	WORD $0xc180; BYTE $0xd2       // addb         $-46, %cl
	WORD $0xb60f; BYTE $0xf1       // movzbl       %cl, %esi
	WORD $0x3948; BYTE $0x37       // cmpq         %rsi, (%rdi)
	LONG $0x00c0820f; WORD $0x0000 // jb           LBB75_20, $192(%rip)
	WORD $0x8b48; BYTE $0x3b       // movq         (%rbx), %rdi
	LONG $0x05e6c148               // shlq         $5, %rsi
	LONG $0x370c8b48               // movq         (%rdi,%rsi), %rcx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x00ac840f; WORD $0x0000 // je           LBB75_20, $172(%rip)
	WORD $0x0148; BYTE $0xf7       // addq         %rsi, %rdi
	LONG $0x085f8d48               // leaq         $8(%rdi), %rbx
	LONG $0x10c78348               // addq         $16, %rdi
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0x3949; BYTE $0xd6       // cmpq         %rdx, %r14
	LONG $0xffb0850f; WORD $0xffff // jne          LBB75_9, $-80(%rip)
	LONG $0x08518b4c               // movq         $8(%rcx), %r10
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x00a2840f; WORD $0x0000 // je           LBB75_7, $162(%rip)

LBB75_12:
	WORD $0x8b4c; BYTE $0x19       // movq         (%rcx), %r11
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	LONG $0x000012e9; BYTE $0x00   // jmp          LBB75_13, $18(%rip)
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB75_19:
	WORD $0xff49; BYTE $0xc4       // incq         %r12
	WORD $0x394d; BYTE $0xd4       // cmpq         %r10, %r12
	LONG $0x0069840f; WORD $0x0000 // je           LBB75_20, $105(%rip)

LBB75_13:
	LONG $0x640c8d4b                                       // leaq         (%r12,%r12,2), %rcx
	LONG $0xcb4c3b4d; BYTE $0x10                           // cmpq         $16(%r11,%rcx,8), %r9
	LONG $0xffe5850f; WORD $0xffff                         // jne          LBB75_19, $-27(%rip)
	LONG $0xcb3c8d49                                       // leaq         (%r11,%rcx,8), %rdi
	WORD $0x8b4d; BYTE $0x30                               // movq         (%r8), %r14
	LONG $0x08578b48                                       // movq         $8(%rdi), %rdx
	WORD $0x8a41; BYTE $0x0e                               // movb         (%r14), %cl
	WORD $0x0a3a                                           // cmpb         (%rdx), %cl
	LONG $0xffcf850f; WORD $0xffff                         // jne          LBB75_19, $-49(%rip)
	WORD $0xf631                                           // xorl         %esi, %esi
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB75_16:
	WORD $0x3949; BYTE $0xf7       // cmpq         %rsi, %r15
	LONG $0x0029840f; WORD $0x0000 // je           LBB75_3, $41(%rip)
	LONG $0x5cb60f41; WORD $0x0136 // movzbl       $1(%r14,%rsi), %ebx
	LONG $0x014e8d48               // leaq         $1(%rsi), %rcx
	LONG $0x01325c3a               // cmpb         $1(%rdx,%rsi), %bl
	WORD $0x8948; BYTE $0xce       // movq         %rcx, %rsi
	LONG $0xffe0840f; WORD $0xffff // je           LBB75_16, $-32(%rip)
	WORD $0x394c; BYTE $0xc9       // cmpq         %r9, %rcx
	LONG $0xff97820f; WORD $0xffff // jb           LBB75_19, $-105(%rip)
	LONG $0x000004e9; BYTE $0x00   // jmp          LBB75_3, $4(%rip)

LBB75_2:
	LONG $0x20c78348 // addq         $32, %rdi

LBB75_3:
	WORD $0x8b48; BYTE $0x07 // movq         (%rdi), %rax

LBB75_20:
	BYTE $0x5b   // popq         %rbx
	WORD $0x5c41 // popq         %r12
	WORD $0x5e41 // popq         %r14
	WORD $0x5f41 // popq         %r15
	BYTE $0x5d   // popq         %rbp
	BYTE $0xc3   // retq

LBB75_5:
	LONG $0x284f8b48               // movq         $40(%rdi), %rcx
	LONG $0x08518b4c               // movq         $8(%rcx), %r10
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0xff5e850f; WORD $0xffff // jne          LBB75_12, $-162(%rip)

LBB75_7:
	WORD $0xc031                 // xorl         %eax, %eax
	LONG $0xffffdfe9; BYTE $0xff // jmp          LBB75_20, $-33(%rip)

LBB75_21:
	WORD $0x894c; BYTE $0xc6               // movq         %r8, %rsi
	BYTE $0x5b                             // popq         %rbx
	WORD $0x5c41                           // popq         %r12
	WORD $0x5e41                           // popq         %r14
	WORD $0x5f41                           // popq         %r15
	BYTE $0x5d                             // popq         %rbp
	LONG $0xffda4ae9; BYTE $0xff           // jmp          _hm_get, $-9654(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_j2t_read_key:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	WORD $0x5541                   // pushq        %r13
	WORD $0x5441                   // pushq        %r12
	BYTE $0x53                     // pushq        %rbx
	LONG $0x18ec8348               // subq         $24, %rsp
	WORD $0x894d; BYTE $0xc6       // movq         %r8, %r14
	WORD $0x8949; BYTE $0xcf       // movq         %rcx, %r15
	WORD $0x8949; BYTE $0xd4       // movq         %rdx, %r12
	WORD $0x8949; BYTE $0xf5       // movq         %rsi, %r13
	LONG $0xc87d8948               // movq         %rdi, $-56(%rbp)
	WORD $0x8b48; BYTE $0x1a       // movq         (%rdx), %rbx
	QUAD $0xffffffffd045c748       // movq         $-1, $-48(%rbp)
	LONG $0xd0558d48               // leaq         $-48(%rbp), %rdx
	WORD $0x8948; BYTE $0xf7       // movq         %rsi, %rdi
	WORD $0x8948; BYTE $0xde       // movq         %rbx, %rsi
	LONG $0xffa1a5e8; BYTE $0xff   // callq        _advance_string, $-24155(%rip)
	WORD $0x8948; BYTE $0xc1       // movq         %rax, %rcx
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0044880f; WORD $0x0000 // js           LBB76_1, $68(%rip)
	LONG $0x240c8949               // movq         %rcx, (%r12)
	WORD $0x8948; BYTE $0xd8       // movq         %rbx, %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	WORD $0x0148; BYTE $0xc8       // addq         %rcx, %rax
	LONG $0x007d8b49               // movq         (%r13), %rdi
	WORD $0x0148; BYTE $0xdf       // addq         %rbx, %rdi
	LONG $0xd0558b48               // movq         $-48(%rbp), %rdx
	WORD $0x3948; BYTE $0xda       // cmpq         %rbx, %rdx
	LONG $0x00098c0f; WORD $0x0000 // jl           LBB76_8, $9(%rip)
	WORD $0x3948; BYTE $0xca       // cmpq         %rcx, %rdx
	LONG $0x00368c0f; WORD $0x0000 // jl           LBB76_4, $54(%rip)

LBB76_8:
	WORD $0x8949; BYTE $0x3f // movq         %rdi, (%r15)
	WORD $0x8949; BYTE $0x06 // movq         %rax, (%r14)
	WORD $0xc931             // xorl         %ecx, %ecx

LBB76_9:
	WORD $0x8948; BYTE $0xc8 // movq         %rcx, %rax
	LONG $0x18c48348         // addq         $24, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB76_1:
	WORD $0xd9f7                 // negl         %ecx
	LONG $0x28e3c148             // shlq         $40, %rbx
	LONG $0x24048b49             // movq         (%r12), %rax
	LONG $0x08e0c148             // shlq         $8, %rax
	WORD $0xb60f; BYTE $0xc9     // movzbl       %cl, %ecx
	WORD $0x0948; BYTE $0xc1     // orq          %rax, %rcx
	WORD $0x0948; BYTE $0xd9     // orq          %rbx, %rcx
	LONG $0xffffd2e9; BYTE $0xff // jmp          LBB76_9, $-46(%rip)

LBB76_4:
	WORD $0x8948; BYTE $0xc1       // movq         %rax, %rcx
	LONG $0xc8558b48               // movq         $-56(%rbp), %rdx
	LONG $0x604a2b48               // subq         $96(%rdx), %rcx
	LONG $0x002f870f; WORD $0x0000 // ja           LBB76_5, $47(%rip)
	QUAD $0xffffffffd045c748       // movq         $-1, $-48(%rbp)
	LONG $0x506a8b4c               // movq         $80(%rdx), %r13
	LONG $0xd04d8d48               // leaq         $-48(%rbp), %rcx
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	WORD $0x894c; BYTE $0xea       // movq         %r13, %rdx
	WORD $0x3145; BYTE $0xc0       // xorl         %r8d, %r8d
	LONG $0xff78dae8; BYTE $0xff   // callq        _unquote, $-34598(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0015880f; WORD $0x0000 // js           LBB76_10, $21(%rip)
	WORD $0x894c; BYTE $0xef       // movq         %r13, %rdi
	LONG $0xffff8ae9; BYTE $0xff   // jmp          LBB76_8, $-118(%rip)

LBB76_5:
	LONG $0x08e1c148             // shlq         $8, %rcx
	LONG $0x12c98348             // orq          $18, %rcx
	LONG $0xffff85e9; BYTE $0xff // jmp          LBB76_9, $-123(%rip)

LBB76_10:
	WORD $0xd8f7                 // negl         %eax
	LONG $0x28e3c148             // shlq         $40, %rbx
	LONG $0x24148b49             // movq         (%r12), %rdx
	LONG $0x08e2c148             // shlq         $8, %rdx
	WORD $0xb60f; BYTE $0xc8     // movzbl       %al, %ecx
	WORD $0x0948; BYTE $0xd1     // orq          %rdx, %rcx
	WORD $0x0948; BYTE $0xd9     // orq          %rbx, %rcx
	LONG $0xffff69e9; BYTE $0xff // jmp          LBB76_9, $-151(%rip)

	// .p2align 4, 0x00
LCPI77_0:
	LONG $0x00000001 // .long 1
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0

LCPI77_1:
	LONG $0x43300000 // .long 1127219200
	LONG $0x45300000 // .long 1160773632
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0

LCPI77_2:
	QUAD $0x4330000000000000 // .quad 0x4330000000000000
	QUAD $0x4530000000000000 // .quad 0x4530000000000000

	// .p2align 4, 0x90
_j2t_field_vm:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	WORD $0x5541                   // pushq        %r13
	WORD $0x5441                   // pushq        %r12
	BYTE $0x53                     // pushq        %rbx
	LONG $0x18ec8348               // subq         $24, %rsp
	WORD $0x8948; BYTE $0xcb       // movq         %rcx, %rbx
	WORD $0x8949; BYTE $0xd1       // movq         %rdx, %r9
	WORD $0x8949; BYTE $0xfd       // movq         %rdi, %r13
	LONG $0x20708b4d               // movq         $32(%r8), %r14
	LONG $0x46b70f41; BYTE $0x04   // movzwl       $4(%r14), %eax
	LONG $0x0000ff3d; BYTE $0x00   // cmpl         $255, %eax
	LONG $0x0057870f; WORD $0x0000 // ja           LBB77_4, $87(%rip)
	WORD $0x8949; BYTE $0xf4       // movq         %rsi, %r12
	LONG $0xd05d8948               // movq         %rbx, $-48(%rbp)
	LONG $0x084e8b48               // movq         $8(%rsi), %rcx
	LONG $0x01518d48               // leaq         $1(%rcx), %rdx
	WORD $0x8949; BYTE $0xd7       // movq         %rdx, %r15
	LONG $0x107e2b4c               // subq         $16(%rsi), %r15
	LONG $0x002e870f; WORD $0x0000 // ja           LBB77_3, $46(%rip)
	LONG $0x46b70f41; BYTE $0x06   // movzwl       $6(%r14), %eax
	LONG $0x08768b49               // movq         $8(%r14), %rsi
	WORD $0x1e8a                   // movb         (%rsi), %bl
	LONG $0x24548949; BYTE $0x08   // movq         %rdx, $8(%r12)
	LONG $0x24148b49               // movq         (%r12), %rdx
	WORD $0x1c88; BYTE $0x0a       // movb         %bl, (%rdx,%rcx)
	LONG $0x244c8b49; BYTE $0x08   // movq         $8(%r12), %rcx
	LONG $0x02518d48               // leaq         $2(%rcx), %rdx
	WORD $0x8949; BYTE $0xd7       // movq         %rdx, %r15
	LONG $0x247c2b4d; BYTE $0x10   // subq         $16(%r12), %r15
	LONG $0x008a860f; WORD $0x0000 // jbe          LBB77_7, $138(%rip)

LBB77_3:
	LONG $0x08e7c149             // shlq         $8, %r15
	LONG $0x11cf8349             // orq          $17, %r15
	LONG $0x000204e9; BYTE $0x00 // jmp          LBB77_26, $516(%rip)

LBB77_4:
	WORD $0x8b4c; BYTE $0x23                   // movq         (%rbx), %r12
	WORD $0xff49; BYTE $0xcc                   // decq         %r12
	WORD $0x894c; BYTE $0x23                   // movq         %r12, (%rbx)
	LONG $0x68bd8d49; WORD $0x0300; BYTE $0x00 // leaq         $196712(%r13), %rdi
	QUAD $0xffffff330528f9c5                   // vmovapd      $-205(%rip), %xmm0  /* LCPI77_0+0(%rip) */
	QUAD $0x030068851179c1c4; BYTE $0x00       // vmovupd      %xmm0, $196712(%r13)
	WORD $0x894c; BYTE $0xce                   // movq         %r9, %rsi
	WORD $0x8948; BYTE $0xda                   // movq         %rbx, %rdx
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0xffb31de8; BYTE $0xff               // callq        _fsm_exec, $-19683(%rip)
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x002a880f; WORD $0x0000             // js           LBB77_6, $42(%rip)
	LONG $0x4eb70f41; BYTE $0x06               // movzwl       $6(%r14), %ecx
	LONG $0x888d8941; WORD $0x0380; BYTE $0x00 // movl         %ecx, $229512(%r13)
	LONG $0x8c858941; WORD $0x0380; BYTE $0x00 // movl         %eax, $229516(%r13)
	WORD $0x8b4c; BYTE $0x3b                   // movq         (%rbx), %r15
	LONG $0x90bd8945; WORD $0x0380; BYTE $0x00 // movl         %r15d, $229520(%r13)
	LONG $0x08e7c149                           // shlq         $8, %r15
	LONG $0x18cf8349                           // orq          $24, %r15
	LONG $0x0001a3e9; BYTE $0x00               // jmp          LBB77_26, $419(%rip)

LBB77_6:
	WORD $0xd8f7                 // negl         %eax
	LONG $0x28e4c149             // shlq         $40, %r12
	WORD $0x8b48; BYTE $0x0b     // movq         (%rbx), %rcx
	LONG $0x08e1c148             // shlq         $8, %rcx
	LONG $0xf8b60f44             // movzbl       %al, %r15d
	WORD $0x0949; BYTE $0xcf     // orq          %rcx, %r15
	WORD $0x094d; BYTE $0xe7     // orq          %r12, %r15
	LONG $0x000187e9; BYTE $0x00 // jmp          LBB77_26, $391(%rip)

LBB77_7:
	LONG $0x24548949; BYTE $0x08   // movq         %rdx, $8(%r12)
	LONG $0x08c0c166               // rolw         $8, %ax
	LONG $0x24148b49               // movq         (%r12), %rdx
	LONG $0x0a048966               // movw         %ax, (%rdx,%rcx)
	LONG $0x46b70f41; BYTE $0x04   // movzwl       $4(%r14), %eax
	LONG $0x65f88348               // cmpq         $101, %rax
	LONG $0x0046850f; WORD $0x0000 // jne          LBB77_11, $70(%rip)
	WORD $0x8b49; BYTE $0x01       // movq         (%r9), %rax
	LONG $0xd04d8b48               // movq         $-48(%rbp), %rcx
	WORD $0x8b4c; BYTE $0x39       // movq         (%rcx), %r15
	LONG $0x54be0f4a; WORD $0xff38 // movsbq       $-1(%rax,%r15), %rdx
	LONG $0x22fa8348               // cmpq         $34, %rdx
	LONG $0x0047850f; WORD $0x0000 // jne          LBB77_12, $71(%rip)
	LONG $0x084e8b49               // movq         $8(%r14), %rcx
	WORD $0x3980; BYTE $0x0b       // cmpb         $11, (%rcx)
	LONG $0x0062850f; WORD $0x0000 // jne          LBB77_15, $98(%rip)
	WORD $0x894c; BYTE $0xe7       // movq         %r12, %rdi
	WORD $0x894c; BYTE $0xce       // movq         %r9, %rsi
	LONG $0xd0558b48               // movq         $-48(%rbp), %rdx
	WORD $0xc931                   // xorl         %ecx, %ecx
	LONG $0x18c48348               // addq         $24, %rsp
	BYTE $0x5b                     // popq         %rbx
	WORD $0x5c41                   // popq         %r12
	WORD $0x5d41                   // popq         %r13
	WORD $0x5e41                   // popq         %r14
	WORD $0x5f41                   // popq         %r15
	BYTE $0x5d                     // popq         %rbp
	LONG $0xfff4f8e9; BYTE $0xff   // jmp          _j2t_string, $-2824(%rip)

LBB77_11:
	LONG $0x28e0c148             // shlq         $40, %rax
	LONG $0xd04d8b48             // movq         $-48(%rbp), %rcx
	WORD $0x8b4c; BYTE $0x39     // movq         (%rcx), %r15
	LONG $0x08e7c149             // shlq         $8, %r15
	WORD $0x0949; BYTE $0xc7     // orq          %rax, %r15
	LONG $0x14cf8349             // orq          $20, %r15
	LONG $0x000106e9; BYTE $0x00 // jmp          LBB77_26, $262(%rip)

LBB77_12:
	WORD $0xfa80; BYTE $0x2d       // cmpb         $45, %dl
	LONG $0x0053840f; WORD $0x0000 // je           LBB77_18, $83(%rip)
	WORD $0x428d; BYTE $0xc6       // leal         $-58(%rdx), %eax
	WORD $0xf53c                   // cmpb         $-11, %al
	LONG $0x0048870f; WORD $0x0000 // ja           LBB77_18, $72(%rip)
	LONG $0x28e2c148               // shlq         $40, %rdx
	LONG $0x08e7c149               // shlq         $8, %r15
	WORD $0x0949; BYTE $0xd7       // orq          %rdx, %r15
	LONG $0x02cf8349               // orq          $2, %r15
	LONG $0x0000dee9; BYTE $0x00   // jmp          LBB77_26, $222(%rip)

LBB77_15:
	LONG $0x383c8042; BYTE $0x22   // cmpb         $34, (%rax,%r15)
	LONG $0x003c850f; WORD $0x0000 // jne          LBB77_19, $60(%rip)
	WORD $0x894c; BYTE $0xe7       // movq         %r12, %rdi
	WORD $0x894c; BYTE $0xf6       // movq         %r14, %rsi
	WORD $0x894c; BYTE $0xfa       // movq         %r15, %rdx
	LONG $0xffe57ce8; BYTE $0xff   // callq        _tb_write_default_or_empty, $-6788(%rip)
	WORD $0x8949; BYTE $0xc7       // movq         %rax, %r15
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x00b9850f; WORD $0x0000 // jne          LBB77_26, $185(%rip)
	LONG $0xd0458b48               // movq         $-48(%rbp), %rax
	WORD $0xff48; BYTE $0x00       // incq         (%rax)
	WORD $0x3145; BYTE $0xff       // xorl         %r15d, %r15d
	LONG $0x0000aae9; BYTE $0x00   // jmp          LBB77_26, $170(%rip)

LBB77_18:
	LONG $0xc0558948             // movq         %rdx, $-64(%rbp)
	WORD $0xff49; BYTE $0xcf     // decq         %r15
	LONG $0xd05d8b48             // movq         $-48(%rbp), %rbx
	WORD $0x894c; BYTE $0x3b     // movq         %r15, (%rbx)
	LONG $0x000008e9; BYTE $0x00 // jmp          LBB77_20, $8(%rip)

LBB77_19:
	LONG $0xc0558948 // movq         %rdx, $-64(%rbp)
	LONG $0xd05d8b48 // movq         $-48(%rbp), %rbx

LBB77_20:
	LONG $0x08558d49                           // leaq         $8(%r13), %rdx
	LONG $0xc84d894c                           // movq         %r9, $-56(%rbp)
	WORD $0x894c; BYTE $0xcf                   // movq         %r9, %rdi
	WORD $0x8948; BYTE $0xde                   // movq         %rbx, %rsi
	LONG $0xffa1d3e8; BYTE $0xff               // callq        _vnumber, $-24109(%rip)
	LONG $0x08458b49                           // movq         $8(%r13), %rax
	WORD $0x8948; BYTE $0xc1                   // movq         %rax, %rcx
	LONG $0xfee18348                           // andq         $-2, %rcx
	LONG $0x08f98348                           // cmpq         $8, %rcx
	LONG $0x0055850f; WORD $0x0000             // jne          LBB77_25, $85(%rip)
	LONG $0x084e8b49                           // movq         $8(%r14), %rcx
	WORD $0xb60f; BYTE $0x09                   // movzbl       (%rcx), %ecx
	WORD $0x518d; BYTE $0xfd                   // leal         $-3(%rcx), %edx
	WORD $0xfa80; BYTE $0x08                   // cmpb         $8, %dl
	LONG $0x0066870f; WORD $0x0000             // ja           LBB77_27, $102(%rip)
	WORD $0xb60f; BYTE $0xd2                   // movzbl       %dl, %edx
	LONG $0x55358d48; WORD $0x0002; BYTE $0x00 // leaq         $597(%rip), %rsi  /* LJTI77_0+0(%rip) */
	LONG $0x96146348                           // movslq       (%rsi,%rdx,4), %rdx
	WORD $0x0148; BYTE $0xf2                   // addq         %rsi, %rdx
	JMP  DX

LBB77_23:
	LONG $0x09f88348               // cmpq         $9, %rax
	LONG $0x00cc850f; WORD $0x0000 // jne          LBB77_35, $204(%rip)
	LONG $0x107bc1c4; WORD $0x1845 // vmovsd       $24(%r13), %xmm0
	QUAD $0xfffffd800514f8c5       // vunpcklps    $-640(%rip), %xmm0, %xmm0  /* LCPI77_1+0(%rip) */
	QUAD $0xfffffd88055cf9c5       // vsubpd       $-632(%rip), %xmm0, %xmm0  /* LCPI77_2+0(%rip) */
	LONG $0x0579e3c4; WORD $0x01c8 // vpermilpd    $1, %xmm0, %xmm1
	LONG $0xc058f3c5               // vaddsd       %xmm0, %xmm1, %xmm0
	LONG $0x0000ade9; BYTE $0x00   // jmp          LBB77_36, $173(%rip)

LBB77_25:
	LONG $0x28e0c148         // shlq         $40, %rax
	WORD $0x8b4c; BYTE $0x3b // movq         (%rbx), %r15
	LONG $0x08e7c149         // shlq         $8, %r15
	WORD $0x0949; BYTE $0xc7 // orq          %rax, %r15
	LONG $0x06cf8349         // orq          $6, %r15

LBB77_26:
	WORD $0x894c; BYTE $0xf8 // movq         %r15, %rax
	LONG $0x18c48348         // addq         $24, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB77_27:
	LONG $0x28e1c148             // shlq         $40, %rcx
	LONG $0xd0458b48             // movq         $-48(%rbp), %rax
	WORD $0x8b4c; BYTE $0x38     // movq         (%rax), %r15
	LONG $0x08e7c149             // shlq         $8, %r15
	WORD $0x0949; BYTE $0xcf     // orq          %rcx, %r15
	LONG $0x0bcf8349             // orq          $11, %r15
	LONG $0xffffd3e9; BYTE $0xff // jmp          LBB77_26, $-45(%rip)

LBB77_28:
	LONG $0x09f88348               // cmpq         $9, %rax
	LONG $0x00a6850f; WORD $0x0000 // jne          LBB77_39, $166(%rip)
	LONG $0x4db70f41; BYTE $0x18   // movzwl       $24(%r13), %ecx
	LONG $0x0000a2e9; BYTE $0x00   // jmp          LBB77_40, $162(%rip)

LBB77_30:
	LONG $0x09f88348               // cmpq         $9, %rax
	LONG $0x0145850f; WORD $0x0000 // jne          LBB77_48, $325(%rip)
	LONG $0x18458b41               // movl         $24(%r13), %eax
	LONG $0x000142e9; BYTE $0x00   // jmp          LBB77_49, $322(%rip)

LBB77_32:
	LONG $0xc8458b48             // movq         $-56(%rbp), %rax
	WORD $0x8b48; BYTE $0x30     // movq         (%rax), %rsi
	WORD $0x014c; BYTE $0xfe     // addq         %r15, %rsi
	LONG $0xd0458b48             // movq         $-48(%rbp), %rax
	WORD $0x8b48; BYTE $0x10     // movq         (%rax), %rdx
	WORD $0x294c; BYTE $0xfa     // subq         %r15, %rdx
	WORD $0x894c; BYTE $0xe7     // movq         %r12, %rdi
	LONG $0x18c48348             // addq         $24, %rsp
	BYTE $0x5b                   // popq         %rbx
	WORD $0x5c41                 // popq         %r12
	WORD $0x5d41                 // popq         %r13
	WORD $0x5e41                 // popq         %r14
	WORD $0x5f41                 // popq         %r15
	BYTE $0x5d                   // popq         %rbp
	LONG $0xffdcc9e9; BYTE $0xff // jmp          _tb_write_string, $-9015(%rip)

LBB77_33:
	LONG $0x09f88348               // cmpq         $9, %rax
	LONG $0xc8758b48               // movq         $-56(%rbp), %rsi
	LONG $0x0142850f; WORD $0x0000 // jne          LBB77_52, $322(%rip)
	LONG $0x18458b49               // movq         $24(%r13), %rax
	LONG $0x00013fe9; BYTE $0x00   // jmp          LBB77_53, $319(%rip)

LBB77_35:
	LONG $0x107bc1c4; WORD $0x1045 // vmovsd       $16(%r13), %xmm0

LBB77_36:
	LONG $0xc8758b48               // movq         $-56(%rbp), %rsi
	LONG $0x24448b49; BYTE $0x08   // movq         $8(%r12), %rax
	LONG $0x08488d48               // leaq         $8(%rax), %rcx
	WORD $0x8949; BYTE $0xcf       // movq         %rcx, %r15
	LONG $0x247c2b4d; BYTE $0x10   // subq         $16(%r12), %r15
	LONG $0xfd39870f; WORD $0xffff // ja           LBB77_3, $-711(%rip)
	LONG $0x7ef9e1c4; BYTE $0xc2   // vmovq        %xmm0, %rdx
	WORD $0x0f48; BYTE $0xca       // bswapq       %rdx
	LONG $0x244c8949; BYTE $0x08   // movq         %rcx, $8(%r12)
	LONG $0x240c8b49               // movq         (%r12), %rcx
	LONG $0x01148948               // movq         %rdx, (%rcx,%rax)
	LONG $0x22c07d80               // cmpb         $34, $-64(%rbp)
	LONG $0x0080840f; WORD $0x0000 // je           LBB77_55, $128(%rip)

LBB77_58:
	WORD $0x3145; BYTE $0xff     // xorl         %r15d, %r15d
	LONG $0xffff23e9; BYTE $0xff // jmp          LBB77_26, $-221(%rip)

LBB77_39:
	LONG $0x2c7bc1c4; WORD $0x104d // vcvttsd2si   $16(%r13), %ecx

LBB77_40:
	LONG $0x24548b49; BYTE $0x08   // movq         $8(%r12), %rdx
	LONG $0x02728d48               // leaq         $2(%rdx), %rsi
	WORD $0x8949; BYTE $0xf7       // movq         %rsi, %r15
	LONG $0x247c2b4d; BYTE $0x10   // subq         $16(%r12), %r15
	LONG $0xfcf5870f; WORD $0xffff // ja           LBB77_3, $-779(%rip)
	LONG $0x24748949; BYTE $0x08   // movq         %rsi, $8(%r12)
	LONG $0x08c1c166               // rolw         $8, %cx
	LONG $0x24348b49               // movq         (%r12), %rsi
	LONG $0x160c8966               // movw         %cx, (%rsi,%rdx)

LBB77_42:
	LONG $0x09f88348               // cmpq         $9, %rax
	LONG $0x0009850f; WORD $0x0000 // jne          LBB77_44, $9(%rip)
	LONG $0x18458a41               // movb         $24(%r13), %al
	LONG $0x000006e9; BYTE $0x00   // jmp          LBB77_45, $6(%rip)

LBB77_44:
	LONG $0x2c7bc1c4; WORD $0x1045 // vcvttsd2si   $16(%r13), %eax

LBB77_45:
	LONG $0xc8758b48               // movq         $-56(%rbp), %rsi
	LONG $0x244c8b49; BYTE $0x08   // movq         $8(%r12), %rcx
	LONG $0x01518d48               // leaq         $1(%rcx), %rdx
	WORD $0x8949; BYTE $0xd7       // movq         %rdx, %r15
	LONG $0x247c2b4d; BYTE $0x10   // subq         $16(%r12), %r15
	LONG $0xfcb0870f; WORD $0xffff // ja           LBB77_3, $-848(%rip)
	LONG $0x24548949; BYTE $0x08   // movq         %rdx, $8(%r12)
	LONG $0x24148b49               // movq         (%r12), %rdx
	WORD $0x0488; BYTE $0x0a       // movb         %al, (%rdx,%rcx)
	LONG $0x22c07d80               // cmpb         $34, $-64(%rbp)
	LONG $0xff80850f; WORD $0xffff // jne          LBB77_58, $-128(%rip)

LBB77_55:
	WORD $0x8b48; BYTE $0x06       // movq         (%rsi), %rax
	LONG $0xd04d8b48               // movq         $-48(%rbp), %rcx
	WORD $0x8b4c; BYTE $0x39       // movq         (%rcx), %r15
	LONG $0x04be0f4a; BYTE $0x38   // movsbq       (%rax,%r15), %rax
	LONG $0x22f88348               // cmpq         $34, %rax
	LONG $0x000e850f; WORD $0x0000 // jne          LBB77_57, $14(%rip)
	WORD $0xff49; BYTE $0xc7       // incq         %r15
	WORD $0x894c; BYTE $0x39       // movq         %r15, (%rcx)
	WORD $0x3145; BYTE $0xff       // xorl         %r15d, %r15d
	LONG $0xfffe84e9; BYTE $0xff   // jmp          LBB77_26, $-380(%rip)

LBB77_57:
	LONG $0x28e0c148             // shlq         $40, %rax
	LONG $0x08e7c149             // shlq         $8, %r15
	WORD $0x0949; BYTE $0xc7     // orq          %rax, %r15
	LONG $0x02cf8349             // orq          $2, %r15
	LONG $0xfffe70e9; BYTE $0xff // jmp          LBB77_26, $-400(%rip)

LBB77_48:
	LONG $0x2c7bc1c4; WORD $0x1045 // vcvttsd2si   $16(%r13), %eax

LBB77_49:
	LONG $0xc8758b48               // movq         $-56(%rbp), %rsi
	LONG $0x244c8b49; BYTE $0x08   // movq         $8(%r12), %rcx
	LONG $0x04518d48               // leaq         $4(%rcx), %rdx
	WORD $0x8949; BYTE $0xd7       // movq         %rdx, %r15
	LONG $0x247c2b4d; BYTE $0x10   // subq         $16(%r12), %r15
	LONG $0xfc3e870f; WORD $0xffff // ja           LBB77_3, $-962(%rip)
	LONG $0x24548949; BYTE $0x08   // movq         %rdx, $8(%r12)
	WORD $0xc80f                   // bswapl       %eax
	LONG $0x24148b49               // movq         (%r12), %rdx
	WORD $0x0489; BYTE $0x0a       // movl         %eax, (%rdx,%rcx)
	LONG $0x22c07d80               // cmpb         $34, $-64(%rbp)
	LONG $0xff0c850f; WORD $0xffff // jne          LBB77_58, $-244(%rip)
	LONG $0xffff87e9; BYTE $0xff   // jmp          LBB77_55, $-121(%rip)

LBB77_52:
	LONG $0x2cfbc1c4; WORD $0x1045 // vcvttsd2si   $16(%r13), %rax

LBB77_53:
	LONG $0x244c8b49; BYTE $0x08   // movq         $8(%r12), %rcx
	LONG $0x08518d48               // leaq         $8(%rcx), %rdx
	WORD $0x8949; BYTE $0xd7       // movq         %rdx, %r15
	LONG $0x247c2b4d; BYTE $0x10   // subq         $16(%r12), %r15
	LONG $0xfc04870f; WORD $0xffff // ja           LBB77_3, $-1020(%rip)
	WORD $0x0f48; BYTE $0xc8       // bswapq       %rax
	LONG $0x24548949; BYTE $0x08   // movq         %rdx, $8(%r12)
	LONG $0x24148b49               // movq         (%r12), %rdx
	LONG $0x0a048948               // movq         %rax, (%rdx,%rcx)
	LONG $0x22c07d80               // cmpb         $34, $-64(%rbp)
	LONG $0xfed0850f; WORD $0xffff // jne          LBB77_58, $-304(%rip)
	LONG $0xffff4be9; BYTE $0xff   // jmp          LBB77_55, $-181(%rip)
	BYTE $0x90                     // .p2align 2, 0x90

	// .set L77_0_set_42, LBB77_42-LJTI77_0
	// .set L77_0_set_23, LBB77_23-LJTI77_0
	// .set L77_0_set_27, LBB77_27-LJTI77_0
	// .set L77_0_set_28, LBB77_28-LJTI77_0
	// .set L77_0_set_30, LBB77_30-LJTI77_0
	// .set L77_0_set_33, LBB77_33-LJTI77_0
	// .set L77_0_set_32, LBB77_32-LJTI77_0
LJTI77_0:
	LONG $0xffffff00         // .long L77_0_set_42
	LONG $0xfffffdb4         // .long L77_0_set_23
	LONG $0xfffffe07         // .long L77_0_set_27
	LONG $0xfffffe22         // .long L77_0_set_28
	LONG $0xfffffe07         // .long L77_0_set_27
	LONG $0xfffffe36         // .long L77_0_set_30
	LONG $0xfffffe07         // .long L77_0_set_27
	LONG $0xfffffe73         // .long L77_0_set_33
	LONG $0xfffffe49         // .long L77_0_set_32
	QUAD $0x0000000000000000 // .p2align 4, 0x00

LCPI78_0:
	LONG $0x00000001 // .long 1
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0

LCPI78_1:
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x90
_j2t_fsm_exec:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0xd8ec8148; WORD $0x0000; BYTE $0x00 // subq         $216, %rsp
	LONG $0x708d8948; WORD $0xffff; BYTE $0xff // movq         %rcx, $-144(%rbp)
	WORD $0x8b48; BYTE $0x0f                   // movq         (%rdi), %rcx
	WORD $0x8548; BYTE $0xc9                   // testq        %rcx, %rcx
	LONG $0x1988840f; WORD $0x0000             // je           LBB78_259, $6536(%rip)
	WORD $0x8949; BYTE $0xd4                   // movq         %rdx, %r12
	WORD $0x8949; BYTE $0xff                   // movq         %rdi, %r15
	LONG $0x49048d48                           // leaq         (%rcx,%rcx,2), %rax
	LONG $0x04e0c148                           // shlq         $4, %rax
	LONG $0x38448b48; BYTE $0x40               // movq         $64(%rax,%rdi), %rax
	LONG $0xd0458948                           // movq         %rax, $-48(%rbp)
	LONG $0xb0758948                           // movq         %rsi, $-80(%rbp)
	LONG $0x08468d48                           // leaq         $8(%rsi), %rax
	LONG $0xc0458948                           // movq         %rax, $-64(%rbp)
	LONG $0x08478d48                           // leaq         $8(%rdi), %rax
	LONG $0x30858948; WORD $0xffff; BYTE $0xff // movq         %rax, $-208(%rbp)
	LONG $0x68878d48; WORD $0x0300; BYTE $0x00 // leaq         $196712(%rdi), %rax
	LONG $0x10858948; WORD $0xffff; BYTE $0xff // movq         %rax, $-240(%rbp)
	LONG $0x00bc45c7; WORD $0x0000; BYTE $0x00 // movl         $0, $-68(%rbp)
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x78858948; WORD $0xffff; BYTE $0xff // movq         %rax, $-136(%rbp)
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x38858948; WORD $0xffff; BYTE $0xff // movq         %rax, $-200(%rbp)
	LONG $0x50958948; WORD $0xffff; BYTE $0xff // movq         %rdx, $-176(%rbp)
	LONG $0x000023e9; BYTE $0x00               // jmp          LBB78_5, $35(%rip)

LBB78_2:
	WORD $0x8b48; BYTE $0x02                   // movq         (%rdx), %rax
	LONG $0xb0558b48                           // movq         $-80(%rbp), %rdx
	WORD $0x8b48; BYTE $0x12                   // movq         (%rdx), %rdx
	LONG $0x000204c7; WORD $0x0000; BYTE $0x00 // movl         $0, (%rdx,%rax)

LBB78_3:
	WORD $0xff49; BYTE $0xc8 // decq         %r8
	WORD $0x894d; BYTE $0x07 // movq         %r8, (%r15)

LBB78_4:
	WORD $0x8b49; BYTE $0x0f       // movq         (%r15), %rcx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x1904840f; WORD $0x0000 // je           LBB78_259, $6404(%rip)

LBB78_5:
	LONG $0x00f98148; WORD $0x0010; BYTE $0x00 // cmpq         $4096, %rcx
	LONG $0x1a25830f; WORD $0x0000             // jae          LBB78_280, $6693(%rip)
	WORD $0xff48; BYTE $0xc9                   // decq         %rcx
	LONG $0x492c8d4c                           // leaq         (%rcx,%rcx,2), %r13
	LONG $0x04e5c149                           // shlq         $4, %r13
	LONG $0x2f1c8d4b                           // leaq         (%r15,%r13), %rbx
	LONG $0x68c38348                           // addq         $104, %rbx
	LONG $0x2f748b4f; BYTE $0x68               // movq         $104(%r15,%r13), %r14
	LONG $0x2f448b4b; BYTE $0x70               // movq         $112(%r15,%r13), %rax
	LONG $0xa8458948                           // movq         %rax, $-88(%rbp)
	LONG $0x2f448b4b; BYTE $0x78               // movq         $120(%r15,%r13), %rax
	LONG $0xc8458948                           // movq         %rax, $-56(%rbp)
	QUAD $0x000000902f848b4b                   // movq         $144(%r15,%r13), %rax
	LONG $0x90458948                           // movq         %rax, $-112(%rbp)
	QUAD $0x00802f84107881c4; WORD $0x0000     // vmovups      $128(%r15,%r13), %xmm0
	LONG $0x4511f8c5; BYTE $0x80               // vmovups      %xmm0, $-128(%rbp)
	LONG $0xc0458b48                           // movq         $-64(%rbp), %rax
	WORD $0x8b48; BYTE $0x00                   // movq         (%rax), %rax
	LONG $0xa0458948                           // movq         %rax, $-96(%rbp)
	WORD $0x894c; BYTE $0xe7                   // movq         %r12, %rdi
	LONG $0xd0758d48                           // leaq         $-48(%rbp), %rsi
	WORD $0xf8c5; BYTE $0x77                   // vzeroupper
	LONG $0xff9169e8; BYTE $0xff               // callq        _advance_ns, $-28311(%rip)
	WORD $0x8b4d; BYTE $0x07                   // movq         (%r15), %r8
	WORD $0xbe0f; BYTE $0xf0                   // movsbl       %al, %esi
	LONG $0xff7e8d41                           // leal         $-1(%r14), %edi
	LONG $0x05ff8366                           // cmpw         $5, %di
	LONG $0x0282870f; WORD $0x0000             // ja           LBB78_33, $642(%rip)
	LONG $0x2f148d4b                           // leaq         (%r15,%r13), %rdx
	LONG $0x80c28148; WORD $0x0000; BYTE $0x00 // addq         $128, %rdx
	WORD $0xb70f; BYTE $0xff                   // movzwl       %di, %edi
	LONG $0x200d8d48; WORD $0x001e; BYTE $0x00 // leaq         $7712(%rip), %rcx  /* LJTI78_0+0(%rip) */
	LONG $0xb93c6348                           // movslq       (%rcx,%rdi,4), %rdi
	WORD $0x0148; BYTE $0xcf                   // addq         %rcx, %rdi
	JMP  DI

LBB78_8:
	WORD $0xfe83; BYTE $0x2c                   // cmpl         $44, %esi
	LONG $0x04f2840f; WORD $0x0000             // je           LBB78_58, $1266(%rip)
	WORD $0xfe83; BYTE $0x5d                   // cmpl         $93, %esi
	LONG $0x186b850f; WORD $0x0000             // jne          LBB78_261, $6251(%rip)
	QUAD $0x000000882f848b4b                   // movq         $136(%r15,%r13), %rax
	LONG $0x01bc45f6                           // testb        $1, $-68(%rbp)
	LONG $0x09cf850f; WORD $0x0000             // jne          LBB78_108, $2511(%rip)
	LONG $0x2f348d4b                           // leaq         (%r15,%r13), %rsi
	LONG $0x88c68148; WORD $0x0000; BYTE $0x00 // addq         $136, %rsi
	WORD $0xff48; BYTE $0xc0                   // incq         %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0x0009c0e9; BYTE $0x00               // jmp          LBB78_109, $2496(%rip)

LBB78_12:
	WORD $0xfe83; BYTE $0x2c                   // cmpl         $44, %esi
	LONG $0x04cf840f; WORD $0x0000             // je           LBB78_60, $1231(%rip)
	WORD $0xfe83; BYTE $0x7d                   // cmpl         $125, %esi
	LONG $0xc85d8b48                           // movq         $-56(%rbp), %rbx
	LONG $0x1838850f; WORD $0x0000             // jne          LBB78_262, $6200(%rip)
	WORD $0x3b80; BYTE $0x0c                   // cmpb         $12, (%rbx)
	LONG $0x0631850f; WORD $0x0000             // jne          LBB78_74, $1585(%rip)
	LONG $0xd0458b48                           // movq         $-48(%rbp), %rax
	LONG $0xa8458948                           // movq         %rax, $-88(%rbp)
	LONG $0xff488d4c                           // leaq         $-1(%rax), %r9
	LONG $0x01bc45f6                           // testb        $1, $-68(%rbp)
	LONG $0xb0758b48                           // movq         $-80(%rbp), %rsi
	LONG $0x09c8840f; WORD $0x0000             // je           LBB78_114, $2504(%rip)
	LONG $0x38858b48; WORD $0xffff; BYTE $0xff // movq         $-200(%rbp), %rax
	LONG $0x0650b70f                           // movzwl       $6(%rax), %edx
	LONG $0x0258be0f                           // movsbl       $2(%rax), %ebx
	QUAD $0x000000882f848b4b                   // movq         $136(%r15,%r13), %rax
	WORD $0x8948; BYTE $0xd1                   // movq         %rdx, %rcx
	LONG $0x06e9c148                           // shrq         $6, %rcx
	WORD $0x7b8d; BYTE $0xff                   // leal         $-1(%rbx), %edi
	WORD $0xff83; BYTE $0x02                   // cmpl         $2, %edi
	LONG $0x0971830f; WORD $0x0000             // jae          LBB78_110, $2417(%rip)
	LONG $0xc83c8b48                           // movq         (%rax,%rcx,8), %rdi
	LONG $0xd7ab0f48                           // btsq         %rdx, %rdi
	LONG $0x789d8b48; WORD $0xffff; BYTE $0xff // movq         $-136(%rbp), %rbx
	LONG $0x000974e9; BYTE $0x00               // jmp          LBB78_112, $2420(%rip)

LBB78_18:
	LONG $0xd06d8b4c                                   // movq         $-48(%rbp), %r13
	WORD $0x223c                                       // cmpb         $34, %al
	LONG $0x1b54850f; WORD $0x0000                     // jne          LBB78_319, $6996(%rip)
	QUAD $0xffffffff6085c748; WORD $0xffff; BYTE $0xff // movq         $-1, $-160(%rbp)
	WORD $0x894c; BYTE $0xe7                           // movq         %r12, %rdi
	WORD $0x894c; BYTE $0xee                           // movq         %r13, %rsi
	LONG $0x60958d48; WORD $0xffff; BYTE $0xff         // leaq         $-160(%rbp), %rdx
	LONG $0xff999de8; BYTE $0xff                       // callq        _advance_string, $-26211(%rip)
	WORD $0x894c; BYTE $0xe1                           // movq         %r12, %rcx
	WORD $0x8949; BYTE $0xc4                           // movq         %rax, %r12
	WORD $0x8548; BYTE $0xc0                           // testq        %rax, %rax
	LONG $0x15b8880f; WORD $0x0000                     // js           LBB78_245, $5560(%rip)
	LONG $0xd065894c                                   // movq         %r12, $-48(%rbp)
	WORD $0x894c; BYTE $0xee                           // movq         %r13, %rsi
	WORD $0xf748; BYTE $0xd6                           // notq         %rsi
	WORD $0x014c; BYTE $0xe6                           // addq         %r12, %rsi
	WORD $0x8b48; BYTE $0x39                           // movq         (%rcx), %rdi
	WORD $0x014c; BYTE $0xef                           // addq         %r13, %rdi
	LONG $0x60858b48; WORD $0xffff; BYTE $0xff         // movq         $-160(%rbp), %rax
	WORD $0x394c; BYTE $0xe8                           // cmpq         %r13, %rax
	LONG $0xc85d8b48                                   // movq         $-56(%rbp), %rbx
	LONG $0x00098c0f; WORD $0x0000                     // jl           LBB78_22, $9(%rip)
	WORD $0x394c; BYTE $0xe0                           // cmpq         %r12, %rax
	LONG $0x15ea8c0f; WORD $0x0000                     // jl           LBB78_248, $5610(%rip)

LBB78_22:
	WORD $0x8949; BYTE $0xf0 // movq         %rsi, %r8

LBB78_23:
	WORD $0x3b80; BYTE $0x0d                           // cmpb         $13, (%rbx)
	LONG $0x18bd8948; WORD $0xffff; BYTE $0xff         // movq         %rdi, $-232(%rbp)
	LONG $0x4085894c; WORD $0xffff; BYTE $0xff         // movq         %r8, $-192(%rbp)
	LONG $0x025b850f; WORD $0x0000                     // jne          LBB78_47, $603(%rip)
	LONG $0x18738b48                                   // movq         $24(%rbx), %rsi
	WORD $0xb60f; BYTE $0x06                           // movzbl       (%rsi), %eax
	LONG $0x0bf88348                                   // cmpq         $11, %rax
	LONG $0x189d870f; WORD $0x0000                     // ja           LBB78_284, $6301(%rip)
	LONG $0xc04d8b48                                   // movq         $-64(%rbp), %rcx
	WORD $0x8b48; BYTE $0x09                           // movq         (%rcx), %rcx
	LONG $0x788d8948; WORD $0xffff; BYTE $0xff         // movq         %rcx, $-136(%rbp)
	LONG $0x000558b9; BYTE $0x00                       // movl         $1368, %ecx
	LONG $0xc1a30f48                                   // btq          %rax, %rcx
	LONG $0x07ee830f; WORD $0x0000                     // jae          LBB78_99, $2030(%rip)
	LONG $0x60bd8948; WORD $0xffff; BYTE $0xff         // movq         %rdi, $-160(%rbp)
	LONG $0x6885894c; WORD $0xffff; BYTE $0xff         // movq         %r8, $-152(%rbp)
	QUAD $0x00ffffff2885c748; WORD $0x0000; BYTE $0x00 // movq         $0, $-216(%rbp)
	LONG $0xb07d8b48                                   // movq         $-80(%rbp), %rdi
	LONG $0x60958d48; WORD $0xffff; BYTE $0xff         // leaq         $-160(%rbp), %rdx
	LONG $0x288d8d48; WORD $0xffff; BYTE $0xff         // leaq         $-216(%rbp), %rcx
	LONG $0x30858b4c; WORD $0xffff; BYTE $0xff         // movq         $-208(%rbp), %r8
	LONG $0xffec0fe8; BYTE $0xff                       // callq        _j2t_number, $-5105(%rip)
	WORD $0x8548; BYTE $0xc0                           // testq        %rax, %rax
	LONG $0x19be850f; WORD $0x0000                     // jne          LBB78_309, $6590(%rip)

LBB78_27:
	WORD $0x8b49; BYTE $0x07                   // movq         (%r15), %rax
	LONG $0x40048d48                           // leaq         (%rax,%rax,2), %rax
	LONG $0x04e0c148                           // shlq         $4, %rax
	QUAD $0x000004383844c74a; BYTE $0x00       // movq         $4, $56(%rax,%r15)
	LONG $0x3864894e; BYTE $0x40               // movq         %r12, $64(%rax,%r15)
	LONG $0x204b8b48                           // movq         $32(%rbx), %rcx
	LONG $0x384c894a; BYTE $0x48               // movq         %rcx, $72(%rax,%r15)
	LONG $0x50a58b4c; WORD $0xffff; BYTE $0xff // movq         $-176(%rbp), %r12
	LONG $0xfffd87e9; BYTE $0xff               // jmp          LBB78_4, $-633(%rip)

LBB78_28:
	WORD $0x3a3c                               // cmpb         $58, %al
	LONG $0x1a50850f; WORD $0x0000             // jne          LBB78_320, $6736(%rip)
	LONG $0x40048d4b                           // leaq         (%r8,%r8,2), %rax
	LONG $0x04e0c148                           // shlq         $4, %rax
	LONG $0x00e68141; WORD $0xff00; BYTE $0xff // andl         $-65536, %r14d
	LONG $0x3874894e; BYTE $0x38               // movq         %r14, $56(%rax,%r15)
	LONG $0xd04d8b48                           // movq         $-48(%rbp), %rcx
	LONG $0x384c894a; BYTE $0x40               // movq         %rcx, $64(%rax,%r15)
	LONG $0xc84d8b48                           // movq         $-56(%rbp), %rcx
	LONG $0x384c894a; BYTE $0x48               // movq         %rcx, $72(%rax,%r15)
	LONG $0xfffd54e9; BYTE $0xff               // jmp          LBB78_4, $-684(%rip)

LBB78_30:
	WORD $0x5d3c                               // cmpb         $93, %al
	LONG $0xfd35840f; WORD $0xffff             // je           LBB78_2, $-715(%rip)
	QUAD $0x000000882f84c74b; LONG $0x00000000 // movq         $0, $136(%r15,%r13)
	LONG $0x0103c748; WORD $0x0000; BYTE $0x00 // movq         $1, (%rbx)
	LONG $0xd0458b48                           // movq         $-48(%rbp), %rax
	WORD $0xff48; BYTE $0xc8                   // decq         %rax
	LONG $0xd0458948                           // movq         %rax, $-48(%rbp)
	LONG $0x00f88149; WORD $0x0010; BYTE $0x00 // cmpq         $4096, %r8
	LONG $0x1a56830f; WORD $0x0000             // jae          LBB78_324, $6742(%rip)
	LONG $0x01508d49                           // leaq         $1(%r8), %rdx
	WORD $0x8949; BYTE $0x17                   // movq         %rdx, (%r15)
	LONG $0x400c8d4b                           // leaq         (%r8,%r8,2), %rcx
	LONG $0x04e1c148                           // shlq         $4, %rcx
	QUAD $0x000000680f44c749; BYTE $0x00       // movq         $0, $104(%r15,%rcx)
	LONG $0x0f448949; BYTE $0x70               // movq         %rax, $112(%r15,%rcx)
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	LONG $0x20408b48                           // movq         $32(%rax), %rax
	LONG $0x0f448949; BYTE $0x78               // movq         %rax, $120(%r15,%rcx)
	LONG $0xfffcf2e9; BYTE $0xff               // jmp          LBB78_4, $-782(%rip)

LBB78_33:
	LONG $0xff508d49                           // leaq         $-1(%r8), %rdx
	WORD $0x8949; BYTE $0x17                   // movq         %rdx, (%r15)
	LONG $0x00c6f741; WORD $0x0200; BYTE $0x00 // testl        $131072, %r14d
	LONG $0x13ef850f; WORD $0x0000             // jne          LBB78_244, $5103(%rip)
	LONG $0xff7085f6; WORD $0xffff; BYTE $0x04 // testb        $4, $-144(%rbp)
	LONG $0x0011840f; WORD $0x0000             // je           LBB78_36, $17(%rip)
	WORD $0x8944; BYTE $0xf0                   // movl         %r14d, %eax
	LONG $0x04000025; BYTE $0x00               // andl         $262144, %eax
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x1445850f; WORD $0x0000             // jne          LBB78_247, $5189(%rip)

LBB78_36:
	WORD $0xfe83; BYTE $0x7b                   // cmpl         $123, %esi
	LONG $0x17a0870f; WORD $0x0000             // ja           LBB78_289, $6048(%rip)
	WORD $0xf089                               // movl         %esi, %eax
	LONG $0x873d8d48; WORD $0x001b; BYTE $0x00 // leaq         $7047(%rip), %rdi  /* LJTI78_1+0(%rip) */
	LONG $0x87046348                           // movslq       (%rdi,%rax,4), %rax
	WORD $0x0148; BYTE $0xf8                   // addq         %rdi, %rax
	JMP  AX

LBB78_38:
	LONG $0xd04dff48                           // decq         $-48(%rbp)
	LONG $0xb07d8b48                           // movq         $-80(%rbp), %rdi
	LONG $0xc85d8b48                           // movq         $-56(%rbp), %rbx
	WORD $0x8948; BYTE $0xde                   // movq         %rbx, %rsi
	WORD $0x894c; BYTE $0xe2                   // movq         %r12, %rdx
	LONG $0xd04d8d48                           // leaq         $-48(%rbp), %rcx
	LONG $0x30858b4c; WORD $0xffff; BYTE $0xff // movq         $-208(%rbp), %r8
	LONG $0xffead4e8; BYTE $0xff               // callq        _j2t_number, $-5420(%rip)

LBB78_39:
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xfc7a840f; WORD $0xffff // je           LBB78_4, $-902(%rip)
	LONG $0x001980e9; BYTE $0x00   // jmp          LBB78_323, $6528(%rip)

LBB78_40:
	WORD $0xfe83; BYTE $0x22                   // cmpl         $34, %esi
	LONG $0x024c840f; WORD $0x0000             // je           LBB78_63, $588(%rip)
	WORD $0xfe83; BYTE $0x7d                   // cmpl         $125, %esi
	LONG $0x15a0850f; WORD $0x0000             // jne          LBB78_263, $5536(%rip)
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	WORD $0x3880; BYTE $0x0c                   // cmpb         $12, (%rax)
	LONG $0xfc3f850f; WORD $0xffff             // jne          LBB78_2, $-961(%rip)
	LONG $0xd05d8b48                           // movq         $-48(%rbp), %rbx
	LONG $0xff438d48                           // leaq         $-1(%rbx), %rax
	QUAD $0x000000802f948b4b                   // movq         $128(%r15,%r13), %rdx
	QUAD $0x000000882f8c8b4b                   // movq         $136(%r15,%r13), %rcx
	QUAD $0x000000902f848b4f                   // movq         $144(%r15,%r13), %r8
	LONG $0x24048948                           // movq         %rax, (%rsp)
	WORD $0x894c; BYTE $0xff                   // movq         %r15, %rdi
	LONG $0xb0758b48                           // movq         $-80(%rbp), %rsi
	LONG $0x70a58b4c; WORD $0xffff; BYTE $0xff // movq         $-144(%rbp), %r12
	WORD $0x894d; BYTE $0xe1                   // movq         %r12, %r9
	LONG $0xffe7cde8; BYTE $0xff               // callq        _j2t_write_unset_fields, $-6195(%rip)
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x1576850f; WORD $0x0000             // jne          LBB78_267, $5494(%rip)
	LONG $0x2f048d4b                           // leaq         (%r15,%r13), %rax
	LONG $0x00900548; WORD $0x0000             // addq         $144, %rax
	WORD $0x8b48; BYTE $0x00                   // movq         (%rax), %rax
	LONG $0x03e0c148                           // shlq         $3, %rax
	LONG $0x40472949                           // subq         %rax, $64(%r15)
	LONG $0x08c4f641                           // testb        $8, %r12b
	LONG $0x000e840f; WORD $0x0000             // je           LBB78_46, $14(%rip)
	QUAD $0x0000038078bf8349                   // cmpq         $0, $229496(%r15)
	LONG $0x15f4850f; WORD $0x0000             // jne          LBB78_276, $5620(%rip)

LBB78_46:
	LONG $0xb0758b48               // movq         $-80(%rbp), %rsi
	LONG $0x084e8b48               // movq         $8(%rsi), %rcx
	LONG $0x01518d48               // leaq         $1(%rcx), %rdx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x10462b48               // subq         $16(%rsi), %rax
	LONG $0x0733860f; WORD $0x0000 // jbe          LBB78_118, $1843(%rip)
	LONG $0x001523e9; BYTE $0x00   // jmp          LBB78_266, $5411(%rip)

LBB78_47:
	WORD $0x8b4d; BYTE $0x2f                   // movq         (%r15), %r13
	LONG $0x60bd8948; WORD $0xffff; BYTE $0xff // movq         %rdi, $-160(%rbp)
	LONG $0x6885894c; WORD $0xffff; BYTE $0xff // movq         %r8, $-152(%rbp)
	LONG $0x28738b48                           // movq         $40(%rbx), %rsi
	LONG $0x60bd8d48; WORD $0xffff; BYTE $0xff // leaq         $-160(%rbp), %rdi
	LONG $0xfff378e8; BYTE $0xff               // callq        _j2t_find_field_key, $-3208(%rip)
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x050a840f; WORD $0x0000             // je           LBB78_94, $1290(%rip)
	WORD $0x8948; BYTE $0xc2                   // movq         %rax, %rdx
	LONG $0xfe458d4d                           // leaq         $-2(%r13), %r8
	LONG $0x708d8b48; WORD $0xffff; BYTE $0xff // movq         $-144(%rbp), %rcx
	WORD $0xc1f6; BYTE $0x08                   // testb        $8, %cl
	LONG $0x0043840f; WORD $0x0000             // je           LBB78_51, $67(%rip)
	LONG $0x507a8348; BYTE $0x00               // cmpq         $0, $80(%rdx)
	LONG $0x0038840f; WORD $0x0000             // je           LBB78_51, $56(%rip)
	LONG $0x064ab70f                           // movzwl       $6(%rdx), %ecx
	LONG $0x40048d4b                           // leaq         (%r8,%r8,2), %rax
	LONG $0x04e0c148                           // shlq         $4, %rax
	QUAD $0x0000008807848b49                   // movq         $136(%r15,%rax), %rax
	WORD $0x8948; BYTE $0xcf                   // movq         %rcx, %rdi
	LONG $0x06efc148                           // shrq         $6, %rdi
	LONG $0xf80c8b4c                           // movq         (%rax,%rdi,8), %r9
	LONG $0x000001be; BYTE $0x00               // movl         $1, %esi
	WORD $0xd348; BYTE $0xe6                   // shlq         %cl, %rsi
	LONG $0xc9a30f49                           // btq          %rcx, %r9
	LONG $0x708d8b48; WORD $0xffff; BYTE $0xff // movq         $-144(%rbp), %rcx
	LONG $0x13cb830f; WORD $0x0000             // jae          LBB78_255, $5067(%rip)

LBB78_51:
	WORD $0xc1f6; BYTE $0x04       // testb        $4, %cl
	LONG $0x0010840f; WORD $0x0000 // je           LBB78_53, $16(%rip)
	LONG $0x040004b8; BYTE $0x00   // movl         $262148, %eax
	LONG $0x047a8366; BYTE $0x00   // cmpw         $0, $4(%rdx)
	LONG $0x006a850f; WORD $0x0000 // jne          LBB78_56, $106(%rip)

LBB78_53:
	LONG $0xb05d8b48                           // movq         $-80(%rbp), %rbx
	LONG $0x087b8b48                           // movq         $8(%rbx), %rdi
	LONG $0x01778d48                           // leaq         $1(%rdi), %rsi
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	LONG $0x10432b48                           // subq         $16(%rbx), %rax
	LONG $0x14a5870f; WORD $0x0000             // ja           LBB78_271, $5285(%rip)
	LONG $0x064ab70f                           // movzwl       $6(%rdx), %ecx
	LONG $0x08428b48                           // movq         $8(%rdx), %rax
	WORD $0x008a                               // movb         (%rax), %al
	LONG $0x08738948                           // movq         %rsi, $8(%rbx)
	WORD $0x8b48; BYTE $0x33                   // movq         (%rbx), %rsi
	LONG $0x78bd8948; WORD $0xffff; BYTE $0xff // movq         %rdi, $-136(%rbp)
	WORD $0x0488; BYTE $0x3e                   // movb         %al, (%rsi,%rdi)
	LONG $0x08738b48                           // movq         $8(%rbx), %rsi
	LONG $0x027e8d48                           // leaq         $2(%rsi), %rdi
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	LONG $0x10432b48                           // subq         $16(%rbx), %rax
	LONG $0x1472870f; WORD $0x0000             // ja           LBB78_270, $5234(%rip)
	LONG $0x087b8948                           // movq         %rdi, $8(%rbx)
	LONG $0x08c1c166                           // rolw         $8, %cx
	WORD $0x8b48; BYTE $0x03                   // movq         (%rbx), %rax
	LONG $0x300c8966                           // movw         %cx, (%rax,%rsi)
	WORD $0x8b4d; BYTE $0x2f                   // movq         (%r15), %r13
	LONG $0x010004b8; BYTE $0x00               // movl         $65540, %eax
	WORD $0x8948; BYTE $0xd1                   // movq         %rdx, %rcx
	LONG $0x38958948; WORD $0xffff; BYTE $0xff // movq         %rdx, $-200(%rbp)

LBB78_56:
	QUAD $0x000000006d0c8d4a             // leaq         (,%r13,2), %rcx
	WORD $0x014c; BYTE $0xe9             // addq         %r13, %rcx
	LONG $0x04e1c148                     // shlq         $4, %rcx
	LONG $0x3944894a; BYTE $0x38         // movq         %rax, $56(%rcx,%r15)
	LONG $0x3964894e; BYTE $0x40         // movq         %r12, $64(%rcx,%r15)
	LONG $0x08428b48                     // movq         $8(%rdx), %rax
	LONG $0x3944894a; BYTE $0x48         // movq         %rax, $72(%rcx,%r15)
	QUAD $0x000000503944c74a; BYTE $0x00 // movq         $0, $80(%rcx,%r15)
	LONG $0x3954894a; BYTE $0x58         // movq         %rdx, $88(%rcx,%r15)
	LONG $0x064ab70f                     // movzwl       $6(%rdx), %ecx
	LONG $0x40048d4b                     // leaq         (%r8,%r8,2), %rax
	LONG $0x04e0c148                     // shlq         $4, %rax
	QUAD $0x0000008807848b49             // movq         $136(%r15,%rax), %rax
	WORD $0x8948; BYTE $0xcf             // movq         %rcx, %rdi
	LONG $0x06efc148                     // shrq         $6, %rdi
	LONG $0x000001be; BYTE $0x00         // movl         $1, %esi
	WORD $0xd348; BYTE $0xe6             // shlq         %cl, %rsi

LBB78_57:
	WORD $0xf748; BYTE $0xd6                   // notq         %rsi
	LONG $0xf8342148                           // andq         %rsi, (%rax,%rdi,8)
	LONG $0x50a58b4c; WORD $0xffff; BYTE $0xff // movq         $-176(%rbp), %r12
	LONG $0xfffa5be9; BYTE $0xff               // jmp          LBB78_4, $-1445(%rip)

LBB78_58:
	LONG $0x01bc45f6               // testb        $1, $-68(%rbp)
	LONG $0x01a7850f; WORD $0x0000 // jne          LBB78_76, $423(%rip)
	QUAD $0x000000882f84ff4b       // incq         $136(%r15,%r13)
	LONG $0x0001a1e9; BYTE $0x00   // jmp          LBB78_77, $417(%rip)

LBB78_60:
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	WORD $0x3b80; BYTE $0x0d       // cmpb         $13, (%rbx)
	LONG $0x01ee850f; WORD $0x0000 // jne          LBB78_79, $494(%rip)
	LONG $0x01bc45f6               // testb        $1, $-68(%rbp)
	LONG $0x05c5850f; WORD $0x0000 // jne          LBB78_122, $1477(%rip)
	QUAD $0x000000882f84ff4b       // incq         $136(%r15,%r13)
	LONG $0x0005cde9; BYTE $0x00   // jmp          LBB78_123, $1485(%rip)

LBB78_63:
	LONG $0x0203c748; WORD $0x0000; BYTE $0x00         // movq         $2, (%rbx)
	LONG $0xd05d8b48                                   // movq         $-48(%rbp), %rbx
	QUAD $0xffffffff6085c748; WORD $0xffff; BYTE $0xff // movq         $-1, $-160(%rbp)
	WORD $0x894c; BYTE $0xe7                           // movq         %r12, %rdi
	WORD $0x8948; BYTE $0xde                           // movq         %rbx, %rsi
	LONG $0x60958d48; WORD $0xffff; BYTE $0xff         // leaq         $-160(%rbp), %rdx
	LONG $0xff9519e8; BYTE $0xff                       // callq        _advance_string, $-27367(%rip)
	WORD $0x8949; BYTE $0xc1                           // movq         %rax, %r9
	WORD $0x8548; BYTE $0xc0                           // testq        %rax, %rax
	LONG $0x11ed880f; WORD $0x0000                     // js           LBB78_251, $4589(%rip)
	LONG $0xd04d894c                                   // movq         %r9, $-48(%rbp)
	WORD $0x8948; BYTE $0xde                           // movq         %rbx, %rsi
	WORD $0xf748; BYTE $0xd6                           // notq         %rsi
	WORD $0x014c; BYTE $0xce                           // addq         %r9, %rsi
	LONG $0x243c8b49                                   // movq         (%r12), %rdi
	WORD $0x0148; BYTE $0xdf                           // addq         %rbx, %rdi
	LONG $0x60858b48; WORD $0xffff; BYTE $0xff         // movq         $-160(%rbp), %rax
	WORD $0x3948; BYTE $0xd8                           // cmpq         %rbx, %rax
	LONG $0x00098c0f; WORD $0x0000                     // jl           LBB78_66, $9(%rip)
	WORD $0x394c; BYTE $0xc8                           // cmpq         %r9, %rax
	LONG $0x11f68c0f; WORD $0x0000                     // jl           LBB78_253, $4598(%rip)

LBB78_66:
	WORD $0x8949; BYTE $0xf0 // movq         %rsi, %r8

LBB78_67:
	LONG $0xc8558b4c                                   // movq         $-56(%rbp), %r10
	LONG $0x0d3a8041                                   // cmpb         $13, (%r10)
	LONG $0x50a58b4c; WORD $0xffff; BYTE $0xff         // movq         $-176(%rbp), %r12
	LONG $0x20bd8948; WORD $0xffff; BYTE $0xff         // movq         %rdi, $-224(%rbp)
	LONG $0x4885894c; WORD $0xffff; BYTE $0xff         // movq         %r8, $-184(%rbp)
	LONG $0x0195850f; WORD $0x0000                     // jne          LBB78_82, $405(%rip)
	LONG $0x18728b49                                   // movq         $24(%r10), %rsi
	WORD $0xb60f; BYTE $0x06                           // movzbl       (%rsi), %eax
	LONG $0x0bf88348                                   // cmpq         $11, %rax
	LONG $0x15d4870f; WORD $0x0000                     // ja           LBB78_313, $5588(%rip)
	LONG $0xc04d8b48                                   // movq         $-64(%rbp), %rcx
	WORD $0x8b48; BYTE $0x09                           // movq         (%rcx), %rcx
	LONG $0x788d8948; WORD $0xffff; BYTE $0xff         // movq         %rcx, $-136(%rbp)
	LONG $0x000558b9; BYTE $0x00                       // movl         $1368, %ecx
	LONG $0xc1a30f48                                   // btq          %rax, %rcx
	LONG $0x0928830f; WORD $0x0000                     // jae          LBB78_163, $2344(%rip)
	LONG $0x58b5894c; WORD $0xffff; BYTE $0xff         // movq         %r14, $-168(%rbp)
	LONG $0x60bd8948; WORD $0xffff; BYTE $0xff         // movq         %rdi, $-160(%rbp)
	LONG $0x6885894c; WORD $0xffff; BYTE $0xff         // movq         %r8, $-152(%rbp)
	QUAD $0x00ffffff2885c748; WORD $0x0000; BYTE $0x00 // movq         $0, $-216(%rbp)
	LONG $0xb07d8b48                                   // movq         $-80(%rbp), %rdi
	LONG $0x60958d48; WORD $0xffff; BYTE $0xff         // leaq         $-160(%rbp), %rdx
	LONG $0x288d8d48; WORD $0xffff; BYTE $0xff         // leaq         $-216(%rbp), %rcx
	LONG $0x30858b4c; WORD $0xffff; BYTE $0xff         // movq         $-208(%rbp), %r8
	WORD $0x894c; BYTE $0xcb                           // movq         %r9, %rbx
	WORD $0x894d; BYTE $0xe6                           // movq         %r12, %r14
	WORD $0x894d; BYTE $0xd4                           // movq         %r10, %r12
	LONG $0xffe775e8; BYTE $0xff                       // callq        _j2t_number, $-6283(%rip)
	WORD $0x894d; BYTE $0xe2                           // movq         %r12, %r10
	WORD $0x894d; BYTE $0xf4                           // movq         %r14, %r12
	WORD $0x8949; BYTE $0xd9                           // movq         %rbx, %r9
	WORD $0x8548; BYTE $0xc0                           // testq        %rax, %rax
	LONG $0x12d8850f; WORD $0x0000                     // jne          LBB78_273, $4824(%rip)

LBB78_71:
	QUAD $0x000000882f84c74b; LONG $0x00000000 // movq         $0, $136(%r15,%r13)
	WORD $0x8b49; BYTE $0x07                   // movq         (%r15), %rax
	LONG $0x10003d48; WORD $0x0000             // cmpq         $4096, %rax
	LONG $0x1640830f; WORD $0x0000             // jae          LBB78_326, $5696(%rip)
	LONG $0x01488d48                           // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0f                   // movq         %rcx, (%r15)
	LONG $0x40048d48                           // leaq         (%rax,%rax,2), %rax
	LONG $0x04e0c148                           // shlq         $4, %rax
	QUAD $0x000004680744c749; BYTE $0x00       // movq         $4, $104(%r15,%rax)
	LONG $0x074c894d; BYTE $0x70               // movq         %r9, $112(%r15,%rax)
	LONG $0x204a8b49                           // movq         $32(%r10), %rcx
	LONG $0x074c8949; BYTE $0x78               // movq         %rcx, $120(%r15,%rax)
	LONG $0xfff8cce9; BYTE $0xff               // jmp          LBB78_4, $-1844(%rip)

LBB78_74:
	LONG $0x01bc45f6               // testb        $1, $-68(%rbp)
	LONG $0x0349850f; WORD $0x0000 // jne          LBB78_107, $841(%rip)
	QUAD $0x000000882f848b4b       // movq         $136(%r15,%r13), %rax
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	QUAD $0x000000882f84894b       // movq         %rax, $136(%r15,%r13)
	LONG $0x00034ee9; BYTE $0x00   // jmp          LBB78_109, $846(%rip)

LBB78_76:
	LONG $0x00bc45c7; WORD $0x0000; BYTE $0x00 // movl         $0, $-68(%rbp)

LBB78_77:
	LONG $0xc8758b48                           // movq         $-56(%rbp), %rsi
	LONG $0x00f88149; WORD $0x0010; BYTE $0x00 // cmpq         $4096, %r8
	LONG $0x157d830f; WORD $0x0000             // jae          LBB78_321, $5501(%rip)
	LONG $0x01408d49                           // leaq         $1(%r8), %rax
	WORD $0x8949; BYTE $0x07                   // movq         %rax, (%r15)
	LONG $0x40048d4b                           // leaq         (%r8,%r8,2), %rax
	LONG $0x04e0c148                           // shlq         $4, %rax
	QUAD $0x000000680744c749; BYTE $0x00       // movq         $0, $104(%r15,%rax)
	LONG $0xd04d8b48                           // movq         $-48(%rbp), %rcx
	LONG $0x074c8949; BYTE $0x70               // movq         %rcx, $112(%r15,%rax)
	LONG $0x204e8b48                           // movq         $32(%rsi), %rcx
	LONG $0x074c8949; BYTE $0x78               // movq         %rcx, $120(%r15,%rax)
	LONG $0x0210f8c5                           // vmovups      (%rdx), %xmm0
	QUAD $0x008007841178c1c4; WORD $0x0000     // vmovups      %xmm0, $128(%r15,%rax)
	LONG $0x104a8b48                           // movq         $16(%rdx), %rcx
	QUAD $0x00000090078c8949                   // movq         %rcx, $144(%r15,%rax)
	LONG $0xfff849e9; BYTE $0xff               // jmp          LBB78_4, $-1975(%rip)

LBB78_79:
	LONG $0x01bc45f6                           // testb        $1, $-68(%rbp)
	LONG $0x03ec840f; WORD $0x0000             // je           LBB78_123, $1004(%rip)
	LONG $0x38858b48; WORD $0xffff; BYTE $0xff // movq         $-200(%rbp), %rax
	LONG $0x0670b70f                           // movzwl       $6(%rax), %esi
	LONG $0x0278be0f                           // movsbl       $2(%rax), %edi
	QUAD $0x000000882f848b4b                   // movq         $136(%r15,%r13), %rax
	WORD $0x8948; BYTE $0xf2                   // movq         %rsi, %rdx
	LONG $0x06eac148                           // shrq         $6, %rdx
	WORD $0x5f8d; BYTE $0xff                   // leal         $-1(%rdi), %ebx
	WORD $0xfb83; BYTE $0x02                   // cmpl         $2, %ebx
	LONG $0x0395830f; WORD $0x0000             // jae          LBB78_119, $917(%rip)
	LONG $0xd03c8b48                           // movq         (%rax,%rdx,8), %rdi
	LONG $0xf7ab0f48                           // btsq         %rsi, %rdi
	LONG $0xc85d8b48                           // movq         $-56(%rbp), %rbx
	LONG $0x000398e9; BYTE $0x00               // jmp          LBB78_121, $920(%rip)

LBB78_82:
	LONG $0x588d894c; WORD $0xffff; BYTE $0xff // movq         %r9, $-168(%rbp)
	LONG $0x60bd8948; WORD $0xffff; BYTE $0xff // movq         %rdi, $-160(%rbp)
	LONG $0x6885894c; WORD $0xffff; BYTE $0xff // movq         %r8, $-152(%rbp)
	LONG $0x28728b49                           // movq         $40(%r10), %rsi
	LONG $0x60bd8d48; WORD $0xffff; BYTE $0xff // leaq         $-160(%rbp), %rdi
	LONG $0xffefb0e8; BYTE $0xff               // callq        _j2t_find_field_key, $-4176(%rip)
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x0181840f; WORD $0x0000             // je           LBB78_96, $385(%rip)
	WORD $0x8948; BYTE $0xc2                   // movq         %rax, %rdx
	LONG $0x708d8b48; WORD $0xffff; BYTE $0xff // movq         $-144(%rbp), %rcx
	WORD $0xc1f6; BYTE $0x08                   // testb        $8, %cl
	LONG $0x003b840f; WORD $0x0000             // je           LBB78_86, $59(%rip)
	LONG $0x507a8348; BYTE $0x00               // cmpq         $0, $80(%rdx)
	LONG $0x0030840f; WORD $0x0000             // je           LBB78_86, $48(%rip)
	LONG $0x064ab70f                           // movzwl       $6(%rdx), %ecx
	QUAD $0x000000882fb48b4b                   // movq         $136(%r15,%r13), %rsi
	WORD $0x8948; BYTE $0xc8                   // movq         %rcx, %rax
	LONG $0x06e8c148                           // shrq         $6, %rax
	LONG $0xc63c8b48                           // movq         (%rsi,%rax,8), %rdi
	LONG $0x000001be; BYTE $0x00               // movl         $1, %esi
	WORD $0xd348; BYTE $0xe6                   // shlq         %cl, %rsi
	LONG $0xcfa30f48                           // btq          %rcx, %rdi
	LONG $0x708d8b48; WORD $0xffff; BYTE $0xff // movq         $-144(%rbp), %rcx
	LONG $0x103a830f; WORD $0x0000             // jae          LBB78_256, $4154(%rip)

LBB78_86:
	WORD $0xc1f6; BYTE $0x04                   // testb        $4, %cl
	LONG $0x58858b4c; WORD $0xffff; BYTE $0xff // movq         $-168(%rbp), %r8
	LONG $0x0010840f; WORD $0x0000             // je           LBB78_88, $16(%rip)
	LONG $0x040004b8; BYTE $0x00               // movl         $262148, %eax
	LONG $0x047a8366; BYTE $0x00               // cmpw         $0, $4(%rdx)
	LONG $0x0067850f; WORD $0x0000             // jne          LBB78_91, $103(%rip)

LBB78_88:
	LONG $0xb05d8b48                           // movq         $-80(%rbp), %rbx
	LONG $0x087b8b48                           // movq         $8(%rbx), %rdi
	LONG $0x01778d48                           // leaq         $1(%rdi), %rsi
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	LONG $0x10432b48                           // subq         $16(%rbx), %rax
	LONG $0x10aa870f; WORD $0x0000             // ja           LBB78_266, $4266(%rip)
	LONG $0x064ab70f                           // movzwl       $6(%rdx), %ecx
	LONG $0x08428b48                           // movq         $8(%rdx), %rax
	WORD $0x008a                               // movb         (%rax), %al
	LONG $0x08738948                           // movq         %rsi, $8(%rbx)
	WORD $0x8b48; BYTE $0x33                   // movq         (%rbx), %rsi
	LONG $0x78bd8948; WORD $0xffff; BYTE $0xff // movq         %rdi, $-136(%rbp)
	WORD $0x0488; BYTE $0x3e                   // movb         %al, (%rsi,%rdi)
	LONG $0x08738b48                           // movq         $8(%rbx), %rsi
	LONG $0x027e8d48                           // leaq         $2(%rsi), %rdi
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	LONG $0x10432b48                           // subq         $16(%rbx), %rax
	LONG $0x107a870f; WORD $0x0000             // ja           LBB78_266, $4218(%rip)
	LONG $0x08c1c166                           // rolw         $8, %cx
	LONG $0x087b8948                           // movq         %rdi, $8(%rbx)
	WORD $0x8b48; BYTE $0x03                   // movq         (%rbx), %rax
	LONG $0x300c8966                           // movw         %cx, (%rax,%rsi)
	LONG $0x010004b8; BYTE $0x00               // movl         $65540, %eax
	WORD $0x8948; BYTE $0xd1                   // movq         %rdx, %rcx
	LONG $0x38958948; WORD $0xffff; BYTE $0xff // movq         %rdx, $-200(%rbp)

LBB78_91:
	WORD $0x8b49; BYTE $0x0f                   // movq         (%r15), %rcx
	LONG $0x00f98148; WORD $0x0010; BYTE $0x00 // cmpq         $4096, %rcx
	LONG $0x1451830f; WORD $0x0000             // jae          LBB78_327, $5201(%rip)
	LONG $0x01718d48                           // leaq         $1(%rcx), %rsi
	WORD $0x8949; BYTE $0x37                   // movq         %rsi, (%r15)
	LONG $0x490c8d48                           // leaq         (%rcx,%rcx,2), %rcx
	LONG $0x04e1c148                           // shlq         $4, %rcx
	LONG $0x0f448949; BYTE $0x68               // movq         %rax, $104(%r15,%rcx)
	LONG $0x0f44894d; BYTE $0x70               // movq         %r8, $112(%r15,%rcx)
	LONG $0x08428b48                           // movq         $8(%rdx), %rax
	LONG $0x0f448949; BYTE $0x78               // movq         %rax, $120(%r15,%rcx)
	QUAD $0x000000800f84c749; LONG $0x00000000 // movq         $0, $128(%r15,%rcx)
	QUAD $0x000000880f948949                   // movq         %rdx, $136(%r15,%rcx)
	LONG $0x064ab70f                           // movzwl       $6(%rdx), %ecx
	WORD $0x8948; BYTE $0xc8                   // movq         %rcx, %rax
	LONG $0x06e8c148                           // shrq         $6, %rax
	LONG $0x000001be; BYTE $0x00               // movl         $1, %esi
	WORD $0xd348; BYTE $0xe6                   // shlq         %cl, %rsi

LBB78_93:
	QUAD $0x000000882f8c8b4b     // movq         $136(%r15,%r13), %rcx
	WORD $0xf748; BYTE $0xd6     // notq         %rsi
	LONG $0xc1342148             // andq         %rsi, (%rcx,%rax,8)
	LONG $0xfff694e9; BYTE $0xff // jmp          LBB78_4, $-2412(%rip)

LBB78_94:
	LONG $0xff7085f6; WORD $0xffff; BYTE $0x01 // testb        $1, $-144(%rbp)
	LONG $0x1077840f; WORD $0x0000             // je           LBB78_275, $4215(%rip)
	QUAD $0x000000006d048d4a                   // leaq         (,%r13,2), %rax
	WORD $0x014c; BYTE $0xe8                   // addq         %r13, %rax
	LONG $0x04e0c148                           // shlq         $4, %rax
	QUAD $0x020004383844c74a; BYTE $0x00       // movq         $131076, $56(%rax,%r15)
	LONG $0x3864894e; BYTE $0x40               // movq         %r12, $64(%rax,%r15)
	QUAD $0x000000483844c74a; BYTE $0x00       // movq         $0, $72(%rax,%r15)
	LONG $0x50a58b4c; WORD $0xffff; BYTE $0xff // movq         $-176(%rbp), %r12
	LONG $0xfff655e9; BYTE $0xff               // jmp          LBB78_4, $-2475(%rip)

LBB78_96:
	LONG $0xff7085f6; WORD $0xffff; BYTE $0x01 // testb        $1, $-144(%rbp)
	LONG $0x10ae840f; WORD $0x0000             // je           LBB78_283, $4270(%rip)
	WORD $0x8b49; BYTE $0x07                   // movq         (%r15), %rax
	LONG $0x10003d48; WORD $0x0000             // cmpq         $4096, %rax
	LONG $0x58958b48; WORD $0xffff; BYTE $0xff // movq         $-168(%rbp), %rdx
	LONG $0x13d9830f; WORD $0x0000             // jae          LBB78_330, $5081(%rip)
	LONG $0x01488d48                           // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0f                   // movq         %rcx, (%r15)
	LONG $0x40048d48                           // leaq         (%rax,%rax,2), %rax
	LONG $0x04e0c148                           // shlq         $4, %rax
	QUAD $0x020004680744c749; BYTE $0x00       // movq         $131076, $104(%r15,%rax)
	LONG $0x07548949; BYTE $0x70               // movq         %rdx, $112(%r15,%rax)
	QUAD $0x000000780744c749; BYTE $0x00       // movq         $0, $120(%r15,%rax)
	LONG $0xfff607e9; BYTE $0xff               // jmp          LBB78_4, $-2553(%rip)

LBB78_99:
	LONG $0x0bf88348                           // cmpq         $11, %rax
	LONG $0x1088850f; WORD $0x0000             // jne          LBB78_284, $4232(%rip)
	WORD $0x894c; BYTE $0xc1                   // movq         %r8, %rcx
	LONG $0x04c18348                           // addq         $4, %rcx
	LONG $0x0603840f; WORD $0x0000             // je           LBB78_168, $1539(%rip)
	LONG $0x78b58b48; WORD $0xffff; BYTE $0xff // movq         $-136(%rbp), %rsi
	WORD $0x0148; BYTE $0xf1                   // addq         %rsi, %rcx
	WORD $0x8948; BYTE $0xc8                   // movq         %rcx, %rax
	LONG $0xb0558b48                           // movq         $-80(%rbp), %rdx
	LONG $0x10422b48                           // subq         $16(%rdx), %rax
	LONG $0x11d6870f; WORD $0x0000             // ja           LBB78_308, $4566(%rip)
	LONG $0x084a8948                           // movq         %rcx, $8(%rdx)
	WORD $0x8944; BYTE $0xc1                   // movl         %r8d, %ecx
	WORD $0xc90f                               // bswapl       %ecx
	WORD $0x8b48; BYTE $0x02                   // movq         (%rdx), %rax
	WORD $0x0c89; BYTE $0x30                   // movl         %ecx, (%rax,%rsi)
	WORD $0x854d; BYTE $0xc0                   // testq        %r8, %r8
	LONG $0x0753840f; WORD $0x0000             // je           LBB78_182, $1875(%rip)
	WORD $0x0148; BYTE $0xf0                   // addq         %rsi, %rax
	LONG $0x04c08348                           // addq         $4, %rax
	LONG $0x10f88349                           // cmpq         $16, %r8
	LONG $0x4085894c; WORD $0xffff; BYTE $0xff // movq         %r8, $-192(%rbp)
	LONG $0x05ec820f; WORD $0x0000             // jb           LBB78_169, $1516(%rip)

LBB78_104:
	WORD $0x8948; BYTE $0xc2                   // movq         %rax, %rdx
	WORD $0x2948; BYTE $0xfa                   // subq         %rdi, %rdx
	LONG $0x000000b9; BYTE $0x00               // movl         $0, %ecx
	LONG $0x80fa8148; WORD $0x0000; BYTE $0x00 // cmpq         $128, %rdx
	LONG $0x09be820f; WORD $0x0000             // jb           LBB78_206, $2494(%rip)
	LONG $0x80f88149; WORD $0x0000; BYTE $0x00 // cmpq         $128, %r8
	LONG $0x0724830f; WORD $0x0000             // jae          LBB78_183, $1828(%rip)
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0x000976e9; BYTE $0x00               // jmp          LBB78_203, $2422(%rip)

LBB78_107:
	LONG $0x78858b48; WORD $0xffff; BYTE $0xff // movq         $-136(%rbp), %rax
	LONG $0xc04d8b48                           // movq         $-64(%rbp), %rcx
	WORD $0x8948; BYTE $0x01                   // movq         %rax, (%rcx)
	QUAD $0x000000882f848b4b                   // movq         $136(%r15,%r13), %rax

LBB78_108:
	LONG $0x00bc45c7; WORD $0x0000; BYTE $0x00 // movl         $0, $-68(%rbp)

LBB78_109:
	WORD $0x8b48; BYTE $0x12     // movq         (%rdx), %rdx
	WORD $0xc80f                 // bswapl       %eax
	LONG $0xb0758b48             // movq         $-80(%rbp), %rsi
	WORD $0x8b48; BYTE $0x36     // movq         (%rsi), %rsi
	WORD $0x0489; BYTE $0x16     // movl         %eax, (%rsi,%rdx)
	LONG $0xfff542e9; BYTE $0xff // jmp          LBB78_3, $-2750(%rip)

LBB78_110:
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0x789d8b48; WORD $0xffff; BYTE $0xff // movq         $-136(%rbp), %rbx
	LONG $0x000c850f; WORD $0x0000             // jne          LBB78_113, $12(%rip)
	LONG $0xc83c8b48                           // movq         (%rax,%rcx,8), %rdi
	LONG $0xd7b30f48                           // btrq         %rdx, %rdi

LBB78_112:
	LONG $0xc83c8948 // movq         %rdi, (%rax,%rcx,8)

LBB78_113:
	LONG $0xc0458b48                           // movq         $-64(%rbp), %rax
	WORD $0x8948; BYTE $0x18                   // movq         %rbx, (%rax)
	LONG $0x00bc45c7; WORD $0x0000; BYTE $0x00 // movl         $0, $-68(%rbp)
	LONG $0xc85d8b48                           // movq         $-56(%rbp), %rbx

LBB78_114:
	QUAD $0x000000802f948b4b                   // movq         $128(%r15,%r13), %rdx
	QUAD $0x000000882f8c8b4b                   // movq         $136(%r15,%r13), %rcx
	QUAD $0x000000902f848b4f                   // movq         $144(%r15,%r13), %r8
	LONG $0xc84d894c                           // movq         %r9, $-56(%rbp)
	LONG $0x240c894c                           // movq         %r9, (%rsp)
	WORD $0x894c; BYTE $0xff                   // movq         %r15, %rdi
	LONG $0x70a58b4c; WORD $0xffff; BYTE $0xff // movq         $-144(%rbp), %r12
	WORD $0x894d; BYTE $0xe1                   // movq         %r12, %r9
	LONG $0xffe09ae8; BYTE $0xff               // callq        _j2t_write_unset_fields, $-8038(%rip)
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x0e57850f; WORD $0x0000             // jne          LBB78_269, $3671(%rip)
	LONG $0x2f048d4b                           // leaq         (%r15,%r13), %rax
	LONG $0x00900548; WORD $0x0000             // addq         $144, %rax
	WORD $0x8b48; BYTE $0x00                   // movq         (%rax), %rax
	LONG $0x03e0c148                           // shlq         $3, %rax
	LONG $0x40472949                           // subq         %rax, $64(%r15)
	LONG $0x08c4f641                           // testb        $8, %r12b
	LONG $0x000e840f; WORD $0x0000             // je           LBB78_117, $14(%rip)
	QUAD $0x0000038078bf8349                   // cmpq         $0, $229496(%r15)
	LONG $0x0ed1850f; WORD $0x0000             // jne          LBB78_277, $3793(%rip)

LBB78_117:
	LONG $0xb0758b48               // movq         $-80(%rbp), %rsi
	LONG $0x084e8b48               // movq         $8(%rsi), %rcx
	LONG $0x01518d48               // leaq         $1(%rcx), %rdx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x10462b48               // subq         $16(%rsi), %rax
	LONG $0x0e09870f; WORD $0x0000 // ja           LBB78_268, $3593(%rip)

LBB78_118:
	LONG $0x08568948                           // movq         %rdx, $8(%rsi)
	WORD $0x8b48; BYTE $0x06                   // movq         (%rsi), %rax
	LONG $0x000804c6                           // movb         $0, (%rax,%rcx)
	WORD $0x8b4d; BYTE $0x07                   // movq         (%r15), %r8
	LONG $0x50a58b4c; WORD $0xffff; BYTE $0xff // movq         $-176(%rbp), %r12
	LONG $0xfff47ae9; BYTE $0xff               // jmp          LBB78_3, $-2950(%rip)

LBB78_119:
	WORD $0xff85                   // testl        %edi, %edi
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	LONG $0x000c850f; WORD $0x0000 // jne          LBB78_122, $12(%rip)
	LONG $0xd03c8b48               // movq         (%rax,%rdx,8), %rdi
	LONG $0xf7b30f48               // btrq         %rsi, %rdi

LBB78_121:
	LONG $0xd03c8948 // movq         %rdi, (%rax,%rdx,8)

LBB78_122:
	LONG $0x78858b48; WORD $0xffff; BYTE $0xff // movq         $-136(%rbp), %rax
	LONG $0xc04d8b48                           // movq         $-64(%rbp), %rcx
	WORD $0x8948; BYTE $0x01                   // movq         %rax, (%rcx)
	LONG $0x00bc45c7; WORD $0x0000; BYTE $0x00 // movl         $0, $-68(%rbp)

LBB78_123:
	LONG $0x00f88149; WORD $0x0010; BYTE $0x00 // cmpq         $4096, %r8
	LONG $0x1131830f; WORD $0x0000             // jae          LBB78_321, $4401(%rip)
	LONG $0x01408d49                           // leaq         $1(%r8), %rax
	WORD $0x8949; BYTE $0x07                   // movq         %rax, (%r15)
	LONG $0x40048d4b                           // leaq         (%r8,%r8,2), %rax
	LONG $0x04e0c148                           // shlq         $4, %rax
	QUAD $0x000003680744c749; BYTE $0x00       // movq         $3, $104(%r15,%rax)
	LONG $0xd04d8b48                           // movq         $-48(%rbp), %rcx
	LONG $0x074c8949; BYTE $0x70               // movq         %rcx, $112(%r15,%rax)
	LONG $0x075c8949; BYTE $0x78               // movq         %rbx, $120(%r15,%rax)
	LONG $0xfff41be9; BYTE $0xff               // jmp          LBB78_4, $-3045(%rip)

LBB78_125:
	LONG $0xc85d8b48                           // movq         $-56(%rbp), %rbx
	WORD $0xb60f; BYTE $0x0b                   // movzbl       (%rbx), %ecx
	LONG $0x0bf98348                           // cmpq         $11, %rcx
	LONG $0x0458850f; WORD $0x0000             // jne          LBB78_170, $1112(%rip)
	LONG $0xff7085f6; WORD $0xffff; BYTE $0x40 // testb        $64, $-144(%rbp)
	LONG $0x003f850f; WORD $0x0000             // jne          LBB78_133, $63(%rip)
	LONG $0x08438b48                           // movq         $8(%rbx), %rax
	WORD $0x3880; BYTE $0x62                   // cmpb         $98, (%rax)
	LONG $0x0032850f; WORD $0x0000             // jne          LBB78_133, $50(%rip)
	LONG $0x69017880                           // cmpb         $105, $1(%rax)
	LONG $0x0028850f; WORD $0x0000             // jne          LBB78_133, $40(%rip)
	LONG $0x6e027880                           // cmpb         $110, $2(%rax)
	LONG $0x001e850f; WORD $0x0000             // jne          LBB78_133, $30(%rip)
	LONG $0x61037880                           // cmpb         $97, $3(%rax)
	LONG $0x0014850f; WORD $0x0000             // jne          LBB78_133, $20(%rip)
	LONG $0x72047880                           // cmpb         $114, $4(%rax)
	LONG $0x000a850f; WORD $0x0000             // jne          LBB78_133, $10(%rip)
	LONG $0x79057880                           // cmpb         $121, $5(%rax)
	LONG $0x0cb9840f; WORD $0x0000             // je           LBB78_258, $3257(%rip)

LBB78_133:
	LONG $0xb07d8b48             // movq         $-80(%rbp), %rdi
	WORD $0x894c; BYTE $0xe6     // movq         %r12, %rsi
	LONG $0xd0558d48             // leaq         $-48(%rbp), %rdx
	WORD $0xc931                 // xorl         %ecx, %ecx
	LONG $0xffe48de8; BYTE $0xff // callq        _j2t_string, $-7027(%rip)
	LONG $0xfff724e9; BYTE $0xff // jmp          LBB78_39, $-2268(%rip)

LBB78_134:
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	WORD $0xb60f; BYTE $0x08                   // movzbl       (%rax), %ecx
	WORD $0xc889                               // movl         %ecx, %eax
	WORD $0xfe24                               // andb         $-2, %al
	WORD $0x0e3c                               // cmpb         $14, %al
	LONG $0x1152850f; WORD $0x0000             // jne          LBB78_331, $4434(%rip)
	LONG $0x520c8d48                           // leaq         (%rdx,%rdx,2), %rcx
	LONG $0x04e1c148                           // shlq         $4, %rcx
	QUAD $0x000000880f84c749; LONG $0x00000000 // movq         $0, $136(%r15,%rcx)
	LONG $0xb05d8b48                           // movq         $-80(%rbp), %rbx
	LONG $0x08738b48                           // movq         $8(%rbx), %rsi
	LONG $0x017e8d48                           // leaq         $1(%rsi), %rdi
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	LONG $0x10432b48                           // subq         $16(%rbx), %rax
	LONG $0x0f1a870f; WORD $0x0000             // ja           LBB78_305, $3866(%rip)
	WORD $0x014c; BYTE $0xf9                   // addq         %r15, %rcx
	LONG $0x80c18148; WORD $0x0000; BYTE $0x00 // addq         $128, %rcx
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	LONG $0x20408b48                           // movq         $32(%rax), %rax
	WORD $0x008a                               // movb         (%rax), %al
	LONG $0x087b8948                           // movq         %rdi, $8(%rbx)
	WORD $0x8b48; BYTE $0x13                   // movq         (%rbx), %rdx
	WORD $0x0488; BYTE $0x32                   // movb         %al, (%rdx,%rsi)
	LONG $0x08438b48                           // movq         $8(%rbx), %rax
	WORD $0x8948; BYTE $0x01                   // movq         %rax, (%rcx)
	LONG $0x08538b48                           // movq         $8(%rbx), %rdx
	LONG $0x04c28348                           // addq         $4, %rdx
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	LONG $0x10432b48                           // subq         $16(%rbx), %rax
	LONG $0x0edd870f; WORD $0x0000             // ja           LBB78_304, $3805(%rip)
	LONG $0xc0458b48                           // movq         $-64(%rbp), %rax
	WORD $0x8948; BYTE $0x10                   // movq         %rdx, (%rax)
	WORD $0x8b49; BYTE $0x17                   // movq         (%r15), %rdx
	LONG $0x00fa8148; WORD $0x0010; BYTE $0x00 // cmpq         $4096, %rdx
	LONG $0x111a830f; WORD $0x0000             // jae          LBB78_334, $4378(%rip)
	LONG $0x01428d48                           // leaq         $1(%rdx), %rax
	WORD $0x8949; BYTE $0x07                   // movq         %rax, (%r15)
	LONG $0x52048d48                           // leaq         (%rdx,%rdx,2), %rax
	LONG $0x04e0c148                           // shlq         $4, %rax
	QUAD $0x000005680744c749; BYTE $0x00       // movq         $5, $104(%r15,%rax)
	LONG $0xd0558b48                           // movq         $-48(%rbp), %rdx
	LONG $0x07548949; BYTE $0x70               // movq         %rdx, $112(%r15,%rax)
	LONG $0xc8558b48                           // movq         $-56(%rbp), %rdx
	LONG $0x07548949; BYTE $0x78               // movq         %rdx, $120(%r15,%rax)
	LONG $0x0110f8c5                           // vmovups      (%rcx), %xmm0
	QUAD $0x008007841178c1c4; WORD $0x0000     // vmovups      %xmm0, $128(%r15,%rax)
	LONG $0x10498b48                           // movq         $16(%rcx), %rcx
	QUAD $0x00000090078c8949                   // movq         %rcx, $144(%r15,%rax)
	LONG $0xfff2cde9; BYTE $0xff               // jmp          LBB78_4, $-3379(%rip)

LBB78_139:
	LONG $0xd0758b48               // movq         $-48(%rbp), %rsi
	LONG $0x24448b49; BYTE $0x08   // movq         $8(%r12), %rax
	LONG $0xfc788d48               // leaq         $-4(%rax), %rdi
	WORD $0x3948; BYTE $0xfe       // cmpq         %rdi, %rsi
	LONG $0x0ce6870f; WORD $0x0000 // ja           LBB78_278, $3302(%rip)
	LONG $0x243c8b49               // movq         (%r12), %rdi
	WORD $0x048b; BYTE $0x37       // movl         (%rdi,%rsi), %eax
	LONG $0x736c613d; BYTE $0x65   // cmpl         $1702063201, %eax
	LONG $0x0da6850f; WORD $0x0000 // jne          LBB78_291, $3494(%rip)
	LONG $0x04468d48               // leaq         $4(%rsi), %rax
	LONG $0xd0458948               // movq         %rax, $-48(%rbp)
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x100b8e0f; WORD $0x0000 // jle          LBB78_328, $4107(%rip)
	LONG $0xc84d8b48               // movq         $-56(%rbp), %rcx
	WORD $0xb60f; BYTE $0x31       // movzbl       (%rcx), %esi
	LONG $0x02fe8348               // cmpq         $2, %rsi
	LONG $0x100a850f; WORD $0x0000 // jne          LBB78_329, $4106(%rip)
	LONG $0xb05d8b48               // movq         $-80(%rbp), %rbx
	LONG $0x08738b48               // movq         $8(%rbx), %rsi
	LONG $0x017e8d48               // leaq         $1(%rsi), %rdi
	WORD $0x8948; BYTE $0xf8       // movq         %rdi, %rax
	LONG $0x10432b48               // subq         $16(%rbx), %rax
	LONG $0x0cc0870f; WORD $0x0000 // ja           LBB78_282, $3264(%rip)
	LONG $0x087b8948               // movq         %rdi, $8(%rbx)
	WORD $0x8b48; BYTE $0x03       // movq         (%rbx), %rax
	LONG $0x003004c6               // movb         $0, (%rax,%rsi)
	LONG $0xfff25ae9; BYTE $0xff   // jmp          LBB78_4, $-3494(%rip)

LBB78_145:
	LONG $0xd04d8b48                           // movq         $-48(%rbp), %rcx
	LONG $0x24448b49; BYTE $0x08               // movq         $8(%r12), %rax
	LONG $0xfd508d48                           // leaq         $-3(%rax), %rdx
	WORD $0x3948; BYTE $0xd1                   // cmpq         %rdx, %rcx
	LONG $0x0d36870f; WORD $0x0000             // ja           LBB78_290, $3382(%rip)
	LONG $0x24348b49                           // movq         (%r12), %rsi
	LONG $0xff0e7c8b                           // movl         $-1(%rsi,%rcx), %edi
	LONG $0x756eff81; WORD $0x6c6c             // cmpl         $1819047278, %edi
	LONG $0x0d62850f; WORD $0x0000             // jne          LBB78_295, $3426(%rip)
	LONG $0x03418d48                           // leaq         $3(%rcx), %rax
	LONG $0xd0458948                           // movq         %rax, $-48(%rbp)
	WORD $0x8548; BYTE $0xc9                   // testq        %rcx, %rcx
	LONG $0x10138e0f; WORD $0x0000             // jle          LBB78_333, $4115(%rip)
	WORD $0x01b1                               // movb         $1, %cl
	WORD $0x4d89; BYTE $0xbc                   // movl         %ecx, $-68(%rbp)
	LONG $0x00c6f741; WORD $0x0100; BYTE $0x00 // testl        $65536, %r14d
	LONG $0xf20d840f; WORD $0xffff             // je           LBB78_4, $-3571(%rip)
	QUAD $0x000000882f8c8b4b                   // movq         $136(%r15,%r13), %rcx
	LONG $0x02027980                           // cmpb         $2, $2(%rcx)
	LONG $0xf1fb850f; WORD $0xffff             // jne          LBB78_4, $-3589(%rip)
	LONG $0x001055e9; BYTE $0x00               // jmp          LBB78_336, $4181(%rip)

LBB78_150:
	LONG $0xd0758b48               // movq         $-48(%rbp), %rsi
	LONG $0x24448b49; BYTE $0x08   // movq         $8(%r12), %rax
	LONG $0xfd788d48               // leaq         $-3(%rax), %rdi
	WORD $0x3948; BYTE $0xfe       // cmpq         %rdi, %rsi
	LONG $0x0c0f870f; WORD $0x0000 // ja           LBB78_278, $3087(%rip)
	LONG $0x243c8b49               // movq         (%r12), %rdi
	LONG $0xff375c8b               // movl         $-1(%rdi,%rsi), %ebx
	LONG $0x7274fb81; WORD $0x6575 // cmpl         $1702195828, %ebx
	LONG $0x0d45850f; WORD $0x0000 // jne          LBB78_300, $3397(%rip)
	LONG $0x03468d48               // leaq         $3(%rsi), %rax
	LONG $0xd0458948               // movq         %rax, $-48(%rbp)
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0f328e0f; WORD $0x0000 // jle          LBB78_328, $3890(%rip)
	LONG $0xc84d8b48               // movq         $-56(%rbp), %rcx
	WORD $0xb60f; BYTE $0x31       // movzbl       (%rcx), %esi
	LONG $0x02fe8348               // cmpq         $2, %rsi
	LONG $0x0f31850f; WORD $0x0000 // jne          LBB78_329, $3889(%rip)
	LONG $0xb05d8b48               // movq         $-80(%rbp), %rbx
	LONG $0x08738b48               // movq         $8(%rbx), %rsi
	LONG $0x017e8d48               // leaq         $1(%rsi), %rdi
	WORD $0x8948; BYTE $0xf8       // movq         %rdi, %rax
	LONG $0x10432b48               // subq         $16(%rbx), %rax
	LONG $0x0be7870f; WORD $0x0000 // ja           LBB78_282, $3047(%rip)
	LONG $0x087b8948               // movq         %rdi, $8(%rbx)
	WORD $0x8b48; BYTE $0x03       // movq         (%rbx), %rax
	LONG $0x013004c6               // movb         $1, (%rax,%rsi)
	LONG $0xfff181e9; BYTE $0xff   // jmp          LBB78_4, $-3711(%rip)

LBB78_156:
	LONG $0xc8758b48                           // movq         $-56(%rbp), %rsi
	WORD $0xb60f; BYTE $0x0e                   // movzbl       (%rsi), %ecx
	WORD $0xc889                               // movl         %ecx, %eax
	WORD $0xfe24                               // andb         $-2, %al
	WORD $0x0c3c                               // cmpb         $12, %al
	LONG $0x0f47850f; WORD $0x0000             // jne          LBB78_332, $3911(%rip)
	LONG $0x523c8d48                           // leaq         (%rdx,%rdx,2), %rdi
	WORD $0xf980; BYTE $0x0c                   // cmpb         $12, %cl
	LONG $0x0225850f; WORD $0x0000             // jne          LBB78_177, $549(%rip)
	LONG $0x28468b48                           // movq         $40(%rsi), %rax
	LONG $0x04e7c148                           // shlq         $4, %rdi
	QUAD $0x000000803f848949                   // movq         %rax, $128(%r15,%rdi)
	LONG $0xc057f8c5                           // vxorps       %xmm0, %xmm0, %xmm0
	QUAD $0x00883f841178c1c4; WORD $0x0000     // vmovups      %xmm0, $136(%r15,%rdi)
	WORD $0x8b49; BYTE $0x0f                   // movq         (%r15), %rcx
	LONG $0x00f98148; WORD $0x0010; BYTE $0x00 // cmpq         $4096, %rcx
	LONG $0x0b71830f; WORD $0x0000             // jae          LBB78_280, $2929(%rip)
	LONG $0x01418d48                           // leaq         $1(%rcx), %rax
	WORD $0x8949; BYTE $0x07                   // movq         %rax, (%r15)
	LONG $0x490c8d48                           // leaq         (%rcx,%rcx,2), %rcx
	LONG $0x04e1c148                           // shlq         $4, %rcx
	QUAD $0x000006680f44c749; BYTE $0x00       // movq         $6, $104(%r15,%rcx)
	LONG $0xd04d8b4c                           // movq         $-48(%rbp), %r9
	LONG $0x0f4c894d; BYTE $0x70               // movq         %r9, $112(%r15,%rcx)
	LONG $0x0f748949; BYTE $0x78               // movq         %rsi, $120(%r15,%rcx)
	LONG $0x28568b48                           // movq         $40(%rsi), %rdx
	LONG $0x80aa8b4c; WORD $0x0000; BYTE $0x00 // movq         $128(%rdx), %r13
	LONG $0x405f8b4d                           // movq         $64(%r15), %r11
	LONG $0xeb148d4f                           // leaq         (%r11,%r13,8), %r10
	WORD $0x894c; BYTE $0xd0                   // movq         %r10, %rax
	LONG $0x48472b49                           // subq         $72(%r15), %rax
	LONG $0x0f09870f; WORD $0x0000             // ja           LBB78_335, $3849(%rip)
	LONG $0x3f048d49                           // leaq         (%r15,%rdi), %rax
	LONG $0x00880548; WORD $0x0000             // addq         $136, %rax
	QUAD $0x00000000ed1c8d4a                   // leaq         (,%r13,8), %rbx
	LONG $0x78728b48                           // movq         $120(%rdx), %rsi
	LONG $0x38478b4d                           // movq         $56(%r15), %r8
	LONG $0x18248d4f                           // leaq         (%r8,%r11), %r12
	WORD $0x894c; BYTE $0x20                   // movq         %r12, (%rax)
	QUAD $0x000000903fac894d                   // movq         %r13, $144(%r15,%rdi)
	WORD $0x8548; BYTE $0xdb                   // testq        %rbx, %rbx
	LONG $0x005b840f; WORD $0x0000             // je           LBB78_241, $91(%rip)
	LONG $0x10fb8348                           // cmpq         $16, %rbx
	LONG $0x0012820f; WORD $0x0000             // jb           LBB78_162, $18(%rip)
	WORD $0x894c; BYTE $0xe0                   // movq         %r12, %rax
	WORD $0x2948; BYTE $0xf0                   // subq         %rsi, %rax
	LONG $0x00803d48; WORD $0x0000             // cmpq         $128, %rax
	LONG $0x0554830f; WORD $0x0000             // jae          LBB78_212, $1364(%rip)

LBB78_162:
	WORD $0xc031 // xorl         %eax, %eax

LBB78_239:
	LONG $0x180c8d4b               // leaq         (%r8,%r11), %rcx
	LONG $0x03c18348               // addq         $3, %rcx
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB78_240:
	LONG $0x0614b60f               // movzbl       (%rsi,%rax), %edx
	LONG $0xfd015488               // movb         %dl, $-3(%rcx,%rax)
	LONG $0x0654b60f; BYTE $0x01   // movzbl       $1(%rsi,%rax), %edx
	LONG $0xfe015488               // movb         %dl, $-2(%rcx,%rax)
	LONG $0x0654b60f; BYTE $0x02   // movzbl       $2(%rsi,%rax), %edx
	LONG $0xff015488               // movb         %dl, $-1(%rcx,%rax)
	LONG $0x0654b60f; BYTE $0x03   // movzbl       $3(%rsi,%rax), %edx
	WORD $0x1488; BYTE $0x01       // movb         %dl, (%rcx,%rax)
	LONG $0x04c08348               // addq         $4, %rax
	WORD $0x3948; BYTE $0xc3       // cmpq         %rax, %rbx
	LONG $0xffd1850f; WORD $0xffff // jne          LBB78_240, $-47(%rip)

LBB78_241:
	LONG $0x4057894d                           // movq         %r10, $64(%r15)
	LONG $0xff7085f6; WORD $0xffff; BYTE $0x08 // testb        $8, $-144(%rbp)
	LONG $0x030c850f; WORD $0x0000             // jne          LBB78_243, $780(%rip)
	LONG $0x50a58b4c; WORD $0xffff; BYTE $0xff // movq         $-176(%rbp), %r12
	LONG $0xfff043e9; BYTE $0xff               // jmp          LBB78_4, $-4029(%rip)

LBB78_163:
	LONG $0x0bf88348                           // cmpq         $11, %rax
	LONG $0x0c85850f; WORD $0x0000             // jne          LBB78_313, $3205(%rip)
	WORD $0x894c; BYTE $0xc1                   // movq         %r8, %rcx
	LONG $0x04c18348                           // addq         $4, %rcx
	LONG $0x0289840f; WORD $0x0000             // je           LBB78_186, $649(%rip)
	LONG $0x78b58b48; WORD $0xffff; BYTE $0xff // movq         $-136(%rbp), %rsi
	WORD $0x0148; BYTE $0xf1                   // addq         %rsi, %rcx
	WORD $0x8948; BYTE $0xc8                   // movq         %rcx, %rax
	LONG $0xb0558b48                           // movq         $-80(%rbp), %rdx
	LONG $0x10422b48                           // subq         $16(%rdx), %rax
	LONG $0x0cbf870f; WORD $0x0000             // ja           LBB78_318, $3263(%rip)
	LONG $0x084a8948                           // movq         %rcx, $8(%rdx)
	WORD $0x8944; BYTE $0xc1                   // movl         %r8d, %ecx
	WORD $0xc90f                               // bswapl       %ecx
	WORD $0x8b48; BYTE $0x02                   // movq         (%rdx), %rax
	WORD $0x0c89; BYTE $0x30                   // movl         %ecx, (%rax,%rsi)
	WORD $0x854d; BYTE $0xc0                   // testq        %r8, %r8
	LONG $0x02d8840f; WORD $0x0000             // je           LBB78_191, $728(%rip)
	WORD $0x0148; BYTE $0xf0                   // addq         %rsi, %rax
	LONG $0x04c08348                           // addq         $4, %rax
	LONG $0x00026de9; BYTE $0x00               // jmp          LBB78_187, $621(%rip)

LBB78_168:
	WORD $0x0f41; BYTE $0xc8                   // bswapl       %r8d
	LONG $0xb0458b48                           // movq         $-80(%rbp), %rax
	WORD $0x8b48; BYTE $0x00                   // movq         (%rax), %rax
	LONG $0x788d8b48; WORD $0xffff; BYTE $0xff // movq         $-136(%rbp), %rcx
	LONG $0x08048944                           // movl         %r8d, (%rax,%rcx)
	WORD $0x0148; BYTE $0xc8                   // addq         %rcx, %rax
	LONG $0x04c08348                           // addq         $4, %rax
	LONG $0xfcc0c749; WORD $0xffff; BYTE $0xff // movq         $-4, %r8
	LONG $0x10f88349                           // cmpq         $16, %r8
	LONG $0x4085894c; WORD $0xffff; BYTE $0xff // movq         %r8, $-192(%rbp)
	LONG $0xfa14830f; WORD $0xffff             // jae          LBB78_104, $-1516(%rip)

LBB78_169:
	WORD $0xc931                 // xorl         %ecx, %ecx
	LONG $0x0003e3e9; BYTE $0x00 // jmp          LBB78_206, $995(%rip)

LBB78_170:
	LONG $0xff7085f6; WORD $0xffff; BYTE $0x10 // testb        $16, $-144(%rbp)
	LONG $0x0c08840f; WORD $0x0000             // je           LBB78_314, $3080(%rip)
	WORD $0xf980; BYTE $0x0a                   // cmpb         $10, %cl
	LONG $0x0bff870f; WORD $0x0000             // ja           LBB78_314, $3071(%rip)
	LONG $0x000548b8; BYTE $0x00               // movl         $1352, %eax
	LONG $0xc8a30f48                           // btq          %rcx, %rax
	LONG $0x0bf0830f; WORD $0x0000             // jae          LBB78_314, $3056(%rip)
	LONG $0xb07d8b48                           // movq         $-80(%rbp), %rdi
	WORD $0x8948; BYTE $0xde                   // movq         %rbx, %rsi
	WORD $0x894c; BYTE $0xe2                   // movq         %r12, %rdx
	LONG $0xd04d8d48                           // leaq         $-48(%rbp), %rcx
	LONG $0x30858b4c; WORD $0xffff; BYTE $0xff // movq         $-208(%rbp), %r8
	LONG $0xffddc4e8; BYTE $0xff               // callq        _j2t_number, $-8764(%rip)
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x0c75850f; WORD $0x0000             // jne          LBB78_323, $3189(%rip)
	LONG $0xd0458b48                           // movq         $-48(%rbp), %rax
	LONG $0x24443b49; BYTE $0x08               // cmpq         $8(%r12), %rax
	LONG $0x0a37830f; WORD $0x0000             // jae          LBB78_288, $2615(%rip)
	LONG $0x240c8b49                           // movq         (%r12), %rcx
	LONG $0x0cbe0f48; BYTE $0x01               // movsbq       (%rcx,%rax), %rcx
	LONG $0x22f98348                           // cmpq         $34, %rcx
	LONG $0x0be2850f; WORD $0x0000             // jne          LBB78_317, $3042(%rip)
	WORD $0xff48; BYTE $0xc0                   // incq         %rax
	LONG $0xd0458948                           // movq         %rax, $-48(%rbp)
	LONG $0xffef3ce9; BYTE $0xff               // jmp          LBB78_4, $-4292(%rip)

LBB78_177:
	LONG $0x04e7c148                           // shlq         $4, %rdi
	LONG $0xc057f8c5                           // vxorps       %xmm0, %xmm0, %xmm0
	QUAD $0x00803f841178c1c4; WORD $0x0000     // vmovups      %xmm0, $128(%r15,%rdi)
	LONG $0xb05d8b48                           // movq         $-80(%rbp), %rbx
	LONG $0x08538b48                           // movq         $8(%rbx), %rdx
	LONG $0x01728d48                           // leaq         $1(%rdx), %rsi
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	LONG $0x10432b48                           // subq         $16(%rbx), %rax
	LONG $0x09b3870f; WORD $0x0000             // ja           LBB78_285, $2483(%rip)
	LONG $0xc84d8b48                           // movq         $-56(%rbp), %rcx
	LONG $0x20418b48                           // movq         $32(%rcx), %rax
	WORD $0x8a44; BYTE $0x00                   // movb         (%rax), %r8b
	LONG $0x18418b48                           // movq         $24(%rcx), %rax
	WORD $0x008a                               // movb         (%rax), %al
	LONG $0x08738948                           // movq         %rsi, $8(%rbx)
	WORD $0x8b48; BYTE $0x33                   // movq         (%rbx), %rsi
	WORD $0x0488; BYTE $0x16                   // movb         %al, (%rsi,%rdx)
	LONG $0x08538b48                           // movq         $8(%rbx), %rdx
	LONG $0x01728d48                           // leaq         $1(%rdx), %rsi
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	LONG $0x10432b48                           // subq         $16(%rbx), %rax
	LONG $0x0983870f; WORD $0x0000             // ja           LBB78_285, $2435(%rip)
	LONG $0x3f048d49                           // leaq         (%r15,%rdi), %rax
	LONG $0x00800548; WORD $0x0000             // addq         $128, %rax
	LONG $0x08738948                           // movq         %rsi, $8(%rbx)
	WORD $0x8b48; BYTE $0x33                   // movq         (%rbx), %rsi
	LONG $0x16048844                           // movb         %r8b, (%rsi,%rdx)
	LONG $0x084b8b48                           // movq         $8(%rbx), %rcx
	WORD $0x8948; BYTE $0x08                   // movq         %rcx, (%rax)
	LONG $0x084b8b48                           // movq         $8(%rbx), %rcx
	LONG $0x04c18348                           // addq         $4, %rcx
	WORD $0x8948; BYTE $0xc8                   // movq         %rcx, %rax
	LONG $0x10432b48                           // subq         $16(%rbx), %rax
	LONG $0x0952870f; WORD $0x0000             // ja           LBB78_285, $2386(%rip)
	LONG $0xc0458b48                           // movq         $-64(%rbp), %rax
	WORD $0x8948; BYTE $0x08                   // movq         %rcx, (%rax)
	WORD $0x8b49; BYTE $0x0f                   // movq         (%r15), %rcx
	LONG $0x00f98148; WORD $0x0010; BYTE $0x00 // cmpq         $4096, %rcx
	LONG $0xc8558b48                           // movq         $-56(%rbp), %rdx
	LONG $0x08d3830f; WORD $0x0000             // jae          LBB78_280, $2259(%rip)
	LONG $0x01418d48                           // leaq         $1(%rcx), %rax
	WORD $0x8949; BYTE $0x07                   // movq         %rax, (%r15)
	LONG $0x49048d48                           // leaq         (%rcx,%rcx,2), %rax
	LONG $0x04e0c148                           // shlq         $4, %rax
	QUAD $0x000006680744c749; BYTE $0x00       // movq         $6, $104(%r15,%rax)
	LONG $0xd04d8b48                           // movq         $-48(%rbp), %rcx
	LONG $0x074c8949; BYTE $0x70               // movq         %rcx, $112(%r15,%rax)
	LONG $0x07548949; BYTE $0x78               // movq         %rdx, $120(%r15,%rax)
	LONG $0xffee6ae9; BYTE $0xff               // jmp          LBB78_4, $-4502(%rip)

LBB78_182:
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x40858948; WORD $0xffff; BYTE $0xff // movq         %rax, $-192(%rbp)
	LONG $0xfff0a7e9; BYTE $0xff               // jmp          LBB78_27, $-3929(%rip)

LBB78_183:
	WORD $0x894c; BYTE $0xc1       // movq         %r8, %rcx
	LONG $0x80e18348               // andq         $-128, %rcx
	LONG $0x80718d48               // leaq         $-128(%rcx), %rsi
	WORD $0x8948; BYTE $0xf3       // movq         %rsi, %rbx
	LONG $0x07ebc148               // shrq         $7, %rbx
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x01eb840f; WORD $0x0000 // je           LBB78_198, $491(%rip)
	WORD $0x8948; BYTE $0xda       // movq         %rbx, %rdx
	LONG $0xfee28348               // andq         $-2, %rdx
	WORD $0xf631                   // xorl         %esi, %esi
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB78_185:
	LONG $0x0410fcc5; BYTE $0x37               // vmovups      (%rdi,%rsi), %ymm0
	LONG $0x4c10fcc5; WORD $0x2037             // vmovups      $32(%rdi,%rsi), %ymm1
	LONG $0x5410fcc5; WORD $0x4037             // vmovups      $64(%rdi,%rsi), %ymm2
	LONG $0x5c10fcc5; WORD $0x6037             // vmovups      $96(%rdi,%rsi), %ymm3
	LONG $0x0411fcc5; BYTE $0x30               // vmovups      %ymm0, (%rax,%rsi)
	LONG $0x4c11fcc5; WORD $0x2030             // vmovups      %ymm1, $32(%rax,%rsi)
	LONG $0x5411fcc5; WORD $0x4030             // vmovups      %ymm2, $64(%rax,%rsi)
	LONG $0x5c11fcc5; WORD $0x6030             // vmovups      %ymm3, $96(%rax,%rsi)
	QUAD $0x000080378410fcc5; BYTE $0x00       // vmovups      $128(%rdi,%rsi), %ymm0
	QUAD $0x0000a0378c10fcc5; BYTE $0x00       // vmovups      $160(%rdi,%rsi), %ymm1
	QUAD $0x0000c0379410fcc5; BYTE $0x00       // vmovups      $192(%rdi,%rsi), %ymm2
	QUAD $0x0000e0379c10fcc5; BYTE $0x00       // vmovups      $224(%rdi,%rsi), %ymm3
	QUAD $0x000080308411fcc5; BYTE $0x00       // vmovups      %ymm0, $128(%rax,%rsi)
	QUAD $0x0000a0308c11fcc5; BYTE $0x00       // vmovups      %ymm1, $160(%rax,%rsi)
	QUAD $0x0000c0309411fcc5; BYTE $0x00       // vmovups      %ymm2, $192(%rax,%rsi)
	QUAD $0x0000e0309c11fcc5; BYTE $0x00       // vmovups      %ymm3, $224(%rax,%rsi)
	LONG $0x00c68148; WORD $0x0001; BYTE $0x00 // addq         $256, %rsi
	LONG $0xfec28348                           // addq         $-2, %rdx
	LONG $0xff79850f; WORD $0xffff             // jne          LBB78_185, $-135(%rip)
	LONG $0x000152e9; BYTE $0x00               // jmp          LBB78_199, $338(%rip)

LBB78_186:
	WORD $0x0f41; BYTE $0xc8                   // bswapl       %r8d
	LONG $0xb0458b48                           // movq         $-80(%rbp), %rax
	WORD $0x8b48; BYTE $0x00                   // movq         (%rax), %rax
	LONG $0x788d8b48; WORD $0xffff; BYTE $0xff // movq         $-136(%rbp), %rcx
	LONG $0x08048944                           // movl         %r8d, (%rax,%rcx)
	WORD $0x0148; BYTE $0xc8                   // addq         %rcx, %rax
	LONG $0x04c08348                           // addq         $4, %rax
	LONG $0xfcc0c749; WORD $0xffff; BYTE $0xff // movq         $-4, %r8

LBB78_187:
	LONG $0x10f88349                           // cmpq         $16, %r8
	LONG $0x4885894c; WORD $0xffff; BYTE $0xff // movq         %r8, $-184(%rbp)
	LONG $0x005c820f; WORD $0x0000             // jb           LBB78_194, $92(%rip)
	WORD $0x8948; BYTE $0xc2                   // movq         %rax, %rdx
	WORD $0x2948; BYTE $0xfa                   // subq         %rdi, %rdx
	LONG $0x000000b9; BYTE $0x00               // movl         $0, %ecx
	LONG $0x80fa8148; WORD $0x0000; BYTE $0x00 // cmpq         $128, %rdx
	LONG $0x02a8820f; WORD $0x0000             // jb           LBB78_222, $680(%rip)
	LONG $0x80f88149; WORD $0x0000; BYTE $0x00 // cmpq         $128, %r8
	LONG $0x003e830f; WORD $0x0000             // jae          LBB78_195, $62(%rip)
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0x00025ce9; BYTE $0x00               // jmp          LBB78_219, $604(%rip)

LBB78_243:
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	LONG $0x28408b48                           // movq         $40(%rax), %rax
	QUAD $0x0000000090b88348                   // cmpq         $0, $144(%rax)
	LONG $0x50a58b4c; WORD $0xffff; BYTE $0xff // movq         $-176(%rbp), %r12
	LONG $0xed26840f; WORD $0xffff             // je           LBB78_4, $-4826(%rip)
	LONG $0x000a19e9; BYTE $0x00               // jmp          LBB78_322, $2585(%rip)

LBB78_191:
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x48858948; WORD $0xffff; BYTE $0xff // movq         %rax, $-184(%rbp)
	LONG $0xfff401e9; BYTE $0xff               // jmp          LBB78_71, $-3071(%rip)

LBB78_194:
	WORD $0xc931                 // xorl         %ecx, %ecx
	LONG $0x00025de9; BYTE $0x00 // jmp          LBB78_222, $605(%rip)

LBB78_195:
	WORD $0x894c; BYTE $0xc1       // movq         %r8, %rcx
	LONG $0x80e18348               // andq         $-128, %rcx
	LONG $0x80718d48               // leaq         $-128(%rcx), %rsi
	WORD $0x8948; BYTE $0xf3       // movq         %rsi, %rbx
	LONG $0x07ebc148               // shrq         $7, %rbx
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x01b7840f; WORD $0x0000 // je           LBB78_214, $439(%rip)
	WORD $0x8948; BYTE $0xda       // movq         %rbx, %rdx
	LONG $0xfee28348               // andq         $-2, %rdx
	WORD $0xf631                   // xorl         %esi, %esi
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB78_197:
	LONG $0x0410fcc5; BYTE $0x37               // vmovups      (%rdi,%rsi), %ymm0
	LONG $0x4c10fcc5; WORD $0x2037             // vmovups      $32(%rdi,%rsi), %ymm1
	LONG $0x5410fcc5; WORD $0x4037             // vmovups      $64(%rdi,%rsi), %ymm2
	LONG $0x5c10fcc5; WORD $0x6037             // vmovups      $96(%rdi,%rsi), %ymm3
	LONG $0x0411fcc5; BYTE $0x30               // vmovups      %ymm0, (%rax,%rsi)
	LONG $0x4c11fcc5; WORD $0x2030             // vmovups      %ymm1, $32(%rax,%rsi)
	LONG $0x5411fcc5; WORD $0x4030             // vmovups      %ymm2, $64(%rax,%rsi)
	LONG $0x5c11fcc5; WORD $0x6030             // vmovups      %ymm3, $96(%rax,%rsi)
	QUAD $0x000080378410fcc5; BYTE $0x00       // vmovups      $128(%rdi,%rsi), %ymm0
	QUAD $0x0000a0378c10fcc5; BYTE $0x00       // vmovups      $160(%rdi,%rsi), %ymm1
	QUAD $0x0000c0379410fcc5; BYTE $0x00       // vmovups      $192(%rdi,%rsi), %ymm2
	QUAD $0x0000e0379c10fcc5; BYTE $0x00       // vmovups      $224(%rdi,%rsi), %ymm3
	QUAD $0x000080308411fcc5; BYTE $0x00       // vmovups      %ymm0, $128(%rax,%rsi)
	QUAD $0x0000a0308c11fcc5; BYTE $0x00       // vmovups      %ymm1, $160(%rax,%rsi)
	QUAD $0x0000c0309411fcc5; BYTE $0x00       // vmovups      %ymm2, $192(%rax,%rsi)
	QUAD $0x0000e0309c11fcc5; BYTE $0x00       // vmovups      %ymm3, $224(%rax,%rsi)
	LONG $0x00c68148; WORD $0x0001; BYTE $0x00 // addq         $256, %rsi
	LONG $0xfec28348                           // addq         $-2, %rdx
	LONG $0xff79850f; WORD $0xffff             // jne          LBB78_197, $-135(%rip)
	LONG $0x00011ee9; BYTE $0x00               // jmp          LBB78_215, $286(%rip)

LBB78_198:
	WORD $0xf631 // xorl         %esi, %esi

LBB78_199:
	WORD $0xc3f6; BYTE $0x01       // testb        $1, %bl
	LONG $0x002e840f; WORD $0x0000 // je           LBB78_201, $46(%rip)
	LONG $0x0410fcc5; BYTE $0x37   // vmovups      (%rdi,%rsi), %ymm0
	LONG $0x4c10fcc5; WORD $0x2037 // vmovups      $32(%rdi,%rsi), %ymm1
	LONG $0x5410fcc5; WORD $0x4037 // vmovups      $64(%rdi,%rsi), %ymm2
	LONG $0x5c10fcc5; WORD $0x6037 // vmovups      $96(%rdi,%rsi), %ymm3
	LONG $0x0411fcc5; BYTE $0x30   // vmovups      %ymm0, (%rax,%rsi)
	LONG $0x4c11fcc5; WORD $0x2030 // vmovups      %ymm1, $32(%rax,%rsi)
	LONG $0x5411fcc5; WORD $0x4030 // vmovups      %ymm2, $64(%rax,%rsi)
	LONG $0x5c11fcc5; WORD $0x6030 // vmovups      %ymm3, $96(%rax,%rsi)

LBB78_201:
	WORD $0x3949; BYTE $0xc8       // cmpq         %rcx, %r8
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	LONG $0xee58840f; WORD $0xffff // je           LBB78_27, $-4520(%rip)
	LONG $0x70c0f641               // testb        $112, %r8b
	LONG $0x0034840f; WORD $0x0000 // je           LBB78_206, $52(%rip)

LBB78_203:
	WORD $0x8948; BYTE $0xca               // movq         %rcx, %rdx
	WORD $0x894c; BYTE $0xc1               // movq         %r8, %rcx
	LONG $0xf0e18348                       // andq         $-16, %rcx
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB78_204:
	LONG $0x0410f8c5; BYTE $0x17   // vmovups      (%rdi,%rdx), %xmm0
	LONG $0x0411f8c5; BYTE $0x10   // vmovups      %xmm0, (%rax,%rdx)
	LONG $0x10c28348               // addq         $16, %rdx
	WORD $0x3948; BYTE $0xd1       // cmpq         %rdx, %rcx
	LONG $0xffe9850f; WORD $0xffff // jne          LBB78_204, $-23(%rip)
	WORD $0x3949; BYTE $0xc8       // cmpq         %rcx, %r8
	LONG $0xee1a840f; WORD $0xffff // je           LBB78_27, $-4582(%rip)

LBB78_206:
	WORD $0x8948; BYTE $0xca               // movq         %rcx, %rdx
	WORD $0xf748; BYTE $0xd2               // notq         %rdx
	WORD $0x014c; BYTE $0xc2               // addq         %r8, %rdx
	WORD $0x894c; BYTE $0xc6               // movq         %r8, %rsi
	LONG $0x03e68348                       // andq         $3, %rsi
	LONG $0x001d840f; WORD $0x0000         // je           LBB78_208, $29(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB78_207:
	LONG $0x0f1cb60f               // movzbl       (%rdi,%rcx), %ebx
	WORD $0x1c88; BYTE $0x08       // movb         %bl, (%rax,%rcx)
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	WORD $0xff48; BYTE $0xce       // decq         %rsi
	LONG $0xffed850f; WORD $0xffff // jne          LBB78_207, $-19(%rip)

LBB78_208:
	LONG $0x03fa8348               // cmpq         $3, %rdx
	LONG $0x0009830f; WORD $0x0000 // jae          LBB78_210, $9(%rip)
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	LONG $0xffedd4e9; BYTE $0xff   // jmp          LBB78_27, $-4652(%rip)

LBB78_210:
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB78_211:
	LONG $0x0f14b60f               // movzbl       (%rdi,%rcx), %edx
	WORD $0x1488; BYTE $0x08       // movb         %dl, (%rax,%rcx)
	LONG $0x0f54b60f; BYTE $0x01   // movzbl       $1(%rdi,%rcx), %edx
	LONG $0x01085488               // movb         %dl, $1(%rax,%rcx)
	LONG $0x0f54b60f; BYTE $0x02   // movzbl       $2(%rdi,%rcx), %edx
	LONG $0x02085488               // movb         %dl, $2(%rax,%rcx)
	LONG $0x0f54b60f; BYTE $0x03   // movzbl       $3(%rdi,%rcx), %edx
	LONG $0x03085488               // movb         %dl, $3(%rax,%rcx)
	LONG $0x04c18348               // addq         $4, %rcx
	WORD $0x3949; BYTE $0xc8       // cmpq         %rcx, %r8
	LONG $0xffd1850f; WORD $0xffff // jne          LBB78_211, $-47(%rip)
	LONG $0xffed96e9; BYTE $0xff   // jmp          LBB78_27, $-4714(%rip)

LBB78_212:
	LONG $0x80fb8148; WORD $0x0000; BYTE $0x00 // cmpq         $128, %rbx
	LONG $0x0113830f; WORD $0x0000             // jae          LBB78_228, $275(%rip)
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x000218e9; BYTE $0x00               // jmp          LBB78_236, $536(%rip)

LBB78_214:
	WORD $0xf631 // xorl         %esi, %esi

LBB78_215:
	WORD $0xc3f6; BYTE $0x01       // testb        $1, %bl
	LONG $0x002e840f; WORD $0x0000 // je           LBB78_217, $46(%rip)
	LONG $0x0410fcc5; BYTE $0x37   // vmovups      (%rdi,%rsi), %ymm0
	LONG $0x4c10fcc5; WORD $0x2037 // vmovups      $32(%rdi,%rsi), %ymm1
	LONG $0x5410fcc5; WORD $0x4037 // vmovups      $64(%rdi,%rsi), %ymm2
	LONG $0x5c10fcc5; WORD $0x6037 // vmovups      $96(%rdi,%rsi), %ymm3
	LONG $0x0411fcc5; BYTE $0x30   // vmovups      %ymm0, (%rax,%rsi)
	LONG $0x4c11fcc5; WORD $0x2030 // vmovups      %ymm1, $32(%rax,%rsi)
	LONG $0x5411fcc5; WORD $0x4030 // vmovups      %ymm2, $64(%rax,%rsi)
	LONG $0x5c11fcc5; WORD $0x6030 // vmovups      %ymm3, $96(%rax,%rsi)

LBB78_217:
	WORD $0x3949; BYTE $0xc8       // cmpq         %rcx, %r8
	LONG $0xc8558b4c               // movq         $-56(%rbp), %r10
	LONG $0xf1df840f; WORD $0xffff // je           LBB78_71, $-3617(%rip)
	LONG $0x70c0f641               // testb        $112, %r8b
	LONG $0x0038840f; WORD $0x0000 // je           LBB78_222, $56(%rip)

LBB78_219:
	WORD $0x8948; BYTE $0xca                                 // movq         %rcx, %rdx
	WORD $0x894c; BYTE $0xc1                                 // movq         %r8, %rcx
	LONG $0xf0e18348                                         // andq         $-16, %rcx
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB78_220:
	LONG $0x0410f8c5; BYTE $0x17   // vmovups      (%rdi,%rdx), %xmm0
	LONG $0x0411f8c5; BYTE $0x10   // vmovups      %xmm0, (%rax,%rdx)
	LONG $0x10c28348               // addq         $16, %rdx
	WORD $0x3948; BYTE $0xd1       // cmpq         %rdx, %rcx
	LONG $0xffe9850f; WORD $0xffff // jne          LBB78_220, $-23(%rip)
	WORD $0x3949; BYTE $0xc8       // cmpq         %rcx, %r8
	LONG $0xf19d840f; WORD $0xffff // je           LBB78_71, $-3683(%rip)

LBB78_222:
	WORD $0x8948; BYTE $0xcb               // movq         %rcx, %rbx
	WORD $0xf748; BYTE $0xd3               // notq         %rbx
	WORD $0x014c; BYTE $0xc3               // addq         %r8, %rbx
	WORD $0x894c; BYTE $0xc6               // movq         %r8, %rsi
	LONG $0x03e68348                       // andq         $3, %rsi
	LONG $0x001d840f; WORD $0x0000         // je           LBB78_224, $29(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB78_223:
	LONG $0x0f14b60f               // movzbl       (%rdi,%rcx), %edx
	WORD $0x1488; BYTE $0x08       // movb         %dl, (%rax,%rcx)
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	WORD $0xff48; BYTE $0xce       // decq         %rsi
	LONG $0xffed850f; WORD $0xffff // jne          LBB78_223, $-19(%rip)

LBB78_224:
	LONG $0x03fb8348               // cmpq         $3, %rbx
	LONG $0x0009830f; WORD $0x0000 // jae          LBB78_226, $9(%rip)
	LONG $0xc8558b4c               // movq         $-56(%rbp), %r10
	LONG $0xfff157e9; BYTE $0xff   // jmp          LBB78_71, $-3753(%rip)

LBB78_226:
	LONG $0xc8558b4c               // movq         $-56(%rbp), %r10
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB78_227:
	LONG $0x0f14b60f               // movzbl       (%rdi,%rcx), %edx
	WORD $0x1488; BYTE $0x08       // movb         %dl, (%rax,%rcx)
	LONG $0x0f54b60f; BYTE $0x01   // movzbl       $1(%rdi,%rcx), %edx
	LONG $0x01085488               // movb         %dl, $1(%rax,%rcx)
	LONG $0x0f54b60f; BYTE $0x02   // movzbl       $2(%rdi,%rcx), %edx
	LONG $0x02085488               // movb         %dl, $2(%rax,%rcx)
	LONG $0x0f54b60f; BYTE $0x03   // movzbl       $3(%rdi,%rcx), %edx
	LONG $0x03085488               // movb         %dl, $3(%rax,%rcx)
	LONG $0x04c18348               // addq         $4, %rcx
	WORD $0x3949; BYTE $0xc8       // cmpq         %rcx, %r8
	LONG $0xffd1850f; WORD $0xffff // jne          LBB78_227, $-47(%rip)
	LONG $0xfff119e9; BYTE $0xff   // jmp          LBB78_71, $-3815(%rip)

LBB78_228:
	WORD $0x8948; BYTE $0xd8                   // movq         %rbx, %rax
	LONG $0x80e08348                           // andq         $-128, %rax
	LONG $0x80488d48                           // leaq         $-128(%rax), %rcx
	WORD $0x8949; BYTE $0xce                   // movq         %rcx, %r14
	LONG $0x07eec149                           // shrq         $7, %r14
	WORD $0xff49; BYTE $0xc6                   // incq         %r14
	WORD $0x8548; BYTE $0xc9                   // testq        %rcx, %rcx
	LONG $0x009d840f; WORD $0x0000             // je           LBB78_231, $157(%rip)
	WORD $0x894c; BYTE $0xf1                   // movq         %r14, %rcx
	LONG $0xfee18348                           // andq         $-2, %rcx
	LONG $0x18148d4b                           // leaq         (%r8,%r11), %rdx
	LONG $0xe0c28148; WORD $0x0000; BYTE $0x00 // addq         $224, %rdx
	WORD $0xff31                               // xorl         %edi, %edi

LBB78_230:
	LONG $0x0410fcc5; BYTE $0x3e               // vmovups      (%rsi,%rdi), %ymm0
	LONG $0x4c10fcc5; WORD $0x203e             // vmovups      $32(%rsi,%rdi), %ymm1
	LONG $0x5410fcc5; WORD $0x403e             // vmovups      $64(%rsi,%rdi), %ymm2
	LONG $0x5c10fcc5; WORD $0x603e             // vmovups      $96(%rsi,%rdi), %ymm3
	QUAD $0xffff203a8411fcc5; BYTE $0xff       // vmovups      %ymm0, $-224(%rdx,%rdi)
	QUAD $0xffff403a8c11fcc5; BYTE $0xff       // vmovups      %ymm1, $-192(%rdx,%rdi)
	QUAD $0xffff603a9411fcc5; BYTE $0xff       // vmovups      %ymm2, $-160(%rdx,%rdi)
	LONG $0x5c11fcc5; WORD $0x803a             // vmovups      %ymm3, $-128(%rdx,%rdi)
	QUAD $0x0000803e8410fcc5; BYTE $0x00       // vmovups      $128(%rsi,%rdi), %ymm0
	QUAD $0x0000a03e8c10fcc5; BYTE $0x00       // vmovups      $160(%rsi,%rdi), %ymm1
	QUAD $0x0000c03e9410fcc5; BYTE $0x00       // vmovups      $192(%rsi,%rdi), %ymm2
	QUAD $0x0000e03e9c10fcc5; BYTE $0x00       // vmovups      $224(%rsi,%rdi), %ymm3
	LONG $0x4411fcc5; WORD $0xa03a             // vmovups      %ymm0, $-96(%rdx,%rdi)
	LONG $0x4c11fcc5; WORD $0xc03a             // vmovups      %ymm1, $-64(%rdx,%rdi)
	LONG $0x5411fcc5; WORD $0xe03a             // vmovups      %ymm2, $-32(%rdx,%rdi)
	LONG $0x1c11fcc5; BYTE $0x3a               // vmovups      %ymm3, (%rdx,%rdi)
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // addq         $256, %rdi
	LONG $0xfec18348                           // addq         $-2, %rcx
	LONG $0xff7c850f; WORD $0xffff             // jne          LBB78_230, $-132(%rip)
	LONG $0x000002e9; BYTE $0x00               // jmp          LBB78_232, $2(%rip)

LBB78_231:
	WORD $0xff31 // xorl         %edi, %edi

LBB78_232:
	LONG $0x01c6f641                           // testb        $1, %r14b
	LONG $0x0032840f; WORD $0x0000             // je           LBB78_234, $50(%rip)
	LONG $0x0410fcc5; BYTE $0x3e               // vmovups      (%rsi,%rdi), %ymm0
	LONG $0x4c10fcc5; WORD $0x203e             // vmovups      $32(%rsi,%rdi), %ymm1
	LONG $0x5410fcc5; WORD $0x403e             // vmovups      $64(%rsi,%rdi), %ymm2
	LONG $0x5c10fcc5; WORD $0x603e             // vmovups      $96(%rsi,%rdi), %ymm3
	LONG $0x117cc1c4; WORD $0x3c04             // vmovups      %ymm0, (%r12,%rdi)
	LONG $0x117cc1c4; WORD $0x3c4c; BYTE $0x20 // vmovups      %ymm1, $32(%r12,%rdi)
	LONG $0x117cc1c4; WORD $0x3c54; BYTE $0x40 // vmovups      %ymm2, $64(%r12,%rdi)
	LONG $0x117cc1c4; WORD $0x3c5c; BYTE $0x60 // vmovups      %ymm3, $96(%r12,%rdi)

LBB78_234:
	WORD $0x3948; BYTE $0xc3       // cmpq         %rax, %rbx
	LONG $0xf8c9840f; WORD $0xffff // je           LBB78_241, $-1847(%rip)
	LONG $0x0ec5f641               // testb        $14, %r13b
	LONG $0xf882840f; WORD $0xffff // je           LBB78_239, $-1918(%rip)

LBB78_236:
	WORD $0x8948; BYTE $0xc1 // movq         %rax, %rcx
	WORD $0x8948; BYTE $0xd8 // movq         %rbx, %rax
	LONG $0xf0e08348         // andq         $-16, %rax

LBB78_237:
	LONG $0x0410f8c5; BYTE $0x0e   // vmovups      (%rsi,%rcx), %xmm0
	LONG $0x1178c1c4; WORD $0x0c04 // vmovups      %xmm0, (%r12,%rcx)
	LONG $0x10c18348               // addq         $16, %rcx
	WORD $0x3948; BYTE $0xc8       // cmpq         %rcx, %rax
	LONG $0xffe8850f; WORD $0xffff // jne          LBB78_237, $-24(%rip)
	WORD $0x3948; BYTE $0xc3       // cmpq         %rax, %rbx
	LONG $0xf894840f; WORD $0xffff // je           LBB78_241, $-1900(%rip)
	LONG $0xfff852e9; BYTE $0xff   // jmp          LBB78_239, $-1966(%rip)

LBB78_244:
	LONG $0xd05d8b48                           // movq         $-48(%rbp), %rbx
	WORD $0xff48; BYTE $0xcb                   // decq         %rbx
	LONG $0xd05d8948                           // movq         %rbx, $-48(%rbp)
	LONG $0x10bd8b48; WORD $0xffff; BYTE $0xff // movq         $-240(%rbp), %rdi
	QUAD $0xffffe8160528f8c5                   // vmovaps      $-6122(%rip), %xmm0  /* LCPI78_0+0(%rip) */
	LONG $0x0711f8c5                           // vmovups      %xmm0, (%rdi)
	WORD $0x894c; BYTE $0xe6                   // movq         %r12, %rsi
	LONG $0xd0558d48                           // leaq         $-48(%rbp), %rdx
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0xff9714e8; BYTE $0xff               // callq        _fsm_exec, $-26860(%rip)
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0xe8ba890f; WORD $0xffff             // jns          LBB78_4, $-5958(%rip)
	LONG $0x00072ce9; BYTE $0x00               // jmp          LBB78_337, $1836(%rip)

LBB78_245:
	WORD $0x894c; BYTE $0xe6                   // movq         %r12, %rsi
	WORD $0x894d; BYTE $0xec                   // movq         %r13, %r12
	LONG $0x18bd8b48; WORD $0xffff; BYTE $0xff // movq         $-232(%rbp), %rdi
	LONG $0x40858b4c; WORD $0xffff; BYTE $0xff // movq         $-192(%rbp), %r8
	LONG $0xc85d8b48                           // movq         $-56(%rbp), %rbx

LBB78_246:
	WORD $0xdef7                   // negl         %esi
	LONG $0x28e5c149               // shlq         $40, %r13
	WORD $0x894c; BYTE $0xe1       // movq         %r12, %rcx
	LONG $0x08e1c148               // shlq         $8, %rcx
	LONG $0xc6b60f40               // movzbl       %sil, %eax
	WORD $0x0948; BYTE $0xc8       // orq          %rcx, %rax
	WORD $0x094c; BYTE $0xe8       // orq          %r13, %rax
	LONG $0xea46840f; WORD $0xffff // je           LBB78_23, $-5562(%rip)
	LONG $0x000484e9; BYTE $0x00   // jmp          LBB78_309, $1156(%rip)

LBB78_247:
	WORD $0x894c; BYTE $0xff       // movq         %r15, %rdi
	LONG $0xb0758b48               // movq         $-80(%rbp), %rsi
	WORD $0x894c; BYTE $0xe2       // movq         %r12, %rdx
	LONG $0xd04d8d48               // leaq         $-48(%rbp), %rcx
	WORD $0x8949; BYTE $0xd8       // movq         %rbx, %r8
	LONG $0xffe2e6e8; BYTE $0xff   // callq        _j2t_field_vm, $-7450(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xc8758b48               // movq         $-56(%rbp), %rsi
	LONG $0xe858840f; WORD $0xffff // je           LBB78_4, $-6056(%rip)
	LONG $0x000301e9; BYTE $0x00   // jmp          LBB78_286, $769(%rip)

LBB78_248:
	WORD $0x8948; BYTE $0xf0                           // movq         %rsi, %rax
	LONG $0x60472b49                                   // subq         $96(%r15), %rax
	LONG $0x06d9870f; WORD $0x0000                     // ja           LBB78_338, $1753(%rip)
	QUAD $0xffffffff6085c748; WORD $0xffff; BYTE $0xff // movq         $-1, $-160(%rbp)
	LONG $0x505f8b49                                   // movq         $80(%r15), %rbx
	WORD $0x8948; BYTE $0xda                           // movq         %rbx, %rdx
	LONG $0x608d8d48; WORD $0xffff; BYTE $0xff         // leaq         $-160(%rbp), %rcx
	WORD $0x3145; BYTE $0xc0                           // xorl         %r8d, %r8d
	LONG $0xff5b16e8; BYTE $0xff                       // callq        _unquote, $-42218(%rip)
	WORD $0x8948; BYTE $0xc6                           // movq         %rax, %rsi
	WORD $0x8948; BYTE $0xdf                           // movq         %rbx, %rdi
	WORD $0x8548; BYTE $0xc0                           // testq        %rax, %rax
	LONG $0xc85d8b48                                   // movq         $-56(%rbp), %rbx
	LONG $0xe9d5890f; WORD $0xffff                     // jns          LBB78_22, $-5675(%rip)
	LONG $0x18bd8b48; WORD $0xffff; BYTE $0xff         // movq         $-232(%rbp), %rdi
	LONG $0x40858b4c; WORD $0xffff; BYTE $0xff         // movq         $-192(%rbp), %r8
	LONG $0xffff62e9; BYTE $0xff                       // jmp          LBB78_246, $-158(%rip)

LBB78_251:
	WORD $0x894c; BYTE $0xce // movq         %r9, %rsi
	WORD $0x8949; BYTE $0xd9 // movq         %rbx, %r9

LBB78_252:
	LONG $0x20bd8b48; WORD $0xffff; BYTE $0xff // movq         $-224(%rbp), %rdi
	LONG $0x48858b4c; WORD $0xffff; BYTE $0xff // movq         $-184(%rbp), %r8
	WORD $0xdef7                               // negl         %esi
	LONG $0x28e3c148                           // shlq         $40, %rbx
	WORD $0x894c; BYTE $0xc9                   // movq         %r9, %rcx
	LONG $0x08e1c148                           // shlq         $8, %rcx
	LONG $0xc6b60f40                           // movzbl       %sil, %eax
	WORD $0x0948; BYTE $0xc8                   // orq          %rcx, %rax
	WORD $0x0948; BYTE $0xd8                   // orq          %rbx, %rax
	LONG $0xee12840f; WORD $0xffff             // je           LBB78_67, $-4590(%rip)
	LONG $0x00012ce9; BYTE $0x00               // jmp          LBB78_267, $300(%rip)

LBB78_253:
	WORD $0x8948; BYTE $0xf0                           // movq         %rsi, %rax
	LONG $0x60472b49                                   // subq         $96(%r15), %rax
	LONG $0x0660870f; WORD $0x0000                     // ja           LBB78_339, $1632(%rip)
	WORD $0x894d; BYTE $0xcc                           // movq         %r9, %r12
	QUAD $0xffffffff6085c748; WORD $0xffff; BYTE $0xff // movq         $-1, $-160(%rbp)
	LONG $0x50578b49                                   // movq         $80(%r15), %rdx
	LONG $0x58958948; WORD $0xffff; BYTE $0xff         // movq         %rdx, $-168(%rbp)
	LONG $0x608d8d48; WORD $0xffff; BYTE $0xff         // leaq         $-160(%rbp), %rcx
	WORD $0x3145; BYTE $0xc0                           // xorl         %r8d, %r8d
	LONG $0xff5a85e8; BYTE $0xff                       // callq        _unquote, $-42363(%rip)
	WORD $0x8948; BYTE $0xc6                           // movq         %rax, %rsi
	LONG $0x58bd8b48; WORD $0xffff; BYTE $0xff         // movq         $-168(%rbp), %rdi
	WORD $0x8548; BYTE $0xc0                           // testq        %rax, %rax
	WORD $0x894d; BYTE $0xe1                           // movq         %r12, %r9
	LONG $0xedbf890f; WORD $0xffff                     // jns          LBB78_66, $-4673(%rip)
	LONG $0xffff80e9; BYTE $0xff                       // jmp          LBB78_252, $-128(%rip)

LBB78_255:
	QUAD $0x000000006d0c8d4a             // leaq         (,%r13,2), %rcx
	WORD $0x014c; BYTE $0xe9             // addq         %r13, %rcx
	LONG $0x04e1c148                     // shlq         $4, %rcx
	QUAD $0x020004383944c74a; BYTE $0x00 // movq         $131076, $56(%rcx,%r15)
	LONG $0x3964894e; BYTE $0x40         // movq         %r12, $64(%rcx,%r15)
	LONG $0x08528b48                     // movq         $8(%rdx), %rdx
	LONG $0x3954894a; BYTE $0x48         // movq         %rdx, $72(%rcx,%r15)
	LONG $0xffece0e9; BYTE $0xff         // jmp          LBB78_57, $-4896(%rip)

LBB78_256:
	WORD $0x8b49; BYTE $0x0f                   // movq         (%r15), %rcx
	LONG $0x00f98148; WORD $0x0010; BYTE $0x00 // cmpq         $4096, %rcx
	LONG $0x05ef830f; WORD $0x0000             // jae          LBB78_340, $1519(%rip)
	LONG $0x01798d48                           // leaq         $1(%rcx), %rdi
	WORD $0x8949; BYTE $0x3f                   // movq         %rdi, (%r15)
	LONG $0x490c8d48                           // leaq         (%rcx,%rcx,2), %rcx
	LONG $0x04e1c148                           // shlq         $4, %rcx
	QUAD $0x020004680f44c749; BYTE $0x00       // movq         $131076, $104(%r15,%rcx)
	LONG $0x58bd8b48; WORD $0xffff; BYTE $0xff // movq         $-168(%rbp), %rdi
	LONG $0x0f7c8949; BYTE $0x70               // movq         %rdi, $112(%r15,%rcx)
	LONG $0x08528b48                           // movq         $8(%rdx), %rdx
	LONG $0x0f548949; BYTE $0x78               // movq         %rdx, $120(%r15,%rcx)
	LONG $0x50a58b4c; WORD $0xffff; BYTE $0xff // movq         $-176(%rbp), %r12
	LONG $0xfff05de9; BYTE $0xff               // jmp          LBB78_93, $-4003(%rip)

LBB78_258:
	LONG $0xb07d8b48             // movq         $-80(%rbp), %rdi
	WORD $0x894c; BYTE $0xe6     // movq         %r12, %rsi
	LONG $0xd0558d48             // leaq         $-48(%rbp), %rdx
	LONG $0xffdb06e8; BYTE $0xff // callq        _j2t_binary, $-9466(%rip)
	LONG $0xffea6de9; BYTE $0xff // jmp          LBB78_39, $-5523(%rip)

LBB78_259:
	WORD $0xc031 // xorl         %eax, %eax

LBB78_260:
	LONG $0xd8c48148; WORD $0x0000; BYTE $0x00 // addq         $216, %rsp
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5c41                               // popq         %r12
	WORD $0x5d41                               // popq         %r13
	WORD $0x5e41                               // popq         %r14
	WORD $0x5f41                               // popq         %r15
	BYTE $0x5d                                 // popq         %rbp
	WORD $0xf8c5; BYTE $0x77                   // vzeroupper
	BYTE $0xc3                                 // retq

LBB78_261:
	WORD $0xe6c1; BYTE $0x08     // shll         $8, %esi
	WORD $0xce83; BYTE $0x01     // orl          $1, %esi
	LONG $0x000011e9; BYTE $0x00 // jmp          LBB78_264, $17(%rip)

LBB78_262:
	WORD $0xe6c1; BYTE $0x08     // shll         $8, %esi
	WORD $0xce83; BYTE $0x02     // orl          $2, %esi
	LONG $0x000006e9; BYTE $0x00 // jmp          LBB78_264, $6(%rip)

LBB78_263:
	WORD $0xe6c1; BYTE $0x08 // shll         $8, %esi
	WORD $0xce83; BYTE $0x06 // orl          $6, %esi

LBB78_264:
	LONG $0x28e6c148 // shlq         $40, %rsi

LBB78_265:
	LONG $0xd0458b48             // movq         $-48(%rbp), %rax
	LONG $0x08e0c148             // shlq         $8, %rax
	WORD $0x0948; BYTE $0xf0     // orq          %rsi, %rax
	LONG $0x02c88348             // orq          $2, %rax
	LONG $0xffffb7e9; BYTE $0xff // jmp          LBB78_260, $-73(%rip)

LBB78_266:
	LONG $0x08e0c148 // shlq         $8, %rax
	LONG $0x11c88348 // orq          $17, %rax

LBB78_267:
	WORD $0x8b49; BYTE $0x0f     // movq         (%r15), %rcx
	LONG $0x490c8d48             // leaq         (%rcx,%rcx,2), %rcx
	LONG $0x000037e9; BYTE $0x00 // jmp          LBB78_272, $55(%rip)

LBB78_268:
	LONG $0x08e0c148 // shlq         $8, %rax
	LONG $0x11c88348 // orq          $17, %rax

LBB78_269:
	WORD $0x8b49; BYTE $0x0f     // movq         (%r15), %rcx
	LONG $0x490c8d48             // leaq         (%rcx,%rcx,2), %rcx
	LONG $0x04e1c148             // shlq         $4, %rcx
	LONG $0x3974894e; BYTE $0x38 // movq         %r14, $56(%rcx,%r15)
	LONG $0xc8558b48             // movq         $-56(%rbp), %rdx
	LONG $0x00028de9; BYTE $0x00 // jmp          LBB78_310, $653(%rip)

LBB78_270:
	WORD $0x8b4d; BYTE $0x2f // movq         (%r15), %r13

LBB78_271:
	LONG $0x08e0c148         // shlq         $8, %rax
	LONG $0x11c88348         // orq          $17, %rax
	QUAD $0x000000006d0c8d4a // leaq         (,%r13,2), %rcx
	WORD $0x014c; BYTE $0xe9 // addq         %r13, %rcx

LBB78_272:
	LONG $0x04e1c148             // shlq         $4, %rcx
	LONG $0x3974894e; BYTE $0x38 // movq         %r14, $56(%rcx,%r15)
	LONG $0xa8558b48             // movq         $-88(%rbp), %rdx
	LONG $0x3954894a; BYTE $0x40 // movq         %rdx, $64(%rcx,%r15)
	LONG $0xc8558b48             // movq         $-56(%rbp), %rdx
	LONG $0x3954894a; BYTE $0x48 // movq         %rdx, $72(%rcx,%r15)
	LONG $0x000261e9; BYTE $0x00 // jmp          LBB78_311, $609(%rip)

LBB78_273:
	LONG $0x58b58b4c; WORD $0xffff; BYTE $0xff // movq         $-168(%rbp), %r14

LBB78_274:
	WORD $0x8b49; BYTE $0x0f     // movq         (%r15), %rcx
	LONG $0x490c8d48             // leaq         (%rcx,%rcx,2), %rcx
	LONG $0x04e1c148             // shlq         $4, %rcx
	LONG $0x3974894e; BYTE $0x38 // movq         %r14, $56(%rcx,%r15)
	LONG $0xa8558b48             // movq         $-88(%rbp), %rdx
	LONG $0x3954894a; BYTE $0x40 // movq         %rdx, $64(%rcx,%r15)
	LONG $0x3954894e; BYTE $0x48 // movq         %r10, $72(%rcx,%r15)
	LONG $0x000237e9; BYTE $0x00 // jmp          LBB78_311, $567(%rip)

LBB78_275:
	LONG $0x40858b48; WORD $0xffff; BYTE $0xff // movq         $-192(%rbp), %rax
	LONG $0x28e0c148                           // shlq         $40, %rax
	LONG $0x08e4c149                           // shlq         $8, %r12
	WORD $0x0949; BYTE $0xc4                   // orq          %rax, %r12
	LONG $0x0ccc8349                           // orq          $12, %r12
	WORD $0x894c; BYTE $0xe0                   // movq         %r12, %rax
	LONG $0xffff04e9; BYTE $0xff               // jmp          LBB78_260, $-252(%rip)

LBB78_276:
	LONG $0x08e3c148             // shlq         $8, %rbx
	LONG $0x15cb8348             // orq          $21, %rbx
	WORD $0x8948; BYTE $0xd8     // movq         %rbx, %rax
	LONG $0xfffef4e9; BYTE $0xff // jmp          LBB78_260, $-268(%rip)

LBB78_277:
	LONG $0xa8458b48             // movq         $-88(%rbp), %rax
	LONG $0x08e0c148             // shlq         $8, %rax
	LONG $0x15c88348             // orq          $21, %rax
	LONG $0xfffee3e9; BYTE $0xff // jmp          LBB78_260, $-285(%rip)

LBB78_278:
	LONG $0xd0458948               // movq         %rax, $-48(%rbp)
	LONG $0x0001b841; WORD $0x0000 // movl         $1, %r8d
	LONG $0x000249e9; BYTE $0x00   // jmp          LBB78_279, $585(%rip)

LBB78_280:
	LONG $0x28e1c148 // shlq         $40, %rcx
	LONG $0xd0458b48 // movq         $-48(%rbp), %rax

LBB78_281:
	LONG $0x08e0c148             // shlq         $8, %rax
	WORD $0x0948; BYTE $0xc8     // orq          %rcx, %rax
	LONG $0x07c88348             // orq          $7, %rax
	LONG $0xfffebce9; BYTE $0xff // jmp          LBB78_260, $-324(%rip)

LBB78_282:
	LONG $0x08e0c148             // shlq         $8, %rax
	LONG $0x11c88348             // orq          $17, %rax
	WORD $0x894d; BYTE $0x07     // movq         %r8, (%r15)
	LONG $0x00015ce9; BYTE $0x00 // jmp          LBB78_306, $348(%rip)

LBB78_283:
	LONG $0x48858b48; WORD $0xffff; BYTE $0xff // movq         $-184(%rbp), %rax
	LONG $0x28e0c148                           // shlq         $40, %rax
	LONG $0x588d8b48; WORD $0xffff; BYTE $0xff // movq         $-168(%rbp), %rcx
	LONG $0x08e1c148                           // shlq         $8, %rcx
	WORD $0x0948; BYTE $0xc1                   // orq          %rax, %rcx
	LONG $0x0cc98348                           // orq          $12, %rcx
	WORD $0x8948; BYTE $0xc8                   // movq         %rcx, %rax
	LONG $0xfffe87e9; BYTE $0xff               // jmp          LBB78_260, $-377(%rip)

LBB78_284:
	LONG $0x28e0c148             // shlq         $40, %rax
	LONG $0x08e4c149             // shlq         $8, %r12
	WORD $0x0949; BYTE $0xc4     // orq          %rax, %r12
	LONG $0x0bcc8349             // orq          $11, %r12
	WORD $0x894c; BYTE $0xe0     // movq         %r12, %rax
	LONG $0x000167e9; BYTE $0x00 // jmp          LBB78_309, $359(%rip)

LBB78_285:
	LONG $0xc8758b48 // movq         $-56(%rbp), %rsi
	LONG $0x08e0c148 // shlq         $8, %rax
	LONG $0x11c88348 // orq          $17, %rax

LBB78_286:
	WORD $0x8b49; BYTE $0x0f     // movq         (%r15), %rcx
	LONG $0x01518d48             // leaq         $1(%rcx), %rdx
	WORD $0x8949; BYTE $0x17     // movq         %rdx, (%r15)
	LONG $0x490c8d48             // leaq         (%rcx,%rcx,2), %rcx
	LONG $0x04e1c148             // shlq         $4, %rcx
	LONG $0x0f74894d; BYTE $0x68 // movq         %r14, $104(%r15,%rcx)
	LONG $0xa8558b48             // movq         $-88(%rbp), %rdx
	LONG $0x0f548949; BYTE $0x70 // movq         %rdx, $112(%r15,%rcx)
	LONG $0x0f748949; BYTE $0x78 // movq         %rsi, $120(%r15,%rcx)
	LONG $0x000109e9; BYTE $0x00 // jmp          LBB78_307, $265(%rip)

LBB78_287:
	LONG $0xd0458b48 // movq         $-48(%rbp), %rax

LBB78_288:
	LONG $0x08e0c148             // shlq         $8, %rax
	LONG $0x01c88348             // orq          $1, %rax
	LONG $0xfffe29e9; BYTE $0xff // jmp          LBB78_260, $-471(%rip)

LBB78_289:
	LONG $0x30e6c148             // shlq         $48, %rsi
	LONG $0xfffe55e9; BYTE $0xff // jmp          LBB78_265, $-427(%rip)

LBB78_290:
	LONG $0xd0458948               // movq         %rax, $-48(%rbp)
	LONG $0x0001b841; WORD $0x0000 // movl         $1, %r8d
	LONG $0x000065e9; BYTE $0x00   // jmp          LBB78_299, $101(%rip)

LBB78_291:
	LONG $0x0002b841; WORD $0x0000 // movl         $2, %r8d
	WORD $0x613c                   // cmpb         $97, %al
	LONG $0x0175850f; WORD $0x0000 // jne          LBB78_316, $373(%rip)
	LONG $0x736c61ba; BYTE $0x65   // movl         $1702063201, %edx
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax

LBB78_293:
	WORD $0xeac1; BYTE $0x08       // shrl         $8, %edx
	LONG $0x075cbe0f; BYTE $0x01   // movsbl       $1(%rdi,%rax), %ebx
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xb60f; BYTE $0xca       // movzbl       %dl, %ecx
	WORD $0xd939                   // cmpl         %ebx, %ecx
	LONG $0xffea840f; WORD $0xffff // je           LBB78_293, $-22(%rip)
	LONG $0x000075e9; BYTE $0x00   // jmp          LBB78_303, $117(%rip)

LBB78_295:
	LONG $0xff418d48               // leaq         $-1(%rcx), %rax
	LONG $0x0002b841; WORD $0x0000 // movl         $2, %r8d
	LONG $0x6eff8040               // cmpb         $110, %dil
	LONG $0x0020850f; WORD $0x0000 // jne          LBB78_299, $32(%rip)
	LONG $0x6c756ebf; BYTE $0x6c   // movl         $1819047278, %edi

LBB78_297:
	WORD $0xefc1; BYTE $0x08       // shrl         $8, %edi
	LONG $0x065cbe0f; BYTE $0x01   // movsbl       $1(%rsi,%rax), %ebx
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	LONG $0xd7b60f40               // movzbl       %dil, %edx
	WORD $0xda39                   // cmpl         %ebx, %edx
	LONG $0xffe9840f; WORD $0xffff // je           LBB78_297, $-23(%rip)
	LONG $0xd0458948               // movq         %rax, $-48(%rbp)

LBB78_299:
	LONG $0x28e1c148             // shlq         $40, %rcx
	LONG $0x08e0c148             // shlq         $8, %rax
	WORD $0x094c; BYTE $0xc0     // orq          %r8, %rax
	WORD $0x0948; BYTE $0xc8     // orq          %rcx, %rax
	LONG $0xfffd99e9; BYTE $0xff // jmp          LBB78_260, $-615(%rip)

LBB78_300:
	LONG $0xff468d48               // leaq         $-1(%rsi), %rax
	LONG $0x0002b841; WORD $0x0000 // movl         $2, %r8d
	WORD $0xfb80; BYTE $0x74       // cmpb         $116, %bl
	LONG $0x00fb850f; WORD $0x0000 // jne          LBB78_279, $251(%rip)
	LONG $0x757274ba; BYTE $0x65   // movl         $1702195828, %edx

LBB78_302:
	WORD $0xeac1; BYTE $0x08       // shrl         $8, %edx
	LONG $0x075cbe0f; BYTE $0x01   // movsbl       $1(%rdi,%rax), %ebx
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xb60f; BYTE $0xca       // movzbl       %dl, %ecx
	WORD $0xd939                   // cmpl         %ebx, %ecx
	LONG $0xffea840f; WORD $0xffff // je           LBB78_302, $-22(%rip)

LBB78_303:
	LONG $0xd0458948             // movq         %rax, $-48(%rbp)
	LONG $0x0000d7e9; BYTE $0x00 // jmp          LBB78_279, $215(%rip)

LBB78_304:
	WORD $0x8b49; BYTE $0x17 // movq         (%r15), %rdx

LBB78_305:
	LONG $0x08e0c148         // shlq         $8, %rax
	LONG $0x11c88348         // orq          $17, %rax
	LONG $0x014a8d48         // leaq         $1(%rdx), %rcx
	WORD $0x8949; BYTE $0x0f // movq         %rcx, (%r15)

LBB78_306:
	LONG $0x520c8d48             // leaq         (%rdx,%rdx,2), %rcx
	LONG $0x04e1c148             // shlq         $4, %rcx
	LONG $0x0f74894d; BYTE $0x68 // movq         %r14, $104(%r15,%rcx)
	LONG $0xa8558b48             // movq         $-88(%rbp), %rdx
	LONG $0x0f548949; BYTE $0x70 // movq         %rdx, $112(%r15,%rcx)
	LONG $0xc8558b48             // movq         $-56(%rbp), %rdx
	LONG $0x0f548949; BYTE $0x78 // movq         %rdx, $120(%r15,%rcx)

LBB78_307:
	LONG $0x4510f8c5; BYTE $0x80           // vmovups      $-128(%rbp), %xmm0
	QUAD $0x00800f841178c1c4; WORD $0x0000 // vmovups      %xmm0, $128(%r15,%rcx)
	LONG $0x90558b48                       // movq         $-112(%rbp), %rdx
	QUAD $0x000000900f948949               // movq         %rdx, $144(%r15,%rcx)
	LONG $0x00003be9; BYTE $0x00           // jmp          LBB78_312, $59(%rip)

LBB78_308:
	LONG $0x08e0c148 // shlq         $8, %rax
	LONG $0x11c88348 // orq          $17, %rax

LBB78_309:
	WORD $0x8b49; BYTE $0x0f     // movq         (%r15), %rcx
	LONG $0x490c8d48             // leaq         (%rcx,%rcx,2), %rcx
	LONG $0x04e1c148             // shlq         $4, %rcx
	LONG $0x3974894e; BYTE $0x38 // movq         %r14, $56(%rcx,%r15)
	LONG $0xa8558b48             // movq         $-88(%rbp), %rdx

LBB78_310:
	LONG $0x3954894a; BYTE $0x40 // movq         %rdx, $64(%rcx,%r15)
	LONG $0x395c894a; BYTE $0x48 // movq         %rbx, $72(%rcx,%r15)

LBB78_311:
	LONG $0x4510f8c5; BYTE $0x80               // vmovups      $-128(%rbp), %xmm0
	LONG $0x1178a1c4; WORD $0x3944; BYTE $0x50 // vmovups      %xmm0, $80(%rcx,%r15)
	LONG $0x90558b48                           // movq         $-112(%rbp), %rdx
	LONG $0x3954894a; BYTE $0x60               // movq         %rdx, $96(%rcx,%r15)

LBB78_312:
	LONG $0xc04d8b48             // movq         $-64(%rbp), %rcx
	LONG $0xa0558b48             // movq         $-96(%rbp), %rdx
	WORD $0x8948; BYTE $0x11     // movq         %rdx, (%rcx)
	LONG $0xfffcc6e9; BYTE $0xff // jmp          LBB78_260, $-826(%rip)

LBB78_313:
	LONG $0x28e0c148             // shlq         $40, %rax
	LONG $0x08e1c149             // shlq         $8, %r9
	WORD $0x0949; BYTE $0xc1     // orq          %rax, %r9
	LONG $0x0bc98349             // orq          $11, %r9
	WORD $0x894c; BYTE $0xc8     // movq         %r9, %rax
	LONG $0xfffd6ae9; BYTE $0xff // jmp          LBB78_274, $-662(%rip)

LBB78_314:
	LONG $0x30e1c148                       // shlq         $48, %rcx
	LONG $0xd0558b48                       // movq         $-48(%rbp), %rdx
	LONG $0x08e2c148                       // shlq         $8, %rdx
	QUAD $0x0b0000000009b848; WORD $0x0000 // movabsq      $12094627905545, %rax

LBB78_315:
	WORD $0x0948; BYTE $0xd0     // orq          %rdx, %rax
	WORD $0x0948; BYTE $0xc8     // orq          %rcx, %rax
	LONG $0xfffc8ee9; BYTE $0xff // jmp          LBB78_260, $-882(%rip)

LBB78_316:
	WORD $0x8948; BYTE $0xf0 // movq         %rsi, %rax

LBB78_279:
	LONG $0x28e6c148             // shlq         $40, %rsi
	LONG $0x08e0c148             // shlq         $8, %rax
	WORD $0x094c; BYTE $0xc0     // orq          %r8, %rax
	WORD $0x0948; BYTE $0xf0     // orq          %rsi, %rax
	LONG $0xfffc78e9; BYTE $0xff // jmp          LBB78_260, $-904(%rip)

LBB78_317:
	LONG $0x30e1c148             // shlq         $48, %rcx
	LONG $0x08e0c148             // shlq         $8, %rax
	WORD $0x0948; BYTE $0xc8     // orq          %rcx, %rax
	LONG $0x02c88348             // orq          $2, %rax
	LONG $0xfffc64e9; BYTE $0xff // jmp          LBB78_260, $-924(%rip)

LBB78_318:
	LONG $0x08e0c148             // shlq         $8, %rax
	LONG $0x11c88348             // orq          $17, %rax
	LONG $0xfffd12e9; BYTE $0xff // jmp          LBB78_274, $-750(%rip)

LBB78_319:
	LONG $0x08e5c149                       // shlq         $8, %r13
	QUAD $0x030000000002b848; WORD $0x0022 // movabsq      $9573447743045634, %rax
	WORD $0x094c; BYTE $0xe8               // orq          %r13, %rax
	LONG $0xfffc41e9; BYTE $0xff           // jmp          LBB78_260, $-959(%rip)

LBB78_320:
	LONG $0xd04d8b48                       // movq         $-48(%rbp), %rcx
	LONG $0x08e1c148                       // shlq         $8, %rcx
	QUAD $0x040000000002b848; WORD $0x003a // movabsq      $16329946695729154, %rax
	WORD $0x0948; BYTE $0xc8               // orq          %rcx, %rax
	LONG $0xfffc27e9; BYTE $0xff           // jmp          LBB78_260, $-985(%rip)

LBB78_321:
	LONG $0x28e0c149             // shlq         $40, %r8
	LONG $0xd0458b48             // movq         $-48(%rbp), %rax
	LONG $0x000041e9; BYTE $0x00 // jmp          LBB78_325, $65(%rip)

LBB78_322:
	LONG $0x08e1c149                           // shlq         $8, %r9
	LONG $0x13c18149; WORD $0xffff; BYTE $0xff // addq         $-237, %r9
	WORD $0x894c; BYTE $0xc8                   // movq         %r9, %rax
	LONG $0xfffc07e9; BYTE $0xff               // jmp          LBB78_260, $-1017(%rip)

LBB78_323:
	WORD $0x8b49; BYTE $0x0f     // movq         (%r15), %rcx
	LONG $0x01518d48             // leaq         $1(%rcx), %rdx
	WORD $0x8949; BYTE $0x17     // movq         %rdx, (%r15)
	LONG $0x490c8d48             // leaq         (%rcx,%rcx,2), %rcx
	LONG $0x04e1c148             // shlq         $4, %rcx
	LONG $0x0f74894d; BYTE $0x68 // movq         %r14, $104(%r15,%rcx)
	LONG $0xa8558b48             // movq         $-88(%rbp), %rdx
	LONG $0x0f548949; BYTE $0x70 // movq         %rdx, $112(%r15,%rcx)
	LONG $0x0f5c8949; BYTE $0x78 // movq         %rbx, $120(%r15,%rcx)
	LONG $0xfffeace9; BYTE $0xff // jmp          LBB78_307, $-340(%rip)

LBB78_324:
	LONG $0x28e0c149 // shlq         $40, %r8

LBB78_325:
	LONG $0x08e0c148             // shlq         $8, %rax
	WORD $0x094c; BYTE $0xc0     // orq          %r8, %rax
	LONG $0x07c88348             // orq          $7, %rax
	LONG $0xfffbc9e9; BYTE $0xff // jmp          LBB78_260, $-1079(%rip)

LBB78_326:
	LONG $0x28e0c148             // shlq         $40, %rax
	LONG $0x08e1c149             // shlq         $8, %r9
	WORD $0x0949; BYTE $0xc1     // orq          %rax, %r9
	LONG $0x07c98349             // orq          $7, %r9
	WORD $0x894c; BYTE $0xc8     // movq         %r9, %rax
	LONG $0xfffbb2e9; BYTE $0xff // jmp          LBB78_260, $-1102(%rip)

LBB78_327:
	LONG $0x28e1c148             // shlq         $40, %rcx
	LONG $0x08e0c149             // shlq         $8, %r8
	WORD $0x0949; BYTE $0xc8     // orq          %rcx, %r8
	LONG $0x07c88349             // orq          $7, %r8
	WORD $0x894c; BYTE $0xc0     // movq         %r8, %rax
	LONG $0xfffb9be9; BYTE $0xff // jmp          LBB78_260, $-1125(%rip)

LBB78_328:
	LONG $0x000001b9; BYTE $0x00 // movl         $1, %ecx
	WORD $0xf129                 // subl         %esi, %ecx
	LONG $0xc1b60f44             // movzbl       %cl, %r8d
	LONG $0xffff00e9; BYTE $0xff // jmp          LBB78_279, $-256(%rip)

LBB78_329:
	LONG $0x30e6c148                       // shlq         $48, %rsi
	LONG $0x08e0c148                       // shlq         $8, %rax
	QUAD $0x020000000009b948; WORD $0x0000 // movabsq      $2199023255561, %rcx
	WORD $0x0948; BYTE $0xc1               // orq          %rax, %rcx
	WORD $0x0948; BYTE $0xf1               // orq          %rsi, %rcx
	WORD $0x8948; BYTE $0xc8               // movq         %rcx, %rax
	LONG $0xfffb6be9; BYTE $0xff           // jmp          LBB78_260, $-1173(%rip)

LBB78_330:
	LONG $0x28e0c148             // shlq         $40, %rax
	LONG $0x08e2c148             // shlq         $8, %rdx
	WORD $0x0948; BYTE $0xc2     // orq          %rax, %rdx
	LONG $0x07ca8348             // orq          $7, %rdx
	WORD $0x8948; BYTE $0xd0     // movq         %rdx, %rax
	LONG $0xfffb54e9; BYTE $0xff // jmp          LBB78_260, $-1196(%rip)

LBB78_331:
	LONG $0x38e1c148                       // shlq         $56, %rcx
	LONG $0xd0558b48                       // movq         $-48(%rbp), %rdx
	LONG $0x08e2c148                       // shlq         $8, %rdx
	QUAD $0x0f000000000db848; WORD $0x000e // movabsq      $3957142348365837, %rax
	LONG $0xfffea0e9; BYTE $0xff           // jmp          LBB78_315, $-352(%rip)

LBB78_332:
	LONG $0x38e1c148                       // shlq         $56, %rcx
	LONG $0xd0558b48                       // movq         $-48(%rbp), %rdx
	LONG $0x08e2c148                       // shlq         $8, %rdx
	QUAD $0x0c000000000db848; WORD $0x000d // movabsq      $3672368836771853, %rax
	LONG $0xfffe85e9; BYTE $0xff           // jmp          LBB78_315, $-379(%rip)

LBB78_333:
	LONG $0x000001ba; BYTE $0x00 // movl         $1, %edx
	WORD $0xca29                 // subl         %ecx, %edx
	LONG $0xc2b60f44             // movzbl       %dl, %r8d
	LONG $0xfffd62e9; BYTE $0xff // jmp          LBB78_299, $-670(%rip)

LBB78_334:
	LONG $0x28e2c148             // shlq         $40, %rdx
	LONG $0xd0458b48             // movq         $-48(%rbp), %rax
	LONG $0x08e0c148             // shlq         $8, %rax
	WORD $0x0948; BYTE $0xd0     // orq          %rdx, %rax
	LONG $0x07c88348             // orq          $7, %rax
	LONG $0xfffaf6e9; BYTE $0xff // jmp          LBB78_260, $-1290(%rip)

LBB78_335:
	LONG $0x0f148d49                       // leaq         (%r15,%rcx), %rdx
	LONG $0x68c28348                       // addq         $104, %rdx
	LONG $0x08e0c148                       // shlq         $8, %rax
	LONG $0x10c88348                       // orq          $16, %rax
	WORD $0x894c; BYTE $0x32               // movq         %r14, (%rdx)
	LONG $0xa8758b48                       // movq         $-88(%rbp), %rsi
	LONG $0x08728948                       // movq         %rsi, $8(%rdx)
	LONG $0xc8758b48                       // movq         $-56(%rbp), %rsi
	LONG $0x10728948                       // movq         %rsi, $16(%rdx)
	LONG $0x90558b48                       // movq         $-112(%rbp), %rdx
	QUAD $0x000000900f948949               // movq         %rdx, $144(%r15,%rcx)
	LONG $0x4510f8c5; BYTE $0x80           // vmovups      $-128(%rbp), %xmm0
	QUAD $0x00800f841178c1c4; WORD $0x0000 // vmovups      %xmm0, $128(%r15,%rcx)
	LONG $0xfffddde9; BYTE $0xff           // jmp          LBB78_312, $-547(%rip)

LBB78_336:
	LONG $0x0649b70f             // movzwl       $6(%rcx), %ecx
	LONG $0x28e1c148             // shlq         $40, %rcx
	LONG $0x08e0c148             // shlq         $8, %rax
	WORD $0x0948; BYTE $0xc8     // orq          %rcx, %rax
	LONG $0x0ac88348             // orq          $10, %rax
	LONG $0xfffa9be9; BYTE $0xff // jmp          LBB78_260, $-1381(%rip)

LBB78_337:
	WORD $0xd8f7                 // negl         %eax
	LONG $0x28e3c148             // shlq         $40, %rbx
	LONG $0xd04d8b48             // movq         $-48(%rbp), %rcx
	LONG $0x08e1c148             // shlq         $8, %rcx
	WORD $0xb60f; BYTE $0xc0     // movzbl       %al, %eax
	WORD $0x0948; BYTE $0xc8     // orq          %rcx, %rax
	WORD $0x0948; BYTE $0xd8     // orq          %rbx, %rax
	LONG $0xfffa7fe9; BYTE $0xff // jmp          LBB78_260, $-1409(%rip)

LBB78_338:
	LONG $0x08e0c148             // shlq         $8, %rax
	LONG $0x12c88348             // orq          $18, %rax
	LONG $0xc85d8b48             // movq         $-56(%rbp), %rbx
	LONG $0xfffd65e9; BYTE $0xff // jmp          LBB78_309, $-667(%rip)

LBB78_339:
	LONG $0x08e0c148             // shlq         $8, %rax
	LONG $0x12c88348             // orq          $18, %rax
	LONG $0xfffab2e9; BYTE $0xff // jmp          LBB78_267, $-1358(%rip)

LBB78_340:
	LONG $0x28e1c148                           // shlq         $40, %rcx
	LONG $0x58858b48; WORD $0xffff; BYTE $0xff // movq         $-168(%rbp), %rax
	LONG $0xfffb85e9; BYTE $0xff               // jmp          LBB78_281, $-1147(%rip)

	// .p2align 2, 0x90
	// .set L78_0_set_8, LBB78_8-LJTI78_0
	// .set L78_0_set_12, LBB78_12-LJTI78_0
	// .set L78_0_set_18, LBB78_18-LJTI78_0
	// .set L78_0_set_28, LBB78_28-LJTI78_0
	// .set L78_0_set_30, LBB78_30-LJTI78_0
	// .set L78_0_set_40, LBB78_40-LJTI78_0
LJTI78_0:
	LONG $0xffffe1e9 // .long L78_0_set_8
	LONG $0xffffe223 // .long L78_0_set_12
	LONG $0xffffe29a // .long L78_0_set_18
	LONG $0xffffe3b8 // .long L78_0_set_28
	LONG $0xffffe3eb // .long L78_0_set_30
	LONG $0xffffe4ca // .long L78_0_set_40

	// .set L78_1_set_287, LBB78_287-LJTI78_1
	// .set L78_1_set_289, LBB78_289-LJTI78_1
	// .set L78_1_set_125, LBB78_125-LJTI78_1
	// .set L78_1_set_38, LBB78_38-LJTI78_1
	// .set L78_1_set_134, LBB78_134-LJTI78_1
	// .set L78_1_set_139, LBB78_139-LJTI78_1
	// .set L78_1_set_145, LBB78_145-LJTI78_1
	// .set L78_1_set_150, LBB78_150-LJTI78_1
	// .set L78_1_set_156, LBB78_156-LJTI78_1
LJTI78_1:
	LONG $0xfffffbff         // .long L78_1_set_287
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xffffed0c         // .long L78_1_set_125
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xffffe482         // .long L78_1_set_38
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xffffe482         // .long L78_1_set_38
	LONG $0xffffe482         // .long L78_1_set_38
	LONG $0xffffe482         // .long L78_1_set_38
	LONG $0xffffe482         // .long L78_1_set_38
	LONG $0xffffe482         // .long L78_1_set_38
	LONG $0xffffe482         // .long L78_1_set_38
	LONG $0xffffe482         // .long L78_1_set_38
	LONG $0xffffe482         // .long L78_1_set_38
	LONG $0xffffe482         // .long L78_1_set_38
	LONG $0xffffe482         // .long L78_1_set_38
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xffffed80         // .long L78_1_set_134
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xffffee5a         // .long L78_1_set_139
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xffffeecd         // .long L78_1_set_145
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xffffef31         // .long L78_1_set_150
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xfffffc10         // .long L78_1_set_289
	LONG $0xffffefa6         // .long L78_1_set_156
	QUAD $0x9090909090909090 // .p2align 4, 0x90

_tb_skip:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x000447c7; WORD $0x0000; BYTE $0x00 // movl         $0, $4(%rdi)
	WORD $0x0f88                               // movb         %cl, (%rdi)
	WORD $0x3145; BYTE $0xf6                   // xorl         %r14d, %r14d
	LONG $0x9c058d4c; WORD $0x0003; BYTE $0x00 // leaq         $924(%rip), %r8  /* LJTI79_0+0(%rip) */
	LONG $0xd90d8d4c; WORD $0x00ac; BYTE $0x00 // leaq         $44249(%rip), %r9  /* _SkipSizeFixed+0(%rip) */
	LONG $0xd2158d4c; WORD $0x00ad; BYTE $0x00 // leaq         $44498(%rip), %r10  /* _WireTags+0(%rip) */
	WORD $0x3145; BYTE $0xdb                   // xorl         %r11d, %r11d
	LONG $0x00002ae9; BYTE $0x00               // jmp          LBB79_1, $42(%rip)

LBB79_40:
	WORD $0xff49; BYTE $0xce                   // decq         %r14
	LONG $0xfefe8149; WORD $0x0003; BYTE $0x00 // cmpq         $1022, %r14
	LONG $0x036a8f0f; WORD $0x0000             // jg           LBB79_60, $874(%rip)

LBB79_41:
	LONG $0xf77c8846; BYTE $0x08         // movb         %r15b, $8(%rdi,%r14,8)
	QUAD $0x0000000cf744c742; BYTE $0x00 // movl         $0, $12(%rdi,%r14,8)
	WORD $0xff49; BYTE $0xc6             // incq         %r14
	LONG $0x0cb60f42; BYTE $0xf7         // movzbl       (%rdi,%r14,8), %ecx
	LONG $0x90909090                     // .p2align 4, 0x90

LBB79_1:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x598d; BYTE $0x02                   // leal         $2(%rcx), %ebx
	WORD $0xfb80; BYTE $0x11                   // cmpb         $17, %bl
	LONG $0x0332870f; WORD $0x0000             // ja           LBB79_58, $818(%rip)
	LONG $0x7cb60f46; WORD $0x02f7             // movzbl       $2(%rdi,%r14,8), %r15d
	WORD $0xb60f; BYTE $0xdb                   // movzbl       %bl, %ebx
	LONG $0x981c6349                           // movslq       (%r8,%rbx,4), %rbx
	WORD $0x014c; BYTE $0xc3                   // addq         %r8, %rbx
	JMP  BX

LBB79_3:
	WORD $0xb60f; BYTE $0xc1       // movzbl       %cl, %eax
	LONG $0x0cbe0f4a; BYTE $0x08   // movsbq       (%rax,%r9), %rcx
	WORD $0x2948; BYTE $0xca       // subq         %rcx, %rdx
	LONG $0x03008c0f; WORD $0x0000 // jl           LBB79_56, $768(%rip)

LBB79_4:
	LONG $0xf7448b42; BYTE $0x04   // movl         $4(%rdi,%r14,8), %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x000d840f; WORD $0x0000 // je           LBB79_6, $13(%rip)
	WORD $0xc8ff                   // decl         %eax
	LONG $0xf7448942; BYTE $0x04   // movl         %eax, $4(%rdi,%r14,8)
	LONG $0x000004e9; BYTE $0x00   // jmp          LBB79_7, $4(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB79_6:
	WORD $0xff49; BYTE $0xce // decq         %r14

LBB79_7:
	WORD $0x0149; BYTE $0xcb // addq         %rcx, %r11

LBB79_8:
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x02e3880f; WORD $0x0000 // js           LBB79_57, $739(%rip)
	WORD $0x0148; BYTE $0xce       // addq         %rcx, %rsi
	LONG $0x0cb60f42; BYTE $0xf7   // movzbl       (%rdi,%r14,8), %ecx
	LONG $0xffff94e9; BYTE $0xff   // jmp          LBB79_1, $-108(%rip)

LBB79_10:
	LONG $0x05fa8348                           // cmpq         $5, %rdx
	LONG $0x02c08c0f; WORD $0x0000             // jl           LBB79_56, $704(%rip)
	WORD $0xb60f; BYTE $0x1e                   // movzbl       (%rsi), %ebx
	WORD $0xb60f; BYTE $0xcb                   // movzbl       %bl, %ecx
	LONG $0x113c8042; BYTE $0x00               // cmpb         $0, (%rcx,%r10)
	LONG $0x02be840f; WORD $0x0000             // je           LBB79_58, $702(%rip)
	WORD $0x468b; BYTE $0x01                   // movl         $1(%rsi), %eax
	WORD $0xc085                               // testl        %eax, %eax
	LONG $0x0182840f; WORD $0x0000             // je           LBB79_37, $386(%rip)
	WORD $0xc80f                               // bswapl       %eax
	LONG $0x0cbe0f4a; BYTE $0x09               // movsbq       (%rcx,%r9), %rcx
	WORD $0x8548; BYTE $0xc9                   // testq        %rcx, %rcx
	LONG $0x018b840f; WORD $0x0000             // je           LBB79_39, $395(%rip)
	LONG $0xc8af0f48                           // imulq        %rax, %rcx
	LONG $0x05c18348                           // addq         $5, %rcx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	WORD $0x2948; BYTE $0xca                   // subq         %rcx, %rdx
	LONG $0xff7c8d0f; WORD $0xffff             // jge          LBB79_4, $-132(%rip)
	LONG $0x000286e9; BYTE $0x00               // jmp          LBB79_58, $646(%rip)

LBB79_16:
	LONG $0xf7448b42; BYTE $0x04               // movl         $4(%rdi,%r14,8), %eax
	WORD $0xc085                               // testl        %eax, %eax
	LONG $0xff0a840f; WORD $0xffff             // je           LBB79_40, $-246(%rip)
	WORD $0xc8ff                               // decl         %eax
	LONG $0xf7448942; BYTE $0x04               // movl         %eax, $4(%rdi,%r14,8)
	LONG $0xfefe8149; WORD $0x0003; BYTE $0x00 // cmpq         $1022, %r14
	LONG $0xff068e0f; WORD $0xffff             // jle          LBB79_41, $-250(%rip)
	LONG $0x00026be9; BYTE $0x00               // jmp          LBB79_60, $619(%rip)

LBB79_18:
	LONG $0xf7448b42; BYTE $0x04               // movl         $4(%rdi,%r14,8), %eax
	WORD $0xc085                               // testl        %eax, %eax
	LONG $0xfee4840f; WORD $0xffff             // je           LBB79_40, $-284(%rip)
	LONG $0x4cb60f42; WORD $0x01f7             // movzbl       $1(%rdi,%r14,8), %ecx
	WORD $0xc8ff                               // decl         %eax
	LONG $0xf7448942; BYTE $0x04               // movl         %eax, $4(%rdi,%r14,8)
	WORD $0x01a8                               // testb        $1, %al
	WORD $0xb60f; BYTE $0xc1                   // movzbl       %cl, %eax
	LONG $0xffb60f45                           // movzbl       %r15b, %r15d
	LONG $0xf8440f44                           // cmovel       %eax, %r15d
	LONG $0xfefe8149; WORD $0x0003; BYTE $0x00 // cmpq         $1022, %r14
	LONG $0xfecd8e0f; WORD $0xffff             // jle          LBB79_41, $-307(%rip)
	LONG $0x000232e9; BYTE $0x00               // jmp          LBB79_60, $562(%rip)

LBB79_20:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x04fa8348                           // cmpq         $4, %rdx
	LONG $0x02168c0f; WORD $0x0000             // jl           LBB79_58, $534(%rip)
	WORD $0x0e8b                               // movl         (%rsi), %ecx
	WORD $0xc90f                               // bswapl       %ecx
	LONG $0x04c18348                           // addq         $4, %rcx
	WORD $0x2948; BYTE $0xca                   // subq         %rcx, %rdx
	LONG $0xfef6830f; WORD $0xffff             // jae          LBB79_4, $-266(%rip)
	LONG $0x000200e9; BYTE $0x00               // jmp          LBB79_58, $512(%rip)

LBB79_23:
	WORD $0x8548; BYTE $0xd2                   // testq        %rdx, %rdx
	LONG $0x01e88e0f; WORD $0x0000             // jle          LBB79_56, $488(%rip)
	WORD $0xb60f; BYTE $0x0e                   // movzbl       (%rsi), %ecx
	WORD $0x8548; BYTE $0xc9                   // testq        %rcx, %rcx
	LONG $0x00fa840f; WORD $0x0000             // je           LBB79_42, $250(%rip)
	LONG $0x113c8042; BYTE $0x00               // cmpb         $0, (%rcx,%r10)
	LONG $0x01e0840f; WORD $0x0000             // je           LBB79_58, $480(%rip)
	LONG $0x1cbe0f4a; BYTE $0x09               // movsbq       (%rcx,%r9), %rbx
	WORD $0x8548; BYTE $0xdb                   // testq        %rbx, %rbx
	LONG $0x0156840f; WORD $0x0000             // je           LBB79_49, $342(%rip)
	LONG $0x03c38348                           // addq         $3, %rbx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	WORD $0x2948; BYTE $0xda                   // subq         %rbx, %rdx
	LONG $0x01be8c0f; WORD $0x0000             // jl           LBB79_58, $446(%rip)
	WORD $0x0149; BYTE $0xdb                   // addq         %rbx, %r11
	WORD $0x0148; BYTE $0xde                   // addq         %rbx, %rsi
	LONG $0x0cb60f42; BYTE $0xf7               // movzbl       (%rdi,%r14,8), %ecx
	LONG $0xfffe69e9; BYTE $0xff               // jmp          LBB79_1, $-407(%rip)

LBB79_29:
	LONG $0x06fa8348                           // cmpq         $6, %rdx
	LONG $0x01958c0f; WORD $0x0000             // jl           LBB79_56, $405(%rip)
	LONG $0x3eb60f44                           // movzbl       (%rsi), %r15d
	LONG $0xcfb60f41                           // movzbl       %r15b, %ecx
	LONG $0x113c8042; BYTE $0x00               // cmpb         $0, (%rcx,%r10)
	LONG $0x0191840f; WORD $0x0000             // je           LBB79_58, $401(%rip)
	LONG $0x66b60f44; BYTE $0x01               // movzbl       $1(%rsi), %r12d
	LONG $0xdcb60f41                           // movzbl       %r12b, %ebx
	LONG $0x133c8042; BYTE $0x00               // cmpb         $0, (%rbx,%r10)
	LONG $0x017d840f; WORD $0x0000             // je           LBB79_58, $381(%rip)
	WORD $0x468b; BYTE $0x02                   // movl         $2(%rsi), %eax
	WORD $0xc085                               // testl        %eax, %eax
	LONG $0x009a840f; WORD $0x0000             // je           LBB79_44, $154(%rip)
	WORD $0xc80f                               // bswapl       %eax
	LONG $0x2cbe0f4e; BYTE $0x09               // movsbq       (%rcx,%r9), %r13
	WORD $0x854d; BYTE $0xed                   // testq        %r13, %r13
	LONG $0x00a3840f; WORD $0x0000             // je           LBB79_46, $163(%rip)
	LONG $0x0cb60f42; BYTE $0x0b               // movzbl       (%rbx,%r9), %ecx
	WORD $0xc984                               // testb        %cl, %cl
	LONG $0x0096840f; WORD $0x0000             // je           LBB79_46, $150(%rip)
	LONG $0xc9be0f48                           // movsbq       %cl, %rcx
	WORD $0x014c; BYTE $0xe9                   // addq         %r13, %rcx
	LONG $0xc8af0f48                           // imulq        %rax, %rcx
	LONG $0x06c18348                           // addq         $6, %rcx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	WORD $0x2948; BYTE $0xca                   // subq         %rcx, %rdx
	LONG $0xfe278d0f; WORD $0xffff             // jge          LBB79_4, $-473(%rip)
	LONG $0x000131e9; BYTE $0x00               // jmp          LBB79_58, $305(%rip)

LBB79_37:
	LONG $0xf7448b42; BYTE $0x04   // movl         $4(%rdi,%r14,8), %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0093840f; WORD $0x0000 // je           LBB79_47, $147(%rip)
	WORD $0xc8ff                   // decl         %eax
	LONG $0xf7448942; BYTE $0x04   // movl         %eax, $4(%rdi,%r14,8)
	LONG $0x00008ae9; BYTE $0x00   // jmp          LBB79_48, $138(%rip)

LBB79_39:
	LONG $0xf704c642; BYTE $0xfe // movb         $-2, (%rdi,%r14,8)
	LONG $0xf75c8842; BYTE $0x02 // movb         %bl, $2(%rdi,%r14,8)
	WORD $0xc8ff                 // decl         %eax
	LONG $0xf7448942; BYTE $0x04 // movl         %eax, $4(%rdi,%r14,8)
	LONG $0xfbc28348             // addq         $-5, %rdx
	LONG $0x05c38349             // addq         $5, %r11
	LONG $0x05c68348             // addq         $5, %rsi
	LONG $0x0cb60f42; BYTE $0xf7 // movzbl       (%rdi,%r14,8), %ecx
	LONG $0xfffdace9; BYTE $0xff // jmp          LBB79_1, $-596(%rip)

LBB79_42:
	LONG $0xf7448b42; BYTE $0x04   // movl         $4(%rdi,%r14,8), %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x00ad840f; WORD $0x0000 // je           LBB79_52, $173(%rip)
	WORD $0xc8ff                   // decl         %eax
	LONG $0xf7448942; BYTE $0x04   // movl         %eax, $4(%rdi,%r14,8)
	LONG $0x0000a4e9; BYTE $0x00   // jmp          LBB79_53, $164(%rip)

LBB79_44:
	LONG $0xf7448b42; BYTE $0x04   // movl         $4(%rdi,%r14,8), %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x00a7840f; WORD $0x0000 // je           LBB79_54, $167(%rip)
	WORD $0xc8ff                   // decl         %eax
	LONG $0xf7448942; BYTE $0x04   // movl         %eax, $4(%rdi,%r14,8)
	LONG $0x00009ee9; BYTE $0x00   // jmp          LBB79_55, $158(%rip)

LBB79_46:
	LONG $0xf77c8846; BYTE $0x01 // movb         %r15b, $1(%rdi,%r14,8)
	LONG $0xf7648846; BYTE $0x02 // movb         %r12b, $2(%rdi,%r14,8)
	LONG $0xf704c642; BYTE $0xff // movb         $-1, (%rdi,%r14,8)
	WORD $0xc001                 // addl         %eax, %eax
	WORD $0xc8ff                 // decl         %eax
	LONG $0xf7448942; BYTE $0x04 // movl         %eax, $4(%rdi,%r14,8)
	LONG $0xfac28348             // addq         $-6, %rdx
	LONG $0x06c38349             // addq         $6, %r11
	LONG $0x06c68348             // addq         $6, %rsi
	LONG $0x0cb60f42; BYTE $0xf7 // movzbl       (%rdi,%r14,8), %ecx
	LONG $0xfffd4ce9; BYTE $0xff // jmp          LBB79_1, $-692(%rip)

LBB79_47:
	WORD $0xff49; BYTE $0xce // decq         %r14

LBB79_48:
	LONG $0xfbc28348             // addq         $-5, %rdx
	LONG $0x05c38349             // addq         $5, %r11
	LONG $0x000005b9; BYTE $0x00 // movl         $5, %ecx
	LONG $0xfffd8de9; BYTE $0xff // jmp          LBB79_8, $-627(%rip)

LBB79_49:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x04fa8348                           // cmpq         $4, %rdx
	LONG $0x006b820f; WORD $0x0000             // jb           LBB79_58, $107(%rip)
	LONG $0xfefe8149; WORD $0x0003; BYTE $0x00 // cmpq         $1022, %r14
	LONG $0x0069870f; WORD $0x0000             // ja           LBB79_60, $105(%rip)
	LONG $0xf74c8842; BYTE $0x08               // movb         %cl, $8(%rdi,%r14,8)
	QUAD $0x0000000cf744c742; BYTE $0x00       // movl         $0, $12(%rdi,%r14,8)
	WORD $0xff49; BYTE $0xc6                   // incq         %r14
	LONG $0xfdc28348                           // addq         $-3, %rdx
	LONG $0x03c38349                           // addq         $3, %r11
	LONG $0x03c68348                           // addq         $3, %rsi
	LONG $0x0cb60f42; BYTE $0xf7               // movzbl       (%rdi,%r14,8), %ecx
	LONG $0xfffcf2e9; BYTE $0xff               // jmp          LBB79_1, $-782(%rip)

LBB79_52:
	WORD $0xff49; BYTE $0xce // decq         %r14

LBB79_53:
	WORD $0xff48; BYTE $0xca     // decq         %rdx
	WORD $0xff49; BYTE $0xc3     // incq         %r11
	LONG $0x000001b9; BYTE $0x00 // movl         $1, %ecx
	LONG $0xfffd35e9; BYTE $0xff // jmp          LBB79_8, $-715(%rip)

LBB79_54:
	WORD $0xff49; BYTE $0xce // decq         %r14

LBB79_55:
	LONG $0xfac28348             // addq         $-6, %rdx
	LONG $0x06c38349             // addq         $6, %r11
	LONG $0x000006b9; BYTE $0x00 // movl         $6, %ecx
	LONG $0xfffd20e9; BYTE $0xff // jmp          LBB79_8, $-736(%rip)

LBB79_56:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x000003e9; BYTE $0x00               // jmp          LBB79_58, $3(%rip)

LBB79_57:
	WORD $0x894c; BYTE $0xd8 // movq         %r11, %rax

LBB79_58:
	BYTE $0x5b   // popq         %rbx
	WORD $0x5c41 // popq         %r12
	WORD $0x5d41 // popq         %r13
	WORD $0x5e41 // popq         %r14
	WORD $0x5f41 // popq         %r15
	BYTE $0x5d   // popq         %rbp
	BYTE $0xc3   // retq

LBB79_60:
	LONG $0xfdc0c748; WORD $0xffff; BYTE $0xff // movq         $-3, %rax
	LONG $0xffffe9e9; BYTE $0xff               // jmp          LBB79_58, $-23(%rip)

	// .p2align 2, 0x90
	// .set L79_0_set_16, LBB79_16-LJTI79_0
	// .set L79_0_set_18, LBB79_18-LJTI79_0
	// .set L79_0_set_58, LBB79_58-LJTI79_0
	// .set L79_0_set_3, LBB79_3-LJTI79_0
	// .set L79_0_set_20, LBB79_20-LJTI79_0
	// .set L79_0_set_23, LBB79_23-LJTI79_0
	// .set L79_0_set_29, LBB79_29-LJTI79_0
	// .set L79_0_set_10, LBB79_10-LJTI79_0
LJTI79_0:
	LONG $0xfffffd63                           // .long L79_0_set_16
	LONG $0xfffffd89                           // .long L79_0_set_18
	LONG $0xffffffe9                           // .long L79_0_set_58
	LONG $0xffffffe9                           // .long L79_0_set_58
	LONG $0xfffffcc9                           // .long L79_0_set_3
	LONG $0xfffffcc9                           // .long L79_0_set_3
	LONG $0xfffffcc9                           // .long L79_0_set_3
	LONG $0xffffffe9                           // .long L79_0_set_58
	LONG $0xfffffcc9                           // .long L79_0_set_3
	LONG $0xffffffe9                           // .long L79_0_set_58
	LONG $0xfffffcc9                           // .long L79_0_set_3
	LONG $0xffffffe9                           // .long L79_0_set_58
	LONG $0xfffffcc9                           // .long L79_0_set_3
	LONG $0xfffffdc2                           // .long L79_0_set_20
	LONG $0xfffffde9                           // .long L79_0_set_23
	LONG $0xfffffe3b                           // .long L79_0_set_29
	LONG $0xfffffd10                           // .long L79_0_set_10
	LONG $0xfffffd10                           // .long L79_0_set_10
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

_format_significand:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5641                   // pushq        %r14
	BYTE $0x53                     // pushq        %rbx
	WORD $0x634c; BYTE $0xc2       // movslq       %edx, %r8
	WORD $0x0149; BYTE $0xf0       // addq         %rsi, %r8
	WORD $0x8948; BYTE $0xf8       // movq         %rdi, %rax
	LONG $0x20e8c148               // shrq         $32, %rax
	LONG $0x001c850f; WORD $0x0000 // jne          LBB80_2, $28(%rip)
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0x894d; BYTE $0xc6       // movq         %r8, %r14
	WORD $0x8948; BYTE $0xfa       // movq         %rdi, %rdx
	LONG $0x2710fa81; WORD $0x0000 // cmpl         $10000, %edx
	LONG $0x00e3830f; WORD $0x0000 // jae          LBB80_8, $227(%rip)

LBB80_7:
	WORD $0xd789                 // movl         %edx, %edi
	LONG $0x000132e9; BYTE $0x00 // jmp          LBB80_10, $306(%rip)

LBB80_2:
	QUAD $0x77118461cefdb948; WORD $0xabcc     // movabsq      $-6067343680855748867, %rcx
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	WORD $0xf748; BYTE $0xe1                   // mulq         %rcx
	LONG $0x1aeac148                           // shrq         $26, %rdx
	LONG $0x1f00ca69; WORD $0xfa0a             // imull        $-100000000, %edx, %ecx
	WORD $0xf901                               // addl         %edi, %ecx
	LONG $0x00a4840f; WORD $0x0000             // je           LBB80_3, $164(%rip)
	WORD $0xc889                               // movl         %ecx, %eax
	LONG $0x1759b941; WORD $0xd1b7             // movl         $3518437209, %r9d
	LONG $0xc1af0f49                           // imulq        %r9, %rax
	LONG $0x2de8c148                           // shrq         $45, %rax
	LONG $0x2710f869; WORD $0x0000             // imull        $10000, %eax, %edi
	WORD $0xf929                               // subl         %edi, %ecx
	WORD $0x8948; BYTE $0xc7                   // movq         %rax, %rdi
	LONG $0xf9af0f49                           // imulq        %r9, %rdi
	LONG $0x2defc148                           // shrq         $45, %rdi
	LONG $0x2710ff69; WORD $0x0000             // imull        $10000, %edi, %edi
	WORD $0xf829                               // subl         %edi, %eax
	WORD $0xb70f; BYTE $0xf9                   // movzwl       %cx, %edi
	WORD $0xefc1; BYTE $0x02                   // shrl         $2, %edi
	LONG $0x7bcf6944; WORD $0x0014; BYTE $0x00 // imull        $5243, %edi, %r9d
	LONG $0x11e9c141                           // shrl         $17, %r9d
	LONG $0x64f96b41                           // imull        $100, %r9d, %edi
	WORD $0xf929                               // subl         %edi, %ecx
	LONG $0xd1b70f44                           // movzwl       %cx, %r10d
	WORD $0xb70f; BYTE $0xf8                   // movzwl       %ax, %edi
	WORD $0xefc1; BYTE $0x02                   // shrl         $2, %edi
	LONG $0x147bff69; WORD $0x0000             // imull        $5243, %edi, %edi
	WORD $0xefc1; BYTE $0x11                   // shrl         $17, %edi
	WORD $0xcf6b; BYTE $0x64                   // imull        $100, %edi, %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	LONG $0xd8b70f44                           // movzwl       %ax, %r11d
	LONG $0xa30d8d48; WORD $0x0033; BYTE $0x00 // leaq         $13219(%rip), %rcx  /* _Digits+0(%rip) */
	LONG $0x04b70f42; BYTE $0x51               // movzwl       (%rcx,%r10,2), %eax
	LONG $0x40894166; BYTE $0xfe               // movw         %ax, $-2(%r8)
	LONG $0x04b70f42; BYTE $0x49               // movzwl       (%rcx,%r9,2), %eax
	LONG $0x40894166; BYTE $0xfc               // movw         %ax, $-4(%r8)
	LONG $0x04b70f42; BYTE $0x59               // movzwl       (%rcx,%r11,2), %eax
	LONG $0x40894166; BYTE $0xfa               // movw         %ax, $-6(%r8)
	LONG $0x7904b70f                           // movzwl       (%rcx,%rdi,2), %eax
	LONG $0x40894166; BYTE $0xf8               // movw         %ax, $-8(%r8)
	WORD $0x3145; BYTE $0xc9                   // xorl         %r9d, %r9d
	LONG $0xf8708d4d                           // leaq         $-8(%r8), %r14
	LONG $0x2710fa81; WORD $0x0000             // cmpl         $10000, %edx
	LONG $0xff38820f; WORD $0xffff             // jb           LBB80_7, $-200(%rip)
	LONG $0x000016e9; BYTE $0x00               // jmp          LBB80_8, $22(%rip)

LBB80_3:
	LONG $0x0008b941; WORD $0x0000 // movl         $8, %r9d
	LONG $0xf8708d4d               // leaq         $-8(%r8), %r14
	LONG $0x2710fa81; WORD $0x0000 // cmpl         $10000, %edx
	LONG $0xff1d820f; WORD $0xffff // jb           LBB80_7, $-227(%rip)

LBB80_8:
	LONG $0x1759ba41; WORD $0xd1b7             // movl         $3518437209, %r10d
	LONG $0x411d8d4c; WORD $0x0033; BYTE $0x00 // leaq         $13121(%rip), %r11  /* _Digits+0(%rip) */
	BYTE $0x90                                 // .p2align 4, 0x90

LBB80_9:
	WORD $0xd789                               // movl         %edx, %edi
	LONG $0xfaaf0f49                           // imulq        %r10, %rdi
	LONG $0x2defc148                           // shrq         $45, %rdi
	LONG $0xd8f0c769; WORD $0xffff             // imull        $-10000, %edi, %eax
	WORD $0xd001                               // addl         %edx, %eax
	LONG $0x1fd86948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rax, %rbx
	LONG $0x25ebc148                           // shrq         $37, %rbx
	WORD $0xcb6b; BYTE $0x64                   // imull        $100, %ebx, %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	LONG $0x04b70f41; BYTE $0x43               // movzwl       (%r11,%rax,2), %eax
	LONG $0x46894166; BYTE $0xfe               // movw         %ax, $-2(%r14)
	LONG $0x04b70f41; BYTE $0x5b               // movzwl       (%r11,%rbx,2), %eax
	LONG $0x46894166; BYTE $0xfc               // movw         %ax, $-4(%r14)
	LONG $0xfcc68349                           // addq         $-4, %r14
	LONG $0xe0fffa81; WORD $0x05f5             // cmpl         $99999999, %edx
	WORD $0xfa89                               // movl         %edi, %edx
	LONG $0xffb8870f; WORD $0xffff             // ja           LBB80_9, $-72(%rip)

LBB80_10:
	WORD $0xff83; BYTE $0x64       // cmpl         $100, %edi
	LONG $0x0020830f; WORD $0x0000 // jae          LBB80_11, $32(%rip)
	WORD $0xff83; BYTE $0x0a       // cmpl         $10, %edi
	LONG $0x004d820f; WORD $0x0000 // jb           LBB80_14, $77(%rip)

LBB80_13:
	WORD $0xf889                               // movl         %edi, %eax
	LONG $0xdd0d8d48; WORD $0x0032; BYTE $0x00 // leaq         $13021(%rip), %rcx  /* _Digits+0(%rip) */
	LONG $0x4104b70f                           // movzwl       (%rcx,%rax,2), %eax
	LONG $0x46894166; BYTE $0xfe               // movw         %ax, $-2(%r14)
	LONG $0x00003de9; BYTE $0x00               // jmp          LBB80_15, $61(%rip)

LBB80_11:
	WORD $0xb70f; BYTE $0xc7                   // movzwl       %di, %eax
	WORD $0xe8c1; BYTE $0x02                   // shrl         $2, %eax
	LONG $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	WORD $0xe8c1; BYTE $0x11                   // shrl         $17, %eax
	WORD $0xc86b; BYTE $0x64                   // imull        $100, %eax, %ecx
	WORD $0xcf29                               // subl         %ecx, %edi
	WORD $0xb70f; BYTE $0xcf                   // movzwl       %di, %ecx
	LONG $0xb1158d48; WORD $0x0032; BYTE $0x00 // leaq         $12977(%rip), %rdx  /* _Digits+0(%rip) */
	LONG $0x4a0cb70f                           // movzwl       (%rdx,%rcx,2), %ecx
	LONG $0x4e894166; BYTE $0xfe               // movw         %cx, $-2(%r14)
	LONG $0xfec68349                           // addq         $-2, %r14
	WORD $0xc789                               // movl         %eax, %edi
	WORD $0xff83; BYTE $0x0a                   // cmpl         $10, %edi
	LONG $0xffb3830f; WORD $0xffff             // jae          LBB80_13, $-77(%rip)

LBB80_14:
	LONG $0x30c78040         // addb         $48, %dil
	WORD $0x8840; BYTE $0x3e // movb         %dil, (%rsi)

LBB80_15:
	WORD $0x294d; BYTE $0xc8                   // subq         %r9, %r8
	WORD $0x894c; BYTE $0xc0                   // movq         %r8, %rax
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5e41                               // popq         %r14
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_left_shift:
	BYTE $0x55                                               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                                 // movq         %rsp, %rbp
	WORD $0x5641                                             // pushq        %r14
	BYTE $0x53                                               // pushq        %rbx
	WORD $0xf189                                             // movl         %esi, %ecx
	LONG $0x68d16b4c                                         // imulq        $104, %rcx, %r10
	LONG $0x5c1d8d4c; WORD $0x008c; BYTE $0x00               // leaq         $35932(%rip), %r11  /* _LSHIFT_TAB+0(%rip) */
	LONG $0x1a048b47                                         // movl         (%r10,%r11), %r8d
	WORD $0x8b4c; BYTE $0x0f                                 // movq         (%rdi), %r9
	LONG $0x10776348                                         // movslq       $16(%rdi), %rsi
	WORD $0x8548; BYTE $0xf6                                 // testq        %rsi, %rsi
	LONG $0x0050840f; WORD $0x0000                           // je           LBB81_1, $80(%rip)
	LONG $0x1a1c8d4b                                         // leaq         (%r10,%r11), %rbx
	LONG $0x04c38348                                         // addq         $4, %rbx
	WORD $0xd231                                             // xorl         %edx, %edx
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB81_3:
	LONG $0x1304b60f               // movzbl       (%rbx,%rdx), %eax
	WORD $0xc084                   // testb        %al, %al
	LONG $0x0040840f; WORD $0x0000 // je           LBB81_10, $64(%rip)
	LONG $0x11043841               // cmpb         %al, (%r9,%rdx)
	LONG $0x01b9850f; WORD $0x0000 // jne          LBB81_5, $441(%rip)
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0x3948; BYTE $0xd6       // cmpq         %rdx, %rsi
	LONG $0xffde850f; WORD $0xffff // jne          LBB81_3, $-34(%rip)
	WORD $0xf289                   // movl         %esi, %edx
	WORD $0x014d; BYTE $0xd3       // addq         %r10, %r11
	LONG $0x1a7c8042; WORD $0x0004 // cmpb         $0, $4(%rdx,%r11)
	LONG $0x0016850f; WORD $0x0000 // jne          LBB81_9, $22(%rip)
	LONG $0x000014e9; BYTE $0x00   // jmp          LBB81_10, $20(%rip)

LBB81_1:
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0x014d; BYTE $0xd3       // addq         %r10, %r11
	LONG $0x1a7c8042; WORD $0x0004 // cmpb         $0, $4(%rdx,%r11)
	LONG $0x0003840f; WORD $0x0000 // je           LBB81_10, $3(%rip)

LBB81_9:
	WORD $0xff41; BYTE $0xc8 // decl         %r8d

LBB81_10:
	WORD $0xf685                           // testl        %esi, %esi
	LONG $0x008e8e0f; WORD $0x0000         // jle          LBB81_25, $142(%rip)
	LONG $0x30048d41                       // leal         (%r8,%rsi), %eax
	WORD $0x8941; BYTE $0xf3               // movl         %esi, %r11d
	WORD $0x634c; BYTE $0xf0               // movslq       %eax, %r14
	WORD $0xff49; BYTE $0xce               // decq         %r14
	WORD $0xd231                           // xorl         %edx, %edx
	QUAD $0xcccccccccccdba49; WORD $0xcccc // movabsq      $-3689348814741910323, %r10
	WORD $0x9090; BYTE $0x90               // .p2align 4, 0x90

LBB81_12:
	LONG $0xff438d41               // leal         $-1(%r11), %eax
	LONG $0x34be0f49; BYTE $0x01   // movsbq       (%r9,%rax), %rsi
	LONG $0xd0c68348               // addq         $-48, %rsi
	WORD $0xd348; BYTE $0xe6       // shlq         %cl, %rsi
	WORD $0x0148; BYTE $0xd6       // addq         %rdx, %rsi
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	WORD $0xf749; BYTE $0xe2       // mulq         %r10
	LONG $0x03eac148               // shrq         $3, %rdx
	LONG $0x12048d48               // leaq         (%rdx,%rdx), %rax
	LONG $0x801c8d48               // leaq         (%rax,%rax,4), %rbx
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	WORD $0x2948; BYTE $0xd8       // subq         %rbx, %rax
	LONG $0x0877394c               // cmpq         %r14, $8(%rdi)
	LONG $0x000b860f; WORD $0x0000 // jbe          LBB81_18, $11(%rip)
	WORD $0x3004                   // addb         $48, %al
	LONG $0x31048843               // movb         %al, (%r9,%r14)
	LONG $0x000010e9; BYTE $0x00   // jmp          LBB81_20, $16(%rip)

	// .p2align 4, 0x90
LBB81_18:
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x0007840f; WORD $0x0000             // je           LBB81_20, $7(%rip)
	LONG $0x011c47c7; WORD $0x0000; BYTE $0x00 // movl         $1, $28(%rdi)

LBB81_20:
	LONG $0x02fb8349               // cmpq         $2, %r11
	LONG $0x000e820f; WORD $0x0000 // jb           LBB81_14, $14(%rip)
	WORD $0x8b4c; BYTE $0x0f       // movq         (%rdi), %r9
	WORD $0xff49; BYTE $0xce       // decq         %r14
	WORD $0xff49; BYTE $0xcb       // decq         %r11
	LONG $0xffff98e9; BYTE $0xff   // jmp          LBB81_12, $-104(%rip)

LBB81_14:
	LONG $0x0afe8348               // cmpq         $10, %rsi
	LONG $0x0080830f; WORD $0x0000 // jae          LBB81_15, $128(%rip)

LBB81_25:
	LONG $0x10476348               // movslq       $16(%rdi), %rax
	WORD $0x6349; BYTE $0xc8       // movslq       %r8d, %rcx
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	WORD $0x4f89; BYTE $0x10       // movl         %ecx, $16(%rdi)
	LONG $0x08478b48               // movq         $8(%rdi), %rax
	WORD $0x3948; BYTE $0xc8       // cmpq         %rcx, %rax
	LONG $0x0005870f; WORD $0x0000 // ja           LBB81_27, $5(%rip)
	WORD $0x4789; BYTE $0x10       // movl         %eax, $16(%rdi)
	WORD $0xc189                   // movl         %eax, %ecx

LBB81_27:
	LONG $0x14470144                                         // addl         %r8d, $20(%rdi)
	WORD $0xc985                                             // testl        %ecx, %ecx
	LONG $0x003e8e0f; WORD $0x0000                           // jle          LBB81_31, $62(%rip)
	WORD $0x8b48; BYTE $0x07                                 // movq         (%rdi), %rax
	WORD $0xc989                                             // movl         %ecx, %ecx
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB81_29:
	LONG $0xff518d48               // leaq         $-1(%rcx), %rdx
	WORD $0xd689                   // movl         %edx, %esi
	LONG $0x30303c80               // cmpb         $48, (%rax,%rsi)
	LONG $0x0021850f; WORD $0x0000 // jne          LBB81_33, $33(%rip)
	WORD $0xc9ff                   // decl         %ecx
	WORD $0x4f89; BYTE $0x10       // movl         %ecx, $16(%rdi)
	LONG $0x01728d48               // leaq         $1(%rdx), %rsi
	WORD $0x8948; BYTE $0xd1       // movq         %rdx, %rcx
	LONG $0x01fe8348               // cmpq         $1, %rsi
	LONG $0xffda870f; WORD $0xffff // ja           LBB81_29, $-38(%rip)
	LONG $0x00000be9; BYTE $0x00   // jmp          LBB81_32, $11(%rip)

LBB81_31:
	LONG $0x0005840f; WORD $0x0000 // je           LBB81_32, $5(%rip)

LBB81_33:
	BYTE $0x5b   // popq         %rbx
	WORD $0x5e41 // popq         %r14
	BYTE $0x5d   // popq         %rbp
	BYTE $0xc3   // retq

LBB81_32:
	LONG $0x001447c7; WORD $0x0000; BYTE $0x00 // movl         $0, $20(%rdi)
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5e41                               // popq         %r14
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB81_15:
	LONG $0xff408d41                           // leal         $-1(%r8), %eax
	WORD $0x014c; BYTE $0xd8                   // addq         %r11, %rax
	WORD $0x6348; BYTE $0xf0                   // movslq       %eax, %rsi
	WORD $0xff48; BYTE $0xce                   // decq         %rsi
	LONG $0x000021e9; BYTE $0x00               // jmp          LBB81_16, $33(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

LBB81_17:
	WORD $0x3004             // addb         $48, %al
	WORD $0x8b48; BYTE $0x1f // movq         (%rdi), %rbx
	WORD $0x0488; BYTE $0x33 // movb         %al, (%rbx,%rsi)

LBB81_24:
	WORD $0xff48; BYTE $0xce       // decq         %rsi
	LONG $0x09f98348               // cmpq         $9, %rcx
	LONG $0xff4d860f; WORD $0xffff // jbe          LBB81_25, $-179(%rip)

LBB81_16:
	WORD $0x8948; BYTE $0xd1                   // movq         %rdx, %rcx
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	WORD $0xf749; BYTE $0xe2                   // mulq         %r10
	LONG $0x03eac148                           // shrq         $3, %rdx
	LONG $0x12048d48                           // leaq         (%rdx,%rdx), %rax
	LONG $0x801c8d48                           // leaq         (%rax,%rax,4), %rbx
	WORD $0x8948; BYTE $0xc8                   // movq         %rcx, %rax
	WORD $0x2948; BYTE $0xd8                   // subq         %rbx, %rax
	LONG $0x08773948                           // cmpq         %rsi, $8(%rdi)
	LONG $0xffc6870f; WORD $0xffff             // ja           LBB81_17, $-58(%rip)
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0xffc5840f; WORD $0xffff             // je           LBB81_24, $-59(%rip)
	LONG $0x011c47c7; WORD $0x0000; BYTE $0x00 // movl         $1, $28(%rdi)
	LONG $0xffffb9e9; BYTE $0xff               // jmp          LBB81_24, $-71(%rip)

LBB81_5:
	LONG $0xfe748c0f; WORD $0xffff // jl           LBB81_9, $-396(%rip)
	LONG $0xfffe72e9; BYTE $0xff   // jmp          LBB81_10, $-398(%rip)
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_right_shift:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	BYTE $0x53                     // pushq        %rbx
	WORD $0xf189                   // movl         %esi, %ecx
	LONG $0x10478b44               // movl         $16(%rdi), %r8d
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0x8545; BYTE $0xc0       // testl        %r8d, %r8d
	LONG $0x0000bb41; WORD $0x0000 // movl         $0, %r11d
	LONG $0xd84f0f45               // cmovgl       %r8d, %r11d
	WORD $0xc031                   // xorl         %eax, %eax
	LONG $0x90909090               // .p2align 4, 0x90

LBB82_1:
	WORD $0x3949; BYTE $0xd3       // cmpq         %rdx, %r11
	LONG $0x0132840f; WORD $0x0000 // je           LBB82_2, $306(%rip)
	LONG $0x80048d48               // leaq         (%rax,%rax,4), %rax
	WORD $0x8b48; BYTE $0x37       // movq         (%rdi), %rsi
	LONG $0x34be0f48; BYTE $0x16   // movsbq       (%rsi,%rdx), %rsi
	LONG $0x46048d48               // leaq         (%rsi,%rax,2), %rax
	LONG $0xd0c08348               // addq         $-48, %rax
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	WORD $0xd348; BYTE $0xee       // shrq         %cl, %rsi
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xffd1840f; WORD $0xffff // je           LBB82_1, $-47(%rip)
	WORD $0x8941; BYTE $0xd3       // movl         %edx, %r11d

LBB82_7:
	WORD $0x578b; BYTE $0x14                   // movl         $20(%rdi), %edx
	WORD $0x2944; BYTE $0xda                   // subl         %r11d, %edx
	WORD $0xc2ff                               // incl         %edx
	LONG $0xffc1c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r9
	WORD $0xd349; BYTE $0xe1                   // shlq         %cl, %r9
	WORD $0x5789; BYTE $0x14                   // movl         %edx, $20(%rdi)
	WORD $0xf749; BYTE $0xd1                   // notq         %r9
	WORD $0x3145; BYTE $0xd2                   // xorl         %r10d, %r10d
	WORD $0x3945; BYTE $0xc3                   // cmpl         %r8d, %r11d
	LONG $0x00718d0f; WORD $0x0000             // jge          LBB82_10, $113(%rip)
	WORD $0x634d; BYTE $0xc3                   // movslq       %r11d, %r8
	WORD $0x8b48; BYTE $0x37                   // movq         (%rdi), %rsi
	WORD $0x3145; BYTE $0xd2                   // xorl         %r10d, %r10d
	BYTE $0x90                                 // .p2align 4, 0x90

LBB82_9:
	WORD $0x8948; BYTE $0xc2                                 // movq         %rax, %rdx
	WORD $0xd348; BYTE $0xea                                 // shrq         %cl, %rdx
	WORD $0x214c; BYTE $0xc8                                 // andq         %r9, %rax
	WORD $0xc280; BYTE $0x30                                 // addb         $48, %dl
	LONG $0x16148842                                         // movb         %dl, (%rsi,%r10)
	WORD $0x8b48; BYTE $0x37                                 // movq         (%rdi), %rsi
	LONG $0x06148d4a                                         // leaq         (%rsi,%r8), %rdx
	LONG $0x1cbe0f4d; BYTE $0x12                             // movsbq       (%r10,%rdx), %r11
	LONG $0x105c8d4b; BYTE $0x01                             // leaq         $1(%r8,%r10), %rbx
	WORD $0xff49; BYTE $0xc2                                 // incq         %r10
	LONG $0x80048d48                                         // leaq         (%rax,%rax,4), %rax
	LONG $0x43048d49                                         // leaq         (%r11,%rax,2), %rax
	LONG $0xd0c08348                                         // addq         $-48, %rax
	LONG $0x10576348                                         // movslq       $16(%rdi), %rdx
	WORD $0x3948; BYTE $0xd3                                 // cmpq         %rdx, %rbx
	LONG $0xffc38c0f; WORD $0xffff                           // jl           LBB82_9, $-61(%rip)
	LONG $0x000025e9; BYTE $0x00                             // jmp          LBB82_10, $37(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB82_12:
	LONG $0x30c68040         // addb         $48, %sil
	WORD $0x8b48; BYTE $0x1f // movq         (%rdi), %rbx
	LONG $0x13348840         // movb         %sil, (%rbx,%rdx)
	WORD $0xc2ff             // incl         %edx
	WORD $0x8941; BYTE $0xd2 // movl         %edx, %r10d

LBB82_15:
	WORD $0x0148; BYTE $0xc0 // addq         %rax, %rax
	LONG $0x80048d48         // leaq         (%rax,%rax,4), %rax

LBB82_10:
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x002b840f; WORD $0x0000             // je           LBB82_16, $43(%rip)
	WORD $0x8948; BYTE $0xc6                   // movq         %rax, %rsi
	WORD $0xd348; BYTE $0xee                   // shrq         %cl, %rsi
	WORD $0x214c; BYTE $0xc8                   // andq         %r9, %rax
	WORD $0x6349; BYTE $0xd2                   // movslq       %r10d, %rdx
	LONG $0x08573948                           // cmpq         %rdx, $8(%rdi)
	LONG $0xffca870f; WORD $0xffff             // ja           LBB82_12, $-54(%rip)
	WORD $0x8548; BYTE $0xf6                   // testq        %rsi, %rsi
	LONG $0xffd1840f; WORD $0xffff             // je           LBB82_15, $-47(%rip)
	LONG $0x011c47c7; WORD $0x0000; BYTE $0x00 // movl         $1, $28(%rdi)
	LONG $0xffffc5e9; BYTE $0xff               // jmp          LBB82_15, $-59(%rip)

LBB82_16:
	LONG $0x10578944               // movl         %r10d, $16(%rdi)
	WORD $0x8545; BYTE $0xd2       // testl        %r10d, %r10d
	LONG $0x00758e0f; WORD $0x0000 // jle          LBB82_20, $117(%rip)
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	WORD $0x8944; BYTE $0xd1       // movl         %r10d, %ecx
	WORD $0x9090                   // .p2align 4, 0x90

LBB82_18:
	LONG $0xff518d48               // leaq         $-1(%rcx), %rdx
	WORD $0xd689                   // movl         %edx, %esi
	LONG $0x30303c80               // cmpb         $48, (%rax,%rsi)
	LONG $0x0063850f; WORD $0x0000 // jne          LBB82_22, $99(%rip)
	WORD $0xc9ff                   // decl         %ecx
	WORD $0x4f89; BYTE $0x10       // movl         %ecx, $16(%rdi)
	LONG $0x01728d48               // leaq         $1(%rdx), %rsi
	WORD $0x8948; BYTE $0xd1       // movq         %rdx, %rcx
	LONG $0x01fe8348               // cmpq         $1, %rsi
	LONG $0xffda870f; WORD $0xffff // ja           LBB82_18, $-38(%rip)
	LONG $0x00004be9; BYTE $0x00   // jmp          LBB82_21, $75(%rip)

LBB82_2:
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x004c840f; WORD $0x0000             // je           LBB82_23, $76(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90
	WORD $0x8948; BYTE $0xc2                   // movq         %rax, %rdx
	WORD $0xd348; BYTE $0xea                   // shrq         %cl, %rdx
	WORD $0x8548; BYTE $0xd2                   // testq        %rdx, %rdx
	LONG $0xfed3850f; WORD $0xffff             // jne          LBB82_7, $-301(%rip)

LBB82_4:
	WORD $0x0148; BYTE $0xc0       // addq         %rax, %rax
	LONG $0x80048d48               // leaq         (%rax,%rax,4), %rax
	WORD $0xff41; BYTE $0xc3       // incl         %r11d
	WORD $0x8948; BYTE $0xc2       // movq         %rax, %rdx
	WORD $0xd348; BYTE $0xea       // shrq         %cl, %rdx
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xffe7840f; WORD $0xffff // je           LBB82_4, $-25(%rip)
	LONG $0xfffeb5e9; BYTE $0xff   // jmp          LBB82_7, $-331(%rip)

LBB82_20:
	LONG $0x0003840f; WORD $0x0000 // je           LBB82_21, $3(%rip)

LBB82_22:
	BYTE $0x5b // popq         %rbx
	BYTE $0x5d // popq         %rbp
	BYTE $0xc3 // retq

LBB82_21:
	LONG $0x001447c7; WORD $0x0000; BYTE $0x00 // movl         $0, $20(%rdi)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB82_23:
	LONG $0x001047c7; WORD $0x0000; BYTE $0x00 // movl         $0, $16(%rdi)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	LONG $0x00000000; WORD $0x0000             // .p2align 4, 0x00

_POW10_M128_TAB:
	QUAD $0x1732c869cd60e453                           // .quad 1671618768450675795
	QUAD $0xfa8fd5a0081c0288                           // .quad -391859759250406776
	QUAD $0x0e7fbd42205c8eb4                           // .quad 1044761730281672372
	QUAD $0x9c99e58405118195                           // .quad -7162441377172586091
	QUAD $0x521fac92a873b261                           // .quad 5917638181279478369
	QUAD $0xc3c05ee50655e1fa                           // .quad -4341365703038344710
	QUAD $0xe6a797b752909ef9                           // .quad -1826324310255427847
	QUAD $0xf4b0769e47eb5a78                           // .quad -815021110370542984
	QUAD $0x9028bed2939a635c                           // .quad -8058981721550724260
	QUAD $0x98ee4a22ecf3188b                           // .quad -7426917221622671221
	QUAD $0x7432ee873880fc33                           // .quad 8373016921771146291
	QUAD $0xbf29dcaba82fdeae                           // .quad -4671960508600951122
	QUAD $0x113faa2906a13b3f                           // .quad 1242899115359157055
	QUAD $0xeef453d6923bd65a                           // .quad -1228264617323800998
	QUAD $0x4ac7ca59a424c507                           // .quad 5388497965526861063
	QUAD $0x9558b4661b6565f8                           // .quad -7685194413468457480
	QUAD $0x5d79bcf00d2df649                           // .quad 6735622456908576329
	QUAD $0xbaaee17fa23ebf76                           // .quad -4994806998408183946
	QUAD $0xf4d82c2c107973dc                           // .quad -803843965719055396
	QUAD $0xe95a99df8ace6f53                           // .quad -1631822729582842029
	QUAD $0x79071b9b8a4be869                           // .quad 8720969558280366185
	QUAD $0x91d8a02bb6c10594                           // .quad -7937418233630358124
	QUAD $0x9748e2826cdee284                           // .quad -7545532125859093884
	QUAD $0xb64ec836a47146f9                           // .quad -5310086773610559751
	QUAD $0xfd1b1b2308169b25                           // .quad -208543120469091547
	QUAD $0xe3e27a444d8d98b7                           // .quad -2025922448585811785
	QUAD $0xfe30f0f5e50e20f7                           // .quad -130339450293182217
	QUAD $0x8e6d8c6ab0787f72                           // .quad -8183730558007214222
	QUAD $0xbdbd2d335e51a935                           // .quad -4774610331293865675
	QUAD $0xb208ef855c969f4f                           // .quad -5617977179081629873
	QUAD $0xad2c788035e61382                           // .quad -5968262914117332094
	QUAD $0xde8b2b66b3bc4723                           // .quad -2410785455424649437
	QUAD $0x4c3bcb5021afcc31                           // .quad 5493207715531443249
	QUAD $0x8b16fb203055ac76                           // .quad -8424269937281487754
	QUAD $0xdf4abe242a1bbf3d                           // .quad -2356862392440471747
	QUAD $0xaddcb9e83c6b1793                           // .quad -5918651403174471789
	QUAD $0xd71d6dad34a2af0d                           // .quad -2946077990550589683
	QUAD $0xd953e8624b85dd78                           // .quad -2786628235540701832
	QUAD $0x8672648c40e5ad68                           // .quad -8758827771735200408
	QUAD $0x87d4713d6f33aa6b                           // .quad -8659171674854020501
	QUAD $0x680efdaf511f18c2                           // .quad 7498209359040551106
	QUAD $0xa9c98d8ccb009506                           // .quad -6212278575140137722
	QUAD $0x0212bd1b2566def2                           // .quad 149389661945913074
	QUAD $0xd43bf0effdc0ba48                           // .quad -3153662200497784248
	QUAD $0x014bb630f7604b57                           // .quad 93368538716195671
	QUAD $0x84a57695fe98746d                           // .quad -8888567902952197011
	QUAD $0x419ea3bd35385e2d                           // .quad 4728396691822632493
	QUAD $0xa5ced43b7e3e9188                           // .quad -6499023860262858360
	QUAD $0x52064cac828675b9                           // .quad 5910495864778290617
	QUAD $0xcf42894a5dce35ea                           // .quad -3512093806901185046
	QUAD $0x7343efebd1940993                           // .quad 8305745933913819539
	QUAD $0x818995ce7aa0e1b2                           // .quad -9112587656954322510
	QUAD $0x1014ebe6c5f90bf8                           // .quad 1158810380537498616
	QUAD $0xa1ebfb4219491a1f                           // .quad -6779048552765515233
	QUAD $0xd41a26e077774ef6                           // .quad -3163173042755514634
	QUAD $0xca66fa129f9b60a6                           // .quad -3862124672529506138
	QUAD $0x8920b098955522b4                           // .quad -8565652321871781196
	QUAD $0xfd00b897478238d0                           // .quad -215969822234494768
	QUAD $0x55b46e5f5d5535b0                           // .quad 6175682344898606512
	QUAD $0x9e20735e8cb16382                           // .quad -7052510166537641086
	QUAD $0xeb2189f734aa831d                           // .quad -1503769105731517667
	QUAD $0xc5a890362fddbc62                           // .quad -4203951689744663454
	QUAD $0xa5e9ec7501d523e4                           // .quad -6491397400591784988
	QUAD $0xf712b443bbd52b7b                           // .quad -643253593753441413
	QUAD $0x47b233c92125366e                           // .quad 5166248661484910190
	QUAD $0x9a6bb0aa55653b2d                           // .quad -7319562523736982739
	QUAD $0x999ec0bb696e840a                           // .quad -7377247228426025974
	QUAD $0xc1069cd4eabe89f8                           // .quad -4537767136243840520
	QUAD $0xc00670ea43ca250d                           // .quad -4609873017105144563
	QUAD $0xf148440a256e2c76                           // .quad -1060522901877412746
	QUAD $0x380406926a5e5728                           // .quad 4036358391950366504
	QUAD $0x96cd2a865764dbca                           // .quad -7580355841314464822
	QUAD $0xc605083704f5ecf2                           // .quad -4177924046916817678
	QUAD $0xbc807527ed3e12bc                           // .quad -4863758783215693124
	QUAD $0xf7864a44c633682e                           // .quad -610719040218634194
	QUAD $0xeba09271e88d976b                           // .quad -1468012460592228501
	QUAD $0x7ab3ee6afbe0211d                           // .quad 8841672636718129437
	QUAD $0x93445b8731587ea3                           // .quad -7835036815511224669
	QUAD $0x5960ea05bad82964                           // .quad 6440404777470273892
	QUAD $0xb8157268fdae9e4c                           // .quad -5182110000961642932
	QUAD $0x6fb92487298e33bd                           // .quad 8050505971837842365
	QUAD $0xe61acf033d1a45df                           // .quad -1865951482774665761
	QUAD $0xa5d3b6d479f8e056                           // .quad -6497648813669818282
	QUAD $0x8fd0c16206306bab                           // .quad -8083748704375247957
	QUAD $0x8f48a4899877186c                           // .quad -8122061017087272852
	QUAD $0xb3c4f1ba87bc8696                           // .quad -5492999862041672042
	QUAD $0x331acdabfe94de87                           // .quad 3682481783923072647
	QUAD $0xe0b62e2929aba83c                           // .quad -2254563809124702148
	QUAD $0x9ff0c08b7f1d0b14                           // .quad -6921820921902855404
	QUAD $0x8c71dcd9ba0b4925                           // .quad -8326631408344020699
	QUAD $0x07ecf0ae5ee44dd9                           // .quad 571095884476206553
	QUAD $0xaf8e5410288e1b6f                           // .quad -5796603242002637969
	QUAD $0xc9e82cd9f69d6150                           // .quad -3897816162832129712
	QUAD $0xdb71e91432b1a24a                           // .quad -2634068034075909558
	QUAD $0xbe311c083a225cd2                           // .quad -4741978110983775022
	QUAD $0x892731ac9faf056e                           // .quad -8563821548938525330
	QUAD $0x6dbd630a48aaf406                           // .quad 7907585416552444934
	QUAD $0xab70fe17c79ac6ca                           // .quad -6093090917745768758
	QUAD $0x092cbbccdad5b108                           // .quad 661109733835780360
	QUAD $0xd64d3d9db981787d                           // .quad -3004677628754823043
	QUAD $0x25bbf56008c58ea5                           // .quad 2719036592861056677
	QUAD $0x85f0468293f0eb4e                           // .quad -8795452545612846258
	QUAD $0xaf2af2b80af6f24e                           // .quad -5824576295778454962
	QUAD $0xa76c582338ed2621                           // .quad -6382629663588669919
	QUAD $0x1af5af660db4aee1                           // .quad 1942651667131707105
	QUAD $0xd1476e2c07286faa                           // .quad -3366601061058449494
	QUAD $0x50d98d9fc890ed4d                           // .quad 5825843310384704845
	QUAD $0x82cca4db847945ca                           // .quad -9021654690802612790
	QUAD $0xe50ff107bab528a0                           // .quad -1941067898873894752
	QUAD $0xa37fce126597973c                           // .quad -6665382345075878084
	QUAD $0x1e53ed49a96272c8                           // .quad 2185351144835019464
	QUAD $0xcc5fc196fefd7d0c                           // .quad -3720041912917459700
	QUAD $0x25e8e89c13bb0f7a                           // .quad 2731688931043774330
	QUAD $0xff77b1fcbebcdc4f                           // .quad -38366372719436721
	QUAD $0x77b191618c54e9ac                           // .quad 8624834609543440812
	QUAD $0x9faacf3df73609b1                           // .quad -6941508010590729807
	QUAD $0xd59df5b9ef6a2417                           // .quad -3054014793352862697
	QUAD $0xc795830d75038c1d                           // .quad -4065198994811024355
	QUAD $0x4b0573286b44ad1d                           // .quad 5405853545163697437
	QUAD $0xf97ae3d0d2446f25                           // .quad -469812725086392539
	QUAD $0x4ee367f9430aec32                           // .quad 5684501474941004850
	QUAD $0x9becce62836ac577                           // .quad -7211161980820077193
	QUAD $0x229c41f793cda73f                           // .quad 2493940825248868159
	QUAD $0xc2e801fb244576d5                           // .quad -4402266457597708587
	QUAD $0x6b43527578c1110f                           // .quad 7729112049988473103
	QUAD $0xf3a20279ed56d48a                           // .quad -891147053569747830
	QUAD $0x830a13896b78aaa9                           // .quad -9004363024039368023
	QUAD $0x9845418c345644d6                           // .quad -7474495936122174250
	QUAD $0x23cc986bc656d553                           // .quad 2579604275232953683
	QUAD $0xbe5691ef416bd60c                           // .quad -4731433901725329908
	QUAD $0x2cbfbe86b7ec8aa8                           // .quad 3224505344041192104
	QUAD $0xedec366b11c6cb8f                           // .quad -1302606358729274481
	QUAD $0x7bf7d71432f3d6a9                           // .quad 8932844867666826921
	QUAD $0x94b3a202eb1c3f39                           // .quad -7731658001846878407
	QUAD $0xdaf5ccd93fb0cc53                           // .quad -2669001970698630061
	QUAD $0xb9e08a83a5e34f07                           // .quad -5052886483881210105
	QUAD $0xd1b3400f8f9cff68                           // .quad -3336252463373287576
	QUAD $0xe858ad248f5c22c9                           // .quad -1704422086424124727
	QUAD $0x23100809b9c21fa1                           // .quad 2526528228819083169
	QUAD $0x91376c36d99995be                           // .quad -7982792831656159810
	QUAD $0xabd40a0c2832a78a                           // .quad -6065211750830921846
	QUAD $0xb58547448ffffb2d                           // .quad -5366805021142811859
	QUAD $0x16c90c8f323f516c                           // .quad 1641857348316123500
	QUAD $0xe2e69915b3fff9f9                           // .quad -2096820258001126919
	QUAD $0xae3da7d97f6792e3                           // .quad -5891368184943504669
	QUAD $0x8dd01fad907ffc3b                           // .quad -8228041688891786181
	QUAD $0x99cd11cfdf41779c                           // .quad -7364210231179380836
	QUAD $0xb1442798f49ffb4a                           // .quad -5673366092687344822
	QUAD $0x40405643d711d583                           // .quad 4629795266307937667
	QUAD $0xdd95317f31c7fa1d                           // .quad -2480021597431793123
	QUAD $0x482835ea666b2572                           // .quad 5199465050656154994
	QUAD $0x8a7d3eef7f1cfc52                           // .quad -8467542526035952558
	QUAD $0xda3243650005eecf                           // .quad -2724040723534582065
	QUAD $0xad1c8eab5ee43b66                           // .quad -5972742139117552794
	QUAD $0x90bed43e40076a82                           // .quad -8016736922845615486
	QUAD $0xd863b256369d4a40                           // .quad -2854241655469553088
	QUAD $0x5a7744a6e804a291                           // .quad 6518754469289960081
	QUAD $0x873e4f75e2224e68                           // .quad -8701430062309552536
	QUAD $0x711515d0a205cb36                           // .quad 8148443086612450102
	QUAD $0xa90de3535aaae202                           // .quad -6265101559459552766
	QUAD $0x0d5a5b44ca873e03                           // .quad 962181821410786819
	QUAD $0xd3515c2831559a83                           // .quad -3219690930897053053
	QUAD $0xe858790afe9486c2                           // .quad -1704479370831952190
	QUAD $0x8412d9991ed58091                           // .quad -8929835859451740015
	QUAD $0x626e974dbe39a872                           // .quad 7092772823314835570
	QUAD $0xa5178fff668ae0b6                           // .quad -6550608805887287114
	QUAD $0xfb0a3d212dc8128f                           // .quad -357406007711231345
	QUAD $0xce5d73ff402d98e3                           // .quad -3576574988931720989
	QUAD $0x7ce66634bc9d0b99                           // .quad 8999993282035256217
	QUAD $0x80fa687f881c7f8e                           // .quad -9152888395723407474
	QUAD $0x1c1fffc1ebc44e80                           // .quad 2026619565689294464
	QUAD $0xa139029f6a239f72                           // .quad -6829424476226871438
	QUAD $0xa327ffb266b56220                           // .quad -6690097579743157728
	QUAD $0xc987434744ac874e                           // .quad -3925094576856201394
	QUAD $0x4bf1ff9f0062baa8                           // .quad 5472436080603216552
	QUAD $0xfbe9141915d7a922                           // .quad -294682202642863838
	QUAD $0x6f773fc3603db4a9                           // .quad 8031958568804398249
	QUAD $0x9d71ac8fada6c9b5                           // .quad -7101705404292871755
	QUAD $0xcb550fb4384d21d3                           // .quad -3795109844276665901
	QUAD $0xc4ce17b399107c22                           // .quad -4265445736938701790
	QUAD $0x7e2a53a146606a48                           // .quad 9091170749936331336
	QUAD $0xf6019da07f549b2b                           // .quad -720121152745989333
	QUAD $0x2eda7444cbfc426d                           // .quad 3376138709496513133
	QUAD $0x99c102844f94e0fb                           // .quad -7367604748107325189
	QUAD $0xfa911155fefb5308                           // .quad -391512631556746488
	QUAD $0xc0314325637a1939                           // .quad -4597819916706768583
	QUAD $0x793555ab7eba27ca                           // .quad 8733981247408842698
	QUAD $0xf03d93eebc589f88                           // .quad -1135588877456072824
	QUAD $0x4bc1558b2f3458de                           // .quad 5458738279630526686
	QUAD $0x96267c7535b763b5                           // .quad -7627272076051127371
	QUAD $0x9eb1aaedfb016f16                           // .quad -7011635205744005354
	QUAD $0xbbb01b9283253ca2                           // .quad -4922404076636521310
	QUAD $0x465e15a979c1cadc                           // .quad 5070514048102157020
	QUAD $0xea9c227723ee8bcb                           // .quad -1541319077368263733
	QUAD $0x0bfacd89ec191ec9                           // .quad 863228270850154185
	QUAD $0x92a1958a7675175f                           // .quad -7880853450996246689
	QUAD $0xcef980ec671f667b                           // .quad -3532650679864695173
	QUAD $0xb749faed14125d36                           // .quad -5239380795317920458
	QUAD $0x82b7e12780e7401a                           // .quad -9027499368258256870
	QUAD $0xe51c79a85916f484                           // .quad -1937539975720012668
	QUAD $0xd1b2ecb8b0908810                           // .quad -3336344095947716592
	QUAD $0x8f31cc0937ae58d2                           // .quad -8128491512466089774
	QUAD $0x861fa7e6dcb4aa15                           // .quad -8782116138362033643
	QUAD $0xb2fe3f0b8599ef07                           // .quad -5548928372155224313
	QUAD $0x67a791e093e1d49a                           // .quad 7469098900757009562
	QUAD $0xdfbdcece67006ac9                           // .quad -2324474446766642487
	QUAD $0xe0c8bb2c5c6d24e0                           // .quad -2249342214667950880
	QUAD $0x8bd6a141006042bd                           // .quad -8370325556870233411
	QUAD $0x58fae9f773886e18                           // .quad 6411694268519837208
	QUAD $0xaecc49914078536d                           // .quad -5851220927660403859
	QUAD $0xaf39a475506a899e                           // .quad -5820440219632367202
	QUAD $0xda7f5bf590966848                           // .quad -2702340141148116920
	QUAD $0x6d8406c952429603                           // .quad 7891439908798240259
	QUAD $0x888f99797a5e012d                           // .quad -8606491615858654931
	QUAD $0xc8e5087ba6d33b83                           // .quad -3970758169284363389
	QUAD $0xaab37fd7d8f58178                           // .quad -6146428501395930760
	QUAD $0xfb1e4a9a90880a64                           // .quad -351761693178066332
	QUAD $0xd5605fcdcf32e1d6                           // .quad -3071349608317525546
	QUAD $0x5cf2eea09a55067f                           // .quad 6697677969404790399
	QUAD $0x855c3be0a17fcd26                           // .quad -8837122532839535322
	QUAD $0xf42faa48c0ea481e                           // .quad -851274575098787810
	QUAD $0xa6b34ad8c9dfc06f                           // .quad -6434717147622031249
	QUAD $0xf13b94daf124da26                           // .quad -1064093218873484762
	QUAD $0xd0601d8efc57b08b                           // .quad -3431710416100151157
	QUAD $0x76c53d08d6b70858                           // .quad 8558313775058847832
	QUAD $0x823c12795db6ce57                           // .quad -9062348037703676329
	QUAD $0x54768c4b0c64ca6e                           // .quad 6086206200396171886
	QUAD $0xa2cb1717b52481ed                           // .quad -6716249028702207507
	QUAD $0xa9942f5dcf7dfd09                           // .quad -6227300304786948855
	QUAD $0xcb7ddcdda26da268                           // .quad -3783625267450371480
	QUAD $0xd3f93b35435d7c4c                           // .quad -3172439362556298164
	QUAD $0xfe5d54150b090b02                           // .quad -117845565885576446
	QUAD $0xc47bc5014a1a6daf                           // .quad -4288617610811380305
	QUAD $0x9efa548d26e5a6e1                           // .quad -6991182506319567135
	QUAD $0x359ab6419ca1091b                           // .quad 3862600023340550427
	QUAD $0xc6b8e9b0709f109a                           // .quad -4127292114472071014
	QUAD $0xc30163d203c94b62                           // .quad -4395122007679087774
	QUAD $0xf867241c8cc6d4c0                           // .quad -547429124662700864
	QUAD $0x79e0de63425dcf1d                           // .quad 8782263791269039901
	QUAD $0x9b407691d7fc44f8                           // .quad -7259672230555269896
	QUAD $0x985915fc12f542e4                           // .quad -7468914334623251740
	QUAD $0xc21094364dfb5636                           // .quad -4462904269766699466
	QUAD $0x3e6f5b7b17b2939d                           // .quad 4498915137003099037
	QUAD $0xf294b943e17a2bc4                           // .quad -966944318780986428
	QUAD $0xa705992ceecf9c42                           // .quad -6411550076227838910
	QUAD $0x979cf3ca6cec5b5a                           // .quad -7521869226879198374
	QUAD $0x50c6ff782a838353                           // .quad 5820620459997365075
	QUAD $0xbd8430bd08277231                           // .quad -4790650515171610063
	QUAD $0xa4f8bf5635246428                           // .quad -6559282480285457368
	QUAD $0xece53cec4a314ebd                           // .quad -1376627125537124675
	QUAD $0x871b7795e136be99                           // .quad -8711237568605798759
	QUAD $0x940f4613ae5ed136                           // .quad -7777920981101784778
	QUAD $0x28e2557b59846e3f                           // .quad 2946011094524915263
	QUAD $0xb913179899f68584                           // .quad -5110715207949843068
	QUAD $0x331aeada2fe589cf                           // .quad 3682513868156144079
	QUAD $0xe757dd7ec07426e5                           // .quad -1776707991509915931
	QUAD $0x3ff0d2c85def7621                           // .quad 4607414176811284001
	QUAD $0x9096ea6f3848984f                           // .quad -8027971522334779313
	QUAD $0x0fed077a756b53a9                           // .quad 1147581702586717097
	QUAD $0xb4bca50b065abe63                           // .quad -5423278384491086237
	QUAD $0xd3e8495912c62894                           // .quad -3177208890193991532
	QUAD $0xe1ebce4dc7f16dfb                           // .quad -2167411962186469893
	QUAD $0x64712dd7abbbd95c                           // .quad 7237616480483531100
	QUAD $0x8d3360f09cf6e4bd                           // .quad -8272161504007625539
	QUAD $0xbd8d794d96aacfb3                           // .quad -4788037454677749837
	QUAD $0xb080392cc4349dec                           // .quad -5728515861582144020
	QUAD $0xecf0d7a0fc5583a0                           // .quad -1373360799919799392
	QUAD $0xdca04777f541c567                           // .quad -2548958808550292121
	QUAD $0xf41686c49db57244                           // .quad -858350499949874620
	QUAD $0x89e42caaf9491b60                           // .quad -8510628282985014432
	QUAD $0x311c2875c522ced5                           // .quad 3538747893490044629
	QUAD $0xac5d37d5b79b6239                           // .quad -6026599335303880135
	QUAD $0x7d633293366b828b                           // .quad 9035120885289943691
	QUAD $0xd77485cb25823ac7                           // .quad -2921563150702462265
	QUAD $0xae5dff9c02033197                           // .quad -5882264492762254953
	QUAD $0x86a8d39ef77164bc                           // .quad -8743505996830120772
	QUAD $0xd9f57f830283fdfc                           // .quad -2741144597525430788
	QUAD $0xa8530886b54dbdeb                           // .quad -6317696477610263061
	QUAD $0xd072df63c324fd7b                           // .quad -3426430746906788485
	QUAD $0xd267caa862a12d66                           // .quad -3285434578585440922
	QUAD $0x4247cb9e59f71e6d                           // .quad 4776009810824339053
	QUAD $0x8380dea93da4bc60                           // .quad -8970925639256982432
	QUAD $0x52d9be85f074e608                           // .quad 5970012263530423816
	QUAD $0xa46116538d0deb78                           // .quad -6601971030643840136
	QUAD $0x67902e276c921f8b                           // .quad 7462515329413029771
	QUAD $0xcd795be870516656                           // .quad -3640777769877412266
	QUAD $0x00ba1cd8a3db53b6                           // .quad 52386062455755702
	QUAD $0x806bd9714632dff6                           // .quad -9193015133814464522
	QUAD $0x80e8a40eccd228a4                           // .quad -9157889458785081180
	QUAD $0xa086cfcd97bf97f3                           // .quad -6879582898840692749
	QUAD $0x6122cd128006b2cd                           // .quad 6999382250228200141
	QUAD $0xc8a883c0fdaf7df0                           // .quad -3987792605123478032
	QUAD $0x796b805720085f81                           // .quad 8749227812785250177
	QUAD $0xfad2a4b13d1b5d6c                           // .quad -373054737976959636
	QUAD $0xcbe3303674053bb0                           // .quad -3755104653863994448
	QUAD $0x9cc3a6eec6311a63                           // .quad -7150688238876681629
	QUAD $0xbedbfc4411068a9c                           // .quad -4693880817329993060
	QUAD $0xc3f490aa77bd60fc                           // .quad -4326674280168464132
	QUAD $0xee92fb5515482d44                           // .quad -1255665003235103420
	QUAD $0xf4f1b4d515acb93b                           // .quad -796656831783192261
	QUAD $0x751bdd152d4d1c4a                           // .quad 8438581409832836170
	QUAD $0x991711052d8bf3c5                           // .quad -7415439547505577019
	QUAD $0xd262d45a78a0635d                           // .quad -3286831292991118499
	QUAD $0xbf5cd54678eef0b6                           // .quad -4657613415954583370
	QUAD $0x86fb897116c87c34                           // .quad -8720225134666286028
	QUAD $0xef340a98172aace4                           // .quad -1210330751515841308
	QUAD $0xd45d35e6ae3d4da0                           // .quad -3144297699952734816
	QUAD $0x9580869f0e7aac0e                           // .quad -7673985747338482674
	QUAD $0x8974836059cca109                           // .quad -8542058143368306423
	QUAD $0xbae0a846d2195712                           // .quad -4980796165745715438
	QUAD $0x2bd1a438703fc94b                           // .quad 3157485376071780683
	QUAD $0xe998d258869facd7                           // .quad -1614309188754756393
	QUAD $0x7b6306a34627ddcf                           // .quad 8890957387685944783
	QUAD $0x91ff83775423cc06                           // .quad -7926472270612804602
	QUAD $0x1a3bc84c17b1d542                           // .quad 1890324697752655170
	QUAD $0xb67f6455292cbf08                           // .quad -5296404319838617848
	QUAD $0x20caba5f1d9e4a93                           // .quad 2362905872190818963
	QUAD $0xe41f3d6a7377eeca                           // .quad -2008819381370884406
	QUAD $0x547eb47b7282ee9c                           // .quad 6088502188546649756
	QUAD $0x8e938662882af53e                           // .quad -8173041140997884610
	QUAD $0xe99e619a4f23aa43                           // .quad -1612744301171463613
	QUAD $0xb23867fb2a35b28d                           // .quad -5604615407819967859
	QUAD $0x6405fa00e2ec94d4                           // .quad 7207441660390446292
	QUAD $0xdec681f9f4c31f31                           // .quad -2394083241347571919
	QUAD $0xde83bc408dd3dd04                           // .quad -2412877989897052924
	QUAD $0x8b3c113c38f9f37e                           // .quad -8413831053483314306
	QUAD $0x9624ab50b148d445                           // .quad -7627783505798704059
	QUAD $0xae0b158b4738705e                           // .quad -5905602798426754978
	QUAD $0x3badd624dd9b0957                           // .quad 4300328673033783639
	QUAD $0xd98ddaee19068c76                           // .quad -2770317479606055818
	QUAD $0xe54ca5d70a80e5d6                           // .quad -1923980597781273130
	QUAD $0x87f8a8d4cfa417c9                           // .quad -8648977452394866743
	QUAD $0x5e9fcf4ccd211f4c                           // .quad 6818396289628184396
	QUAD $0xa9f6d30a038d1dbc                           // .quad -6199535797066195524
	QUAD $0x7647c3200069671f                           // .quad 8522995362035230495
	QUAD $0xd47487cc8470652b                           // .quad -3137733727905356501
	QUAD $0x29ecd9f40041e073                           // .quad 3021029092058325107
	QUAD $0x84c8d4dfd2c63f3b                           // .quad -8878612607581929669
	QUAD $0xf468107100525890                           // .quad -835399653354481520
	QUAD $0xa5fb0a17c777cf09                           // .quad -6486579741050024183
	QUAD $0x7182148d4066eeb4                           // .quad 8179122470161673908
	QUAD $0xcf79cc9db955c2cc                           // .quad -3496538657885142324
	QUAD $0xc6f14cd848405530                           // .quad -4111420493003729616
	QUAD $0x81ac1fe293d599bf                           // .quad -9102865688819295809
	QUAD $0xb8ada00e5a506a7c                           // .quad -5139275616254662020
	QUAD $0xa21727db38cb002f                           // .quad -6766896092596731857
	QUAD $0xa6d90811f0e4851c                           // .quad -6424094520318327524
	QUAD $0xca9cf1d206fdc03b                           // .quad -3846934097318526917
	QUAD $0x908f4a166d1da663                           // .quad -8030118150397909405
	QUAD $0xfd442e4688bd304a                           // .quad -196981603220770742
	QUAD $0x9a598e4e043287fe                           // .quad -7324666853212387330
	QUAD $0x9e4a9cec15763e2e                           // .quad -7040642529654063570
	QUAD $0x40eff1e1853f29fd                           // .quad 4679224488766679549
	QUAD $0xc5dd44271ad3cdba                           // .quad -4189117143640191558
	QUAD $0xd12bee59e68ef47c                           // .quad -3374341425896426372
	QUAD $0xf7549530e188c128                           // .quad -624710411122851544
	QUAD $0x82bb74f8301958ce                           // .quad -9026492418826348338
	QUAD $0x9a94dd3e8cf578b9                           // .quad -7307973034592864071
	QUAD $0xe36a52363c1faf01                           // .quad -2059743486678159615
	QUAD $0xc13a148e3032d6e7                           // .quad -4523280274813692185
	QUAD $0xdc44e6c3cb279ac1                           // .quad -2574679358347699519
	QUAD $0xf18899b1bc3f8ca1                           // .quad -1042414325089727327
	QUAD $0x29ab103a5ef8c0b9                           // .quad 3002511419460075705
	QUAD $0x96f5600f15a7b7e5                           // .quad -7569037980822161435
	QUAD $0x7415d448f6b6f0e7                           // .quad 8364825292752482535
	QUAD $0xbcb2b812db11a5de                           // .quad -4849611457600313890
	QUAD $0x111b495b3464ad21                           // .quad 1232659579085827361
	QUAD $0xebdf661791d60f56                           // .quad -1450328303573004458
	QUAD $0xcab10dd900beec34                           // .quad -3841273781498745804
	QUAD $0x936b9fcebb25c995                           // .quad -7823984217374209643
	QUAD $0x3d5d514f40eea742                           // .quad 4421779809981343554
	QUAD $0xb84687c269ef3bfb                           // .quad -5168294253290374149
	QUAD $0x0cb4a5a3112a5112                           // .quad 915538744049291538
	QUAD $0xe65829b3046b0afa                           // .quad -1848681798185579782
	QUAD $0x47f0e785eaba72ab                           // .quad 5183897733458195115
	QUAD $0x8ff71a0fe2c2e6dc                           // .quad -8072955151507069220
	QUAD $0x59ed216765690f56                           // .quad 6479872166822743894
	QUAD $0xb3f4e093db73a093                           // .quad -5479507920956448621
	QUAD $0x306869c13ec3532c                           // .quad 3488154190101041964
	QUAD $0xe0f218b8d25088b8                           // .quad -2237698882768172872
	QUAD $0x1e414218c73a13fb                           // .quad 2180096368813151227
	QUAD $0x8c974f7383725573                           // .quad -8316090829371189901
	QUAD $0xe5d1929ef90898fa                           // .quad -1886565557410948870
	QUAD $0xafbd2350644eeacf                           // .quad -5783427518286599473
	QUAD $0xdf45f746b74abf39                           // .quad -2358206946763686087
	QUAD $0xdbac6c247d62a583                           // .quad -2617598379430861437
	QUAD $0x6b8bba8c328eb783                           // .quad 7749492695127472003
	QUAD $0x894bc396ce5da772                           // .quad -8553528014785370254
	QUAD $0x066ea92f3f326564                           // .quad 463493832054564196
	QUAD $0xab9eb47c81f5114f                           // .quad -6080224000054324913
	QUAD $0xc80a537b0efefebd                           // .quad -4032318728359182659
	QUAD $0xd686619ba27255a2                           // .quad -2988593981640518238
	QUAD $0xbd06742ce95f5f36                           // .quad -4826042214438183114
	QUAD $0x8613fd0145877585                           // .quad -8785400266166405755
	QUAD $0x2c48113823b73704                           // .quad 3190819268807046916
	QUAD $0xa798fc4196e952e7                           // .quad -6370064314280619289
	QUAD $0xf75a15862ca504c5                           // .quad -623161932418579259
	QUAD $0xd17f3b51fca3a7a0                           // .quad -3350894374423386208
	QUAD $0x9a984d73dbe722fb                           // .quad -7307005235402693893
	QUAD $0x82ef85133de648c4                           // .quad -9011838011655698236
	QUAD $0xc13e60d0d2e0ebba                           // .quad -4522070525825979462
	QUAD $0xa3ab66580d5fdaf5                           // .quad -6653111496142234891
	QUAD $0x318df905079926a8                           // .quad 3570783879572301480
	QUAD $0xcc963fee10b7d1b3                           // .quad -3704703351750405709
	QUAD $0xfdf17746497f7052                           // .quad -148206168962011054
	QUAD $0xffbbcfe994e5c61f                           // .quad -19193171260619233
	QUAD $0xfeb6ea8bedefa633                           // .quad -92628855601256909
	QUAD $0x9fd561f1fd0f9bd3                           // .quad -6929524759678968877
	QUAD $0xfe64a52ee96b8fc0                           // .quad -115786069501571136
	QUAD $0xc7caba6e7c5382c8                           // .quad -4050219931171323192
	QUAD $0x3dfdce7aa3c673b0                           // .quad 4466953431550423984
	QUAD $0xf9bd690a1b68637b                           // .quad -451088895536766085
	QUAD $0x06bea10ca65c084e                           // .quad 486002885505321038
	QUAD $0x9c1661a651213e2d                           // .quad -7199459587351560659
	QUAD $0x486e494fcff30a62                           // .quad 5219189625309039202
	QUAD $0xc31bfa0fe5698db8                           // .quad -4387638465762062920
	QUAD $0x5a89dba3c3efccfa                           // .quad 6523987031636299002
	QUAD $0xf3e2f893dec3f126                           // .quad -872862063775190746
	QUAD $0xf89629465a75e01c                           // .quad -534194123654701028
	QUAD $0x986ddb5c6b3a76b7                           // .quad -7463067817500576073
	QUAD $0xf6bbb397f1135823                           // .quad -667742654568376285
	QUAD $0xbe89523386091465                           // .quad -4717148753448332187
	QUAD $0x746aa07ded582e2c                           // .quad 8388693718644305452
	QUAD $0xee2ba6c0678b597f                           // .quad -1284749923383027329
	QUAD $0xa8c2a44eb4571cdc                           // .quad -6286281471915778852
	QUAD $0x94db483840b717ef                           // .quad -7720497729755473937
	QUAD $0x92f34d62616ce413                           // .quad -7857851839894723565
	QUAD $0xba121a4650e4ddeb                           // .quad -5038936143766954517
	QUAD $0x77b020baf9c81d17                           // .quad 8624429273841147159
	QUAD $0xe896a0d7e51e1566                           // .quad -1686984161281305242
	QUAD $0x0ace1474dc1d122e                           // .quad 778582277723329070
	QUAD $0x915e2486ef32cd60                           // .quad -7971894128441897632
	QUAD $0x0d819992132456ba                           // .quad 973227847154161338
	QUAD $0xb5b5ada8aaff80b8                           // .quad -5353181642124984136
	QUAD $0x10e1fff697ed6c69                           // .quad 1216534808942701673
	QUAD $0xe3231912d5bf60e6                           // .quad -2079791034228842266
	QUAD $0xca8d3ffa1ef463c1                           // .quad -3851351762838199359
	QUAD $0x8df5efabc5979c8f                           // .quad -8217398424034108273
	QUAD $0xbd308ff8a6b17cb2                           // .quad -4814189703547749198
	QUAD $0xb1736b96b6fd83b3                           // .quad -5660062011615247437
	QUAD $0xac7cb3f6d05ddbde                           // .quad -6017737129434686498
	QUAD $0xddd0467c64bce4a0                           // .quad -2463391496091671392
	QUAD $0x6bcdf07a423aa96b                           // .quad 7768129340171790699
	QUAD $0x8aa22c0dbef60ee4                           // .quad -8457148712698376476
	QUAD $0x86c16c98d2c953c6                           // .quad -8736582398494813242
	QUAD $0xad4ab7112eb3929d                           // .quad -5959749872445582691
	QUAD $0xe871c7bf077ba8b7                           // .quad -1697355961263740745
	QUAD $0xd89d64d57a607744                           // .quad -2838001322129590460
	QUAD $0x11471cd764ad4972                           // .quad 1244995533423855986
	QUAD $0x87625f056c7c4a8b                           // .quad -8691279853972075893
	QUAD $0xd598e40d3dd89bcf                           // .quad -3055441601647567921
	QUAD $0xa93af6c6c79b5d2d                           // .quad -6252413799037706963
	QUAD $0x4aff1d108d4ec2c3                           // .quad 5404070034795315907
	QUAD $0xd389b47879823479                           // .quad -3203831230369745799
	QUAD $0xcedf722a585139ba                           // .quad -3539985255894009414
	QUAD $0x843610cb4bf160cb                           // .quad -8919923546622172981
	QUAD $0xc2974eb4ee658828                           // .quad -4424981569867511768
	QUAD $0xa54394fe1eedb8fe                           // .quad -6538218414850328322
	QUAD $0x733d226229feea32                           // .quad 8303831092947774002
	QUAD $0xce947a3da6a9273e                           // .quad -3561087000135522498
	QUAD $0x0806357d5a3f525f                           // .quad 578208414664970847
	QUAD $0x811ccc668829b887                           // .quad -9143208402725783417
	QUAD $0xca07c2dcb0cf26f7                           // .quad -3888925500096174345
	QUAD $0xa163ff802a3426a8                           // .quad -6817324484979841368
	QUAD $0xfc89b393dd02f0b5                           // .quad -249470856692830027
	QUAD $0xc9bcff6034c13052                           // .quad -3909969587797413806
	QUAD $0xbbac2078d443ace2                           // .quad -4923524589293425438
	QUAD $0xfc2c3f3841f17c67                           // .quad -275775966319379353
	QUAD $0xd54b944b84aa4c0d                           // .quad -3077202868308390899
	QUAD $0x9d9ba7832936edc0                           // .quad -7089889006590693952
	QUAD $0x0a9e795e65d4df11                           // .quad 765182433041899281
	QUAD $0xc5029163f384a931                           // .quad -4250675239810979535
	QUAD $0x4d4617b5ff4a16d5                           // .quad 5568164059729762005
	QUAD $0xf64335bcf065d37d                           // .quad -701658031336336515
	QUAD $0x504bced1bf8e4e45                           // .quad 5785945546544795205
	QUAD $0x99ea0196163fa42e                           // .quad -7356065297226292178
	QUAD $0xe45ec2862f71e1d6                           // .quad -1990940103673781802
	QUAD $0xc06481fb9bcf8d39                           // .quad -4583395603105477319
	QUAD $0x5d767327bb4e5a4c                           // .quad 6734696907262548556
	QUAD $0xf07da27a82c37088                           // .quad -1117558485454458744
	QUAD $0x3a6a07f8d510f86f                           // .quad 4209185567039092847
	QUAD $0x964e858c91ba2655                           // .quad -7616003081050118571
	QUAD $0x890489f70a55368b                           // .quad -8573576096483297653
	QUAD $0xbbe226efb628afea                           // .quad -4908317832885260310
	QUAD $0x2b45ac74ccea842e                           // .quad 3118087934678041646
	QUAD $0xeadab0aba3b2dbe5                           // .quad -1523711272679187483
	QUAD $0x3b0b8bc90012929d                           // .quad 4254647968387469981
	QUAD $0x92c8ae6b464fc96f                           // .quad -7869848573065574033
	QUAD $0x09ce6ebb40173744                           // .quad 706623942056949572
	QUAD $0xb77ada0617e3bbcb                           // .quad -5225624697904579637
	QUAD $0xcc420a6a101d0515                           // .quad -3728406090856200939
	QUAD $0xe55990879ddcaabd                           // .quad -1920344853953336643
	QUAD $0x9fa946824a12232d                           // .quad -6941939825212513491
	QUAD $0x8f57fa54c2a9eab6                           // .quad -8117744561361917258
	QUAD $0x47939822dc96abf9                           // .quad 5157633273766521849
	QUAD $0xb32df8e9f3546564                           // .quad -5535494683275008668
	QUAD $0x59787e2b93bc56f7                           // .quad 6447041592208152311
	QUAD $0xdff9772470297ebd                           // .quad -2307682335666372931
	QUAD $0x57eb4edb3c55b65a                           // .quad 6335244004343789146
	QUAD $0x8bfbea76c619ef36                           // .quad -8359830487432564938
	QUAD $0xede622920b6b23f1                           // .quad -1304317031425039375
	QUAD $0xaefae51477a06b03                           // .quad -5838102090863318269
	QUAD $0xe95fab368e45eced                           // .quad -1630396289281299219
	QUAD $0xdab99e59958885c4                           // .quad -2685941595151759932
	QUAD $0x11dbcb0218ebb414                           // .quad 1286845328412881940
	QUAD $0x88b402f7fd75539b                           // .quad -8596242524610931813
	QUAD $0xd652bdc29f26a119                           // .quad -3003129357911285479
	QUAD $0xaae103b5fcd2a881                           // .quad -6133617137336276863
	QUAD $0x4be76d3346f0495f                           // .quad 5469460339465668959
	QUAD $0xd59944a37c0752a2                           // .quad -3055335403242958174
	QUAD $0x6f70a4400c562ddb                           // .quad 8030098730593431003
	QUAD $0x857fcae62d8493a5                           // .quad -8827113654667930715
	QUAD $0xcb4ccd500f6bb952                           // .quad -3797434642040374958
	QUAD $0xa6dfbd9fb8e5b88e                           // .quad -6422206049907525490
	QUAD $0x7e2000a41346a7a7                           // .quad 9088264752731695015
	QUAD $0xd097ad07a71f26b2                           // .quad -3416071543957018958
	QUAD $0x8ed400668c0c28c8                           // .quad -8154892584824854328
	QUAD $0x825ecc24c873782f                           // .quad -9052573742614218705
	QUAD $0x728900802f0f32fa                           // .quad 8253128342678483706
	QUAD $0xa2f67f2dfa90563b                           // .quad -6704031159840385477
	QUAD $0x4f2b40a03ad2ffb9                           // .quad 5704724409920716729
	QUAD $0xcbb41ef979346bca                           // .quad -3768352931373093942
	QUAD $0xe2f610c84987bfa8                           // .quad -2092466524453879896
	QUAD $0xfea126b7d78186bc                           // .quad -98755145788979524
	QUAD $0x0dd9ca7d2df4d7c9                           // .quad 998051431430019017
	QUAD $0x9f24b832e6b0f436                           // .quad -6979250993759194058
	QUAD $0x91503d1c79720dbb                           // .quad -7975807747567252037
	QUAD $0xc6ede63fa05d3143                           // .quad -4112377723771604669
	QUAD $0x75a44c6397ce912a                           // .quad 8476984389250486570
	QUAD $0xf8a95fcf88747d94                           // .quad -528786136287117932
	QUAD $0xc986afbe3ee11aba                           // .quad -3925256793573221702
	QUAD $0x9b69dbe1b548ce7c                           // .quad -7248020362820530564
	QUAD $0xfbe85badce996168                           // .quad -294884973539139224
	QUAD $0xc24452da229b021b                           // .quad -4448339435098275301
	QUAD $0xfae27299423fb9c3                           // .quad -368606216923924029
	QUAD $0xf2d56790ab41c2a2                           // .quad -948738275445456222
	QUAD $0xdccd879fc967d41a                           // .quad -2536221894791146470
	QUAD $0x97c560ba6b0919a5                           // .quad -7510490449794491995
	QUAD $0x5400e987bbc1c920                           // .quad 6053094668365842720
	QUAD $0xbdb6b8e905cb600f                           // .quad -4776427043815727089
	QUAD $0x290123e9aab23b68                           // .quad 2954682317029915496
	QUAD $0xed246723473e3813                           // .quad -1358847786342270957
	QUAD $0xf9a0b6720aaf6521                           // .quad -459166561069996767
	QUAD $0x9436c0760c86e30b                           // .quad -7766808894105001205
	QUAD $0xf808e40e8d5b3e69                           // .quad -573958201337495959
	QUAD $0xb94470938fa89bce                           // .quad -5096825099203863602
	QUAD $0xb60b1d1230b20e04                           // .quad -5329133770099257852
	QUAD $0xe7958cb87392c2c2                           // .quad -1759345355577441598
	QUAD $0xb1c6f22b5e6f48c2                           // .quad -5636551615525730110
	QUAD $0x90bd77f3483bb9b9                           // .quad -8017119874876982855
	QUAD $0x1e38aeb6360b1af3                           // .quad 2177682517447613171
	QUAD $0xb4ecd5f01a4aa828                           // .quad -5409713825168840664
	QUAD $0x25c6da63c38de1b0                           // .quad 2722103146809516464
	QUAD $0xe2280b6c20dd5232                           // .quad -2150456263033662926
	QUAD $0x579c487e5a38ad0e                           // .quad 6313000485183335694
	QUAD $0x8d590723948a535f                           // .quad -8261564192037121185
	QUAD $0x2d835a9df0c6d851                           // .quad 3279564588051781713
	QUAD $0xb0af48ec79ace837                           // .quad -5715269221619013577
	QUAD $0xf8e431456cf88e65                           // .quad -512230283362660763
	QUAD $0xdcdb1b2798182244                           // .quad -2532400508596379068
	QUAD $0x1b8e9ecb641b58ff                           // .quad 1985699082112030975
	QUAD $0x8a08f0f8bf0f156b                           // .quad -8500279345513818773
	QUAD $0xe272467e3d222f3f                           // .quad -2129562165787349185
	QUAD $0xac8b2d36eed2dac5                           // .quad -6013663163464885563
	QUAD $0x5b0ed81dcc6abb0f                           // .quad 6561419329620589327
	QUAD $0xd7adf884aa879177                           // .quad -2905392935903719049
	QUAD $0x98e947129fc2b4e9                           // .quad -7428327965055601431
	QUAD $0x86ccbb52ea94baea                           // .quad -8733399612580906262
	QUAD $0x3f2398d747b36224                           // .quad 4549648098962661924
	QUAD $0xa87fea27a539e9a5                           // .quad -6305063497298744923
	QUAD $0x8eec7f0d19a03aad                           // .quad -8147997931578836307
	QUAD $0xd29fe4b18e88640e                           // .quad -3269643353196043250
	QUAD $0x1953cf68300424ac                           // .quad 1825030320404309164
	QUAD $0x83a3eeeef9153e89                           // .quad -8961056123388608887
	QUAD $0x5fa8c3423c052dd7                           // .quad 6892973918932774359
	QUAD $0xa48ceaaab75a8e2b                           // .quad -6589634135808373205
	QUAD $0x3792f412cb06794d                           // .quad 4004531380238580045
	QUAD $0xcdb02555653131b6                           // .quad -3625356651333078602
	QUAD $0xe2bbd88bbee40bd0                           // .quad -2108853905778275376
	QUAD $0x808e17555f3ebf11                           // .quad -9183376934724255983
	QUAD $0x5b6aceaeae9d0ec4                           // .quad 6587304654631931588
	QUAD $0xa0b19d2ab70e6ed6                           // .quad -6867535149977932074
	QUAD $0xf245825a5a445275                           // .quad -989241218564861323
	QUAD $0xc8de047564d20a8b                           // .quad -3972732919045027189
	QUAD $0xeed6e2f0f0d56712                           // .quad -1236551523206076654
	QUAD $0xfb158592be068d2e                           // .quad -354230130378896082
	QUAD $0x55464dd69685606b                           // .quad 6144684325637283947
	QUAD $0x9ced737bb6c4183d                           // .quad -7138922859127891907
	QUAD $0xaa97e14c3c26b886                           // .quad -6154202648235558778
	QUAD $0xc428d05aa4751e4c                           // .quad -4311967555482476980
	QUAD $0xd53dd99f4b3066a8                           // .quad -3081067291867060568
	QUAD $0xf53304714d9265df                           // .quad -778273425925708321
	QUAD $0xe546a8038efe4029                           // .quad -1925667057416912855
	QUAD $0x993fe2c6d07b7fab                           // .quad -7403949918844649557
	QUAD $0xde98520472bdd033                           // .quad -2407083821771141069
	QUAD $0xbf8fdb78849a5f96                           // .quad -4643251380128424042
	QUAD $0x963e66858f6d4440                           // .quad -7620540795641314240
	QUAD $0xef73d256a5c0f77c                           // .quad -1192378206733142148
	QUAD $0xdde7001379a44aa8                           // .quad -2456994988062127448
	QUAD $0x95a8637627989aad                           // .quad -7662765406849295699
	QUAD $0x5560c018580d5d52                           // .quad 6152128301777116498
	QUAD $0xbb127c53b17ec159                           // .quad -4966770740134231719
	QUAD $0xaab8f01e6e10b4a6                           // .quad -6144897678060768090
	QUAD $0xe9d71b689dde71af                           // .quad -1596777406740401745
	QUAD $0xcab3961304ca70e8                           // .quad -3840561048787980056
	QUAD $0x9226712162ab070d                           // .quad -7915514906853832947
	QUAD $0x3d607b97c5fd0d22                           // .quad 4422670725869800738
	QUAD $0xb6b00d69bb55c8d1                           // .quad -5282707615139903279
	QUAD $0x8cb89a7db77c506a                           // .quad -8306719647944912790
	QUAD $0xe45c10c42a2b3b05                           // .quad -1991698500497491195
	QUAD $0x77f3608e92adb242                           // .quad 8643358275316593218
	QUAD $0x8eb98a7a9a5b04e3                           // .quad -8162340590452013853
	QUAD $0x55f038b237591ed3                           // .quad 6192511825718353619
	QUAD $0xb267ed1940f1c61c                           // .quad -5591239719637629412
	QUAD $0x6b6c46dec52f6688                           // .quad 7740639782147942024
	QUAD $0xdf01e85f912e37a3                           // .quad -2377363631119648861
	QUAD $0x2323ac4b3b3da015                           // .quad 2532056854628769813
	QUAD $0x8b61313bbabce2c6                           // .quad -8403381297090862394
	QUAD $0xabec975e0a0d081a                           // .quad -6058300968568813542
	QUAD $0xae397d8aa96c1b77                           // .quad -5892540602936190089
	QUAD $0x96e7bd358c904a21                           // .quad -7572876210711016927
	QUAD $0xd9c7dced53c72255                           // .quad -2753989735242849707
	QUAD $0x7e50d64177da2e54                           // .quad 9102010423587778132
	QUAD $0x881cea14545c7575                           // .quad -8638772612167862923
	QUAD $0xdde50bd1d5d0b9e9                           // .quad -2457545025797441047
	QUAD $0xaa242499697392d2                           // .quad -6186779746782440750
	QUAD $0x955e4ec64b44e864                           // .quad -7683617300674189212
	QUAD $0xd4ad2dbfc3d07787                           // .quad -3121788665050663033
	QUAD $0xbd5af13bef0b113e                           // .quad -4802260812921368258
	QUAD $0x84ec3c97da624ab4                           // .quad -8868646943297746252
	QUAD $0xecb1ad8aeacdd58e                           // .quad -1391139997724322418
	QUAD $0xa6274bbdd0fadd61                           // .quad -6474122660694794911
	QUAD $0x67de18eda5814af2                           // .quad 7484447039699372786
	QUAD $0xcfb11ead453994ba                           // .quad -3480967307441105734
	QUAD $0x80eacf948770ced7                           // .quad -9157278655470055721
	QUAD $0x81ceb32c4b43fcf4                           // .quad -9093133594791772940
	QUAD $0xa1258379a94d028d                           // .quad -6834912300910181747
	QUAD $0xa2425ff75e14fc31                           // .quad -6754730975062328271
	QUAD $0x096ee45813a04330                           // .quad 679731660717048624
	QUAD $0xcad2f7f5359a3b3e                           // .quad -3831727700400522434
	QUAD $0x8bca9d6e188853fc                           // .quad -8373707460958465028
	QUAD $0xfd87b5f28300ca0d                           // .quad -177973607073265139
	QUAD $0x775ea264cf55347d                           // .quad 8601490892183123069
	QUAD $0x9e74d1b791e07e48                           // .quad -7028762532061872568
	QUAD $0x95364afe032a819d                           // .quad -7694880458480647779
	QUAD $0xc612062576589dda                           // .quad -4174267146649952806
	QUAD $0x3a83ddbd83f52204                           // .quad 4216457482181353988
	QUAD $0xf79687aed3eec551                           // .quad -606147914885053103
	QUAD $0xc4926a9672793542                           // .quad -4282243101277735614
	QUAD $0x9abe14cd44753b52                           // .quad -7296371474444240046
	QUAD $0x75b7053c0f178293                           // .quad 8482254178684994195
	QUAD $0xc16d9a0095928a27                           // .quad -4508778324627912153
	QUAD $0x5324c68b12dd6338                           // .quad 5991131704928854840
	QUAD $0xf1c90080baf72cb1                           // .quad -1024286887357502287
	QUAD $0xd3f6fc16ebca5e03                           // .quad -3173071712060547581
	QUAD $0x971da05074da7bee                           // .quad -7557708332239520786
	QUAD $0x88f4bb1ca6bcf584                           // .quad -8578025658503072380
	QUAD $0xbce5086492111aea                           // .quad -4835449396872013078
	QUAD $0x2b31e9e3d06c32e5                           // .quad 3112525982153323237
	QUAD $0xec1e4a7db69561a5                           // .quad -1432625727662628443
	QUAD $0x3aff322e62439fcf                           // .quad 4251171748059520975
	QUAD $0x9392ee8e921d5d07                           // .quad -7812920107430224633
	QUAD $0x09befeb9fad487c2                           // .quad 702278666647013314
	QUAD $0xb877aa3236a4b449                           // .quad -5154464115860392887
	QUAD $0x4c2ebe687989a9b3                           // .quad 5489534351736154547
	QUAD $0xe69594bec44de15b                           // .quad -1831394126398103205
	QUAD $0x0f9d37014bf60a10                           // .quad 1125115960621402640
	QUAD $0x901d7cf73ab0acd9                           // .quad -8062150356639896359
	QUAD $0x538484c19ef38c94                           // .quad 6018080969204141204
	QUAD $0xb424dc35095cd80f                           // .quad -5466001927372482545
	QUAD $0x2865a5f206b06fb9                           // .quad 2910915193077788601
	QUAD $0xe12e13424bb40e13                           // .quad -2220816390788215277
	QUAD $0xf93f87b7442e45d3                           // .quad -486521013540076077
	QUAD $0x8cbccc096f5088cb                           // .quad -8305539271883716405
	QUAD $0xf78f69a51539d748                           // .quad -608151266925095096
	QUAD $0xafebff0bcb24aafe                           // .quad -5770238071427257602
	QUAD $0xb573440e5a884d1b                           // .quad -5371875102083756773
	QUAD $0xdbe6fecebdedd5be                           // .quad -2601111570856684098
	QUAD $0x31680a88f8953030                           // .quad 3560107088838733872
	QUAD $0x89705f4136b4a597                           // .quad -8543223759426509417
	QUAD $0xfdc20d2b36ba7c3d                           // .quad -161552157378970563
	QUAD $0xabcc77118461cefc                           // .quad -6067343680855748868
	QUAD $0x3d32907604691b4c                           // .quad 4409745821703674700
	QUAD $0xd6bf94d5e57a42bc                           // .quad -2972493582642298180
	QUAD $0xa63f9a49c2c1b10f                           // .quad -6467280898289979121
	QUAD $0x8637bd05af6c69b5                           // .quad -8775337516792518219
	QUAD $0x0fcf80dc33721d53                           // .quad 1139270913992301907
	QUAD $0xa7c5ac471b478423                           // .quad -6357485877563259869
	QUAD $0xd3c36113404ea4a8                           // .quad -3187597375937010520
	QUAD $0xd1b71758e219652b                           // .quad -3335171328526686933
	QUAD $0x645a1cac083126e9                           // .quad 7231123676894144233
	QUAD $0x83126e978d4fdf3b                           // .quad -9002011107970261189
	QUAD $0x3d70a3d70a3d70a3                           // .quad 4427218577690292387
	QUAD $0xa3d70a3d70a3d70a                           // .quad -6640827866535438582
	QUAD $0xcccccccccccccccc; QUAD $0xcccccccccccccccc // .space 16, '\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc'
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x8000000000000000                           // .quad -9223372036854775808
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xa000000000000000                           // .quad -6917529027641081856
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xc800000000000000                           // .quad -4035225266123964416
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xfa00000000000000                           // .quad -432345564227567616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x9c40000000000000                           // .quad -7187745005283311616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xc350000000000000                           // .quad -4372995238176751616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xf424000000000000                           // .quad -854558029293551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x9896800000000000                           // .quad -7451627795949551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xbebc200000000000                           // .quad -4702848726509551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xee6b280000000000                           // .quad -1266874889709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x9502f90000000000                           // .quad -7709325833709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xba43b74000000000                           // .quad -5024971273709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xe8d4a51000000000                           // .quad -1669528073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x9184e72a00000000                           // .quad -7960984073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xb5e620f480000000                           // .quad -5339544073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xe35fa931a0000000                           // .quad -2062744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x8e1bc9bf04000000                           // .quad -8206744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xb1a2bc2ec5000000                           // .quad -5646744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xde0b6b3a76400000                           // .quad -2446744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x8ac7230489e80000                           // .quad -8446744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xad78ebc5ac620000                           // .quad -5946744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xd8d726b7177a8000                           // .quad -2821744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x878678326eac9000                           // .quad -8681119073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xa968163f0a57b400                           // .quad -6239712823709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xd3c21bcecceda100                           // .quad -3187955011209551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x84595161401484a0                           // .quad -8910000909647051616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xa56fa5b99019a5c8                           // .quad -6525815118631426616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xcecb8f27f4200f3a                           // .quad -3545582879861895366
	QUAD $0x4000000000000000                           // .quad 4611686018427387904
	QUAD $0x813f3978f8940984                           // .quad -9133518327554766460
	QUAD $0x5000000000000000                           // .quad 5764607523034234880
	QUAD $0xa18f07d736b90be5                           // .quad -6805211891016070171
	QUAD $0xa400000000000000                           // .quad -6629298651489370112
	QUAD $0xc9f2c9cd04674ede                           // .quad -3894828845342699810
	QUAD $0x4d00000000000000                           // .quad 5548434740920451072
	QUAD $0xfc6f7c4045812296                           // .quad -256850038250986858
	QUAD $0xf020000000000000                           // .quad -1143914305352105984
	QUAD $0x9dc5ada82b70b59d                           // .quad -7078060301547948643
	QUAD $0x6c28000000000000                           // .quad 7793479155164643328
	QUAD $0xc5371912364ce305                           // .quad -4235889358507547899
	QUAD $0xc732000000000000                           // .quad -4093209111326359552
	QUAD $0xf684df56c3e01bc6                           // .quad -683175679707046970
	QUAD $0x3c7f400000000000                           // .quad 4359273333062107136
	QUAD $0x9a130b963a6c115c                           // .quad -7344513827457986212
	QUAD $0x4b9f100000000000                           // .quad 5449091666327633920
	QUAD $0xc097ce7bc90715b3                           // .quad -4568956265895094861
	QUAD $0x1e86d40000000000                           // .quad 2199678564482154496
	QUAD $0xf0bdc21abb48db20                           // .quad -1099509313941480672
	QUAD $0x1314448000000000                           // .quad 1374799102801346560
	QUAD $0x96769950b50d88f4                           // .quad -7604722348854507276
	QUAD $0x17d955a000000000                           // .quad 1718498878501683200
	QUAD $0xbc143fa4e250eb31                           // .quad -4894216917640746191
	QUAD $0x5dcfab0800000000                           // .quad 6759809616554491904
	QUAD $0xeb194f8e1ae525fd                           // .quad -1506085128623544835
	QUAD $0x5aa1cae500000000                           // .quad 6530724019560251392
	QUAD $0x92efd1b8d0cf37be                           // .quad -7858832233030797378
	QUAD $0xf14a3d9e40000000                           // .quad -1059967012404461568
	QUAD $0xb7abc627050305ad                           // .quad -5211854272861108819
	QUAD $0x6d9ccd05d0000000                           // .quad 7898413271349198848
	QUAD $0xe596b7b0c643c719                           // .quad -1903131822648998119
	QUAD $0xe4820023a2000000                           // .quad -1981020733047832576
	QUAD $0x8f7e32ce7bea5c6f                           // .quad -8106986416796705681
	QUAD $0xdda2802c8a800000                           // .quad -2476275916309790720
	QUAD $0xb35dbf821ae4f38b                           // .quad -5522047002568494197
	QUAD $0xd50b2037ad200000                           // .quad -3095344895387238400
	QUAD $0xe0352f62a19e306e                           // .quad -2290872734783229842
	QUAD $0x4526f422cc340000                           // .quad 4982938468024057856
	QUAD $0x8c213d9da502de45                           // .quad -8349324486880600507
	QUAD $0x9670b12b7f410000                           // .quad -7606384970252091392
	QUAD $0xaf298d050e4395d6                           // .quad -5824969590173362730
	QUAD $0x3c0cdd765f114000                           // .quad 4327076842467049472
	QUAD $0xdaf3f04651d47b4c                           // .quad -2669525969289315508
	QUAD $0xa5880a69fb6ac800                           // .quad -6518949010312869888
	QUAD $0x88d8762bf324cd0f                           // .quad -8585982758446904049
	QUAD $0x8eea0d047a457a00                           // .quad -8148686262891087360
	QUAD $0xab0e93b6efee0053                           // .quad -6120792429631242157
	QUAD $0x72a4904598d6d880                           // .quad 8260886245095692416
	QUAD $0xd5d238a4abe98068                           // .quad -3039304518611664792
	QUAD $0x47a6da2b7f864750                           // .quad 5163053903184807760
	QUAD $0x85a36366eb71f041                           // .quad -8817094351773372351
	QUAD $0x999090b65f67d924                           // .quad -7381240676301154012
	QUAD $0xa70c3c40a64e6c51                           // .quad -6409681921289327535
	QUAD $0xfff4b4e3f741cf6d                           // .quad -3178808521666707
	QUAD $0xd0cf4b50cfe20765                           // .quad -3400416383184271515
	QUAD $0xbff8f10e7a8921a4                           // .quad -4613672773753429596
	QUAD $0x82818f1281ed449f                           // .quad -9042789267131251553
	QUAD $0xaff72d52192b6a0d                           // .quad -5767090967191786995
	QUAD $0xa321f2d7226895c7                           // .quad -6691800565486676537
	QUAD $0x9bf4f8a69f764490                           // .quad -7208863708989733744
	QUAD $0xcbea6f8ceb02bb39                           // .quad -3753064688430957767
	QUAD $0x02f236d04753d5b4                           // .quad 212292400617608628
	QUAD $0xfee50b7025c36a08                           // .quad -79644842111309304
	QUAD $0x01d762422c946590                           // .quad 132682750386005392
	QUAD $0x9f4f2726179a2245                           // .quad -6967307053960650171
	QUAD $0x424d3ad2b7b97ef5                           // .quad 4777539456409894645
	QUAD $0xc722f0ef9d80aad6                           // .quad -4097447799023424810
	QUAD $0xd2e0898765a7deb2                           // .quad -3251447716342407502
	QUAD $0xf8ebad2b84e0d58b                           // .quad -510123730351893109
	QUAD $0x63cc55f49f88eb2f                           // .quad 7191217214140771119
	QUAD $0x9b934c3b330c8577                           // .quad -7236356359111015049
	QUAD $0x3cbf6b71c76b25fb                           // .quad 4377335499248575995
	QUAD $0xc2781f49ffcfa6d5                           // .quad -4433759430461380907
	QUAD $0x8bef464e3945ef7a                           // .quad -8363388681221443718
	QUAD $0xf316271c7fc3908a                           // .quad -930513269649338230
	QUAD $0x97758bf0e3cbb5ac                           // .quad -7532960934977096276
	QUAD $0x97edd871cfda3a56                           // .quad -7499099821171918250
	QUAD $0x3d52eeed1cbea317                           // .quad 4418856886560793367
	QUAD $0xbde94e8e43d0c8ec                           // .quad -4762188758037509908
	QUAD $0x4ca7aaa863ee4bdd                           // .quad 5523571108200991709
	QUAD $0xed63a231d4c4fb27                           // .quad -1341049929119499481
	QUAD $0x8fe8caa93e74ef6a                           // .quad -8076983103442849942
	QUAD $0x945e455f24fb1cf8                           // .quad -7755685233340769032
	QUAD $0xb3e2fd538e122b44                           // .quad -5484542860876174524
	QUAD $0xb975d6b6ee39e436                           // .quad -5082920523248573386
	QUAD $0x60dbbca87196b616                           // .quad 6979379479186945558
	QUAD $0xe7d34c64a9c85d44                           // .quad -1741964635633328828
	QUAD $0xbc8955e946fe31cd                           // .quad -4861259862362934835
	QUAD $0x90e40fbeea1d3a4a                           // .quad -8006256924911912374
	QUAD $0x6babab6398bdbe41                           // .quad 7758483227328495169
	QUAD $0xb51d13aea4a488dd                           // .quad -5396135137712502563
	QUAD $0xc696963c7eed2dd1                           // .quad -4136954021121544751
	QUAD $0xe264589a4dcdab14                           // .quad -2133482903713240300
	QUAD $0xfc1e1de5cf543ca2                           // .quad -279753253987271518
	QUAD $0x8d7eb76070a08aec                           // .quad -8250955842461857044
	QUAD $0x3b25a55f43294bcb                           // .quad 4261994450943298507
	QUAD $0xb0de65388cc8ada8                           // .quad -5702008784649933400
	QUAD $0x49ef0eb713f39ebe                           // .quad 5327493063679123134
	QUAD $0xdd15fe86affad912                           // .quad -2515824962385028846
	QUAD $0x6e3569326c784337                           // .quad 7941369183226839863
	QUAD $0x8a2dbf142dfcc7ab                           // .quad -8489919629131724885
	QUAD $0x49c2c37f07965404                           // .quad 5315025460606161924
	QUAD $0xacb92ed9397bf996                           // .quad -6000713517987268202
	QUAD $0xdc33745ec97be906                           // .quad -2579590211097073402
	QUAD $0xd7e77a8f87daf7fb                           // .quad -2889205879056697349
	QUAD $0x69a028bb3ded71a3                           // .quad 7611128154919104931
	QUAD $0x86f0ac99b4e8dafd                           // .quad -8723282702051517699
	QUAD $0xc40832ea0d68ce0c                           // .quad -4321147861633282548
	QUAD $0xa8acd7c0222311bc                           // .quad -6292417359137009220
	QUAD $0xf50a3fa490c30190                           // .quad -789748808614215280
	QUAD $0xd2d80db02aabd62b                           // .quad -3253835680493873621
	QUAD $0x792667c6da79e0fa                           // .quad 8729779031470891258
	QUAD $0x83c7088e1aab65db                           // .quad -8951176327949752869
	QUAD $0x577001b891185938                           // .quad 6300537770911226168
	QUAD $0xa4b8cab1a1563f52                           // .quad -6577284391509803182
	QUAD $0xed4c0226b55e6f86                           // .quad -1347699823215743098
	QUAD $0xcde6fd5e09abcf26                           // .quad -3609919470959866074
	QUAD $0x544f8158315b05b4                           // .quad 6075216638131242420
	QUAD $0x80b05e5ac60b6178                           // .quad -9173728696990998152
	QUAD $0x696361ae3db1c721                           // .quad 7594020797664053025
	QUAD $0xa0dc75f1778e39d6                           // .quad -6855474852811359786
	QUAD $0x03bc3a19cd1e38e9                           // .quad 269153960225290473
	QUAD $0xc913936dd571c84c                           // .quad -3957657547586811828
	QUAD $0x04ab48a04065c723                           // .quad 336442450281613091
	QUAD $0xfb5878494ace3a5f                           // .quad -335385916056126881
	QUAD $0x62eb0d64283f9c76                           // .quad 7127805559067090038
	QUAD $0x9d174b2dcec0e47b                           // .quad -7127145225176161157
	QUAD $0x3ba5d0bd324f8394                           // .quad 4298070930406474644
	QUAD $0xc45d1df942711d9a                           // .quad -4297245513042813542
	QUAD $0xca8f44ec7ee36479                           // .quad -3850783373846682503
	QUAD $0xf5746577930d6500                           // .quad -759870872876129024
	QUAD $0x7e998b13cf4e1ecb                           // .quad 9122475437414293195
	QUAD $0x9968bf6abbe85f20                           // .quad -7392448323188662496
	QUAD $0x9e3fedd8c321a67e                           // .quad -7043649776941685122
	QUAD $0xbfc2ef456ae276e8                           // .quad -4628874385558440216
	QUAD $0xc5cfe94ef3ea101e                           // .quad -4192876202749718498
	QUAD $0xefb3ab16c59b14a2                           // .quad -1174406963520662366
	QUAD $0xbba1f1d158724a12                           // .quad -4926390635932268014
	QUAD $0x95d04aee3b80ece5                           // .quad -7651533379841495835
	QUAD $0x2a8a6e45ae8edc97                           // .quad 3065383741939440791
	QUAD $0xbb445da9ca61281f                           // .quad -4952730706374481889
	QUAD $0xf52d09d71a3293bd                           // .quad -779956341003086915
	QUAD $0xea1575143cf97226                           // .quad -1579227364540714458
	QUAD $0x593c2626705f9c56                           // .quad 6430056314514152534
	QUAD $0x924d692ca61be758                           // .quad -7904546130479028392
	QUAD $0x6f8b2fb00c77836c                           // .quad 8037570393142690668
	QUAD $0xb6e0c377cfa2e12e                           // .quad -5268996644671397586
	QUAD $0x0b6dfb9c0f956447                           // .quad 823590954573587527
	QUAD $0xe498f455c38b997a                           // .quad -1974559787411859078
	QUAD $0x4724bd4189bd5eac                           // .quad 5126430365035880108
	QUAD $0x8edf98b59a373fec                           // .quad -8151628894773493780
	QUAD $0x58edec91ec2cb657                           // .quad 6408037956294850135
	QUAD $0xb2977ee300c50fe7                           // .quad -5577850100039479321
	QUAD $0x2f2967b66737e3ed                           // .quad 3398361426941174765
	QUAD $0xdf3d5e9bc0f653e1                           // .quad -2360626606621961247
	QUAD $0xbd79e0d20082ee74                           // .quad -4793553135802847628
	QUAD $0x8b865b215899f46c                           // .quad -8392920656779807636
	QUAD $0xecd8590680a3aa11                           // .quad -1380255401326171631
	QUAD $0xae67f1e9aec07187                           // .quad -5879464802547371641
	QUAD $0xe80e6f4820cc9495                           // .quad -1725319251657714539
	QUAD $0xda01ee641a708de9                           // .quad -2737644984756826647
	QUAD $0x3109058d147fdcdd                           // .quad 3533361486141316317
	QUAD $0x884134fe908658b2                           // .quad -8628557143114098510
	QUAD $0xbd4b46f0599fd415                           // .quad -4806670179178130411
	QUAD $0xaa51823e34a7eede                           // .quad -6174010410465235234
	QUAD $0x6c9e18ac7007c91a                           // .quad 7826720331309500698
	QUAD $0xd4e5e2cdc1d1ea96                           // .quad -3105826994654156138
	QUAD $0x03e2cf6bc604ddb0                           // .quad 280014188641050032
	QUAD $0x850fadc09923329e                           // .quad -8858670899299929442
	QUAD $0x84db8346b786151c                           // .quad -8873354301053463268
	QUAD $0xa6539930bf6bff45                           // .quad -6461652605697523899
	QUAD $0xe612641865679a63                           // .quad -1868320839462053277
	QUAD $0xcfe87f7cef46ff16                           // .quad -3465379738694516970
	QUAD $0x4fcb7e8f3f60c07e                           // .quad 5749828502977298558
	QUAD $0x81f14fae158c5f6e                           // .quad -9083391364325154962
	QUAD $0xe3be5e330f38f09d                           // .quad -2036086408133152611
	QUAD $0xa26da3999aef7749                           // .quad -6742553186979055799
	QUAD $0x5cadf5bfd3072cc5                           // .quad 6678264026688335045
	QUAD $0xcb090c8001ab551c                           // .quad -3816505465296431844
	QUAD $0x73d9732fc7c8f7f6                           // .quad 8347830033360418806
	QUAD $0xfdcb4fa002162a63                           // .quad -158945813193151901
	QUAD $0x2867e7fddcdd9afa                           // .quad 2911550761636567802
	QUAD $0x9e9f11c4014dda7e                           // .quad -7016870160886801794
	QUAD $0xb281e1fd541501b8                           // .quad -5583933584809066056
	QUAD $0xc646d63501a1511d                           // .quad -4159401682681114339
	QUAD $0x1f225a7ca91a4226                           // .quad 2243455055843443238
	QUAD $0xf7d88bc24209a565                           // .quad -587566084924005019
	QUAD $0x3375788de9b06958                           // .quad 3708002419115845976
	QUAD $0x9ae757596946075f                           // .quad -7284757830718584993
	QUAD $0x0052d6b1641c83ae                           // .quad 23317005467419566
	QUAD $0xc1a12d2fc3978937                           // .quad -4494261269970843337
	QUAD $0xc0678c5dbd23a49a                           // .quad -4582539761593113446
	QUAD $0xf209787bb47d6b84                           // .quad -1006140569036166268
	QUAD $0xf840b7ba963646e0                           // .quad -558244341782001952
	QUAD $0x9745eb4d50ce6332                           // .quad -7546366883288685774
	QUAD $0xb650e5a93bc3d898                           // .quad -5309491445654890344
	QUAD $0xbd176620a501fbff                           // .quad -4821272585683469313
	QUAD $0xa3e51f138ab4cebe                           // .quad -6636864307068612930
	QUAD $0xec5d3fa8ce427aff                           // .quad -1414904713676948737
	QUAD $0xc66f336c36b10137                           // .quad -4148040191917883081
	QUAD $0x93ba47c980e98cdf                           // .quad -7801844473689174817
	QUAD $0xb80b0047445d4184                           // .quad -5185050239897353852
	QUAD $0xb8a8d9bbe123f017                           // .quad -5140619573684080617
	QUAD $0xa60dc059157491e5                           // .quad -6481312799871692315
	QUAD $0xe6d3102ad96cec1d                           // .quad -1814088448677712867
	QUAD $0x87c89837ad68db2f                           // .quad -8662506518347195601
	QUAD $0x9043ea1ac7e41392                           // .quad -8051334308064652398
	QUAD $0x29babe4598c311fb                           // .quad 3006924907348169211
	QUAD $0xb454e4a179dd1877                           // .quad -5452481866653427593
	QUAD $0xf4296dd6fef3d67a                           // .quad -853029884242176390
	QUAD $0xe16a1dc9d8545e94                           // .quad -2203916314889396588
	QUAD $0x1899e4a65f58660c                           // .quad 1772699331562333708
	QUAD $0x8ce2529e2734bb1d                           // .quad -8294976724446954723
	QUAD $0x5ec05dcff72e7f8f                           // .quad 6827560182880305039
	QUAD $0xb01ae745b101e9e4                           // .quad -5757034887131305500
	QUAD $0x76707543f4fa1f73                           // .quad 8534450228600381299
	QUAD $0xdc21a1171d42645d                           // .quad -2584607590486743971
	QUAD $0x6a06494a791c53a8                           // .quad 7639874402088932264
	QUAD $0x899504ae72497eba                           // .quad -8532908771695296838
	QUAD $0x0487db9d17636892                           // .quad 326470965756389522
	QUAD $0xabfa45da0edbde69                           // .quad -6054449946191733143
	QUAD $0x45a9d2845d3c42b6                           // .quad 5019774725622874806
	QUAD $0xd6f8d7509292d603                           // .quad -2956376414312278525
	QUAD $0x0b8a2392ba45a9b2                           // .quad 831516194300602802
	QUAD $0x865b86925b9bc5c2                           // .quad -8765264286586255934
	QUAD $0x8e6cac7768d7141e                           // .quad -8183976793979022306
	QUAD $0xa7f26836f282b732                           // .quad -6344894339805432014
	QUAD $0x3207d795430cd926                           // .quad 3605087062808385830
	QUAD $0xd1ef0244af2364ff                           // .quad -3319431906329402113
	QUAD $0x7f44e6bd49e807b8                           // .quad 9170708441896323000
	QUAD $0x8335616aed761f1f                           // .quad -8992173969096958177
	QUAD $0x5f16206c9c6209a6                           // .quad 6851699533943015846
	QUAD $0xa402b9c5a8d3a6e7                           // .quad -6628531442943809817
	QUAD $0x36dba887c37a8c0f                           // .quad 3952938399001381903
	QUAD $0xcd036837130890a1                           // .quad -3673978285252374367
	QUAD $0xc2494954da2c9789                           // .quad -4446942528265218167
	QUAD $0x802221226be55a64                           // .quad -9213765455923815836
	QUAD $0xf2db9baa10b7bd6c                           // .quad -946992141904134804
	QUAD $0xa02aa96b06deb0fd                           // .quad -6905520801477381891
	QUAD $0x6f92829494e5acc7                           // .quad 8039631859474607303
	QUAD $0xc83553c5c8965d3d                           // .quad -4020214983419339459
	QUAD $0xcb772339ba1f17f9                           // .quad -3785518230938904583
	QUAD $0xfa42a8b73abbf48c                           // .quad -413582710846786420
	QUAD $0xff2a760414536efb                           // .quad -60105885123121413
	QUAD $0x9c69a97284b578d7                           // .quad -7176018221920323369
	QUAD $0xfef5138519684aba                           // .quad -75132356403901766
	QUAD $0xc38413cf25e2d70d                           // .quad -4358336758973016307
	QUAD $0x7eb258665fc25d69                           // .quad 9129456591349898601
	QUAD $0xf46518c2ef5b8cd1                           // .quad -836234930288882479
	QUAD $0xef2f773ffbd97a61                           // .quad -1211618658047395231
	QUAD $0x98bf2f79d5993802                           // .quad -7440175859071633406
	QUAD $0xaafb550ffacfd8fa                           // .quad -6126209340986631942
	QUAD $0xbeeefb584aff8603                           // .quad -4688533805412153853
	QUAD $0x95ba2a53f983cf38                           // .quad -7657761676233289928
	QUAD $0xeeaaba2e5dbf6784                           // .quad -1248981238337804412
	QUAD $0xdd945a747bf26183                           // .quad -2480258038432112253
	QUAD $0x952ab45cfa97a0b2                           // .quad -7698142301602209614
	QUAD $0x94f971119aeef9e4                           // .quad -7712008566467528220
	QUAD $0xba756174393d88df                           // .quad -5010991858575374113
	QUAD $0x7a37cd5601aab85d                           // .quad 8806733365625141341
	QUAD $0xe912b9d1478ceb17                           // .quad -1652053804791829737
	QUAD $0xac62e055c10ab33a                           // .quad -6025006692552756422
	QUAD $0x91abb422ccb812ee                           // .quad -7950062655635975442
	QUAD $0x577b986b314d6009                           // .quad 6303799689591218185
	QUAD $0xb616a12b7fe617aa                           // .quad -5325892301117581398
	QUAD $0xed5a7e85fda0b80b                           // .quad -1343622424865753077
	QUAD $0xe39c49765fdf9d94                           // .quad -2045679357969588844
	QUAD $0x14588f13be847307                           // .quad 1466078993672598279
	QUAD $0x8e41ade9fbebc27d                           // .quad -8196078626372074883
	QUAD $0x596eb2d8ae258fc8                           // .quad 6444284760518135752
	QUAD $0xb1d219647ae6b31c                           // .quad -5633412264537705700
	QUAD $0x6fca5f8ed9aef3bb                           // .quad 8055355950647669691
	QUAD $0xde469fbd99a05fe3                           // .quad -2430079312244744221
	QUAD $0x25de7bb9480d5854                           // .quad 2728754459941099604
	QUAD $0x8aec23d680043bee                           // .quad -8436328597794046994
	QUAD $0xaf561aa79a10ae6a                           // .quad -5812428961928401302
	QUAD $0xada72ccc20054ae9                           // .quad -5933724728815170839
	QUAD $0x1b2ba1518094da04                           // .quad 1957835834444274180
	QUAD $0xd910f7ff28069da4                           // .quad -2805469892591575644
	QUAD $0x90fb44d2f05d0842                           // .quad -7999724640327104446
	QUAD $0x87aa9aff79042286                           // .quad -8670947710510816634
	QUAD $0x353a1607ac744a53                           // .quad 3835402254873283155
	QUAD $0xa99541bf57452b28                           // .quad -6226998619711132888
	QUAD $0x42889b8997915ce8                           // .quad 4794252818591603944
	QUAD $0xd3fa922f2d1675f2                           // .quad -3172062256211528206
	QUAD $0x69956135febada11                           // .quad 7608094030047140369
	QUAD $0x847c9b5d7c2e09b7                           // .quad -8900067937773286985
	QUAD $0x43fab9837e699095                           // .quad 4898431519131537557
	QUAD $0xa59bc234db398c25                           // .quad -6513398903789220827
	QUAD $0x94f967e45e03f4bb                           // .quad -7712018656367741765
	QUAD $0xcf02b2c21207ef2e                           // .quad -3530062611309138130
	QUAD $0x1d1be0eebac278f5                           // .quad 2097517367411243253
	QUAD $0x8161afb94b44f57d                           // .quad -9123818159709293187
	QUAD $0x6462d92a69731732                           // .quad 7233582727691441970
	QUAD $0xa1ba1ba79e1632dc                           // .quad -6793086681209228580
	QUAD $0x7d7b8f7503cfdcfe                           // .quad 9041978409614302462
	QUAD $0xca28a291859bbf93                           // .quad -3879672333084147821
	QUAD $0x5cda735244c3d43e                           // .quad 6690786993590490174
	QUAD $0xfcb2cb35e702af78                           // .quad -237904397927796872
	QUAD $0x3a0888136afa64a7                           // .quad 4181741870994056359
	QUAD $0x9defbf01b061adab                           // .quad -7066219276345954901
	QUAD $0x088aaa1845b8fdd0                           // .quad 615491320315182544
	QUAD $0xc56baec21c7a1916                           // .quad -4221088077005055722
	QUAD $0x8aad549e57273d45                           // .quad -8454007886460797627
	QUAD $0xf6c69a72a3989f5b                           // .quad -664674077828931749
	QUAD $0x36ac54e2f678864b                           // .quad 3939617107816777291
	QUAD $0x9a3c2087a63f6399                           // .quad -7332950326284164199
	QUAD $0x84576a1bb416a7dd                           // .quad -8910536670511192099
	QUAD $0xc0cb28a98fcf3c7f                           // .quad -4554501889427817345
	QUAD $0x656d44a2a11c51d5                           // .quad 7308573235570561493
	QUAD $0xf0fdf2d3f3c30b9f                           // .quad -1081441343357383777
	QUAD $0x9f644ae5a4b1b325                           // .quad -6961356773836868827
	QUAD $0x969eb7c47859e743                           // .quad -7593429867239446717
	QUAD $0x873d5d9f0dde1fee                           // .quad -8701695967296086034
	QUAD $0xbc4665b596706114                           // .quad -4880101315621920492
	QUAD $0xa90cb506d155a7ea                           // .quad -6265433940692719638
	QUAD $0xeb57ff22fc0c7959                           // .quad -1488440626100012711
	QUAD $0x09a7f12442d588f2                           // .quad 695789805494438130
	QUAD $0x9316ff75dd87cbd8                           // .quad -7847804418953589800
	QUAD $0x0c11ed6d538aeb2f                           // .quad 869737256868047663
	QUAD $0xb7dcbf5354e9bece                           // .quad -5198069505264599346
	QUAD $0x8f1668c8a86da5fa                           // .quad -8136200465769716230
	QUAD $0xe5d3ef282a242e81                           // .quad -1885900863153361279
	QUAD $0xf96e017d694487bc                           // .quad -473439272678684740
	QUAD $0x8fa475791a569d10                           // .quad -8096217067111932656
	QUAD $0x37c981dcc395a9ac                           // .quad 4019886927579031980
	QUAD $0xb38d92d760ec4455                           // .quad -5508585315462527915
	QUAD $0x85bbe253f47b1417                           // .quad -8810199395808373737
	QUAD $0xe070f78d3927556a                           // .quad -2274045625900771990
	QUAD $0x93956d7478ccec8e                           // .quad -7812217631593927538
	QUAD $0x8c469ab843b89562                           // .quad -8338807543829064350
	QUAD $0x387ac8d1970027b2                           // .quad 4069786015789754290
	QUAD $0xaf58416654a6babb                           // .quad -5811823411358942533
	QUAD $0x06997b05fcc0319e                           // .quad 475546501309804958
	QUAD $0xdb2e51bfe9d0696a                           // .quad -2653093245771290262
	QUAD $0x441fece3bdf81f03                           // .quad 4908902581746016003
	QUAD $0x88fcf317f22241e2                           // .quad -8575712306248138270
	QUAD $0xd527e81cad7626c3                           // .quad -3087243809672255805
	QUAD $0xab3c2fddeeaad25a                           // .quad -6107954364382784934
	QUAD $0x8a71e223d8d3b074                           // .quad -8470740780517707660
	QUAD $0xd60b3bd56a5586f1                           // .quad -3023256937051093263
	QUAD $0xf6872d5667844e49                           // .quad -682526969396179383
	QUAD $0x85c7056562757456                           // .quad -8807064613298015146
	QUAD $0xb428f8ac016561db                           // .quad -5464844730172612133
	QUAD $0xa738c6bebb12d16c                           // .quad -6397144748195131028
	QUAD $0xe13336d701beba52                           // .quad -2219369894288377262
	QUAD $0xd106f86e69d785c7                           // .quad -3384744916816525881
	QUAD $0xecc0024661173473                           // .quad -1387106183930235789
	QUAD $0x82a45b450226b39c                           // .quad -9032994600651410532
	QUAD $0x27f002d7f95d0190                           // .quad 2877803288514593168
	QUAD $0xa34d721642b06084                           // .quad -6679557232386875260
	QUAD $0x31ec038df7b441f4                           // .quad 3597254110643241460
	QUAD $0xcc20ce9bd35c78a5                           // .quad -3737760522056206171
	QUAD $0x7e67047175a15271                           // .quad 9108253656731439729
	QUAD $0xff290242c83396ce                           // .quad -60514634142869810
	QUAD $0x0f0062c6e984d386                           // .quad 1080972517029761926
	QUAD $0x9f79a169bd203e41                           // .quad -6955350673980375487
	QUAD $0x52c07b78a3e60868                           // .quad 5962901664714590312
	QUAD $0xc75809c42c684dd1                           // .quad -4082502324048081455
	QUAD $0xa7709a56ccdf8a82                           // .quad -6381430974388925822
	QUAD $0xf92e0c3537826145                           // .quad -491441886632713915
	QUAD $0x88a66076400bb691                           // .quad -8600080377420466543
	QUAD $0x9bbcc7a142b17ccb                           // .quad -7224680206786528053
	QUAD $0x6acff893d00ea435                           // .quad 7696643601933968437
	QUAD $0xc2abf989935ddbfe                           // .quad -4419164240055772162
	QUAD $0x0583f6b8c4124d43                           // .quad 397432465562684739
	QUAD $0xf356f7ebf83552fe                           // .quad -912269281642327298
	QUAD $0xc3727a337a8b704a                           // .quad -4363290727450709942
	QUAD $0x98165af37b2153de                           // .quad -7487697328667536418
	QUAD $0x744f18c0592e4c5c                           // .quad 8380944645968776284
	QUAD $0xbe1bf1b059e9a8d6                           // .quad -4747935642407032618
	QUAD $0x1162def06f79df73                           // .quad 1252808770606194547
	QUAD $0xeda2ee1c7064130c                           // .quad -1323233534581402868
	QUAD $0x8addcb5645ac2ba8                           // .quad -8440366555225904216
	QUAD $0x9485d4d1c63e8be7                           // .quad -7744549986754458649
	QUAD $0x6d953e2bd7173692                           // .quad 7896285879677171346
	QUAD $0xb9a74a0637ce2ee1                           // .quad -5069001465015685407
	QUAD $0xc8fa8db6ccdd0437                           // .quad -3964700705685699529
	QUAD $0xe8111c87c5c1ba99                           // .quad -1724565812842218855
	QUAD $0x1d9c9892400a22a2                           // .quad 2133748077373825698
	QUAD $0x910ab1d4db9914a0                           // .quad -7995382660667468640
	QUAD $0x2503beb6d00cab4b                           // .quad 2667185096717282123
	QUAD $0xb54d5e4a127f59c8                           // .quad -5382542307406947896
	QUAD $0x2e44ae64840fd61d                           // .quad 3333981370896602653
	QUAD $0xe2a0b5dc971f303a                           // .quad -2116491865831296966
	QUAD $0x5ceaecfed289e5d2                           // .quad 6695424375237764562
	QUAD $0x8da471a9de737e24                           // .quad -8240336443785642460
	QUAD $0x7425a83e872c5f47                           // .quad 8369280469047205703
	QUAD $0xb10d8e1456105dad                           // .quad -5688734536304665171
	QUAD $0xd12f124e28f77719                           // .quad -3373457468973156583
	QUAD $0xdd50f1996b947518                           // .quad -2499232151953443560
	QUAD $0x82bd6b70d99aaa6f                           // .quad -9025939945749304721
	QUAD $0x8a5296ffe33cc92f                           // .quad -8479549122611984081
	QUAD $0x636cc64d1001550b                           // .quad 7164319141522920715
	QUAD $0xace73cbfdc0bfb7b                           // .quad -5987750384837592197
	QUAD $0x3c47f7e05401aa4e                           // .quad 4343712908476262990
	QUAD $0xd8210befd30efa5a                           // .quad -2873001962619602342
	QUAD $0x65acfaec34810a71                           // .quad 7326506586225052273
	QUAD $0x8714a775e3e95c78                           // .quad -8713155254278333320
	QUAD $0x7f1839a741a14d0d                           // .quad 9158133232781315341
	QUAD $0xa8d9d1535ce3b396                           // .quad -6279758049420528746
	QUAD $0x1ede48111209a050                           // .quad 2224294504121868368
	QUAD $0xd31045a8341ca07c                           // .quad -3238011543348273028
	QUAD $0x934aed0aab460432                           // .quad -7833187971778608078
	QUAD $0x83ea2b892091e44d                           // .quad -8941286242233752499
	QUAD $0xf81da84d5617853f                           // .quad -568112927868484289
	QUAD $0xa4e4b66b68b65d60                           // .quad -6564921784364802720
	QUAD $0x36251260ab9d668e                           // .quad 3901544858591782542
	QUAD $0xce1de40642e3f4b9                           // .quad -3594466212028615495
	QUAD $0xc1d72b7c6b426019                           // .quad -4479063491021217767
	QUAD $0x80d2ae83e9ce78f3                           // .quad -9164070410158966541
	QUAD $0xb24cf65b8612f81f                           // .quad -5598829363776522209
	QUAD $0xa1075a24e4421730                           // .quad -6843401994271320272
	QUAD $0xdee033f26797b627                           // .quad -2386850686293264857
	QUAD $0xc94930ae1d529cfc                           // .quad -3942566474411762436
	QUAD $0x169840ef017da3b1                           // .quad 1628122660560806833
	QUAD $0xfb9b7cd9a4a7443c                           // .quad -316522074587315140
	QUAD $0x8e1f289560ee864e                           // .quad -8205795374004271538
	QUAD $0x9d412e0806e88aa5                           // .quad -7115355324258153819
	QUAD $0xf1a6f2bab92a27e2                           // .quad -1033872180650563614
	QUAD $0xc491798a08a2ad4e                           // .quad -4282508136895304370
	QUAD $0xae10af696774b1db                           // .quad -5904026244240592421
	QUAD $0xf5b5d7ec8acb58a2                           // .quad -741449152691742558
	QUAD $0xacca6da1e0a8ef29                           // .quad -5995859411864064215
	QUAD $0x9991a6f3d6bf1765                           // .quad -7380934748073420955
	QUAD $0x17fd090a58d32af3                           // .quad 1728547772024695539
	QUAD $0xbff610b0cc6edd3f                           // .quad -4614482416664388289
	QUAD $0xddfc4b4cef07f5b0                           // .quad -2451001303396518480
	QUAD $0xeff394dcff8a948e                           // .quad -1156417002403097458
	QUAD $0x4abdaf101564f98e                           // .quad 5385653213018257806
	QUAD $0x95f83d0a1fb69cd9                           // .quad -7640289654143017767
	QUAD $0x9d6d1ad41abe37f1                           // .quad -7102991539009341455
	QUAD $0xbb764c4ca7a4440f                           // .quad -4938676049251384305
	QUAD $0x84c86189216dc5ed                           // .quad -8878739423761676819
	QUAD $0xea53df5fd18d5513                           // .quad -1561659043136842477
	QUAD $0x32fd3cf5b4e49bb4                           // .quad 3674159897003727796
	QUAD $0x92746b9be2f8552c                           // .quad -7893565929601608404
	QUAD $0x3fbc8c33221dc2a1                           // .quad 4592699871254659745
	QUAD $0xb7118682dbb66a77                           // .quad -5255271393574622601
	QUAD $0x0fabaf3feaa5334a                           // .quad 1129188820640936778
	QUAD $0xe4d5e82392a40515                           // .quad -1957403223540890347
	QUAD $0x29cb4d87f2a7400e                           // .quad 3011586022114279438
	QUAD $0x8f05b1163ba6832d                           // .quad -8140906042354138323
	QUAD $0x743e20e9ef511012                           // .quad 8376168546070237202
	QUAD $0xb2c71d5bca9023f8                           // .quad -5564446534515285000
	QUAD $0x914da9246b255416                           // .quad -7976533391121755114
	QUAD $0xdf78e4b2bd342cf6                           // .quad -2343872149716718346
	QUAD $0x1ad089b6c2f7548e                           // .quad 1932195658189984910
	QUAD $0x8bab8eefb6409c1a                           // .quad -8382449121214030822
	QUAD $0xa184ac2473b529b1                           // .quad -6808127464117294671
	QUAD $0xae9672aba3d0c320                           // .quad -5866375383090150624
	QUAD $0xc9e5d72d90a2741e                           // .quad -3898473311719230434
	QUAD $0xda3c0f568cc4f3e8                           // .quad -2721283210435300376
	QUAD $0x7e2fa67c7a658892                           // .quad 9092669226243950738
	QUAD $0x8865899617fb1871                           // .quad -8618331034163144591
	QUAD $0xddbb901b98feeab7                           // .quad -2469221522477225289
	QUAD $0xaa7eebfb9df9de8d                           // .quad -6161227774276542835
	QUAD $0x552a74227f3ea565                           // .quad 6136845133758244197
	QUAD $0xd51ea6fa85785631                           // .quad -3089848699418290639
	QUAD $0xd53a88958f87275f                           // .quad -3082000819042179233
	QUAD $0x8533285c936b35de                           // .quad -8848684464777513506
	QUAD $0x8a892abaf368f137                           // .quad -8464187042230111945
	QUAD $0xa67ff273b8460356                           // .quad -6449169562544503978
	QUAD $0x2d2b7569b0432d85                           // .quad 3254824252494523781
	QUAD $0xd01fef10a657842c                           // .quad -3449775934753242068
	QUAD $0x9c3b29620e29fc73                           // .quad -7189106879045698445
	QUAD $0x8213f56a67f6b29b                           // .quad -9073638986861858149
	QUAD $0x8349f3ba91b47b8f                           // .quad -8986383598807123057
	QUAD $0xa298f2c501f45f42                           // .quad -6730362715149934782
	QUAD $0x241c70a936219a73                           // .quad 2602078556773259891
	QUAD $0xcb3f2f7642717713                           // .quad -3801267375510030573
	QUAD $0xed238cd383aa0110                           // .quad -1359087822460813040
	QUAD $0xfe0efb53d30dd4d7                           // .quad -139898200960150313
	QUAD $0xf4363804324a40aa                           // .quad -849429889038008150
	QUAD $0x9ec95d1463e8a506                           // .quad -7004965403241175802
	QUAD $0xb143c6053edcd0d5                           // .quad -5673473379724898091
	QUAD $0xc67bb4597ce2ce48                           // .quad -4144520735624081848
	QUAD $0xdd94b7868e94050a                           // .quad -2480155706228734710
	QUAD $0xf81aa16fdc1b81da                           // .quad -568964901102714406
	QUAD $0xca7cf2b4191c8326                           // .quad -3855940325606653146
	QUAD $0x9b10a4e5e9913128                           // .quad -7273132090830278360
	QUAD $0xfd1c2f611f63a3f0                           // .quad -208239388580928528
	QUAD $0xc1d4ce1f63f57d72                           // .quad -4479729095110460046
	QUAD $0xbc633b39673c8cec                           // .quad -4871985254153548564
	QUAD $0xf24a01a73cf2dccf                           // .quad -987975350460687153
	QUAD $0xd5be0503e085d813                           // .quad -3044990783845967853
	QUAD $0x976e41088617ca01                           // .quad -7535013621679011327
	QUAD $0x4b2d8644d8a74e18                           // .quad 5417133557047315992
	QUAD $0xbd49d14aa79dbc82                           // .quad -4807081008671376254
	QUAD $0xddf8e7d60ed1219e                           // .quad -2451955090545630818
	QUAD $0xec9c459d51852ba2                           // .quad -1397165242411832414
	QUAD $0xcabb90e5c942b503                           // .quad -3838314940804713213
	QUAD $0x93e1ab8252f33b45                           // .quad -7790757304148477115
	QUAD $0x3d6a751f3b936243                           // .quad 4425478360848884291
	QUAD $0xb8da1662e7b00a17                           // .quad -5126760611758208489
	QUAD $0x0cc512670a783ad4                           // .quad 920161932633717460
	QUAD $0xe7109bfba19c0c9d                           // .quad -1796764746270372707
	QUAD $0x27fb2b80668b24c5                           // .quad 2880944217109767365
	QUAD $0x906a617d450187e2                           // .quad -8040506994060064798
	QUAD $0xb1f9f660802dedf6                           // .quad -5622191765467566602
	QUAD $0xb484f9dc9641e9da                           // .quad -5438947724147693094
	QUAD $0x5e7873f8a0396973                           // .quad 6807318348447705459
	QUAD $0xe1a63853bbd26451                           // .quad -2186998636757228463
	QUAD $0xdb0b487b6423e1e8                           // .quad -2662955059861265944
	QUAD $0x8d07e33455637eb2                           // .quad -8284403175614349646
	QUAD $0x91ce1a9a3d2cda62                           // .quad -7940379843253970334
	QUAD $0xb049dc016abc5e5f                           // .quad -5743817951090549153
	QUAD $0x7641a140cc7810fb                           // .quad 8521269269642088699
	QUAD $0xdc5c5301c56b75f7                           // .quad -2568086420435798537
	QUAD $0xa9e904c87fcb0a9d                           // .quad -6203421752542164323
	QUAD $0x89b9b3e11b6329ba                           // .quad -8522583040413455942
	QUAD $0x546345fa9fbdcd44                           // .quad 6080780864604458308
	QUAD $0xac2820d9623bf429                           // .quad -6041542782089432023
	QUAD $0xa97c177947ad4095                           // .quad -6234081974526590827
	QUAD $0xd732290fbacaf133                           // .quad -2940242459184402125
	QUAD $0x49ed8eabcccc485d                           // .quad 5327070802775656541
	QUAD $0x867f59a9d4bed6c0                           // .quad -8755180564631333184
	QUAD $0x5c68f256bfff5a74                           // .quad 6658838503469570676
	QUAD $0xa81f301449ee8c70                           // .quad -6332289687361778576
	QUAD $0x73832eec6fff3111                           // .quad 8323548129336963345
	QUAD $0xd226fc195c6a2f8c                           // .quad -3303676090774835316
	QUAD $0xc831fd53c5ff7eab                           // .quad -4021154456019173717
	QUAD $0x83585d8fd9c25db7                           // .quad -8982326584375353929
	QUAD $0xba3e7ca8b77f5e55                           // .quad -5026443070023967147
	QUAD $0xa42e74f3d032f525                           // .quad -6616222212041804507
	QUAD $0x28ce1bd2e55f35eb                           // .quad 2940318199324816875
	QUAD $0xcd3a1230c43fb26f                           // .quad -3658591746624867729
	QUAD $0x7980d163cf5b81b3                           // .quad 8755227902219092403
	QUAD $0x80444b5e7aa7cf85                           // .quad -9204148869281624187
	QUAD $0xd7e105bcc332621f                           // .quad -2891023177508298209
	QUAD $0xa0555e361951c366                           // .quad -6893500068174642330
	QUAD $0x8dd9472bf3fefaa7                           // .quad -8225464990312760665
	QUAD $0xc86ab5c39fa63440                           // .quad -4005189066790915008
	QUAD $0xb14f98f6f0feb951                           // .quad -5670145219463562927
	QUAD $0xfa856334878fc150                           // .quad -394800315061255856
	QUAD $0x6ed1bf9a569f33d3                           // .quad 7985374283903742931
	QUAD $0x9c935e00d4b9d8d2                           // .quad -7164279224554366766
	QUAD $0x0a862f80ec4700c8                           // .quad 758345818024902856
	QUAD $0xc3b8358109e84f07                           // .quad -4343663012265570553
	QUAD $0xcd27bb612758c0fa                           // .quad -3663753745896259334
	QUAD $0xf4a642e14c6262c8                           // .quad -817892746904575288
	QUAD $0x8038d51cb897789c                           // .quad -9207375118826243940
	QUAD $0x98e7e9cccfbd7dbd                           // .quad -7428711994456441411
	QUAD $0xe0470a63e6bd56c3                           // .quad -2285846861678029117
	QUAD $0xbf21e44003acdd2c                           // .quad -4674203974643163860
	QUAD $0x1858ccfce06cac74                           // .quad 1754377441329851508
	QUAD $0xeeea5d5004981478                           // .quad -1231068949876566920
	QUAD $0x0f37801e0c43ebc8                           // .quad 1096485900831157192
	QUAD $0x95527a5202df0ccb                           // .quad -7686947121313936181
	QUAD $0xd30560258f54e6ba                           // .quad -3241078642388441414
	QUAD $0xbaa718e68396cffd                           // .quad -4996997883215032323
	QUAD $0x47c6b82ef32a2069                           // .quad 5172023733869224041
	QUAD $0xe950df20247c83fd                           // .quad -1634561335591402499
	QUAD $0x4cdc331d57fa5441                           // .quad 5538357842881958977
	QUAD $0x91d28b7416cdd27e                           // .quad -7939129862385708418
	QUAD $0xe0133fe4adf8e952                           // .quad -2300424733252327086
	QUAD $0xb6472e511c81471d                           // .quad -5312226309554747619
	QUAD $0x58180fddd97723a6                           // .quad 6347841120289366950
	QUAD $0xe3d8f9e563a198e5                           // .quad -2028596868516046619
	QUAD $0x570f09eaa7ea7648                           // .quad 6273243709394548296
	QUAD $0x8e679c2f5e44ff8f                           // .quad -8185402070463610993
	QUAD $0x2cd2cc6551e513da                           // .quad 3229868618315797466
	QUAD $0xb201833b35d63f73                           // .quad -5620066569652125837
	QUAD $0xf8077f7ea65e58d1                           // .quad -574350245532641071
	QUAD $0xde81e40a034bcf4f                           // .quad -2413397193637769393
	QUAD $0xfb04afaf27faf782                           // .quad -358968903457900670
	QUAD $0x8b112e86420f6191                           // .quad -8425902273664687727
	QUAD $0x79c5db9af1f9b563                           // .quad 8774660907532399971
	QUAD $0xadd57a27d29339f6                           // .quad -5920691823653471754
	QUAD $0x18375281ae7822bc                           // .quad 1744954097560724156
	QUAD $0xd94ad8b1c7380874                           // .quad -2789178761139451788
	QUAD $0x8f2293910d0b15b5                           // .quad -8132775725879323211
	QUAD $0x87cec76f1c830548                           // .quad -8660765753353239224
	QUAD $0xb2eb3875504ddb22                           // .quad -5554283638921766110
	QUAD $0xa9c2794ae3a3c69a                           // .quad -6214271173264161126
	QUAD $0x5fa60692a46151eb                           // .quad 6892203506629956075
	QUAD $0xd433179d9c8cb841                           // .quad -3156152948152813503
	QUAD $0xdbc7c41ba6bcd333                           // .quad -2609901835997359309
	QUAD $0x849feec281d7f328                           // .quad -8890124620236590296
	QUAD $0x12b9b522906c0800                           // .quad 1349308723430688768
	QUAD $0xa5c7ea73224deff3                           // .quad -6500969756868349965
	QUAD $0xd768226b34870a00                           // .quad -2925050114139026944
	QUAD $0xcf39e50feae16bef                           // .quad -3514526177658049553
	QUAD $0xe6a1158300d46640                           // .quad -1828156321336891840
	QUAD $0x81842f29f2cce375                           // .quad -9114107888677362827
	QUAD $0x60495ae3c1097fd0                           // .quad 6938176635183661008
	QUAD $0xa1e53af46f801c53                           // .quad -6780948842419315629
	QUAD $0x385bb19cb14bdfc4                           // .quad 4061034775552188356
	QUAD $0xca5e89b18b602368                           // .quad -3864500034596756632
	QUAD $0x46729e03dd9ed7b5                           // .quad 5076293469440235445
	QUAD $0xfcf62c1dee382c42                           // .quad -218939024818557886
	QUAD $0x6c07a2c26a8346d1                           // .quad 7784369436827535057
	QUAD $0x9e19db92b4e31ba9                           // .quad -7054365918152680535
	QUAD $0xc7098b7305241885                           // .quad -4104596259247744891
	QUAD $0xc5a05277621be293                           // .quad -4206271379263462765
	QUAD $0xb8cbee4fc66d1ea7                           // .quad -5130745324059681113
	QUAD $0xf70867153aa2db38                           // .quad -646153205651940552
	QUAD $0x737f74f1dc043328                           // .quad 8322499218531169064
	QUAD $0x9a65406d44a5c903                           // .quad -7321374781173544701
	QUAD $0x505f522e53053ff2                           // .quad 5791438004736573426
	QUAD $0xc0fe908895cf3b44                           // .quad -4540032458039542972
	QUAD $0x647726b9e7c68fef                           // .quad 7239297505920716783
	QUAD $0xf13e34aabb430a15                           // .quad -1063354554122040811
	QUAD $0x5eca783430dc19f5                           // .quad 6830403950414141941
	QUAD $0x96c6e0eab509e64d                           // .quad -7582125623967357363
	QUAD $0xb67d16413d132072                           // .quad -5297053117264486286
	QUAD $0xbc789925624c5fe0                           // .quad -4865971011531808800
	QUAD $0xe41c5bd18c57e88f                           // .quad -2009630378153219953
	QUAD $0xeb96bf6ebadf77d8                           // .quad -1470777745987373096
	QUAD $0x8e91b962f7b6f159                           // .quad -8173548013986844327
	QUAD $0x933e37a534cbaae7                           // .quad -7836765118883190041
	QUAD $0x723627bbb5a4adb0                           // .quad 8229809056225996208
	QUAD $0xb80dc58e81fe95a1                           // .quad -5184270380176599647
	QUAD $0xcec3b1aaa30dd91c                           // .quad -3547796734999668452
	QUAD $0xe61136f2227e3b09                           // .quad -1868651956793361655
	QUAD $0x213a4f0aa5e8a7b1                           // .quad 2394313059052595121
	QUAD $0x8fcac257558ee4e6                           // .quad -8085436500636932890
	QUAD $0xa988e2cd4f62d19d                           // .quad -6230480713039031907
	QUAD $0xb3bd72ed2af29e1f                           // .quad -5495109607368778209
	QUAD $0x93eb1b80a33b8605                           // .quad -7788100891298789883
	QUAD $0xe0accfa875af45a7                           // .quad -2257200990783584857
	QUAD $0xbc72f130660533c3                           // .quad -4867563057061743677
	QUAD $0x8c6c01c9498d8b88                           // .quad -8328279646880822392
	QUAD $0xeb8fad7c7f8680b4                           // .quad -1472767802899791692
	QUAD $0xaf87023b9bf0ee6a                           // .quad -5798663540173640086
	QUAD $0xa67398db9f6820e1                           // .quad -6452645772052127519
	QUAD $0xdb68c2ca82ed2a05                           // .quad -2636643406789662203
	QUAD $0x88083f8943a1148c                           // .quad -8644589625959967604
	QUAD $0x892179be91d43a43                           // .quad -8565431156884620733
	QUAD $0x6a0a4f6b948959b0                           // .quad 7641007041259592112
	QUAD $0xab69d82e364948d4                           // .quad -6095102927678388012
	QUAD $0x848ce34679abb01c                           // .quad -8895485272135061476
	QUAD $0xd6444e39c3db9b09                           // .quad -3007192641170597111
	QUAD $0xf2d80e0c0c0b4e11                           // .quad -947992276657025519
	QUAD $0x85eab0e41a6940e5                           // .quad -8797024428372705051
	QUAD $0x6f8e118f0f0e2195                           // .quad 8038381691033493909
	QUAD $0xa7655d1d2103911f                           // .quad -6384594517038493409
	QUAD $0x4b7195f2d2d1a9fb                           // .quad 5436291095364479483
	QUAD $0xd13eb46469447567                           // .quad -3369057127870728857
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
_POW_TAB:
	LONG $0x00000001                           // .long 1
	LONG $0x00000003                           // .long 3
	LONG $0x00000006                           // .long 6
	LONG $0x00000009                           // .long 9
	LONG $0x0000000d                           // .long 13
	LONG $0x00000010                           // .long 16
	LONG $0x00000013                           // .long 19
	LONG $0x00000017                           // .long 23
	LONG $0x0000001a                           // .long 26
	QUAD $0x0000000000000000; LONG $0x00000000 // .p2align 4, 0x00

_TabEncodeCharsetStd:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x2f2b393837363534 // .ascii 16, 'wxyz0123456789+/'

	// .p2align 4, 0x00
_VecEncodeCharsetStd:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'

	// .p2align 4, 0x00
_TabEncodeCharsetURL:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x5f2d393837363534 // .ascii 16, 'wxyz0123456789-_'

	// .p2align 4, 0x00
_VecEncodeCharsetURL:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'

	// .p2align 4, 0x00
_VecDecodeCharsetStd:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0x3fffffff3effffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff\xff?'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0xffffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff\xff'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

	// .p2align 4, 0x00
_VecDecodeCharsetURL:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffff3effffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0x3fffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff?'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

	// .p2align 3, 0x00
_SIZE_SIZE_T:
	QUAD $0x0000000000000008 // .quad 8

	// .p2align 3, 0x00
_SIZE_TRIE_NODE:
	QUAD $0x0000000000000020 // .quad 32

	// .p2align 3, 0x00
_SIZE_PAIR:
	QUAD $0x0000000000000018 // .quad 24
	QUAD $0x0000000000000000 // .p2align 4, 0x00

_Digits:
	QUAD $0x3330323031303030; QUAD $0x3730363035303430 // .ascii 16, '0001020304050607'
	QUAD $0x3131303139303830; QUAD $0x3531343133313231 // .ascii 16, '0809101112131415'
	QUAD $0x3931383137313631; QUAD $0x3332323231323032 // .ascii 16, '1617181920212223'
	QUAD $0x3732363235323432; QUAD $0x3133303339323832 // .ascii 16, '2425262728293031'
	QUAD $0x3533343333333233; QUAD $0x3933383337333633 // .ascii 16, '3233343536373839'
	QUAD $0x3334323431343034; QUAD $0x3734363435343434 // .ascii 16, '4041424344454647'
	QUAD $0x3135303539343834; QUAD $0x3535343533353235 // .ascii 16, '4849505152535455'
	QUAD $0x3935383537353635; QUAD $0x3336323631363036 // .ascii 16, '5657585960616263'
	QUAD $0x3736363635363436; QUAD $0x3137303739363836 // .ascii 16, '6465666768697071'
	QUAD $0x3537343733373237; QUAD $0x3937383737373637 // .ascii 16, '7273747576777879'
	QUAD $0x3338323831383038; QUAD $0x3738363835383438 // .ascii 16, '8081828384858687'
	QUAD $0x3139303939383838; QUAD $0x3539343933393239 // .ascii 16, '8889909192939495'
	QUAD $0x3939383937393639                           // .ascii 8, '96979899'
	QUAD $0x0000000000000000                           // .p2align 4, 0x00

_LB_c722d6b2: // _pow10_ceil_sig.g
	QUAD $0xff77b1fcbebcdc4f // .quad -38366372719436721
	QUAD $0x25e8e89c13bb0f7b // .quad 2731688931043774331
	QUAD $0x9faacf3df73609b1 // .quad -6941508010590729807
	QUAD $0x77b191618c54e9ad // .quad 8624834609543440813
	QUAD $0xc795830d75038c1d // .quad -4065198994811024355
	QUAD $0xd59df5b9ef6a2418 // .quad -3054014793352862696
	QUAD $0xf97ae3d0d2446f25 // .quad -469812725086392539
	QUAD $0x4b0573286b44ad1e // .quad 5405853545163697438
	QUAD $0x9becce62836ac577 // .quad -7211161980820077193
	QUAD $0x4ee367f9430aec33 // .quad 5684501474941004851
	QUAD $0xc2e801fb244576d5 // .quad -4402266457597708587
	QUAD $0x229c41f793cda740 // .quad 2493940825248868160
	QUAD $0xf3a20279ed56d48a // .quad -891147053569747830
	QUAD $0x6b43527578c11110 // .quad 7729112049988473104
	QUAD $0x9845418c345644d6 // .quad -7474495936122174250
	QUAD $0x830a13896b78aaaa // .quad -9004363024039368022
	QUAD $0xbe5691ef416bd60c // .quad -4731433901725329908
	QUAD $0x23cc986bc656d554 // .quad 2579604275232953684
	QUAD $0xedec366b11c6cb8f // .quad -1302606358729274481
	QUAD $0x2cbfbe86b7ec8aa9 // .quad 3224505344041192105
	QUAD $0x94b3a202eb1c3f39 // .quad -7731658001846878407
	QUAD $0x7bf7d71432f3d6aa // .quad 8932844867666826922
	QUAD $0xb9e08a83a5e34f07 // .quad -5052886483881210105
	QUAD $0xdaf5ccd93fb0cc54 // .quad -2669001970698630060
	QUAD $0xe858ad248f5c22c9 // .quad -1704422086424124727
	QUAD $0xd1b3400f8f9cff69 // .quad -3336252463373287575
	QUAD $0x91376c36d99995be // .quad -7982792831656159810
	QUAD $0x23100809b9c21fa2 // .quad 2526528228819083170
	QUAD $0xb58547448ffffb2d // .quad -5366805021142811859
	QUAD $0xabd40a0c2832a78b // .quad -6065211750830921845
	QUAD $0xe2e69915b3fff9f9 // .quad -2096820258001126919
	QUAD $0x16c90c8f323f516d // .quad 1641857348316123501
	QUAD $0x8dd01fad907ffc3b // .quad -8228041688891786181
	QUAD $0xae3da7d97f6792e4 // .quad -5891368184943504668
	QUAD $0xb1442798f49ffb4a // .quad -5673366092687344822
	QUAD $0x99cd11cfdf41779d // .quad -7364210231179380835
	QUAD $0xdd95317f31c7fa1d // .quad -2480021597431793123
	QUAD $0x40405643d711d584 // .quad 4629795266307937668
	QUAD $0x8a7d3eef7f1cfc52 // .quad -8467542526035952558
	QUAD $0x482835ea666b2573 // .quad 5199465050656154995
	QUAD $0xad1c8eab5ee43b66 // .quad -5972742139117552794
	QUAD $0xda3243650005eed0 // .quad -2724040723534582064
	QUAD $0xd863b256369d4a40 // .quad -2854241655469553088
	QUAD $0x90bed43e40076a83 // .quad -8016736922845615485
	QUAD $0x873e4f75e2224e68 // .quad -8701430062309552536
	QUAD $0x5a7744a6e804a292 // .quad 6518754469289960082
	QUAD $0xa90de3535aaae202 // .quad -6265101559459552766
	QUAD $0x711515d0a205cb37 // .quad 8148443086612450103
	QUAD $0xd3515c2831559a83 // .quad -3219690930897053053
	QUAD $0x0d5a5b44ca873e04 // .quad 962181821410786820
	QUAD $0x8412d9991ed58091 // .quad -8929835859451740015
	QUAD $0xe858790afe9486c3 // .quad -1704479370831952189
	QUAD $0xa5178fff668ae0b6 // .quad -6550608805887287114
	QUAD $0x626e974dbe39a873 // .quad 7092772823314835571
	QUAD $0xce5d73ff402d98e3 // .quad -3576574988931720989
	QUAD $0xfb0a3d212dc81290 // .quad -357406007711231344
	QUAD $0x80fa687f881c7f8e // .quad -9152888395723407474
	QUAD $0x7ce66634bc9d0b9a // .quad 8999993282035256218
	QUAD $0xa139029f6a239f72 // .quad -6829424476226871438
	QUAD $0x1c1fffc1ebc44e81 // .quad 2026619565689294465
	QUAD $0xc987434744ac874e // .quad -3925094576856201394
	QUAD $0xa327ffb266b56221 // .quad -6690097579743157727
	QUAD $0xfbe9141915d7a922 // .quad -294682202642863838
	QUAD $0x4bf1ff9f0062baa9 // .quad 5472436080603216553
	QUAD $0x9d71ac8fada6c9b5 // .quad -7101705404292871755
	QUAD $0x6f773fc3603db4aa // .quad 8031958568804398250
	QUAD $0xc4ce17b399107c22 // .quad -4265445736938701790
	QUAD $0xcb550fb4384d21d4 // .quad -3795109844276665900
	QUAD $0xf6019da07f549b2b // .quad -720121152745989333
	QUAD $0x7e2a53a146606a49 // .quad 9091170749936331337
	QUAD $0x99c102844f94e0fb // .quad -7367604748107325189
	QUAD $0x2eda7444cbfc426e // .quad 3376138709496513134
	QUAD $0xc0314325637a1939 // .quad -4597819916706768583
	QUAD $0xfa911155fefb5309 // .quad -391512631556746487
	QUAD $0xf03d93eebc589f88 // .quad -1135588877456072824
	QUAD $0x793555ab7eba27cb // .quad 8733981247408842699
	QUAD $0x96267c7535b763b5 // .quad -7627272076051127371
	QUAD $0x4bc1558b2f3458df // .quad 5458738279630526687
	QUAD $0xbbb01b9283253ca2 // .quad -4922404076636521310
	QUAD $0x9eb1aaedfb016f17 // .quad -7011635205744005353
	QUAD $0xea9c227723ee8bcb // .quad -1541319077368263733
	QUAD $0x465e15a979c1cadd // .quad 5070514048102157021
	QUAD $0x92a1958a7675175f // .quad -7880853450996246689
	QUAD $0x0bfacd89ec191eca // .quad 863228270850154186
	QUAD $0xb749faed14125d36 // .quad -5239380795317920458
	QUAD $0xcef980ec671f667c // .quad -3532650679864695172
	QUAD $0xe51c79a85916f484 // .quad -1937539975720012668
	QUAD $0x82b7e12780e7401b // .quad -9027499368258256869
	QUAD $0x8f31cc0937ae58d2 // .quad -8128491512466089774
	QUAD $0xd1b2ecb8b0908811 // .quad -3336344095947716591
	QUAD $0xb2fe3f0b8599ef07 // .quad -5548928372155224313
	QUAD $0x861fa7e6dcb4aa16 // .quad -8782116138362033642
	QUAD $0xdfbdcece67006ac9 // .quad -2324474446766642487
	QUAD $0x67a791e093e1d49b // .quad 7469098900757009563
	QUAD $0x8bd6a141006042bd // .quad -8370325556870233411
	QUAD $0xe0c8bb2c5c6d24e1 // .quad -2249342214667950879
	QUAD $0xaecc49914078536d // .quad -5851220927660403859
	QUAD $0x58fae9f773886e19 // .quad 6411694268519837209
	QUAD $0xda7f5bf590966848 // .quad -2702340141148116920
	QUAD $0xaf39a475506a899f // .quad -5820440219632367201
	QUAD $0x888f99797a5e012d // .quad -8606491615858654931
	QUAD $0x6d8406c952429604 // .quad 7891439908798240260
	QUAD $0xaab37fd7d8f58178 // .quad -6146428501395930760
	QUAD $0xc8e5087ba6d33b84 // .quad -3970758169284363388
	QUAD $0xd5605fcdcf32e1d6 // .quad -3071349608317525546
	QUAD $0xfb1e4a9a90880a65 // .quad -351761693178066331
	QUAD $0x855c3be0a17fcd26 // .quad -8837122532839535322
	QUAD $0x5cf2eea09a550680 // .quad 6697677969404790400
	QUAD $0xa6b34ad8c9dfc06f // .quad -6434717147622031249
	QUAD $0xf42faa48c0ea481f // .quad -851274575098787809
	QUAD $0xd0601d8efc57b08b // .quad -3431710416100151157
	QUAD $0xf13b94daf124da27 // .quad -1064093218873484761
	QUAD $0x823c12795db6ce57 // .quad -9062348037703676329
	QUAD $0x76c53d08d6b70859 // .quad 8558313775058847833
	QUAD $0xa2cb1717b52481ed // .quad -6716249028702207507
	QUAD $0x54768c4b0c64ca6f // .quad 6086206200396171887
	QUAD $0xcb7ddcdda26da268 // .quad -3783625267450371480
	QUAD $0xa9942f5dcf7dfd0a // .quad -6227300304786948854
	QUAD $0xfe5d54150b090b02 // .quad -117845565885576446
	QUAD $0xd3f93b35435d7c4d // .quad -3172439362556298163
	QUAD $0x9efa548d26e5a6e1 // .quad -6991182506319567135
	QUAD $0xc47bc5014a1a6db0 // .quad -4288617610811380304
	QUAD $0xc6b8e9b0709f109a // .quad -4127292114472071014
	QUAD $0x359ab6419ca1091c // .quad 3862600023340550428
	QUAD $0xf867241c8cc6d4c0 // .quad -547429124662700864
	QUAD $0xc30163d203c94b63 // .quad -4395122007679087773
	QUAD $0x9b407691d7fc44f8 // .quad -7259672230555269896
	QUAD $0x79e0de63425dcf1e // .quad 8782263791269039902
	QUAD $0xc21094364dfb5636 // .quad -4462904269766699466
	QUAD $0x985915fc12f542e5 // .quad -7468914334623251739
	QUAD $0xf294b943e17a2bc4 // .quad -966944318780986428
	QUAD $0x3e6f5b7b17b2939e // .quad 4498915137003099038
	QUAD $0x979cf3ca6cec5b5a // .quad -7521869226879198374
	QUAD $0xa705992ceecf9c43 // .quad -6411550076227838909
	QUAD $0xbd8430bd08277231 // .quad -4790650515171610063
	QUAD $0x50c6ff782a838354 // .quad 5820620459997365076
	QUAD $0xece53cec4a314ebd // .quad -1376627125537124675
	QUAD $0xa4f8bf5635246429 // .quad -6559282480285457367
	QUAD $0x940f4613ae5ed136 // .quad -7777920981101784778
	QUAD $0x871b7795e136be9a // .quad -8711237568605798758
	QUAD $0xb913179899f68584 // .quad -5110715207949843068
	QUAD $0x28e2557b59846e40 // .quad 2946011094524915264
	QUAD $0xe757dd7ec07426e5 // .quad -1776707991509915931
	QUAD $0x331aeada2fe589d0 // .quad 3682513868156144080
	QUAD $0x9096ea6f3848984f // .quad -8027971522334779313
	QUAD $0x3ff0d2c85def7622 // .quad 4607414176811284002
	QUAD $0xb4bca50b065abe63 // .quad -5423278384491086237
	QUAD $0x0fed077a756b53aa // .quad 1147581702586717098
	QUAD $0xe1ebce4dc7f16dfb // .quad -2167411962186469893
	QUAD $0xd3e8495912c62895 // .quad -3177208890193991531
	QUAD $0x8d3360f09cf6e4bd // .quad -8272161504007625539
	QUAD $0x64712dd7abbbd95d // .quad 7237616480483531101
	QUAD $0xb080392cc4349dec // .quad -5728515861582144020
	QUAD $0xbd8d794d96aacfb4 // .quad -4788037454677749836
	QUAD $0xdca04777f541c567 // .quad -2548958808550292121
	QUAD $0xecf0d7a0fc5583a1 // .quad -1373360799919799391
	QUAD $0x89e42caaf9491b60 // .quad -8510628282985014432
	QUAD $0xf41686c49db57245 // .quad -858350499949874619
	QUAD $0xac5d37d5b79b6239 // .quad -6026599335303880135
	QUAD $0x311c2875c522ced6 // .quad 3538747893490044630
	QUAD $0xd77485cb25823ac7 // .quad -2921563150702462265
	QUAD $0x7d633293366b828c // .quad 9035120885289943692
	QUAD $0x86a8d39ef77164bc // .quad -8743505996830120772
	QUAD $0xae5dff9c02033198 // .quad -5882264492762254952
	QUAD $0xa8530886b54dbdeb // .quad -6317696477610263061
	QUAD $0xd9f57f830283fdfd // .quad -2741144597525430787
	QUAD $0xd267caa862a12d66 // .quad -3285434578585440922
	QUAD $0xd072df63c324fd7c // .quad -3426430746906788484
	QUAD $0x8380dea93da4bc60 // .quad -8970925639256982432
	QUAD $0x4247cb9e59f71e6e // .quad 4776009810824339054
	QUAD $0xa46116538d0deb78 // .quad -6601971030643840136
	QUAD $0x52d9be85f074e609 // .quad 5970012263530423817
	QUAD $0xcd795be870516656 // .quad -3640777769877412266
	QUAD $0x67902e276c921f8c // .quad 7462515329413029772
	QUAD $0x806bd9714632dff6 // .quad -9193015133814464522
	QUAD $0x00ba1cd8a3db53b7 // .quad 52386062455755703
	QUAD $0xa086cfcd97bf97f3 // .quad -6879582898840692749
	QUAD $0x80e8a40eccd228a5 // .quad -9157889458785081179
	QUAD $0xc8a883c0fdaf7df0 // .quad -3987792605123478032
	QUAD $0x6122cd128006b2ce // .quad 6999382250228200142
	QUAD $0xfad2a4b13d1b5d6c // .quad -373054737976959636
	QUAD $0x796b805720085f82 // .quad 8749227812785250178
	QUAD $0x9cc3a6eec6311a63 // .quad -7150688238876681629
	QUAD $0xcbe3303674053bb1 // .quad -3755104653863994447
	QUAD $0xc3f490aa77bd60fc // .quad -4326674280168464132
	QUAD $0xbedbfc4411068a9d // .quad -4693880817329993059
	QUAD $0xf4f1b4d515acb93b // .quad -796656831783192261
	QUAD $0xee92fb5515482d45 // .quad -1255665003235103419
	QUAD $0x991711052d8bf3c5 // .quad -7415439547505577019
	QUAD $0x751bdd152d4d1c4b // .quad 8438581409832836171
	QUAD $0xbf5cd54678eef0b6 // .quad -4657613415954583370
	QUAD $0xd262d45a78a0635e // .quad -3286831292991118498
	QUAD $0xef340a98172aace4 // .quad -1210330751515841308
	QUAD $0x86fb897116c87c35 // .quad -8720225134666286027
	QUAD $0x9580869f0e7aac0e // .quad -7673985747338482674
	QUAD $0xd45d35e6ae3d4da1 // .quad -3144297699952734815
	QUAD $0xbae0a846d2195712 // .quad -4980796165745715438
	QUAD $0x8974836059cca10a // .quad -8542058143368306422
	QUAD $0xe998d258869facd7 // .quad -1614309188754756393
	QUAD $0x2bd1a438703fc94c // .quad 3157485376071780684
	QUAD $0x91ff83775423cc06 // .quad -7926472270612804602
	QUAD $0x7b6306a34627ddd0 // .quad 8890957387685944784
	QUAD $0xb67f6455292cbf08 // .quad -5296404319838617848
	QUAD $0x1a3bc84c17b1d543 // .quad 1890324697752655171
	QUAD $0xe41f3d6a7377eeca // .quad -2008819381370884406
	QUAD $0x20caba5f1d9e4a94 // .quad 2362905872190818964
	QUAD $0x8e938662882af53e // .quad -8173041140997884610
	QUAD $0x547eb47b7282ee9d // .quad 6088502188546649757
	QUAD $0xb23867fb2a35b28d // .quad -5604615407819967859
	QUAD $0xe99e619a4f23aa44 // .quad -1612744301171463612
	QUAD $0xdec681f9f4c31f31 // .quad -2394083241347571919
	QUAD $0x6405fa00e2ec94d5 // .quad 7207441660390446293
	QUAD $0x8b3c113c38f9f37e // .quad -8413831053483314306
	QUAD $0xde83bc408dd3dd05 // .quad -2412877989897052923
	QUAD $0xae0b158b4738705e // .quad -5905602798426754978
	QUAD $0x9624ab50b148d446 // .quad -7627783505798704058
	QUAD $0xd98ddaee19068c76 // .quad -2770317479606055818
	QUAD $0x3badd624dd9b0958 // .quad 4300328673033783640
	QUAD $0x87f8a8d4cfa417c9 // .quad -8648977452394866743
	QUAD $0xe54ca5d70a80e5d7 // .quad -1923980597781273129
	QUAD $0xa9f6d30a038d1dbc // .quad -6199535797066195524
	QUAD $0x5e9fcf4ccd211f4d // .quad 6818396289628184397
	QUAD $0xd47487cc8470652b // .quad -3137733727905356501
	QUAD $0x7647c32000696720 // .quad 8522995362035230496
	QUAD $0x84c8d4dfd2c63f3b // .quad -8878612607581929669
	QUAD $0x29ecd9f40041e074 // .quad 3021029092058325108
	QUAD $0xa5fb0a17c777cf09 // .quad -6486579741050024183
	QUAD $0xf468107100525891 // .quad -835399653354481519
	QUAD $0xcf79cc9db955c2cc // .quad -3496538657885142324
	QUAD $0x7182148d4066eeb5 // .quad 8179122470161673909
	QUAD $0x81ac1fe293d599bf // .quad -9102865688819295809
	QUAD $0xc6f14cd848405531 // .quad -4111420493003729615
	QUAD $0xa21727db38cb002f // .quad -6766896092596731857
	QUAD $0xb8ada00e5a506a7d // .quad -5139275616254662019
	QUAD $0xca9cf1d206fdc03b // .quad -3846934097318526917
	QUAD $0xa6d90811f0e4851d // .quad -6424094520318327523
	QUAD $0xfd442e4688bd304a // .quad -196981603220770742
	QUAD $0x908f4a166d1da664 // .quad -8030118150397909404
	QUAD $0x9e4a9cec15763e2e // .quad -7040642529654063570
	QUAD $0x9a598e4e043287ff // .quad -7324666853212387329
	QUAD $0xc5dd44271ad3cdba // .quad -4189117143640191558
	QUAD $0x40eff1e1853f29fe // .quad 4679224488766679550
	QUAD $0xf7549530e188c128 // .quad -624710411122851544
	QUAD $0xd12bee59e68ef47d // .quad -3374341425896426371
	QUAD $0x9a94dd3e8cf578b9 // .quad -7307973034592864071
	QUAD $0x82bb74f8301958cf // .quad -9026492418826348337
	QUAD $0xc13a148e3032d6e7 // .quad -4523280274813692185
	QUAD $0xe36a52363c1faf02 // .quad -2059743486678159614
	QUAD $0xf18899b1bc3f8ca1 // .quad -1042414325089727327
	QUAD $0xdc44e6c3cb279ac2 // .quad -2574679358347699518
	QUAD $0x96f5600f15a7b7e5 // .quad -7569037980822161435
	QUAD $0x29ab103a5ef8c0ba // .quad 3002511419460075706
	QUAD $0xbcb2b812db11a5de // .quad -4849611457600313890
	QUAD $0x7415d448f6b6f0e8 // .quad 8364825292752482536
	QUAD $0xebdf661791d60f56 // .quad -1450328303573004458
	QUAD $0x111b495b3464ad22 // .quad 1232659579085827362
	QUAD $0x936b9fcebb25c995 // .quad -7823984217374209643
	QUAD $0xcab10dd900beec35 // .quad -3841273781498745803
	QUAD $0xb84687c269ef3bfb // .quad -5168294253290374149
	QUAD $0x3d5d514f40eea743 // .quad 4421779809981343555
	QUAD $0xe65829b3046b0afa // .quad -1848681798185579782
	QUAD $0x0cb4a5a3112a5113 // .quad 915538744049291539
	QUAD $0x8ff71a0fe2c2e6dc // .quad -8072955151507069220
	QUAD $0x47f0e785eaba72ac // .quad 5183897733458195116
	QUAD $0xb3f4e093db73a093 // .quad -5479507920956448621
	QUAD $0x59ed216765690f57 // .quad 6479872166822743895
	QUAD $0xe0f218b8d25088b8 // .quad -2237698882768172872
	QUAD $0x306869c13ec3532d // .quad 3488154190101041965
	QUAD $0x8c974f7383725573 // .quad -8316090829371189901
	QUAD $0x1e414218c73a13fc // .quad 2180096368813151228
	QUAD $0xafbd2350644eeacf // .quad -5783427518286599473
	QUAD $0xe5d1929ef90898fb // .quad -1886565557410948869
	QUAD $0xdbac6c247d62a583 // .quad -2617598379430861437
	QUAD $0xdf45f746b74abf3a // .quad -2358206946763686086
	QUAD $0x894bc396ce5da772 // .quad -8553528014785370254
	QUAD $0x6b8bba8c328eb784 // .quad 7749492695127472004
	QUAD $0xab9eb47c81f5114f // .quad -6080224000054324913
	QUAD $0x066ea92f3f326565 // .quad 463493832054564197
	QUAD $0xd686619ba27255a2 // .quad -2988593981640518238
	QUAD $0xc80a537b0efefebe // .quad -4032318728359182658
	QUAD $0x8613fd0145877585 // .quad -8785400266166405755
	QUAD $0xbd06742ce95f5f37 // .quad -4826042214438183113
	QUAD $0xa798fc4196e952e7 // .quad -6370064314280619289
	QUAD $0x2c48113823b73705 // .quad 3190819268807046917
	QUAD $0xd17f3b51fca3a7a0 // .quad -3350894374423386208
	QUAD $0xf75a15862ca504c6 // .quad -623161932418579258
	QUAD $0x82ef85133de648c4 // .quad -9011838011655698236
	QUAD $0x9a984d73dbe722fc // .quad -7307005235402693892
	QUAD $0xa3ab66580d5fdaf5 // .quad -6653111496142234891
	QUAD $0xc13e60d0d2e0ebbb // .quad -4522070525825979461
	QUAD $0xcc963fee10b7d1b3 // .quad -3704703351750405709
	QUAD $0x318df905079926a9 // .quad 3570783879572301481
	QUAD $0xffbbcfe994e5c61f // .quad -19193171260619233
	QUAD $0xfdf17746497f7053 // .quad -148206168962011053
	QUAD $0x9fd561f1fd0f9bd3 // .quad -6929524759678968877
	QUAD $0xfeb6ea8bedefa634 // .quad -92628855601256908
	QUAD $0xc7caba6e7c5382c8 // .quad -4050219931171323192
	QUAD $0xfe64a52ee96b8fc1 // .quad -115786069501571135
	QUAD $0xf9bd690a1b68637b // .quad -451088895536766085
	QUAD $0x3dfdce7aa3c673b1 // .quad 4466953431550423985
	QUAD $0x9c1661a651213e2d // .quad -7199459587351560659
	QUAD $0x06bea10ca65c084f // .quad 486002885505321039
	QUAD $0xc31bfa0fe5698db8 // .quad -4387638465762062920
	QUAD $0x486e494fcff30a63 // .quad 5219189625309039203
	QUAD $0xf3e2f893dec3f126 // .quad -872862063775190746
	QUAD $0x5a89dba3c3efccfb // .quad 6523987031636299003
	QUAD $0x986ddb5c6b3a76b7 // .quad -7463067817500576073
	QUAD $0xf89629465a75e01d // .quad -534194123654701027
	QUAD $0xbe89523386091465 // .quad -4717148753448332187
	QUAD $0xf6bbb397f1135824 // .quad -667742654568376284
	QUAD $0xee2ba6c0678b597f // .quad -1284749923383027329
	QUAD $0x746aa07ded582e2d // .quad 8388693718644305453
	QUAD $0x94db483840b717ef // .quad -7720497729755473937
	QUAD $0xa8c2a44eb4571cdd // .quad -6286281471915778851
	QUAD $0xba121a4650e4ddeb // .quad -5038936143766954517
	QUAD $0x92f34d62616ce414 // .quad -7857851839894723564
	QUAD $0xe896a0d7e51e1566 // .quad -1686984161281305242
	QUAD $0x77b020baf9c81d18 // .quad 8624429273841147160
	QUAD $0x915e2486ef32cd60 // .quad -7971894128441897632
	QUAD $0x0ace1474dc1d122f // .quad 778582277723329071
	QUAD $0xb5b5ada8aaff80b8 // .quad -5353181642124984136
	QUAD $0x0d819992132456bb // .quad 973227847154161339
	QUAD $0xe3231912d5bf60e6 // .quad -2079791034228842266
	QUAD $0x10e1fff697ed6c6a // .quad 1216534808942701674
	QUAD $0x8df5efabc5979c8f // .quad -8217398424034108273
	QUAD $0xca8d3ffa1ef463c2 // .quad -3851351762838199358
	QUAD $0xb1736b96b6fd83b3 // .quad -5660062011615247437
	QUAD $0xbd308ff8a6b17cb3 // .quad -4814189703547749197
	QUAD $0xddd0467c64bce4a0 // .quad -2463391496091671392
	QUAD $0xac7cb3f6d05ddbdf // .quad -6017737129434686497
	QUAD $0x8aa22c0dbef60ee4 // .quad -8457148712698376476
	QUAD $0x6bcdf07a423aa96c // .quad 7768129340171790700
	QUAD $0xad4ab7112eb3929d // .quad -5959749872445582691
	QUAD $0x86c16c98d2c953c7 // .quad -8736582398494813241
	QUAD $0xd89d64d57a607744 // .quad -2838001322129590460
	QUAD $0xe871c7bf077ba8b8 // .quad -1697355961263740744
	QUAD $0x87625f056c7c4a8b // .quad -8691279853972075893
	QUAD $0x11471cd764ad4973 // .quad 1244995533423855987
	QUAD $0xa93af6c6c79b5d2d // .quad -6252413799037706963
	QUAD $0xd598e40d3dd89bd0 // .quad -3055441601647567920
	QUAD $0xd389b47879823479 // .quad -3203831230369745799
	QUAD $0x4aff1d108d4ec2c4 // .quad 5404070034795315908
	QUAD $0x843610cb4bf160cb // .quad -8919923546622172981
	QUAD $0xcedf722a585139bb // .quad -3539985255894009413
	QUAD $0xa54394fe1eedb8fe // .quad -6538218414850328322
	QUAD $0xc2974eb4ee658829 // .quad -4424981569867511767
	QUAD $0xce947a3da6a9273e // .quad -3561087000135522498
	QUAD $0x733d226229feea33 // .quad 8303831092947774003
	QUAD $0x811ccc668829b887 // .quad -9143208402725783417
	QUAD $0x0806357d5a3f5260 // .quad 578208414664970848
	QUAD $0xa163ff802a3426a8 // .quad -6817324484979841368
	QUAD $0xca07c2dcb0cf26f8 // .quad -3888925500096174344
	QUAD $0xc9bcff6034c13052 // .quad -3909969587797413806
	QUAD $0xfc89b393dd02f0b6 // .quad -249470856692830026
	QUAD $0xfc2c3f3841f17c67 // .quad -275775966319379353
	QUAD $0xbbac2078d443ace3 // .quad -4923524589293425437
	QUAD $0x9d9ba7832936edc0 // .quad -7089889006590693952
	QUAD $0xd54b944b84aa4c0e // .quad -3077202868308390898
	QUAD $0xc5029163f384a931 // .quad -4250675239810979535
	QUAD $0x0a9e795e65d4df12 // .quad 765182433041899282
	QUAD $0xf64335bcf065d37d // .quad -701658031336336515
	QUAD $0x4d4617b5ff4a16d6 // .quad 5568164059729762006
	QUAD $0x99ea0196163fa42e // .quad -7356065297226292178
	QUAD $0x504bced1bf8e4e46 // .quad 5785945546544795206
	QUAD $0xc06481fb9bcf8d39 // .quad -4583395603105477319
	QUAD $0xe45ec2862f71e1d7 // .quad -1990940103673781801
	QUAD $0xf07da27a82c37088 // .quad -1117558485454458744
	QUAD $0x5d767327bb4e5a4d // .quad 6734696907262548557
	QUAD $0x964e858c91ba2655 // .quad -7616003081050118571
	QUAD $0x3a6a07f8d510f870 // .quad 4209185567039092848
	QUAD $0xbbe226efb628afea // .quad -4908317832885260310
	QUAD $0x890489f70a55368c // .quad -8573576096483297652
	QUAD $0xeadab0aba3b2dbe5 // .quad -1523711272679187483
	QUAD $0x2b45ac74ccea842f // .quad 3118087934678041647
	QUAD $0x92c8ae6b464fc96f // .quad -7869848573065574033
	QUAD $0x3b0b8bc90012929e // .quad 4254647968387469982
	QUAD $0xb77ada0617e3bbcb // .quad -5225624697904579637
	QUAD $0x09ce6ebb40173745 // .quad 706623942056949573
	QUAD $0xe55990879ddcaabd // .quad -1920344853953336643
	QUAD $0xcc420a6a101d0516 // .quad -3728406090856200938
	QUAD $0x8f57fa54c2a9eab6 // .quad -8117744561361917258
	QUAD $0x9fa946824a12232e // .quad -6941939825212513490
	QUAD $0xb32df8e9f3546564 // .quad -5535494683275008668
	QUAD $0x47939822dc96abfa // .quad 5157633273766521850
	QUAD $0xdff9772470297ebd // .quad -2307682335666372931
	QUAD $0x59787e2b93bc56f8 // .quad 6447041592208152312
	QUAD $0x8bfbea76c619ef36 // .quad -8359830487432564938
	QUAD $0x57eb4edb3c55b65b // .quad 6335244004343789147
	QUAD $0xaefae51477a06b03 // .quad -5838102090863318269
	QUAD $0xede622920b6b23f2 // .quad -1304317031425039374
	QUAD $0xdab99e59958885c4 // .quad -2685941595151759932
	QUAD $0xe95fab368e45ecee // .quad -1630396289281299218
	QUAD $0x88b402f7fd75539b // .quad -8596242524610931813
	QUAD $0x11dbcb0218ebb415 // .quad 1286845328412881941
	QUAD $0xaae103b5fcd2a881 // .quad -6133617137336276863
	QUAD $0xd652bdc29f26a11a // .quad -3003129357911285478
	QUAD $0xd59944a37c0752a2 // .quad -3055335403242958174
	QUAD $0x4be76d3346f04960 // .quad 5469460339465668960
	QUAD $0x857fcae62d8493a5 // .quad -8827113654667930715
	QUAD $0x6f70a4400c562ddc // .quad 8030098730593431004
	QUAD $0xa6dfbd9fb8e5b88e // .quad -6422206049907525490
	QUAD $0xcb4ccd500f6bb953 // .quad -3797434642040374957
	QUAD $0xd097ad07a71f26b2 // .quad -3416071543957018958
	QUAD $0x7e2000a41346a7a8 // .quad 9088264752731695016
	QUAD $0x825ecc24c873782f // .quad -9052573742614218705
	QUAD $0x8ed400668c0c28c9 // .quad -8154892584824854327
	QUAD $0xa2f67f2dfa90563b // .quad -6704031159840385477
	QUAD $0x728900802f0f32fb // .quad 8253128342678483707
	QUAD $0xcbb41ef979346bca // .quad -3768352931373093942
	QUAD $0x4f2b40a03ad2ffba // .quad 5704724409920716730
	QUAD $0xfea126b7d78186bc // .quad -98755145788979524
	QUAD $0xe2f610c84987bfa9 // .quad -2092466524453879895
	QUAD $0x9f24b832e6b0f436 // .quad -6979250993759194058
	QUAD $0x0dd9ca7d2df4d7ca // .quad 998051431430019018
	QUAD $0xc6ede63fa05d3143 // .quad -4112377723771604669
	QUAD $0x91503d1c79720dbc // .quad -7975807747567252036
	QUAD $0xf8a95fcf88747d94 // .quad -528786136287117932
	QUAD $0x75a44c6397ce912b // .quad 8476984389250486571
	QUAD $0x9b69dbe1b548ce7c // .quad -7248020362820530564
	QUAD $0xc986afbe3ee11abb // .quad -3925256793573221701
	QUAD $0xc24452da229b021b // .quad -4448339435098275301
	QUAD $0xfbe85badce996169 // .quad -294884973539139223
	QUAD $0xf2d56790ab41c2a2 // .quad -948738275445456222
	QUAD $0xfae27299423fb9c4 // .quad -368606216923924028
	QUAD $0x97c560ba6b0919a5 // .quad -7510490449794491995
	QUAD $0xdccd879fc967d41b // .quad -2536221894791146469
	QUAD $0xbdb6b8e905cb600f // .quad -4776427043815727089
	QUAD $0x5400e987bbc1c921 // .quad 6053094668365842721
	QUAD $0xed246723473e3813 // .quad -1358847786342270957
	QUAD $0x290123e9aab23b69 // .quad 2954682317029915497
	QUAD $0x9436c0760c86e30b // .quad -7766808894105001205
	QUAD $0xf9a0b6720aaf6522 // .quad -459166561069996766
	QUAD $0xb94470938fa89bce // .quad -5096825099203863602
	QUAD $0xf808e40e8d5b3e6a // .quad -573958201337495958
	QUAD $0xe7958cb87392c2c2 // .quad -1759345355577441598
	QUAD $0xb60b1d1230b20e05 // .quad -5329133770099257851
	QUAD $0x90bd77f3483bb9b9 // .quad -8017119874876982855
	QUAD $0xb1c6f22b5e6f48c3 // .quad -5636551615525730109
	QUAD $0xb4ecd5f01a4aa828 // .quad -5409713825168840664
	QUAD $0x1e38aeb6360b1af4 // .quad 2177682517447613172
	QUAD $0xe2280b6c20dd5232 // .quad -2150456263033662926
	QUAD $0x25c6da63c38de1b1 // .quad 2722103146809516465
	QUAD $0x8d590723948a535f // .quad -8261564192037121185
	QUAD $0x579c487e5a38ad0f // .quad 6313000485183335695
	QUAD $0xb0af48ec79ace837 // .quad -5715269221619013577
	QUAD $0x2d835a9df0c6d852 // .quad 3279564588051781714
	QUAD $0xdcdb1b2798182244 // .quad -2532400508596379068
	QUAD $0xf8e431456cf88e66 // .quad -512230283362660762
	QUAD $0x8a08f0f8bf0f156b // .quad -8500279345513818773
	QUAD $0x1b8e9ecb641b5900 // .quad 1985699082112030976
	QUAD $0xac8b2d36eed2dac5 // .quad -6013663163464885563
	QUAD $0xe272467e3d222f40 // .quad -2129562165787349184
	QUAD $0xd7adf884aa879177 // .quad -2905392935903719049
	QUAD $0x5b0ed81dcc6abb10 // .quad 6561419329620589328
	QUAD $0x86ccbb52ea94baea // .quad -8733399612580906262
	QUAD $0x98e947129fc2b4ea // .quad -7428327965055601430
	QUAD $0xa87fea27a539e9a5 // .quad -6305063497298744923
	QUAD $0x3f2398d747b36225 // .quad 4549648098962661925
	QUAD $0xd29fe4b18e88640e // .quad -3269643353196043250
	QUAD $0x8eec7f0d19a03aae // .quad -8147997931578836306
	QUAD $0x83a3eeeef9153e89 // .quad -8961056123388608887
	QUAD $0x1953cf68300424ad // .quad 1825030320404309165
	QUAD $0xa48ceaaab75a8e2b // .quad -6589634135808373205
	QUAD $0x5fa8c3423c052dd8 // .quad 6892973918932774360
	QUAD $0xcdb02555653131b6 // .quad -3625356651333078602
	QUAD $0x3792f412cb06794e // .quad 4004531380238580046
	QUAD $0x808e17555f3ebf11 // .quad -9183376934724255983
	QUAD $0xe2bbd88bbee40bd1 // .quad -2108853905778275375
	QUAD $0xa0b19d2ab70e6ed6 // .quad -6867535149977932074
	QUAD $0x5b6aceaeae9d0ec5 // .quad 6587304654631931589
	QUAD $0xc8de047564d20a8b // .quad -3972732919045027189
	QUAD $0xf245825a5a445276 // .quad -989241218564861322
	QUAD $0xfb158592be068d2e // .quad -354230130378896082
	QUAD $0xeed6e2f0f0d56713 // .quad -1236551523206076653
	QUAD $0x9ced737bb6c4183d // .quad -7138922859127891907
	QUAD $0x55464dd69685606c // .quad 6144684325637283948
	QUAD $0xc428d05aa4751e4c // .quad -4311967555482476980
	QUAD $0xaa97e14c3c26b887 // .quad -6154202648235558777
	QUAD $0xf53304714d9265df // .quad -778273425925708321
	QUAD $0xd53dd99f4b3066a9 // .quad -3081067291867060567
	QUAD $0x993fe2c6d07b7fab // .quad -7403949918844649557
	QUAD $0xe546a8038efe402a // .quad -1925667057416912854
	QUAD $0xbf8fdb78849a5f96 // .quad -4643251380128424042
	QUAD $0xde98520472bdd034 // .quad -2407083821771141068
	QUAD $0xef73d256a5c0f77c // .quad -1192378206733142148
	QUAD $0x963e66858f6d4441 // .quad -7620540795641314239
	QUAD $0x95a8637627989aad // .quad -7662765406849295699
	QUAD $0xdde7001379a44aa9 // .quad -2456994988062127447
	QUAD $0xbb127c53b17ec159 // .quad -4966770740134231719
	QUAD $0x5560c018580d5d53 // .quad 6152128301777116499
	QUAD $0xe9d71b689dde71af // .quad -1596777406740401745
	QUAD $0xaab8f01e6e10b4a7 // .quad -6144897678060768089
	QUAD $0x9226712162ab070d // .quad -7915514906853832947
	QUAD $0xcab3961304ca70e9 // .quad -3840561048787980055
	QUAD $0xb6b00d69bb55c8d1 // .quad -5282707615139903279
	QUAD $0x3d607b97c5fd0d23 // .quad 4422670725869800739
	QUAD $0xe45c10c42a2b3b05 // .quad -1991698500497491195
	QUAD $0x8cb89a7db77c506b // .quad -8306719647944912789
	QUAD $0x8eb98a7a9a5b04e3 // .quad -8162340590452013853
	QUAD $0x77f3608e92adb243 // .quad 8643358275316593219
	QUAD $0xb267ed1940f1c61c // .quad -5591239719637629412
	QUAD $0x55f038b237591ed4 // .quad 6192511825718353620
	QUAD $0xdf01e85f912e37a3 // .quad -2377363631119648861
	QUAD $0x6b6c46dec52f6689 // .quad 7740639782147942025
	QUAD $0x8b61313bbabce2c6 // .quad -8403381297090862394
	QUAD $0x2323ac4b3b3da016 // .quad 2532056854628769814
	QUAD $0xae397d8aa96c1b77 // .quad -5892540602936190089
	QUAD $0xabec975e0a0d081b // .quad -6058300968568813541
	QUAD $0xd9c7dced53c72255 // .quad -2753989735242849707
	QUAD $0x96e7bd358c904a22 // .quad -7572876210711016926
	QUAD $0x881cea14545c7575 // .quad -8638772612167862923
	QUAD $0x7e50d64177da2e55 // .quad 9102010423587778133
	QUAD $0xaa242499697392d2 // .quad -6186779746782440750
	QUAD $0xdde50bd1d5d0b9ea // .quad -2457545025797441046
	QUAD $0xd4ad2dbfc3d07787 // .quad -3121788665050663033
	QUAD $0x955e4ec64b44e865 // .quad -7683617300674189211
	QUAD $0x84ec3c97da624ab4 // .quad -8868646943297746252
	QUAD $0xbd5af13bef0b113f // .quad -4802260812921368257
	QUAD $0xa6274bbdd0fadd61 // .quad -6474122660694794911
	QUAD $0xecb1ad8aeacdd58f // .quad -1391139997724322417
	QUAD $0xcfb11ead453994ba // .quad -3480967307441105734
	QUAD $0x67de18eda5814af3 // .quad 7484447039699372787
	QUAD $0x81ceb32c4b43fcf4 // .quad -9093133594791772940
	QUAD $0x80eacf948770ced8 // .quad -9157278655470055720
	QUAD $0xa2425ff75e14fc31 // .quad -6754730975062328271
	QUAD $0xa1258379a94d028e // .quad -6834912300910181746
	QUAD $0xcad2f7f5359a3b3e // .quad -3831727700400522434
	QUAD $0x096ee45813a04331 // .quad 679731660717048625
	QUAD $0xfd87b5f28300ca0d // .quad -177973607073265139
	QUAD $0x8bca9d6e188853fd // .quad -8373707460958465027
	QUAD $0x9e74d1b791e07e48 // .quad -7028762532061872568
	QUAD $0x775ea264cf55347e // .quad 8601490892183123070
	QUAD $0xc612062576589dda // .quad -4174267146649952806
	QUAD $0x95364afe032a819e // .quad -7694880458480647778
	QUAD $0xf79687aed3eec551 // .quad -606147914885053103
	QUAD $0x3a83ddbd83f52205 // .quad 4216457482181353989
	QUAD $0x9abe14cd44753b52 // .quad -7296371474444240046
	QUAD $0xc4926a9672793543 // .quad -4282243101277735613
	QUAD $0xc16d9a0095928a27 // .quad -4508778324627912153
	QUAD $0x75b7053c0f178294 // .quad 8482254178684994196
	QUAD $0xf1c90080baf72cb1 // .quad -1024286887357502287
	QUAD $0x5324c68b12dd6339 // .quad 5991131704928854841
	QUAD $0x971da05074da7bee // .quad -7557708332239520786
	QUAD $0xd3f6fc16ebca5e04 // .quad -3173071712060547580
	QUAD $0xbce5086492111aea // .quad -4835449396872013078
	QUAD $0x88f4bb1ca6bcf585 // .quad -8578025658503072379
	QUAD $0xec1e4a7db69561a5 // .quad -1432625727662628443
	QUAD $0x2b31e9e3d06c32e6 // .quad 3112525982153323238
	QUAD $0x9392ee8e921d5d07 // .quad -7812920107430224633
	QUAD $0x3aff322e62439fd0 // .quad 4251171748059520976
	QUAD $0xb877aa3236a4b449 // .quad -5154464115860392887
	QUAD $0x09befeb9fad487c3 // .quad 702278666647013315
	QUAD $0xe69594bec44de15b // .quad -1831394126398103205
	QUAD $0x4c2ebe687989a9b4 // .quad 5489534351736154548
	QUAD $0x901d7cf73ab0acd9 // .quad -8062150356639896359
	QUAD $0x0f9d37014bf60a11 // .quad 1125115960621402641
	QUAD $0xb424dc35095cd80f // .quad -5466001927372482545
	QUAD $0x538484c19ef38c95 // .quad 6018080969204141205
	QUAD $0xe12e13424bb40e13 // .quad -2220816390788215277
	QUAD $0x2865a5f206b06fba // .quad 2910915193077788602
	QUAD $0x8cbccc096f5088cb // .quad -8305539271883716405
	QUAD $0xf93f87b7442e45d4 // .quad -486521013540076076
	QUAD $0xafebff0bcb24aafe // .quad -5770238071427257602
	QUAD $0xf78f69a51539d749 // .quad -608151266925095095
	QUAD $0xdbe6fecebdedd5be // .quad -2601111570856684098
	QUAD $0xb573440e5a884d1c // .quad -5371875102083756772
	QUAD $0x89705f4136b4a597 // .quad -8543223759426509417
	QUAD $0x31680a88f8953031 // .quad 3560107088838733873
	QUAD $0xabcc77118461cefc // .quad -6067343680855748868
	QUAD $0xfdc20d2b36ba7c3e // .quad -161552157378970562
	QUAD $0xd6bf94d5e57a42bc // .quad -2972493582642298180
	QUAD $0x3d32907604691b4d // .quad 4409745821703674701
	QUAD $0x8637bd05af6c69b5 // .quad -8775337516792518219
	QUAD $0xa63f9a49c2c1b110 // .quad -6467280898289979120
	QUAD $0xa7c5ac471b478423 // .quad -6357485877563259869
	QUAD $0x0fcf80dc33721d54 // .quad 1139270913992301908
	QUAD $0xd1b71758e219652b // .quad -3335171328526686933
	QUAD $0xd3c36113404ea4a9 // .quad -3187597375937010519
	QUAD $0x83126e978d4fdf3b // .quad -9002011107970261189
	QUAD $0x645a1cac083126ea // .quad 7231123676894144234
	QUAD $0xa3d70a3d70a3d70a // .quad -6640827866535438582
	QUAD $0x3d70a3d70a3d70a4 // .quad 4427218577690292388
	QUAD $0xcccccccccccccccc // .quad -3689348814741910324
	QUAD $0xcccccccccccccccd // .quad -3689348814741910323
	QUAD $0x8000000000000000 // .quad -9223372036854775808
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xa000000000000000 // .quad -6917529027641081856
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xc800000000000000 // .quad -4035225266123964416
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xfa00000000000000 // .quad -432345564227567616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x9c40000000000000 // .quad -7187745005283311616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xc350000000000000 // .quad -4372995238176751616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xf424000000000000 // .quad -854558029293551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x9896800000000000 // .quad -7451627795949551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xbebc200000000000 // .quad -4702848726509551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xee6b280000000000 // .quad -1266874889709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x9502f90000000000 // .quad -7709325833709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xba43b74000000000 // .quad -5024971273709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xe8d4a51000000000 // .quad -1669528073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x9184e72a00000000 // .quad -7960984073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xb5e620f480000000 // .quad -5339544073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xe35fa931a0000000 // .quad -2062744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x8e1bc9bf04000000 // .quad -8206744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xb1a2bc2ec5000000 // .quad -5646744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xde0b6b3a76400000 // .quad -2446744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x8ac7230489e80000 // .quad -8446744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xad78ebc5ac620000 // .quad -5946744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xd8d726b7177a8000 // .quad -2821744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x878678326eac9000 // .quad -8681119073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xa968163f0a57b400 // .quad -6239712823709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xd3c21bcecceda100 // .quad -3187955011209551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x84595161401484a0 // .quad -8910000909647051616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xa56fa5b99019a5c8 // .quad -6525815118631426616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xcecb8f27f4200f3a // .quad -3545582879861895366
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x813f3978f8940984 // .quad -9133518327554766460
	QUAD $0x4000000000000000 // .quad 4611686018427387904
	QUAD $0xa18f07d736b90be5 // .quad -6805211891016070171
	QUAD $0x5000000000000000 // .quad 5764607523034234880
	QUAD $0xc9f2c9cd04674ede // .quad -3894828845342699810
	QUAD $0xa400000000000000 // .quad -6629298651489370112
	QUAD $0xfc6f7c4045812296 // .quad -256850038250986858
	QUAD $0x4d00000000000000 // .quad 5548434740920451072
	QUAD $0x9dc5ada82b70b59d // .quad -7078060301547948643
	QUAD $0xf020000000000000 // .quad -1143914305352105984
	QUAD $0xc5371912364ce305 // .quad -4235889358507547899
	QUAD $0x6c28000000000000 // .quad 7793479155164643328
	QUAD $0xf684df56c3e01bc6 // .quad -683175679707046970
	QUAD $0xc732000000000000 // .quad -4093209111326359552
	QUAD $0x9a130b963a6c115c // .quad -7344513827457986212
	QUAD $0x3c7f400000000000 // .quad 4359273333062107136
	QUAD $0xc097ce7bc90715b3 // .quad -4568956265895094861
	QUAD $0x4b9f100000000000 // .quad 5449091666327633920
	QUAD $0xf0bdc21abb48db20 // .quad -1099509313941480672
	QUAD $0x1e86d40000000000 // .quad 2199678564482154496
	QUAD $0x96769950b50d88f4 // .quad -7604722348854507276
	QUAD $0x1314448000000000 // .quad 1374799102801346560
	QUAD $0xbc143fa4e250eb31 // .quad -4894216917640746191
	QUAD $0x17d955a000000000 // .quad 1718498878501683200
	QUAD $0xeb194f8e1ae525fd // .quad -1506085128623544835
	QUAD $0x5dcfab0800000000 // .quad 6759809616554491904
	QUAD $0x92efd1b8d0cf37be // .quad -7858832233030797378
	QUAD $0x5aa1cae500000000 // .quad 6530724019560251392
	QUAD $0xb7abc627050305ad // .quad -5211854272861108819
	QUAD $0xf14a3d9e40000000 // .quad -1059967012404461568
	QUAD $0xe596b7b0c643c719 // .quad -1903131822648998119
	QUAD $0x6d9ccd05d0000000 // .quad 7898413271349198848
	QUAD $0x8f7e32ce7bea5c6f // .quad -8106986416796705681
	QUAD $0xe4820023a2000000 // .quad -1981020733047832576
	QUAD $0xb35dbf821ae4f38b // .quad -5522047002568494197
	QUAD $0xdda2802c8a800000 // .quad -2476275916309790720
	QUAD $0xe0352f62a19e306e // .quad -2290872734783229842
	QUAD $0xd50b2037ad200000 // .quad -3095344895387238400
	QUAD $0x8c213d9da502de45 // .quad -8349324486880600507
	QUAD $0x4526f422cc340000 // .quad 4982938468024057856
	QUAD $0xaf298d050e4395d6 // .quad -5824969590173362730
	QUAD $0x9670b12b7f410000 // .quad -7606384970252091392
	QUAD $0xdaf3f04651d47b4c // .quad -2669525969289315508
	QUAD $0x3c0cdd765f114000 // .quad 4327076842467049472
	QUAD $0x88d8762bf324cd0f // .quad -8585982758446904049
	QUAD $0xa5880a69fb6ac800 // .quad -6518949010312869888
	QUAD $0xab0e93b6efee0053 // .quad -6120792429631242157
	QUAD $0x8eea0d047a457a00 // .quad -8148686262891087360
	QUAD $0xd5d238a4abe98068 // .quad -3039304518611664792
	QUAD $0x72a4904598d6d880 // .quad 8260886245095692416
	QUAD $0x85a36366eb71f041 // .quad -8817094351773372351
	QUAD $0x47a6da2b7f864750 // .quad 5163053903184807760
	QUAD $0xa70c3c40a64e6c51 // .quad -6409681921289327535
	QUAD $0x999090b65f67d924 // .quad -7381240676301154012
	QUAD $0xd0cf4b50cfe20765 // .quad -3400416383184271515
	QUAD $0xfff4b4e3f741cf6d // .quad -3178808521666707
	QUAD $0x82818f1281ed449f // .quad -9042789267131251553
	QUAD $0xbff8f10e7a8921a5 // .quad -4613672773753429595
	QUAD $0xa321f2d7226895c7 // .quad -6691800565486676537
	QUAD $0xaff72d52192b6a0e // .quad -5767090967191786994
	QUAD $0xcbea6f8ceb02bb39 // .quad -3753064688430957767
	QUAD $0x9bf4f8a69f764491 // .quad -7208863708989733743
	QUAD $0xfee50b7025c36a08 // .quad -79644842111309304
	QUAD $0x02f236d04753d5b5 // .quad 212292400617608629
	QUAD $0x9f4f2726179a2245 // .quad -6967307053960650171
	QUAD $0x01d762422c946591 // .quad 132682750386005393
	QUAD $0xc722f0ef9d80aad6 // .quad -4097447799023424810
	QUAD $0x424d3ad2b7b97ef6 // .quad 4777539456409894646
	QUAD $0xf8ebad2b84e0d58b // .quad -510123730351893109
	QUAD $0xd2e0898765a7deb3 // .quad -3251447716342407501
	QUAD $0x9b934c3b330c8577 // .quad -7236356359111015049
	QUAD $0x63cc55f49f88eb30 // .quad 7191217214140771120
	QUAD $0xc2781f49ffcfa6d5 // .quad -4433759430461380907
	QUAD $0x3cbf6b71c76b25fc // .quad 4377335499248575996
	QUAD $0xf316271c7fc3908a // .quad -930513269649338230
	QUAD $0x8bef464e3945ef7b // .quad -8363388681221443717
	QUAD $0x97edd871cfda3a56 // .quad -7499099821171918250
	QUAD $0x97758bf0e3cbb5ad // .quad -7532960934977096275
	QUAD $0xbde94e8e43d0c8ec // .quad -4762188758037509908
	QUAD $0x3d52eeed1cbea318 // .quad 4418856886560793368
	QUAD $0xed63a231d4c4fb27 // .quad -1341049929119499481
	QUAD $0x4ca7aaa863ee4bde // .quad 5523571108200991710
	QUAD $0x945e455f24fb1cf8 // .quad -7755685233340769032
	QUAD $0x8fe8caa93e74ef6b // .quad -8076983103442849941
	QUAD $0xb975d6b6ee39e436 // .quad -5082920523248573386
	QUAD $0xb3e2fd538e122b45 // .quad -5484542860876174523
	QUAD $0xe7d34c64a9c85d44 // .quad -1741964635633328828
	QUAD $0x60dbbca87196b617 // .quad 6979379479186945559
	QUAD $0x90e40fbeea1d3a4a // .quad -8006256924911912374
	QUAD $0xbc8955e946fe31ce // .quad -4861259862362934834
	QUAD $0xb51d13aea4a488dd // .quad -5396135137712502563
	QUAD $0x6babab6398bdbe42 // .quad 7758483227328495170
	QUAD $0xe264589a4dcdab14 // .quad -2133482903713240300
	QUAD $0xc696963c7eed2dd2 // .quad -4136954021121544750
	QUAD $0x8d7eb76070a08aec // .quad -8250955842461857044
	QUAD $0xfc1e1de5cf543ca3 // .quad -279753253987271517
	QUAD $0xb0de65388cc8ada8 // .quad -5702008784649933400
	QUAD $0x3b25a55f43294bcc // .quad 4261994450943298508
	QUAD $0xdd15fe86affad912 // .quad -2515824962385028846
	QUAD $0x49ef0eb713f39ebf // .quad 5327493063679123135
	QUAD $0x8a2dbf142dfcc7ab // .quad -8489919629131724885
	QUAD $0x6e3569326c784338 // .quad 7941369183226839864
	QUAD $0xacb92ed9397bf996 // .quad -6000713517987268202
	QUAD $0x49c2c37f07965405 // .quad 5315025460606161925
	QUAD $0xd7e77a8f87daf7fb // .quad -2889205879056697349
	QUAD $0xdc33745ec97be907 // .quad -2579590211097073401
	QUAD $0x86f0ac99b4e8dafd // .quad -8723282702051517699
	QUAD $0x69a028bb3ded71a4 // .quad 7611128154919104932
	QUAD $0xa8acd7c0222311bc // .quad -6292417359137009220
	QUAD $0xc40832ea0d68ce0d // .quad -4321147861633282547
	QUAD $0xd2d80db02aabd62b // .quad -3253835680493873621
	QUAD $0xf50a3fa490c30191 // .quad -789748808614215279
	QUAD $0x83c7088e1aab65db // .quad -8951176327949752869
	QUAD $0x792667c6da79e0fb // .quad 8729779031470891259
	QUAD $0xa4b8cab1a1563f52 // .quad -6577284391509803182
	QUAD $0x577001b891185939 // .quad 6300537770911226169
	QUAD $0xcde6fd5e09abcf26 // .quad -3609919470959866074
	QUAD $0xed4c0226b55e6f87 // .quad -1347699823215743097
	QUAD $0x80b05e5ac60b6178 // .quad -9173728696990998152
	QUAD $0x544f8158315b05b5 // .quad 6075216638131242421
	QUAD $0xa0dc75f1778e39d6 // .quad -6855474852811359786
	QUAD $0x696361ae3db1c722 // .quad 7594020797664053026
	QUAD $0xc913936dd571c84c // .quad -3957657547586811828
	QUAD $0x03bc3a19cd1e38ea // .quad 269153960225290474
	QUAD $0xfb5878494ace3a5f // .quad -335385916056126881
	QUAD $0x04ab48a04065c724 // .quad 336442450281613092
	QUAD $0x9d174b2dcec0e47b // .quad -7127145225176161157
	QUAD $0x62eb0d64283f9c77 // .quad 7127805559067090039
	QUAD $0xc45d1df942711d9a // .quad -4297245513042813542
	QUAD $0x3ba5d0bd324f8395 // .quad 4298070930406474645
	QUAD $0xf5746577930d6500 // .quad -759870872876129024
	QUAD $0xca8f44ec7ee3647a // .quad -3850783373846682502
	QUAD $0x9968bf6abbe85f20 // .quad -7392448323188662496
	QUAD $0x7e998b13cf4e1ecc // .quad 9122475437414293196
	QUAD $0xbfc2ef456ae276e8 // .quad -4628874385558440216
	QUAD $0x9e3fedd8c321a67f // .quad -7043649776941685121
	QUAD $0xefb3ab16c59b14a2 // .quad -1174406963520662366
	QUAD $0xc5cfe94ef3ea101f // .quad -4192876202749718497
	QUAD $0x95d04aee3b80ece5 // .quad -7651533379841495835
	QUAD $0xbba1f1d158724a13 // .quad -4926390635932268013
	QUAD $0xbb445da9ca61281f // .quad -4952730706374481889
	QUAD $0x2a8a6e45ae8edc98 // .quad 3065383741939440792
	QUAD $0xea1575143cf97226 // .quad -1579227364540714458
	QUAD $0xf52d09d71a3293be // .quad -779956341003086914
	QUAD $0x924d692ca61be758 // .quad -7904546130479028392
	QUAD $0x593c2626705f9c57 // .quad 6430056314514152535
	QUAD $0xb6e0c377cfa2e12e // .quad -5268996644671397586
	QUAD $0x6f8b2fb00c77836d // .quad 8037570393142690669
	QUAD $0xe498f455c38b997a // .quad -1974559787411859078
	QUAD $0x0b6dfb9c0f956448 // .quad 823590954573587528
	QUAD $0x8edf98b59a373fec // .quad -8151628894773493780
	QUAD $0x4724bd4189bd5ead // .quad 5126430365035880109
	QUAD $0xb2977ee300c50fe7 // .quad -5577850100039479321
	QUAD $0x58edec91ec2cb658 // .quad 6408037956294850136
	QUAD $0xdf3d5e9bc0f653e1 // .quad -2360626606621961247
	QUAD $0x2f2967b66737e3ee // .quad 3398361426941174766
	QUAD $0x8b865b215899f46c // .quad -8392920656779807636
	QUAD $0xbd79e0d20082ee75 // .quad -4793553135802847627
	QUAD $0xae67f1e9aec07187 // .quad -5879464802547371641
	QUAD $0xecd8590680a3aa12 // .quad -1380255401326171630
	QUAD $0xda01ee641a708de9 // .quad -2737644984756826647
	QUAD $0xe80e6f4820cc9496 // .quad -1725319251657714538
	QUAD $0x884134fe908658b2 // .quad -8628557143114098510
	QUAD $0x3109058d147fdcde // .quad 3533361486141316318
	QUAD $0xaa51823e34a7eede // .quad -6174010410465235234
	QUAD $0xbd4b46f0599fd416 // .quad -4806670179178130410
	QUAD $0xd4e5e2cdc1d1ea96 // .quad -3105826994654156138
	QUAD $0x6c9e18ac7007c91b // .quad 7826720331309500699
	QUAD $0x850fadc09923329e // .quad -8858670899299929442
	QUAD $0x03e2cf6bc604ddb1 // .quad 280014188641050033
	QUAD $0xa6539930bf6bff45 // .quad -6461652605697523899
	QUAD $0x84db8346b786151d // .quad -8873354301053463267
	QUAD $0xcfe87f7cef46ff16 // .quad -3465379738694516970
	QUAD $0xe612641865679a64 // .quad -1868320839462053276
	QUAD $0x81f14fae158c5f6e // .quad -9083391364325154962
	QUAD $0x4fcb7e8f3f60c07f // .quad 5749828502977298559
	QUAD $0xa26da3999aef7749 // .quad -6742553186979055799
	QUAD $0xe3be5e330f38f09e // .quad -2036086408133152610
	QUAD $0xcb090c8001ab551c // .quad -3816505465296431844
	QUAD $0x5cadf5bfd3072cc6 // .quad 6678264026688335046
	QUAD $0xfdcb4fa002162a63 // .quad -158945813193151901
	QUAD $0x73d9732fc7c8f7f7 // .quad 8347830033360418807
	QUAD $0x9e9f11c4014dda7e // .quad -7016870160886801794
	QUAD $0x2867e7fddcdd9afb // .quad 2911550761636567803
	QUAD $0xc646d63501a1511d // .quad -4159401682681114339
	QUAD $0xb281e1fd541501b9 // .quad -5583933584809066055
	QUAD $0xf7d88bc24209a565 // .quad -587566084924005019
	QUAD $0x1f225a7ca91a4227 // .quad 2243455055843443239
	QUAD $0x9ae757596946075f // .quad -7284757830718584993
	QUAD $0x3375788de9b06959 // .quad 3708002419115845977
	QUAD $0xc1a12d2fc3978937 // .quad -4494261269970843337
	QUAD $0x0052d6b1641c83af // .quad 23317005467419567
	QUAD $0xf209787bb47d6b84 // .quad -1006140569036166268
	QUAD $0xc0678c5dbd23a49b // .quad -4582539761593113445
	QUAD $0x9745eb4d50ce6332 // .quad -7546366883288685774
	QUAD $0xf840b7ba963646e1 // .quad -558244341782001951
	QUAD $0xbd176620a501fbff // .quad -4821272585683469313
	QUAD $0xb650e5a93bc3d899 // .quad -5309491445654890343
	QUAD $0xec5d3fa8ce427aff // .quad -1414904713676948737
	QUAD $0xa3e51f138ab4cebf // .quad -6636864307068612929
	QUAD $0x93ba47c980e98cdf // .quad -7801844473689174817
	QUAD $0xc66f336c36b10138 // .quad -4148040191917883080
	QUAD $0xb8a8d9bbe123f017 // .quad -5140619573684080617
	QUAD $0xb80b0047445d4185 // .quad -5185050239897353851
	QUAD $0xe6d3102ad96cec1d // .quad -1814088448677712867
	QUAD $0xa60dc059157491e6 // .quad -6481312799871692314
	QUAD $0x9043ea1ac7e41392 // .quad -8051334308064652398
	QUAD $0x87c89837ad68db30 // .quad -8662506518347195600
	QUAD $0xb454e4a179dd1877 // .quad -5452481866653427593
	QUAD $0x29babe4598c311fc // .quad 3006924907348169212
	QUAD $0xe16a1dc9d8545e94 // .quad -2203916314889396588
	QUAD $0xf4296dd6fef3d67b // .quad -853029884242176389
	QUAD $0x8ce2529e2734bb1d // .quad -8294976724446954723
	QUAD $0x1899e4a65f58660d // .quad 1772699331562333709
	QUAD $0xb01ae745b101e9e4 // .quad -5757034887131305500
	QUAD $0x5ec05dcff72e7f90 // .quad 6827560182880305040
	QUAD $0xdc21a1171d42645d // .quad -2584607590486743971
	QUAD $0x76707543f4fa1f74 // .quad 8534450228600381300
	QUAD $0x899504ae72497eba // .quad -8532908771695296838
	QUAD $0x6a06494a791c53a9 // .quad 7639874402088932265
	QUAD $0xabfa45da0edbde69 // .quad -6054449946191733143
	QUAD $0x0487db9d17636893 // .quad 326470965756389523
	QUAD $0xd6f8d7509292d603 // .quad -2956376414312278525
	QUAD $0x45a9d2845d3c42b7 // .quad 5019774725622874807
	QUAD $0x865b86925b9bc5c2 // .quad -8765264286586255934
	QUAD $0x0b8a2392ba45a9b3 // .quad 831516194300602803
	QUAD $0xa7f26836f282b732 // .quad -6344894339805432014
	QUAD $0x8e6cac7768d7141f // .quad -8183976793979022305
	QUAD $0xd1ef0244af2364ff // .quad -3319431906329402113
	QUAD $0x3207d795430cd927 // .quad 3605087062808385831
	QUAD $0x8335616aed761f1f // .quad -8992173969096958177
	QUAD $0x7f44e6bd49e807b9 // .quad 9170708441896323001
	QUAD $0xa402b9c5a8d3a6e7 // .quad -6628531442943809817
	QUAD $0x5f16206c9c6209a7 // .quad 6851699533943015847
	QUAD $0xcd036837130890a1 // .quad -3673978285252374367
	QUAD $0x36dba887c37a8c10 // .quad 3952938399001381904
	QUAD $0x802221226be55a64 // .quad -9213765455923815836
	QUAD $0xc2494954da2c978a // .quad -4446942528265218166
	QUAD $0xa02aa96b06deb0fd // .quad -6905520801477381891
	QUAD $0xf2db9baa10b7bd6d // .quad -946992141904134803
	QUAD $0xc83553c5c8965d3d // .quad -4020214983419339459
	QUAD $0x6f92829494e5acc8 // .quad 8039631859474607304
	QUAD $0xfa42a8b73abbf48c // .quad -413582710846786420
	QUAD $0xcb772339ba1f17fa // .quad -3785518230938904582
	QUAD $0x9c69a97284b578d7 // .quad -7176018221920323369
	QUAD $0xff2a760414536efc // .quad -60105885123121412
	QUAD $0xc38413cf25e2d70d // .quad -4358336758973016307
	QUAD $0xfef5138519684abb // .quad -75132356403901765
	QUAD $0xf46518c2ef5b8cd1 // .quad -836234930288882479
	QUAD $0x7eb258665fc25d6a // .quad 9129456591349898602
	QUAD $0x98bf2f79d5993802 // .quad -7440175859071633406
	QUAD $0xef2f773ffbd97a62 // .quad -1211618658047395230
	QUAD $0xbeeefb584aff8603 // .quad -4688533805412153853
	QUAD $0xaafb550ffacfd8fb // .quad -6126209340986631941
	QUAD $0xeeaaba2e5dbf6784 // .quad -1248981238337804412
	QUAD $0x95ba2a53f983cf39 // .quad -7657761676233289927
	QUAD $0x952ab45cfa97a0b2 // .quad -7698142301602209614
	QUAD $0xdd945a747bf26184 // .quad -2480258038432112252
	QUAD $0xba756174393d88df // .quad -5010991858575374113
	QUAD $0x94f971119aeef9e5 // .quad -7712008566467528219
	QUAD $0xe912b9d1478ceb17 // .quad -1652053804791829737
	QUAD $0x7a37cd5601aab85e // .quad 8806733365625141342
	QUAD $0x91abb422ccb812ee // .quad -7950062655635975442
	QUAD $0xac62e055c10ab33b // .quad -6025006692552756421
	QUAD $0xb616a12b7fe617aa // .quad -5325892301117581398
	QUAD $0x577b986b314d600a // .quad 6303799689591218186
	QUAD $0xe39c49765fdf9d94 // .quad -2045679357969588844
	QUAD $0xed5a7e85fda0b80c // .quad -1343622424865753076
	QUAD $0x8e41ade9fbebc27d // .quad -8196078626372074883
	QUAD $0x14588f13be847308 // .quad 1466078993672598280
	QUAD $0xb1d219647ae6b31c // .quad -5633412264537705700
	QUAD $0x596eb2d8ae258fc9 // .quad 6444284760518135753
	QUAD $0xde469fbd99a05fe3 // .quad -2430079312244744221
	QUAD $0x6fca5f8ed9aef3bc // .quad 8055355950647669692
	QUAD $0x8aec23d680043bee // .quad -8436328597794046994
	QUAD $0x25de7bb9480d5855 // .quad 2728754459941099605
	QUAD $0xada72ccc20054ae9 // .quad -5933724728815170839
	QUAD $0xaf561aa79a10ae6b // .quad -5812428961928401301
	QUAD $0xd910f7ff28069da4 // .quad -2805469892591575644
	QUAD $0x1b2ba1518094da05 // .quad 1957835834444274181
	QUAD $0x87aa9aff79042286 // .quad -8670947710510816634
	QUAD $0x90fb44d2f05d0843 // .quad -7999724640327104445
	QUAD $0xa99541bf57452b28 // .quad -6226998619711132888
	QUAD $0x353a1607ac744a54 // .quad 3835402254873283156
	QUAD $0xd3fa922f2d1675f2 // .quad -3172062256211528206
	QUAD $0x42889b8997915ce9 // .quad 4794252818591603945
	QUAD $0x847c9b5d7c2e09b7 // .quad -8900067937773286985
	QUAD $0x69956135febada12 // .quad 7608094030047140370
	QUAD $0xa59bc234db398c25 // .quad -6513398903789220827
	QUAD $0x43fab9837e699096 // .quad 4898431519131537558
	QUAD $0xcf02b2c21207ef2e // .quad -3530062611309138130
	QUAD $0x94f967e45e03f4bc // .quad -7712018656367741764
	QUAD $0x8161afb94b44f57d // .quad -9123818159709293187
	QUAD $0x1d1be0eebac278f6 // .quad 2097517367411243254
	QUAD $0xa1ba1ba79e1632dc // .quad -6793086681209228580
	QUAD $0x6462d92a69731733 // .quad 7233582727691441971
	QUAD $0xca28a291859bbf93 // .quad -3879672333084147821
	QUAD $0x7d7b8f7503cfdcff // .quad 9041978409614302463
	QUAD $0xfcb2cb35e702af78 // .quad -237904397927796872
	QUAD $0x5cda735244c3d43f // .quad 6690786993590490175
	QUAD $0x9defbf01b061adab // .quad -7066219276345954901
	QUAD $0x3a0888136afa64a8 // .quad 4181741870994056360
	QUAD $0xc56baec21c7a1916 // .quad -4221088077005055722
	QUAD $0x088aaa1845b8fdd1 // .quad 615491320315182545
	QUAD $0xf6c69a72a3989f5b // .quad -664674077828931749
	QUAD $0x8aad549e57273d46 // .quad -8454007886460797626
	QUAD $0x9a3c2087a63f6399 // .quad -7332950326284164199
	QUAD $0x36ac54e2f678864c // .quad 3939617107816777292
	QUAD $0xc0cb28a98fcf3c7f // .quad -4554501889427817345
	QUAD $0x84576a1bb416a7de // .quad -8910536670511192098
	QUAD $0xf0fdf2d3f3c30b9f // .quad -1081441343357383777
	QUAD $0x656d44a2a11c51d6 // .quad 7308573235570561494
	QUAD $0x969eb7c47859e743 // .quad -7593429867239446717
	QUAD $0x9f644ae5a4b1b326 // .quad -6961356773836868826
	QUAD $0xbc4665b596706114 // .quad -4880101315621920492
	QUAD $0x873d5d9f0dde1fef // .quad -8701695967296086033
	QUAD $0xeb57ff22fc0c7959 // .quad -1488440626100012711
	QUAD $0xa90cb506d155a7eb // .quad -6265433940692719637
	QUAD $0x9316ff75dd87cbd8 // .quad -7847804418953589800
	QUAD $0x09a7f12442d588f3 // .quad 695789805494438131
	QUAD $0xb7dcbf5354e9bece // .quad -5198069505264599346
	QUAD $0x0c11ed6d538aeb30 // .quad 869737256868047664
	QUAD $0xe5d3ef282a242e81 // .quad -1885900863153361279
	QUAD $0x8f1668c8a86da5fb // .quad -8136200465769716229
	QUAD $0x8fa475791a569d10 // .quad -8096217067111932656
	QUAD $0xf96e017d694487bd // .quad -473439272678684739
	QUAD $0xb38d92d760ec4455 // .quad -5508585315462527915
	QUAD $0x37c981dcc395a9ad // .quad 4019886927579031981
	QUAD $0xe070f78d3927556a // .quad -2274045625900771990
	QUAD $0x85bbe253f47b1418 // .quad -8810199395808373736
	QUAD $0x8c469ab843b89562 // .quad -8338807543829064350
	QUAD $0x93956d7478ccec8f // .quad -7812217631593927537
	QUAD $0xaf58416654a6babb // .quad -5811823411358942533
	QUAD $0x387ac8d1970027b3 // .quad 4069786015789754291
	QUAD $0xdb2e51bfe9d0696a // .quad -2653093245771290262
	QUAD $0x06997b05fcc0319f // .quad 475546501309804959
	QUAD $0x88fcf317f22241e2 // .quad -8575712306248138270
	QUAD $0x441fece3bdf81f04 // .quad 4908902581746016004
	QUAD $0xab3c2fddeeaad25a // .quad -6107954364382784934
	QUAD $0xd527e81cad7626c4 // .quad -3087243809672255804
	QUAD $0xd60b3bd56a5586f1 // .quad -3023256937051093263
	QUAD $0x8a71e223d8d3b075 // .quad -8470740780517707659
	QUAD $0x85c7056562757456 // .quad -8807064613298015146
	QUAD $0xf6872d5667844e4a // .quad -682526969396179382
	QUAD $0xa738c6bebb12d16c // .quad -6397144748195131028
	QUAD $0xb428f8ac016561dc // .quad -5464844730172612132
	QUAD $0xd106f86e69d785c7 // .quad -3384744916816525881
	QUAD $0xe13336d701beba53 // .quad -2219369894288377261
	QUAD $0x82a45b450226b39c // .quad -9032994600651410532
	QUAD $0xecc0024661173474 // .quad -1387106183930235788
	QUAD $0xa34d721642b06084 // .quad -6679557232386875260
	QUAD $0x27f002d7f95d0191 // .quad 2877803288514593169
	QUAD $0xcc20ce9bd35c78a5 // .quad -3737760522056206171
	QUAD $0x31ec038df7b441f5 // .quad 3597254110643241461
	QUAD $0xff290242c83396ce // .quad -60514634142869810
	QUAD $0x7e67047175a15272 // .quad 9108253656731439730
	QUAD $0x9f79a169bd203e41 // .quad -6955350673980375487
	QUAD $0x0f0062c6e984d387 // .quad 1080972517029761927
	QUAD $0xc75809c42c684dd1 // .quad -4082502324048081455
	QUAD $0x52c07b78a3e60869 // .quad 5962901664714590313
	QUAD $0xf92e0c3537826145 // .quad -491441886632713915
	QUAD $0xa7709a56ccdf8a83 // .quad -6381430974388925821
	QUAD $0x9bbcc7a142b17ccb // .quad -7224680206786528053
	QUAD $0x88a66076400bb692 // .quad -8600080377420466542
	QUAD $0xc2abf989935ddbfe // .quad -4419164240055772162
	QUAD $0x6acff893d00ea436 // .quad 7696643601933968438
	QUAD $0xf356f7ebf83552fe // .quad -912269281642327298
	QUAD $0x0583f6b8c4124d44 // .quad 397432465562684740
	QUAD $0x98165af37b2153de // .quad -7487697328667536418
	QUAD $0xc3727a337a8b704b // .quad -4363290727450709941
	QUAD $0xbe1bf1b059e9a8d6 // .quad -4747935642407032618
	QUAD $0x744f18c0592e4c5d // .quad 8380944645968776285
	QUAD $0xeda2ee1c7064130c // .quad -1323233534581402868
	QUAD $0x1162def06f79df74 // .quad 1252808770606194548
	QUAD $0x9485d4d1c63e8be7 // .quad -7744549986754458649
	QUAD $0x8addcb5645ac2ba9 // .quad -8440366555225904215
	QUAD $0xb9a74a0637ce2ee1 // .quad -5069001465015685407
	QUAD $0x6d953e2bd7173693 // .quad 7896285879677171347
	QUAD $0xe8111c87c5c1ba99 // .quad -1724565812842218855
	QUAD $0xc8fa8db6ccdd0438 // .quad -3964700705685699528
	QUAD $0x910ab1d4db9914a0 // .quad -7995382660667468640
	QUAD $0x1d9c9892400a22a3 // .quad 2133748077373825699
	QUAD $0xb54d5e4a127f59c8 // .quad -5382542307406947896
	QUAD $0x2503beb6d00cab4c // .quad 2667185096717282124
	QUAD $0xe2a0b5dc971f303a // .quad -2116491865831296966
	QUAD $0x2e44ae64840fd61e // .quad 3333981370896602654
	QUAD $0x8da471a9de737e24 // .quad -8240336443785642460
	QUAD $0x5ceaecfed289e5d3 // .quad 6695424375237764563
	QUAD $0xb10d8e1456105dad // .quad -5688734536304665171
	QUAD $0x7425a83e872c5f48 // .quad 8369280469047205704
	QUAD $0xdd50f1996b947518 // .quad -2499232151953443560
	QUAD $0xd12f124e28f7771a // .quad -3373457468973156582
	QUAD $0x8a5296ffe33cc92f // .quad -8479549122611984081
	QUAD $0x82bd6b70d99aaa70 // .quad -9025939945749304720
	QUAD $0xace73cbfdc0bfb7b // .quad -5987750384837592197
	QUAD $0x636cc64d1001550c // .quad 7164319141522920716
	QUAD $0xd8210befd30efa5a // .quad -2873001962619602342
	QUAD $0x3c47f7e05401aa4f // .quad 4343712908476262991
	QUAD $0x8714a775e3e95c78 // .quad -8713155254278333320
	QUAD $0x65acfaec34810a72 // .quad 7326506586225052274
	QUAD $0xa8d9d1535ce3b396 // .quad -6279758049420528746
	QUAD $0x7f1839a741a14d0e // .quad 9158133232781315342
	QUAD $0xd31045a8341ca07c // .quad -3238011543348273028
	QUAD $0x1ede48111209a051 // .quad 2224294504121868369
	QUAD $0x83ea2b892091e44d // .quad -8941286242233752499
	QUAD $0x934aed0aab460433 // .quad -7833187971778608077
	QUAD $0xa4e4b66b68b65d60 // .quad -6564921784364802720
	QUAD $0xf81da84d56178540 // .quad -568112927868484288
	QUAD $0xce1de40642e3f4b9 // .quad -3594466212028615495
	QUAD $0x36251260ab9d668f // .quad 3901544858591782543
	QUAD $0x80d2ae83e9ce78f3 // .quad -9164070410158966541
	QUAD $0xc1d72b7c6b42601a // .quad -4479063491021217766
	QUAD $0xa1075a24e4421730 // .quad -6843401994271320272
	QUAD $0xb24cf65b8612f820 // .quad -5598829363776522208
	QUAD $0xc94930ae1d529cfc // .quad -3942566474411762436
	QUAD $0xdee033f26797b628 // .quad -2386850686293264856
	QUAD $0xfb9b7cd9a4a7443c // .quad -316522074587315140
	QUAD $0x169840ef017da3b2 // .quad 1628122660560806834
	QUAD $0x9d412e0806e88aa5 // .quad -7115355324258153819
	QUAD $0x8e1f289560ee864f // .quad -8205795374004271537
	QUAD $0xc491798a08a2ad4e // .quad -4282508136895304370
	QUAD $0xf1a6f2bab92a27e3 // .quad -1033872180650563613
	QUAD $0xf5b5d7ec8acb58a2 // .quad -741449152691742558
	QUAD $0xae10af696774b1dc // .quad -5904026244240592420
	QUAD $0x9991a6f3d6bf1765 // .quad -7380934748073420955
	QUAD $0xacca6da1e0a8ef2a // .quad -5995859411864064214
	QUAD $0xbff610b0cc6edd3f // .quad -4614482416664388289
	QUAD $0x17fd090a58d32af4 // .quad 1728547772024695540
	QUAD $0xeff394dcff8a948e // .quad -1156417002403097458
	QUAD $0xddfc4b4cef07f5b1 // .quad -2451001303396518479
	QUAD $0x95f83d0a1fb69cd9 // .quad -7640289654143017767
	QUAD $0x4abdaf101564f98f // .quad 5385653213018257807
	QUAD $0xbb764c4ca7a4440f // .quad -4938676049251384305
	QUAD $0x9d6d1ad41abe37f2 // .quad -7102991539009341454
	QUAD $0xea53df5fd18d5513 // .quad -1561659043136842477
	QUAD $0x84c86189216dc5ee // .quad -8878739423761676818
	QUAD $0x92746b9be2f8552c // .quad -7893565929601608404
	QUAD $0x32fd3cf5b4e49bb5 // .quad 3674159897003727797
	QUAD $0xb7118682dbb66a77 // .quad -5255271393574622601
	QUAD $0x3fbc8c33221dc2a2 // .quad 4592699871254659746
	QUAD $0xe4d5e82392a40515 // .quad -1957403223540890347
	QUAD $0x0fabaf3feaa5334b // .quad 1129188820640936779
	QUAD $0x8f05b1163ba6832d // .quad -8140906042354138323
	QUAD $0x29cb4d87f2a7400f // .quad 3011586022114279439
	QUAD $0xb2c71d5bca9023f8 // .quad -5564446534515285000
	QUAD $0x743e20e9ef511013 // .quad 8376168546070237203
	QUAD $0xdf78e4b2bd342cf6 // .quad -2343872149716718346
	QUAD $0x914da9246b255417 // .quad -7976533391121755113
	QUAD $0x8bab8eefb6409c1a // .quad -8382449121214030822
	QUAD $0x1ad089b6c2f7548f // .quad 1932195658189984911
	QUAD $0xae9672aba3d0c320 // .quad -5866375383090150624
	QUAD $0xa184ac2473b529b2 // .quad -6808127464117294670
	QUAD $0xda3c0f568cc4f3e8 // .quad -2721283210435300376
	QUAD $0xc9e5d72d90a2741f // .quad -3898473311719230433
	QUAD $0x8865899617fb1871 // .quad -8618331034163144591
	QUAD $0x7e2fa67c7a658893 // .quad 9092669226243950739
	QUAD $0xaa7eebfb9df9de8d // .quad -6161227774276542835
	QUAD $0xddbb901b98feeab8 // .quad -2469221522477225288
	QUAD $0xd51ea6fa85785631 // .quad -3089848699418290639
	QUAD $0x552a74227f3ea566 // .quad 6136845133758244198
	QUAD $0x8533285c936b35de // .quad -8848684464777513506
	QUAD $0xd53a88958f872760 // .quad -3082000819042179232
	QUAD $0xa67ff273b8460356 // .quad -6449169562544503978
	QUAD $0x8a892abaf368f138 // .quad -8464187042230111944
	QUAD $0xd01fef10a657842c // .quad -3449775934753242068
	QUAD $0x2d2b7569b0432d86 // .quad 3254824252494523782
	QUAD $0x8213f56a67f6b29b // .quad -9073638986861858149
	QUAD $0x9c3b29620e29fc74 // .quad -7189106879045698444
	QUAD $0xa298f2c501f45f42 // .quad -6730362715149934782
	QUAD $0x8349f3ba91b47b90 // .quad -8986383598807123056
	QUAD $0xcb3f2f7642717713 // .quad -3801267375510030573
	QUAD $0x241c70a936219a74 // .quad 2602078556773259892
	QUAD $0xfe0efb53d30dd4d7 // .quad -139898200960150313
	QUAD $0xed238cd383aa0111 // .quad -1359087822460813039
	QUAD $0x9ec95d1463e8a506 // .quad -7004965403241175802
	QUAD $0xf4363804324a40ab // .quad -849429889038008149
	QUAD $0xc67bb4597ce2ce48 // .quad -4144520735624081848
	QUAD $0xb143c6053edcd0d6 // .quad -5673473379724898090
	QUAD $0xf81aa16fdc1b81da // .quad -568964901102714406
	QUAD $0xdd94b7868e94050b // .quad -2480155706228734709
	QUAD $0x9b10a4e5e9913128 // .quad -7273132090830278360
	QUAD $0xca7cf2b4191c8327 // .quad -3855940325606653145
	QUAD $0xc1d4ce1f63f57d72 // .quad -4479729095110460046
	QUAD $0xfd1c2f611f63a3f1 // .quad -208239388580928527
	QUAD $0xf24a01a73cf2dccf // .quad -987975350460687153
	QUAD $0xbc633b39673c8ced // .quad -4871985254153548563
	QUAD $0x976e41088617ca01 // .quad -7535013621679011327
	QUAD $0xd5be0503e085d814 // .quad -3044990783845967852
	QUAD $0xbd49d14aa79dbc82 // .quad -4807081008671376254
	QUAD $0x4b2d8644d8a74e19 // .quad 5417133557047315993
	QUAD $0xec9c459d51852ba2 // .quad -1397165242411832414
	QUAD $0xddf8e7d60ed1219f // .quad -2451955090545630817
	QUAD $0x93e1ab8252f33b45 // .quad -7790757304148477115
	QUAD $0xcabb90e5c942b504 // .quad -3838314940804713212
	QUAD $0xb8da1662e7b00a17 // .quad -5126760611758208489
	QUAD $0x3d6a751f3b936244 // .quad 4425478360848884292
	QUAD $0xe7109bfba19c0c9d // .quad -1796764746270372707
	QUAD $0x0cc512670a783ad5 // .quad 920161932633717461
	QUAD $0x906a617d450187e2 // .quad -8040506994060064798
	QUAD $0x27fb2b80668b24c6 // .quad 2880944217109767366
	QUAD $0xb484f9dc9641e9da // .quad -5438947724147693094
	QUAD $0xb1f9f660802dedf7 // .quad -5622191765467566601
	QUAD $0xe1a63853bbd26451 // .quad -2186998636757228463
	QUAD $0x5e7873f8a0396974 // .quad 6807318348447705460
	QUAD $0x8d07e33455637eb2 // .quad -8284403175614349646
	QUAD $0xdb0b487b6423e1e9 // .quad -2662955059861265943
	QUAD $0xb049dc016abc5e5f // .quad -5743817951090549153
	QUAD $0x91ce1a9a3d2cda63 // .quad -7940379843253970333
	QUAD $0xdc5c5301c56b75f7 // .quad -2568086420435798537
	QUAD $0x7641a140cc7810fc // .quad 8521269269642088700
	QUAD $0x89b9b3e11b6329ba // .quad -8522583040413455942
	QUAD $0xa9e904c87fcb0a9e // .quad -6203421752542164322
	QUAD $0xac2820d9623bf429 // .quad -6041542782089432023
	QUAD $0x546345fa9fbdcd45 // .quad 6080780864604458309
	QUAD $0xd732290fbacaf133 // .quad -2940242459184402125
	QUAD $0xa97c177947ad4096 // .quad -6234081974526590826
	QUAD $0x867f59a9d4bed6c0 // .quad -8755180564631333184
	QUAD $0x49ed8eabcccc485e // .quad 5327070802775656542
	QUAD $0xa81f301449ee8c70 // .quad -6332289687361778576
	QUAD $0x5c68f256bfff5a75 // .quad 6658838503469570677
	QUAD $0xd226fc195c6a2f8c // .quad -3303676090774835316
	QUAD $0x73832eec6fff3112 // .quad 8323548129336963346
	QUAD $0x83585d8fd9c25db7 // .quad -8982326584375353929
	QUAD $0xc831fd53c5ff7eac // .quad -4021154456019173716
	QUAD $0xa42e74f3d032f525 // .quad -6616222212041804507
	QUAD $0xba3e7ca8b77f5e56 // .quad -5026443070023967146
	QUAD $0xcd3a1230c43fb26f // .quad -3658591746624867729
	QUAD $0x28ce1bd2e55f35ec // .quad 2940318199324816876
	QUAD $0x80444b5e7aa7cf85 // .quad -9204148869281624187
	QUAD $0x7980d163cf5b81b4 // .quad 8755227902219092404
	QUAD $0xa0555e361951c366 // .quad -6893500068174642330
	QUAD $0xd7e105bcc3326220 // .quad -2891023177508298208
	QUAD $0xc86ab5c39fa63440 // .quad -4005189066790915008
	QUAD $0x8dd9472bf3fefaa8 // .quad -8225464990312760664
	QUAD $0xfa856334878fc150 // .quad -394800315061255856
	QUAD $0xb14f98f6f0feb952 // .quad -5670145219463562926
	QUAD $0x9c935e00d4b9d8d2 // .quad -7164279224554366766
	QUAD $0x6ed1bf9a569f33d4 // .quad 7985374283903742932
	QUAD $0xc3b8358109e84f07 // .quad -4343663012265570553
	QUAD $0x0a862f80ec4700c9 // .quad 758345818024902857
	QUAD $0xf4a642e14c6262c8 // .quad -817892746904575288
	QUAD $0xcd27bb612758c0fb // .quad -3663753745896259333
	QUAD $0x98e7e9cccfbd7dbd // .quad -7428711994456441411
	QUAD $0x8038d51cb897789d // .quad -9207375118826243939
	QUAD $0xbf21e44003acdd2c // .quad -4674203974643163860
	QUAD $0xe0470a63e6bd56c4 // .quad -2285846861678029116
	QUAD $0xeeea5d5004981478 // .quad -1231068949876566920
	QUAD $0x1858ccfce06cac75 // .quad 1754377441329851509
	QUAD $0x95527a5202df0ccb // .quad -7686947121313936181
	QUAD $0x0f37801e0c43ebc9 // .quad 1096485900831157193
	QUAD $0xbaa718e68396cffd // .quad -4996997883215032323
	QUAD $0xd30560258f54e6bb // .quad -3241078642388441413
	QUAD $0xe950df20247c83fd // .quad -1634561335591402499
	QUAD $0x47c6b82ef32a206a // .quad 5172023733869224042
	QUAD $0x91d28b7416cdd27e // .quad -7939129862385708418
	QUAD $0x4cdc331d57fa5442 // .quad 5538357842881958978
	QUAD $0xb6472e511c81471d // .quad -5312226309554747619
	QUAD $0xe0133fe4adf8e953 // .quad -2300424733252327085
	QUAD $0xe3d8f9e563a198e5 // .quad -2028596868516046619
	QUAD $0x58180fddd97723a7 // .quad 6347841120289366951
	QUAD $0x8e679c2f5e44ff8f // .quad -8185402070463610993
	QUAD $0x570f09eaa7ea7649 // .quad 6273243709394548297
	QUAD $0xb201833b35d63f73 // .quad -5620066569652125837
	QUAD $0x2cd2cc6551e513db // .quad 3229868618315797467
	QUAD $0xde81e40a034bcf4f // .quad -2413397193637769393
	QUAD $0xf8077f7ea65e58d2 // .quad -574350245532641070
	QUAD $0x8b112e86420f6191 // .quad -8425902273664687727
	QUAD $0xfb04afaf27faf783 // .quad -358968903457900669
	QUAD $0xadd57a27d29339f6 // .quad -5920691823653471754
	QUAD $0x79c5db9af1f9b564 // .quad 8774660907532399972
	QUAD $0xd94ad8b1c7380874 // .quad -2789178761139451788
	QUAD $0x18375281ae7822bd // .quad 1744954097560724157
	QUAD $0x87cec76f1c830548 // .quad -8660765753353239224
	QUAD $0x8f2293910d0b15b6 // .quad -8132775725879323210
	QUAD $0xa9c2794ae3a3c69a // .quad -6214271173264161126
	QUAD $0xb2eb3875504ddb23 // .quad -5554283638921766109
	QUAD $0xd433179d9c8cb841 // .quad -3156152948152813503
	QUAD $0x5fa60692a46151ec // .quad 6892203506629956076
	QUAD $0x849feec281d7f328 // .quad -8890124620236590296
	QUAD $0xdbc7c41ba6bcd334 // .quad -2609901835997359308
	QUAD $0xa5c7ea73224deff3 // .quad -6500969756868349965
	QUAD $0x12b9b522906c0801 // .quad 1349308723430688769
	QUAD $0xcf39e50feae16bef // .quad -3514526177658049553
	QUAD $0xd768226b34870a01 // .quad -2925050114139026943
	QUAD $0x81842f29f2cce375 // .quad -9114107888677362827
	QUAD $0xe6a1158300d46641 // .quad -1828156321336891839
	QUAD $0xa1e53af46f801c53 // .quad -6780948842419315629
	QUAD $0x60495ae3c1097fd1 // .quad 6938176635183661009
	QUAD $0xca5e89b18b602368 // .quad -3864500034596756632
	QUAD $0x385bb19cb14bdfc5 // .quad 4061034775552188357
	QUAD $0xfcf62c1dee382c42 // .quad -218939024818557886
	QUAD $0x46729e03dd9ed7b6 // .quad 5076293469440235446
	QUAD $0x9e19db92b4e31ba9 // .quad -7054365918152680535
	QUAD $0x6c07a2c26a8346d2 // .quad 7784369436827535058

	// .p2align 4, 0x00
_VecShiftShuffles:
	QUAD $0x0706050403020100; QUAD $0x0f0e0d0c0b0a0908 // .ascii 16, '\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'
	QUAD $0x0807060504030201; QUAD $0xff0f0e0d0c0b0a09 // .ascii 16, '\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff'
	QUAD $0x0908070605040302; QUAD $0xffff0f0e0d0c0b0a // .ascii 16, '\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff'
	QUAD $0x0a09080706050403; QUAD $0xffffff0f0e0d0c0b // .ascii 16, '\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff'
	QUAD $0x0b0a090807060504; QUAD $0xffffffff0f0e0d0c // .ascii 16, '\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff'
	QUAD $0x0c0b0a0908070605; QUAD $0xffffffffff0f0e0d // .ascii 16, '\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff'
	QUAD $0x0d0c0b0a09080706; QUAD $0xffffffffffff0f0e // .ascii 16, '\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff'
	QUAD $0x0e0d0c0b0a090807; QUAD $0xffffffffffffff0f // .ascii 16, '\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0x0f0e0d0c0b0a0908; QUAD $0xffffffffffffffff // .ascii 16, '\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff\xff\xff'

	// .p2align 4, 0x00
__SingleQuoteTab:
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000030303030755c                           // .asciz 8, '\\u0000\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000031303030755c                           // .asciz 8, '\\u0001\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000032303030755c                           // .asciz 8, '\\u0002\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000033303030755c                           // .asciz 8, '\\u0003\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000034303030755c                           // .asciz 8, '\\u0004\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000035303030755c                           // .asciz 8, '\\u0005\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000036303030755c                           // .asciz 8, '\\u0006\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000037303030755c                           // .asciz 8, '\\u0007\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000038303030755c                           // .asciz 8, '\\u0008\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000745c                           // .asciz 8, '\\t\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x0000000000006e5c                           // .asciz 8, '\\n\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000062303030755c                           // .asciz 8, '\\u000b\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000063303030755c                           // .asciz 8, '\\u000c\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000725c                           // .asciz 8, '\\r\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000065303030755c                           // .asciz 8, '\\u000e\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000066303030755c                           // .asciz 8, '\\u000f\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000030313030755c                           // .asciz 8, '\\u0010\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000031313030755c                           // .asciz 8, '\\u0011\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000032313030755c                           // .asciz 8, '\\u0012\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000033313030755c                           // .asciz 8, '\\u0013\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000034313030755c                           // .asciz 8, '\\u0014\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000035313030755c                           // .asciz 8, '\\u0015\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000036313030755c                           // .asciz 8, '\\u0016\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000037313030755c                           // .asciz 8, '\\u0017\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000038313030755c                           // .asciz 8, '\\u0018\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000039313030755c                           // .asciz 8, '\\u0019\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000061313030755c                           // .asciz 8, '\\u001a\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000062313030755c                           // .asciz 8, '\\u001b\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000063313030755c                           // .asciz 8, '\\u001c\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000064313030755c                           // .asciz 8, '\\u001d\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000065313030755c                           // .asciz 8, '\\u001e\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000066313030755c                           // .asciz 8, '\\u001f\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000225c                           // .asciz 8, '\\"\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x0000000000005c5c                           // .asciz 8, '\\\\\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
__DoubleQuoteTab:
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0030303030755c5c                           // .asciz 8, '\\\\u0000\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0031303030755c5c                           // .asciz 8, '\\\\u0001\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0032303030755c5c                           // .asciz 8, '\\\\u0002\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0033303030755c5c                           // .asciz 8, '\\\\u0003\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0034303030755c5c                           // .asciz 8, '\\\\u0004\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0035303030755c5c                           // .asciz 8, '\\\\u0005\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0036303030755c5c                           // .asciz 8, '\\\\u0006\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0037303030755c5c                           // .asciz 8, '\\\\u0007\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0038303030755c5c                           // .asciz 8, '\\\\u0008\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x0000000000745c5c                           // .asciz 8, '\\\\t\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x00000000006e5c5c                           // .asciz 8, '\\\\n\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0062303030755c5c                           // .asciz 8, '\\\\u000b\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0063303030755c5c                           // .asciz 8, '\\\\u000c\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x0000000000725c5c                           // .asciz 8, '\\\\r\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0065303030755c5c                           // .asciz 8, '\\\\u000e\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0066303030755c5c                           // .asciz 8, '\\\\u000f\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0030313030755c5c                           // .asciz 8, '\\\\u0010\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0031313030755c5c                           // .asciz 8, '\\\\u0011\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0032313030755c5c                           // .asciz 8, '\\\\u0012\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0033313030755c5c                           // .asciz 8, '\\\\u0013\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0034313030755c5c                           // .asciz 8, '\\\\u0014\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0035313030755c5c                           // .asciz 8, '\\\\u0015\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0036313030755c5c                           // .asciz 8, '\\\\u0016\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0037313030755c5c                           // .asciz 8, '\\\\u0017\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0038313030755c5c                           // .asciz 8, '\\\\u0018\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0039313030755c5c                           // .asciz 8, '\\\\u0019\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0061313030755c5c                           // .asciz 8, '\\\\u001a\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0062313030755c5c                           // .asciz 8, '\\\\u001b\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0063313030755c5c                           // .asciz 8, '\\\\u001c\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0064313030755c5c                           // .asciz 8, '\\\\u001d\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0065313030755c5c                           // .asciz 8, '\\\\u001e\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0066313030755c5c                           // .asciz 8, '\\\\u001f\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000004                           // .quad 4
	QUAD $0x00000000225c5c5c                           // .asciz 8, '\\\\\\"\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000004                           // .quad 4
	QUAD $0x000000005c5c5c5c                           // .asciz 8, '\\\\\\\\\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
__EscTab:
	QUAD $0x0101010101010101; QUAD $0x0101010101010101     // .ascii 16, '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
	QUAD $0x0101010101010101; QUAD $0x0101010101010101     // .ascii 16, '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
	QUAD $0x0000000000010000; QUAD $0x0000000000000000     // .ascii 16, '\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; LONG $0x00000000; BYTE $0x01 // .ascii 13, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	WORD $0x0000; BYTE $0x00                               // .space 3, '\x00\x00\x00'

	// .p2align 4, 0x00
__UnquoteTab:
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000220000; QUAD $0x2f00000000000000 // .ascii 16, '\x00\x00"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00/'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000005c00000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\\x00\x00\x00'
	QUAD $0x000c000000080000; QUAD $0x000a000000000000 // .ascii 16, '\x00\x00\x08\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\n\x00'
	LONG $0x000d0000; WORD $0xff09                     // .ascii 6, '\x00\x00\r\x00\t\xff'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; WORD $0x0000             // .space 10, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
__HtmlQuoteTab:
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000036323030755c                           // .asciz 8, '\\u0026\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000063333030755c                           // .asciz 8, '\\u003c\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000065333030755c                           // .asciz 8, '\\u003e\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000038323032755c                           // .asciz 8, '\\u2028\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000039323032755c                           // .asciz 8, '\\u2029\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
_LSHIFT_TAB:
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000                           // .space 8, '\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000001                                   // .long 1
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000001                                   // .long 1
	QUAD $0x0000000000003532; QUAD $0x0000000000000000 // .asciz 16, '25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000001                                   // .long 1
	QUAD $0x0000000000353231; QUAD $0x0000000000000000 // .asciz 16, '125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000002                                   // .long 2
	QUAD $0x0000000000353236; QUAD $0x0000000000000000 // .asciz 16, '625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000002                                   // .long 2
	QUAD $0x0000000035323133; QUAD $0x0000000000000000 // .asciz 16, '3125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000002                                   // .long 2
	QUAD $0x0000003532363531; QUAD $0x0000000000000000 // .asciz 16, '15625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000003                                   // .long 3
	QUAD $0x0000003532313837; QUAD $0x0000000000000000 // .asciz 16, '78125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000003                                   // .long 3
	QUAD $0x0000353236303933; QUAD $0x0000000000000000 // .asciz 16, '390625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000003                                   // .long 3
	QUAD $0x0035323133353931; QUAD $0x0000000000000000 // .asciz 16, '1953125\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000004                                   // .long 4
	QUAD $0x0035323635363739; QUAD $0x0000000000000000 // .asciz 16, '9765625\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000004                                   // .long 4
	QUAD $0x3532313832383834; QUAD $0x0000000000000000 // .asciz 16, '48828125\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000004                                   // .long 4
	QUAD $0x3236303431343432; QUAD $0x0000000000000035 // .asciz 16, '244140625\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000004                                   // .long 4
	QUAD $0x3133303730323231; QUAD $0x0000000000003532 // .asciz 16, '1220703125\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000005                                   // .long 5
	QUAD $0x3635313533303136; QUAD $0x0000000000003532 // .asciz 16, '6103515625\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000005                                   // .long 5
	QUAD $0x3837353731353033; QUAD $0x0000000000353231 // .asciz 16, '30517578125\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000005                                   // .long 5
	QUAD $0x3938373835323531; QUAD $0x0000000035323630 // .asciz 16, '152587890625\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000006                                   // .long 6
	QUAD $0x3534393339323637; QUAD $0x0000000035323133 // .asciz 16, '762939453125\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000006                                   // .long 6
	QUAD $0x3237393634313833; QUAD $0x0000003532363536 // .asciz 16, '3814697265625\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000006                                   // .long 6
	QUAD $0x3638343337303931; QUAD $0x0000353231383233 // .asciz 16, '19073486328125\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000007                                   // .long 7
	QUAD $0x3133343736333539; QUAD $0x0000353236303436 // .asciz 16, '95367431640625\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000007                                   // .long 7
	QUAD $0x3531373338363734; QUAD $0x0035323133303238 // .asciz 16, '476837158203125\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000007                                   // .long 7
	QUAD $0x3735383134383332; QUAD $0x3532363531303139 // .asciz 16, '2384185791015625'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000007                                   // .long 7
	QUAD $0x3832393032393131; QUAD $0x3231383730353539 // .asciz 16, '1192092895507812'
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000008                                   // .long 8
	QUAD $0x3434363430363935; QUAD $0x3236303933353737 // .asciz 16, '5960464477539062'
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000008                                   // .long 8
	QUAD $0x3232333230383932; QUAD $0x3133353936373833 // .asciz 16, '2980232238769531'
	QUAD $0x0000000000003532; QUAD $0x0000000000000000 // .asciz 16, '25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000008                                   // .long 8
	QUAD $0x3136313130393431; QUAD $0x3536373438333931 // .asciz 16, '1490116119384765'
	QUAD $0x0000000000353236; QUAD $0x0000000000000000 // .asciz 16, '625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000009                                   // .long 9
	QUAD $0x3530383530353437; QUAD $0x3832383332393639 // .asciz 16, '7450580596923828'
	QUAD $0x0000000000353231; QUAD $0x0000000000000000 // .asciz 16, '125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000009                                   // .long 9
	QUAD $0x3230393235323733; QUAD $0x3431393136343839 // .asciz 16, '3725290298461914'
	QUAD $0x0000000035323630; QUAD $0x0000000000000000 // .asciz 16, '0625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000009                                   // .long 9
	QUAD $0x3135343632363831; QUAD $0x3735393033323934 // .asciz 16, '1862645149230957'
	QUAD $0x0000003532313330; QUAD $0x0000000000000000 // .asciz 16, '03125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000a                                   // .long 10
	QUAD $0x3735323233313339; QUAD $0x3538373435313634 // .asciz 16, '9313225746154785'
	QUAD $0x0000003532363531; QUAD $0x0000000000000000 // .asciz 16, '15625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000a                                   // .long 10
	QUAD $0x3832313636353634; QUAD $0x3239333737303337 // .asciz 16, '4656612873077392'
	QUAD $0x0000353231383735; QUAD $0x0000000000000000 // .asciz 16, '578125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000a                                   // .long 10
	QUAD $0x3436303338323332; QUAD $0x3639363833353633 // .asciz 16, '2328306436538696'
	QUAD $0x0035323630393832; QUAD $0x0000000000000000 // .asciz 16, '2890625\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000a                                   // .long 10
	QUAD $0x3233353134363131; QUAD $0x3834333936323831 // .asciz 16, '1164153218269348'
	QUAD $0x3532313335343431; QUAD $0x0000000000000000 // .asciz 16, '14453125\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000b                                   // .long 11
	QUAD $0x3036363730323835; QUAD $0x3034373634333139 // .asciz 16, '5820766091346740'
	QUAD $0x3532363536323237; QUAD $0x0000000000000000 // .asciz 16, '72265625\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000b                                   // .long 11
	QUAD $0x3033383330313932; QUAD $0x3037333337363534 // .asciz 16, '2910383045673370'
	QUAD $0x3231383233313633; QUAD $0x0000000000000035 // .asciz 16, '361328125\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000b                                   // .long 11
	QUAD $0x3531393135353431; QUAD $0x3538363633383232 // .asciz 16, '1455191522836685'
	QUAD $0x3630343636303831; QUAD $0x0000000000003532 // .asciz 16, '1806640625\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000c                                   // .long 12
	QUAD $0x3637353935373237; QUAD $0x3532343338313431 // .asciz 16, '7275957614183425'
	QUAD $0x3133303233333039; QUAD $0x0000000000003532 // .asciz 16, '9033203125\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000c                                   // .long 12
	QUAD $0x3838373937333633; QUAD $0x3231373139303730 // .asciz 16, '3637978807091712'
	QUAD $0x3531303636313539; QUAD $0x0000000000353236 // .asciz 16, '95166015625\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000c                                   // .long 12
	QUAD $0x3439383938313831; QUAD $0x3635383534353330 // .asciz 16, '1818989403545856'
	QUAD $0x3730303338353734; QUAD $0x0000000035323138 // .asciz 16, '475830078125\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000d                                   // .long 13
	QUAD $0x3037343934393039; QUAD $0x3238323932373731 // .asciz 16, '9094947017729282'
	QUAD $0x3933303531393733; QUAD $0x0000000035323630 // .asciz 16, '379150390625\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000d                                   // .long 13
	QUAD $0x3533373437343534; QUAD $0x3134363436383830 // .asciz 16, '4547473508864641'
	QUAD $0x3931353735393831; QUAD $0x0000003532313335 // .asciz 16, '1895751953125\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000d                                   // .long 13
	QUAD $0x3736333733373232; QUAD $0x3032333233343435 // .asciz 16, '2273736754432320'
	QUAD $0x3935373837343935; QUAD $0x0000353236353637 // .asciz 16, '59478759765625\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000d                                   // .long 13
	QUAD $0x3338363836333131; QUAD $0x3036313631323737 // .asciz 16, '1136868377216160'
	QUAD $0x3937333933373932; QUAD $0x0035323138323838 // .asciz 16, '297393798828125\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000e                                   // .long 14
	QUAD $0x3831343334383635; QUAD $0x3130383038303638 // .asciz 16, '5684341886080801'
	QUAD $0x3939383639363834; QUAD $0x0035323630343134 // .asciz 16, '486968994140625\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000e                                   // .long 14
	QUAD $0x3930373132343832; QUAD $0x3030343034303334 // .asciz 16, '2842170943040400'
	QUAD $0x3934343834333437; QUAD $0x3532313330373037 // .asciz 16, '7434844970703125'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000e                                   // .long 14
	QUAD $0x3435383031323431; QUAD $0x3030323032353137 // .asciz 16, '1421085471520200'
	QUAD $0x3432323437313733; QUAD $0x3236353135333538 // .asciz 16, '3717422485351562'
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000f                                   // .long 15
	QUAD $0x3337323435303137; QUAD $0x3130303130363735 // .asciz 16, '7105427357601001'
	QUAD $0x3432313137383538; QUAD $0x3231383735373632 // .asciz 16, '8587112426757812'
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000f                                   // .long 15
	QUAD $0x3633313732353533; QUAD $0x3030353030383837 // .asciz 16, '3552713678800500'
	QUAD $0x3236353533393239; QUAD $0x3630393837333331 // .asciz 16, '9293556213378906'
	QUAD $0x0000000000003532; QUAD $0x0000000000000000 // .asciz 16, '25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000f                                   // .long 15
	QUAD $0x3836353336373731; QUAD $0x3035323030343933 // .asciz 16, '1776356839400250'
	QUAD $0x3138373736343634; QUAD $0x3335343938363630 // .asciz 16, '4646778106689453'
	QUAD $0x0000000000353231; QUAD $0x0000000000000000 // .asciz 16, '125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000010                                   // .long 16
	QUAD $0x3134383731383838; QUAD $0x3235323130303739 // .asciz 16, '8881784197001252'
	QUAD $0x3530393833333233; QUAD $0x3536323734343333 // .asciz 16, '3233890533447265'
	QUAD $0x0000000000353236; QUAD $0x0000000000000000 // .asciz 16, '625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000010                                   // .long 16
	QUAD $0x3032393830343434; QUAD $0x3632363030353839 // .asciz 16, '4440892098500626'
	QUAD $0x3235343936313631; QUAD $0x3233363332373636 // .asciz 16, '1616945266723632'
	QUAD $0x0000000035323138; QUAD $0x0000000000000000 // .asciz 16, '8125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000010                                   // .long 16
	QUAD $0x3036343430323232; QUAD $0x3331333035323934 // .asciz 16, '2220446049250313'
	QUAD $0x3632373438303830; QUAD $0x3631383136333333 // .asciz 16, '0808472633361816'
	QUAD $0x0000003532363034; QUAD $0x0000000000000000 // .asciz 16, '40625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000010                                   // .long 16
	QUAD $0x3033323230313131; QUAD $0x3635313532363432 // .asciz 16, '1110223024625156'
	QUAD $0x3336333234303435; QUAD $0x3830393038363631 // .asciz 16, '5404236316680908'
	QUAD $0x0000353231333032; QUAD $0x0000000000000000 // .asciz 16, '203125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000011                                   // .long 17
	QUAD $0x3135313131353535; QUAD $0x3238373532313332 // .asciz 16, '5551115123125782'
	QUAD $0x3531383131323037; QUAD $0x3134353430343338 // .asciz 16, '7021181583404541'
	QUAD $0x0000353236353130; QUAD $0x0000000000000000 // .asciz 16, '015625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000011                                   // .long 17
	QUAD $0x3537353535373732; QUAD $0x3139383236353136 // .asciz 16, '2775557561562891'
	QUAD $0x3730393530313533; QUAD $0x3037323230373139 // .asciz 16, '3510590791702270'
	QUAD $0x0035323138373035; QUAD $0x0000000000000000 // .asciz 16, '5078125\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000011                                   // .long 17
	QUAD $0x3738373737383331; QUAD $0x3534343138373038 // .asciz 16, '1387778780781445'
	QUAD $0x3335393235353736; QUAD $0x3533313135383539 // .asciz 16, '6755295395851135'
	QUAD $0x3532363039333532; QUAD $0x0000000000000000 // .asciz 16, '25390625\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000012                                   // .long 18
	QUAD $0x3933393838333936; QUAD $0x3832323730393330 // .asciz 16, '6938893903907228'
	QUAD $0x3936373436373733; QUAD $0x3637363535323937 // .asciz 16, '3776476979255676'
	QUAD $0x3532313335393632; QUAD $0x0000000000000000 // .asciz 16, '26953125\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000012                                   // .long 18
	QUAD $0x3936343439363433; QUAD $0x3431363335393135 // .asciz 16, '3469446951953614'
	QUAD $0x3438333238383831; QUAD $0x3833383732363938 // .asciz 16, '1888238489627838'
	QUAD $0x3236353637343331; QUAD $0x0000000000000035 // .asciz 16, '134765625\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000012                                   // .long 18
	QUAD $0x3433323734333731; QUAD $0x3730383637393537 // .asciz 16, '1734723475976807'
	QUAD $0x3239313134343930; QUAD $0x3931393331383434 // .asciz 16, '0944119244813919'
	QUAD $0x3138323833373630; QUAD $0x0000000000003532 // .asciz 16, '0673828125\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000013                                   // .long 19
	QUAD $0x3337313633373638; QUAD $0x3533303438383937 // .asciz 16, '8673617379884035'
	QUAD $0x3236393530323734; QUAD $0x3539353936303432 // .asciz 16, '4720596224069595'
	QUAD $0x3630343139363333; QUAD $0x0000000000003532 // .asciz 16, '3369140625\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	QUAD $0x0000000000000000                           // .p2align 4, 0x00

_P10_TAB:
	QUAD $0x3ff0000000000000 // .quad 0x3ff0000000000000
	QUAD $0x4024000000000000 // .quad 0x4024000000000000
	QUAD $0x4059000000000000 // .quad 0x4059000000000000
	QUAD $0x408f400000000000 // .quad 0x408f400000000000
	QUAD $0x40c3880000000000 // .quad 0x40c3880000000000
	QUAD $0x40f86a0000000000 // .quad 0x40f86a0000000000
	QUAD $0x412e848000000000 // .quad 0x412e848000000000
	QUAD $0x416312d000000000 // .quad 0x416312d000000000
	QUAD $0x4197d78400000000 // .quad 0x4197d78400000000
	QUAD $0x41cdcd6500000000 // .quad 0x41cdcd6500000000
	QUAD $0x4202a05f20000000 // .quad 0x4202a05f20000000
	QUAD $0x42374876e8000000 // .quad 0x42374876e8000000
	QUAD $0x426d1a94a2000000 // .quad 0x426d1a94a2000000
	QUAD $0x42a2309ce5400000 // .quad 0x42a2309ce5400000
	QUAD $0x42d6bcc41e900000 // .quad 0x42d6bcc41e900000
	QUAD $0x430c6bf526340000 // .quad 0x430c6bf526340000
	QUAD $0x4341c37937e08000 // .quad 0x4341c37937e08000
	QUAD $0x4376345785d8a000 // .quad 0x4376345785d8a000
	QUAD $0x43abc16d674ec800 // .quad 0x43abc16d674ec800
	QUAD $0x43e158e460913d00 // .quad 0x43e158e460913d00
	QUAD $0x4415af1d78b58c40 // .quad 0x4415af1d78b58c40
	QUAD $0x444b1ae4d6e2ef50 // .quad 0x444b1ae4d6e2ef50
	QUAD $0x4480f0cf064dd592 // .quad 0x4480f0cf064dd592
	QUAD $0x0000000000000000 // .p2align 4, 0x00

_first:
	QUAD $0xf0f0f0f0f0f0f0f0; QUAD $0xf0f0f0f0f0f0f0f0 // .ascii 16, '\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0'
	QUAD $0xf0f0f0f0f0f0f0f0; QUAD $0xf0f0f0f0f0f0f0f0 // .ascii 16, '\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0'
	QUAD $0xf0f0f0f0f0f0f0f0; QUAD $0xf0f0f0f0f0f0f0f0 // .ascii 16, '\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0'
	QUAD $0xf0f0f0f0f0f0f0f0; QUAD $0xf0f0f0f0f0f0f0f0 // .ascii 16, '\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0'
	QUAD $0xf0f0f0f0f0f0f0f0; QUAD $0xf0f0f0f0f0f0f0f0 // .ascii 16, '\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0'
	QUAD $0xf0f0f0f0f0f0f0f0; QUAD $0xf0f0f0f0f0f0f0f0 // .ascii 16, '\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0'
	QUAD $0xf0f0f0f0f0f0f0f0; QUAD $0xf0f0f0f0f0f0f0f0 // .ascii 16, '\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0'
	QUAD $0xf0f0f0f0f0f0f0f0; QUAD $0xf0f0f0f0f0f0f0f0 // .ascii 16, '\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0'
	QUAD $0xf1f1f1f1f1f1f1f1; QUAD $0xf1f1f1f1f1f1f1f1 // .ascii 16, '\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1'
	QUAD $0xf1f1f1f1f1f1f1f1; QUAD $0xf1f1f1f1f1f1f1f1 // .ascii 16, '\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1'
	QUAD $0xf1f1f1f1f1f1f1f1; QUAD $0xf1f1f1f1f1f1f1f1 // .ascii 16, '\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1'
	QUAD $0xf1f1f1f1f1f1f1f1; QUAD $0xf1f1f1f1f1f1f1f1 // .ascii 16, '\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1'
	QUAD $0x020202020202f1f1; QUAD $0x0202020202020202 // .ascii 16, '\xf1\xf1\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02'
	QUAD $0x0202020202020202; QUAD $0x0202020202020202 // .ascii 16, '\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02'
	QUAD $0x0303030303030313; QUAD $0x0303230303030303 // .ascii 16, '\x13\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03#\x03\x03'
	QUAD $0xf1f1f14404040434; QUAD $0xf1f1f1f1f1f1f1f1 // .ascii 16, '4\x04\x04\x04D\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1\xf1'

_ranges:
	BYTE $0x80                     // .byte 128
	BYTE $0xbf                     // .byte 191
	BYTE $0xa0                     // .byte 160
	BYTE $0xbf                     // .byte 191
	BYTE $0x80                     // .byte 128
	BYTE $0x9f                     // .byte 159
	BYTE $0x90                     // .byte 144
	BYTE $0xbf                     // .byte 191
	BYTE $0x80                     // .byte 128
	BYTE $0x8f                     // .byte 143
	LONG $0x00000000; WORD $0x0000 // .p2align 4, 0x00

_SkipSizeFixed:
	QUAD $0x0002000801010000; WORD $0x0004; BYTE $0x08 // .ascii 11, '\x00\x00\x01\x01\x08\x00\x02\x00\x04\x00\x08'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000; BYTE $0x00                       // .space 5, '\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
_WireTags:
	QUAD $0x0001000101010000; QUAD $0x0101010101010001 // .ascii 16, '\x00\x00\x01\x01\x01\x00\x01\x00\x01\x00\x01\x01\x01\x01\x01\x01'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

TEXT Â·__f64toa(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -80(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_f64toa:
	MOVQ  out+0(FP), DI
	MOVSD val+8(FP), X0
	CALL  Â·__native_entry__+752(SB) // _f64toa
	MOVQ  AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__hm_get(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -24(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_hm_get:
	MOVQ hm+0(FP), DI
	MOVQ k+8(FP), SI
	CALL Â·__native_entry__+33568(SB) // _hm_get
	MOVQ AX, val+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__html_escape(SB), NOSPLIT | NOFRAME, $0 - 40
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -72(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_html_escape:
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ dp+16(FP), DX
	MOVQ dn+24(FP), CX
	CALL Â·__native_entry__+11552(SB) // _html_escape
	MOVQ AX, ret+32(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__i64toa(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -16(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_i64toa:
	MOVQ out+0(FP), DI
	MOVQ val+8(FP), SI
	CALL Â·__native_entry__+4384(SB) // _i64toa
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__j2t_fsm_exec(SB), NOSPLIT | NOFRAME, $0 - 40
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -624(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_j2t_fsm_exec:
	MOVQ fsm+0(FP), DI
	MOVQ buf+8(FP), SI
	MOVQ src+16(FP), DX
	MOVQ flag+24(FP), CX
	CALL Â·__native_entry__+44800(SB) // _j2t_fsm_exec
	MOVQ AX, ret+32(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__lspace(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -8(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_lspace:
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ off+16(FP), DX
	CALL Â·__native_entry__+224(SB) // _lspace
	MOVQ AX, ret+24(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__quote(SB), NOSPLIT | NOFRAME, $0 - 48
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -72(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_quote:
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ dp+16(FP), DX
	MOVQ dn+24(FP), CX
	MOVQ flags+32(FP), R8
	CALL Â·__native_entry__+6096(SB) // _quote
	MOVQ AX, ret+40(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__skip_array(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -184(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_skip_array:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	CALL Â·__native_entry__+25904(SB) // _skip_array
	MOVQ AX, ret+24(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__skip_object(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -184(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_skip_object:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	CALL Â·__native_entry__+25968(SB) // _skip_object
	MOVQ AX, ret+24(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__skip_one(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -184(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_skip_one:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	CALL Â·__native_entry__+24000(SB) // _skip_one
	MOVQ AX, ret+24(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__tb_skip(SB), NOSPLIT | NOFRAME, $0 - 40
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -48(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_tb_skip:
	MOVQ st+0(FP), DI
	MOVQ s+8(FP), SI
	MOVQ n+16(FP), DX
	MOVQ t+24(FP), CX
	CALL Â·__native_entry__+53360(SB) // _tb_skip
	MOVQ AX, ret+32(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__tb_write_i64(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -8(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_tb_write_i64:
	MOVQ buf+0(FP), DI
	MOVQ v+8(FP), SI
	CALL Â·__native_entry__+35184(SB) // _tb_write_i64
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__trie_get(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -32(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_trie_get:
	MOVQ hm+0(FP), DI
	MOVQ k+8(FP), SI
	CALL Â·__native_entry__+34432(SB) // _trie_get
	MOVQ AX, val+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__u64toa(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -8(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_u64toa:
	MOVQ out+0(FP), DI
	MOVQ val+8(FP), SI
	CALL Â·__native_entry__+4624(SB) // _u64toa
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__unquote(SB), NOSPLIT | NOFRAME, $0 - 48
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -128(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_unquote:
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ dp+16(FP), DX
	MOVQ ep+24(FP), CX
	MOVQ flags+32(FP), R8
	CALL Â·__native_entry__+8848(SB) // _unquote
	MOVQ AX, ret+40(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__validate_one(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -184(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_validate_one:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	CALL Â·__native_entry__+28000(SB) // _validate_one
	MOVQ AX, ret+24(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__value(SB), NOSPLIT | NOFRAME, $0 - 48
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -360(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_value:
	MOVQ s+0(FP), DI
	MOVQ n+8(FP), SI
	MOVQ p+16(FP), DX
	MOVQ v+24(FP), CX
	MOVQ allow_control+32(FP), R8
	CALL Â·__native_entry__+17696(SB) // _value
	MOVQ AX, ret+40(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__vnumber(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -288(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vnumber:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·__native_entry__+19968(SB), AX // _vnumber
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__vsigned(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -16(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vsigned:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·__native_entry__+21552(SB), AX // _vsigned
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__vstring(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -104(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vstring:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·__native_entry__+18928(SB), AX // _vstring
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__vunsigned(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -24(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vunsigned:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·__native_entry__+21904(SB), AX // _vunsigned
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry
