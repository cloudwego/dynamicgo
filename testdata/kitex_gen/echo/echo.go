// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package echo

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type SubMessage struct {
	Id    *int64  `thrift:"id,1" json:"id,omitempty"`
	Value *string `thrift:"value,2" json:"value,omitempty"`
}

func NewSubMessage() *SubMessage {
	return &SubMessage{}
}

var SubMessage_Id_DEFAULT int64

func (p *SubMessage) GetId() (v int64) {
	if !p.IsSetId() {
		return SubMessage_Id_DEFAULT
	}
	return *p.Id
}

var SubMessage_Value_DEFAULT string

func (p *SubMessage) GetValue() (v string) {
	if !p.IsSetValue() {
		return SubMessage_Value_DEFAULT
	}
	return *p.Value
}
func (p *SubMessage) SetId(val *int64) {
	p.Id = val
}
func (p *SubMessage) SetValue(val *string) {
	p.Value = val
}

var fieldIDToName_SubMessage = map[int16]string{
	1: "id",
	2: "value",
}

func (p *SubMessage) IsSetId() bool {
	return p.Id != nil
}

func (p *SubMessage) IsSetValue() bool {
	return p.Value != nil
}

func (p *SubMessage) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubMessage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubMessage) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}

func (p *SubMessage) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Value = &v
	}
	return nil
}

func (p *SubMessage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubMessage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubMessage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err = oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Value); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SubMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubMessage(%+v)", *p)
}

func (p *SubMessage) DeepEqual(ano *SubMessage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *SubMessage) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *SubMessage) Field2DeepEqual(src *string) bool {

	if p.Value == src {
		return true
	} else if p.Value == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Value, *src) != 0 {
		return false
	}
	return true
}

type Message struct {
	Id          *int64        `thrift:"id,1" json:"id,omitempty"`
	Value       *string       `thrift:"value,2" json:"value,omitempty"`
	SubMessages []*SubMessage `thrift:"subMessages,3" json:"subMessages,omitempty"`
}

func NewMessage() *Message {
	return &Message{}
}

var Message_Id_DEFAULT int64

func (p *Message) GetId() (v int64) {
	if !p.IsSetId() {
		return Message_Id_DEFAULT
	}
	return *p.Id
}

var Message_Value_DEFAULT string

func (p *Message) GetValue() (v string) {
	if !p.IsSetValue() {
		return Message_Value_DEFAULT
	}
	return *p.Value
}

var Message_SubMessages_DEFAULT []*SubMessage

func (p *Message) GetSubMessages() (v []*SubMessage) {
	if !p.IsSetSubMessages() {
		return Message_SubMessages_DEFAULT
	}
	return p.SubMessages
}
func (p *Message) SetId(val *int64) {
	p.Id = val
}
func (p *Message) SetValue(val *string) {
	p.Value = val
}
func (p *Message) SetSubMessages(val []*SubMessage) {
	p.SubMessages = val
}

var fieldIDToName_Message = map[int16]string{
	1: "id",
	2: "value",
	3: "subMessages",
}

func (p *Message) IsSetId() bool {
	return p.Id != nil
}

func (p *Message) IsSetValue() bool {
	return p.Value != nil
}

func (p *Message) IsSetSubMessages() bool {
	return p.SubMessages != nil
}

func (p *Message) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Message[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Message) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}

func (p *Message) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Value = &v
	}
	return nil
}

func (p *Message) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SubMessages = make([]*SubMessage, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewSubMessage()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.SubMessages = append(p.SubMessages, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Message) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Message"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err = oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Value); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Message) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubMessages() {
		if err = oprot.WriteFieldBegin("subMessages", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SubMessages)); err != nil {
			return err
		}
		for _, v := range p.SubMessages {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Message) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Message(%+v)", *p)
}

func (p *Message) DeepEqual(ano *Message) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Value) {
		return false
	}
	if !p.Field3DeepEqual(ano.SubMessages) {
		return false
	}
	return true
}

func (p *Message) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *Message) Field2DeepEqual(src *string) bool {

	if p.Value == src {
		return true
	} else if p.Value == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Value, *src) != 0 {
		return false
	}
	return true
}
func (p *Message) Field3DeepEqual(src []*SubMessage) bool {

	if len(p.SubMessages) != len(src) {
		return false
	}
	for i, v := range p.SubMessages {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ObjReq struct {
	Action   string                 `thrift:"action,1,required" json:"action"`
	Msg      string                 `thrift:"msg,2,required" json:"msg"`
	MsgMap   map[string]*SubMessage `thrift:"msgMap,3,required" json:"msgMap"`
	SubMsgs  []*SubMessage          `thrift:"subMsgs,4,required" json:"subMsgs"`
	MsgSet   []*Message             `thrift:"msgSet,5" json:"msgSet,omitempty"`
	FlagMsg  *Message               `thrift:"flagMsg,6,required" json:"flagMsg"`
	MockCost *string                `thrift:"mockCost,7" json:"mockCost,omitempty"`
}

func NewObjReq() *ObjReq {
	return &ObjReq{}
}

func (p *ObjReq) GetAction() (v string) {
	return p.Action
}

func (p *ObjReq) GetMsg() (v string) {
	return p.Msg
}

func (p *ObjReq) GetMsgMap() (v map[string]*SubMessage) {
	return p.MsgMap
}

func (p *ObjReq) GetSubMsgs() (v []*SubMessage) {
	return p.SubMsgs
}

var ObjReq_MsgSet_DEFAULT []*Message

func (p *ObjReq) GetMsgSet() (v []*Message) {
	if !p.IsSetMsgSet() {
		return ObjReq_MsgSet_DEFAULT
	}
	return p.MsgSet
}

var ObjReq_FlagMsg_DEFAULT *Message

func (p *ObjReq) GetFlagMsg() (v *Message) {
	if !p.IsSetFlagMsg() {
		return ObjReq_FlagMsg_DEFAULT
	}
	return p.FlagMsg
}

var ObjReq_MockCost_DEFAULT string

func (p *ObjReq) GetMockCost() (v string) {
	if !p.IsSetMockCost() {
		return ObjReq_MockCost_DEFAULT
	}
	return *p.MockCost
}
func (p *ObjReq) SetAction(val string) {
	p.Action = val
}
func (p *ObjReq) SetMsg(val string) {
	p.Msg = val
}
func (p *ObjReq) SetMsgMap(val map[string]*SubMessage) {
	p.MsgMap = val
}
func (p *ObjReq) SetSubMsgs(val []*SubMessage) {
	p.SubMsgs = val
}
func (p *ObjReq) SetMsgSet(val []*Message) {
	p.MsgSet = val
}
func (p *ObjReq) SetFlagMsg(val *Message) {
	p.FlagMsg = val
}
func (p *ObjReq) SetMockCost(val *string) {
	p.MockCost = val
}

var fieldIDToName_ObjReq = map[int16]string{
	1: "action",
	2: "msg",
	3: "msgMap",
	4: "subMsgs",
	5: "msgSet",
	6: "flagMsg",
	7: "mockCost",
}

func (p *ObjReq) IsSetMsgSet() bool {
	return p.MsgSet != nil
}

func (p *ObjReq) IsSetFlagMsg() bool {
	return p.FlagMsg != nil
}

func (p *ObjReq) IsSetMockCost() bool {
	return p.MockCost != nil
}

func (p *ObjReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAction bool = false
	var issetMsg bool = false
	var issetMsgMap bool = false
	var issetSubMsgs bool = false
	var issetFlagMsg bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAction = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMsg = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetMsgMap = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetSubMsgs = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetFlagMsg = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAction {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMsg {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetMsgMap {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetSubMsgs {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetFlagMsg {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ObjReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ObjReq[fieldId]))
}

func (p *ObjReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Action = v
	}
	return nil
}

func (p *ObjReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *ObjReq) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.MsgMap = make(map[string]*SubMessage, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_val := NewSubMessage()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.MsgMap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ObjReq) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SubMsgs = make([]*SubMessage, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewSubMessage()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.SubMsgs = append(p.SubMsgs, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ObjReq) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.MsgSet = make([]*Message, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewMessage()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.MsgSet = append(p.MsgSet, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ObjReq) ReadField6(iprot thrift.TProtocol) error {
	p.FlagMsg = NewMessage()
	if err := p.FlagMsg.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ObjReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MockCost = &v
	}
	return nil
}

func (p *ObjReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ObjReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ObjReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("action", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Action); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ObjReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ObjReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msgMap", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.MsgMap)); err != nil {
		return err
	}
	for k, v := range p.MsgMap {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ObjReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("subMsgs", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SubMsgs)); err != nil {
		return err
	}
	for _, v := range p.SubMsgs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ObjReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgSet() {
		if err = oprot.WriteFieldBegin("msgSet", thrift.SET, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.MsgSet)); err != nil {
			return err
		}
		for i := 0; i < len(p.MsgSet); i++ {
			for j := i + 1; j < len(p.MsgSet); j++ {
				if func(tgt, src *Message) bool {
					if !tgt.DeepEqual(src) {
						return false
					}
					return true
				}(p.MsgSet[i], p.MsgSet[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.MsgSet[i]))
				}
			}
		}
		for _, v := range p.MsgSet {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ObjReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("flagMsg", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.FlagMsg.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ObjReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMockCost() {
		if err = oprot.WriteFieldBegin("mockCost", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MockCost); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ObjReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ObjReq(%+v)", *p)
}

func (p *ObjReq) DeepEqual(ano *ObjReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Action) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.MsgMap) {
		return false
	}
	if !p.Field4DeepEqual(ano.SubMsgs) {
		return false
	}
	if !p.Field5DeepEqual(ano.MsgSet) {
		return false
	}
	if !p.Field6DeepEqual(ano.FlagMsg) {
		return false
	}
	if !p.Field7DeepEqual(ano.MockCost) {
		return false
	}
	return true
}

func (p *ObjReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Action, src) != 0 {
		return false
	}
	return true
}
func (p *ObjReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}
func (p *ObjReq) Field3DeepEqual(src map[string]*SubMessage) bool {

	if len(p.MsgMap) != len(src) {
		return false
	}
	for k, v := range p.MsgMap {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ObjReq) Field4DeepEqual(src []*SubMessage) bool {

	if len(p.SubMsgs) != len(src) {
		return false
	}
	for i, v := range p.SubMsgs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ObjReq) Field5DeepEqual(src []*Message) bool {

	if len(p.MsgSet) != len(src) {
		return false
	}
	for i, v := range p.MsgSet {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ObjReq) Field6DeepEqual(src *Message) bool {

	if !p.FlagMsg.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ObjReq) Field7DeepEqual(src *string) bool {

	if p.MockCost == src {
		return true
	} else if p.MockCost == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MockCost, *src) != 0 {
		return false
	}
	return true
}

type ObjResp struct {
	Action  string                 `thrift:"action,1,required" json:"action"`
	Msg     string                 `thrift:"msg,2,required" json:"msg"`
	MsgMap  map[string]*SubMessage `thrift:"msgMap,3,required" json:"msgMap"`
	SubMsgs []*SubMessage          `thrift:"subMsgs,4,required" json:"subMsgs"`
	MsgSet  []*Message             `thrift:"msgSet,5" json:"msgSet,omitempty"`
	FlagMsg *Message               `thrift:"flagMsg,6,required" json:"flagMsg"`
}

func NewObjResp() *ObjResp {
	return &ObjResp{}
}

func (p *ObjResp) GetAction() (v string) {
	return p.Action
}

func (p *ObjResp) GetMsg() (v string) {
	return p.Msg
}

func (p *ObjResp) GetMsgMap() (v map[string]*SubMessage) {
	return p.MsgMap
}

func (p *ObjResp) GetSubMsgs() (v []*SubMessage) {
	return p.SubMsgs
}

var ObjResp_MsgSet_DEFAULT []*Message

func (p *ObjResp) GetMsgSet() (v []*Message) {
	if !p.IsSetMsgSet() {
		return ObjResp_MsgSet_DEFAULT
	}
	return p.MsgSet
}

var ObjResp_FlagMsg_DEFAULT *Message

func (p *ObjResp) GetFlagMsg() (v *Message) {
	if !p.IsSetFlagMsg() {
		return ObjResp_FlagMsg_DEFAULT
	}
	return p.FlagMsg
}
func (p *ObjResp) SetAction(val string) {
	p.Action = val
}
func (p *ObjResp) SetMsg(val string) {
	p.Msg = val
}
func (p *ObjResp) SetMsgMap(val map[string]*SubMessage) {
	p.MsgMap = val
}
func (p *ObjResp) SetSubMsgs(val []*SubMessage) {
	p.SubMsgs = val
}
func (p *ObjResp) SetMsgSet(val []*Message) {
	p.MsgSet = val
}
func (p *ObjResp) SetFlagMsg(val *Message) {
	p.FlagMsg = val
}

var fieldIDToName_ObjResp = map[int16]string{
	1: "action",
	2: "msg",
	3: "msgMap",
	4: "subMsgs",
	5: "msgSet",
	6: "flagMsg",
}

func (p *ObjResp) IsSetMsgSet() bool {
	return p.MsgSet != nil
}

func (p *ObjResp) IsSetFlagMsg() bool {
	return p.FlagMsg != nil
}

func (p *ObjResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAction bool = false
	var issetMsg bool = false
	var issetMsgMap bool = false
	var issetSubMsgs bool = false
	var issetFlagMsg bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAction = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMsg = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetMsgMap = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetSubMsgs = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetFlagMsg = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAction {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMsg {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetMsgMap {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetSubMsgs {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetFlagMsg {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ObjResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ObjResp[fieldId]))
}

func (p *ObjResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Action = v
	}
	return nil
}

func (p *ObjResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *ObjResp) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.MsgMap = make(map[string]*SubMessage, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_val := NewSubMessage()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.MsgMap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ObjResp) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SubMsgs = make([]*SubMessage, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewSubMessage()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.SubMsgs = append(p.SubMsgs, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ObjResp) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.MsgSet = make([]*Message, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewMessage()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.MsgSet = append(p.MsgSet, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ObjResp) ReadField6(iprot thrift.TProtocol) error {
	p.FlagMsg = NewMessage()
	if err := p.FlagMsg.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ObjResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ObjResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ObjResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("action", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Action); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ObjResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ObjResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msgMap", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.MsgMap)); err != nil {
		return err
	}
	for k, v := range p.MsgMap {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ObjResp) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("subMsgs", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SubMsgs)); err != nil {
		return err
	}
	for _, v := range p.SubMsgs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ObjResp) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgSet() {
		if err = oprot.WriteFieldBegin("msgSet", thrift.SET, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.MsgSet)); err != nil {
			return err
		}
		for i := 0; i < len(p.MsgSet); i++ {
			for j := i + 1; j < len(p.MsgSet); j++ {
				if func(tgt, src *Message) bool {
					if !tgt.DeepEqual(src) {
						return false
					}
					return true
				}(p.MsgSet[i], p.MsgSet[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.MsgSet[i]))
				}
			}
		}
		for _, v := range p.MsgSet {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ObjResp) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("flagMsg", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.FlagMsg.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ObjResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ObjResp(%+v)", *p)
}

func (p *ObjResp) DeepEqual(ano *ObjResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Action) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.MsgMap) {
		return false
	}
	if !p.Field4DeepEqual(ano.SubMsgs) {
		return false
	}
	if !p.Field5DeepEqual(ano.MsgSet) {
		return false
	}
	if !p.Field6DeepEqual(ano.FlagMsg) {
		return false
	}
	return true
}

func (p *ObjResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Action, src) != 0 {
		return false
	}
	return true
}
func (p *ObjResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}
func (p *ObjResp) Field3DeepEqual(src map[string]*SubMessage) bool {

	if len(p.MsgMap) != len(src) {
		return false
	}
	for k, v := range p.MsgMap {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ObjResp) Field4DeepEqual(src []*SubMessage) bool {

	if len(p.SubMsgs) != len(src) {
		return false
	}
	for i, v := range p.SubMsgs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ObjResp) Field5DeepEqual(src []*Message) bool {

	if len(p.MsgSet) != len(src) {
		return false
	}
	for i, v := range p.MsgSet {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ObjResp) Field6DeepEqual(src *Message) bool {

	if !p.FlagMsg.DeepEqual(src) {
		return false
	}
	return true
}

type EchoService interface {
	TestObj(ctx context.Context, req *ObjReq) (r *ObjResp, err error)
}

type EchoServiceClient struct {
	c thrift.TClient
}

func NewEchoServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EchoServiceClient {
	return &EchoServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEchoServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EchoServiceClient {
	return &EchoServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEchoServiceClient(c thrift.TClient) *EchoServiceClient {
	return &EchoServiceClient{
		c: c,
	}
}

func (p *EchoServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *EchoServiceClient) TestObj(ctx context.Context, req *ObjReq) (r *ObjResp, err error) {
	var _args EchoServiceTestObjArgs
	_args.Req = req
	var _result EchoServiceTestObjResult
	if err = p.Client_().Call(ctx, "TestObj", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EchoServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EchoService
}

func (p *EchoServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EchoServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EchoServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEchoServiceProcessor(handler EchoService) *EchoServiceProcessor {
	self := &EchoServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("TestObj", &echoServiceProcessorTestObj{handler: handler})
	return self
}
func (p *EchoServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type echoServiceProcessorTestObj struct {
	handler EchoService
}

func (p *echoServiceProcessorTestObj) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EchoServiceTestObjArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TestObj", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EchoServiceTestObjResult{}
	var retval *ObjResp
	if retval, err2 = p.handler.TestObj(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TestObj: "+err2.Error())
		oprot.WriteMessageBegin("TestObj", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("TestObj", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EchoServiceTestObjArgs struct {
	Req *ObjReq `thrift:"req,1" json:"req"`
}

func NewEchoServiceTestObjArgs() *EchoServiceTestObjArgs {
	return &EchoServiceTestObjArgs{}
}

var EchoServiceTestObjArgs_Req_DEFAULT *ObjReq

func (p *EchoServiceTestObjArgs) GetReq() (v *ObjReq) {
	if !p.IsSetReq() {
		return EchoServiceTestObjArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EchoServiceTestObjArgs) SetReq(val *ObjReq) {
	p.Req = val
}

var fieldIDToName_EchoServiceTestObjArgs = map[int16]string{
	1: "req",
}

func (p *EchoServiceTestObjArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EchoServiceTestObjArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoServiceTestObjArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceTestObjArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewObjReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EchoServiceTestObjArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TestObj_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceTestObjArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EchoServiceTestObjArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceTestObjArgs(%+v)", *p)
}

func (p *EchoServiceTestObjArgs) DeepEqual(ano *EchoServiceTestObjArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EchoServiceTestObjArgs) Field1DeepEqual(src *ObjReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EchoServiceTestObjResult struct {
	Success *ObjResp `thrift:"success,0" json:"success,omitempty"`
}

func NewEchoServiceTestObjResult() *EchoServiceTestObjResult {
	return &EchoServiceTestObjResult{}
}

var EchoServiceTestObjResult_Success_DEFAULT *ObjResp

func (p *EchoServiceTestObjResult) GetSuccess() (v *ObjResp) {
	if !p.IsSetSuccess() {
		return EchoServiceTestObjResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceTestObjResult) SetSuccess(x interface{}) {
	p.Success = x.(*ObjResp)
}

var fieldIDToName_EchoServiceTestObjResult = map[int16]string{
	0: "success",
}

func (p *EchoServiceTestObjResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceTestObjResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoServiceTestObjResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceTestObjResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewObjResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EchoServiceTestObjResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TestObj_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceTestObjResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EchoServiceTestObjResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceTestObjResult(%+v)", *p)
}

func (p *EchoServiceTestObjResult) DeepEqual(ano *EchoServiceTestObjResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EchoServiceTestObjResult) Field0DeepEqual(src *ObjResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
