// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package skip

import (
	"context"
	"fmt"
)

type TestListMap struct {
	ListMap []map[string]string `thrift:"listMap,1" json:"listMap"`
}

func NewTestListMap() *TestListMap {
	return &TestListMap{}
}

func (p *TestListMap) InitDefault() {
}

func (p *TestListMap) GetListMap() (v []map[string]string) {
	return p.ListMap
}

func (p *TestListMap) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestListMap(%+v)", *p)
}

var fieldIDToName_TestListMap = map[int16]string{
	1: "listMap",
}

type SkipTest interface {
	TestListMap(ctx context.Context, req *TestListMap) (r *TestListMap, err error)
}

type SkipTestTestListMapArgs struct {
	Req *TestListMap `thrift:"req,1" json:"req"`
}

func NewSkipTestTestListMapArgs() *SkipTestTestListMapArgs {
	return &SkipTestTestListMapArgs{}
}

func (p *SkipTestTestListMapArgs) InitDefault() {
}

var SkipTestTestListMapArgs_Req_DEFAULT *TestListMap

func (p *SkipTestTestListMapArgs) GetReq() (v *TestListMap) {
	if !p.IsSetReq() {
		return SkipTestTestListMapArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SkipTestTestListMapArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SkipTestTestListMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SkipTestTestListMapArgs(%+v)", *p)
}

var fieldIDToName_SkipTestTestListMapArgs = map[int16]string{
	1: "req",
}

type SkipTestTestListMapResult struct {
	Success *TestListMap `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewSkipTestTestListMapResult() *SkipTestTestListMapResult {
	return &SkipTestTestListMapResult{}
}

func (p *SkipTestTestListMapResult) InitDefault() {
}

var SkipTestTestListMapResult_Success_DEFAULT *TestListMap

func (p *SkipTestTestListMapResult) GetSuccess() (v *TestListMap) {
	if !p.IsSetSuccess() {
		return SkipTestTestListMapResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SkipTestTestListMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SkipTestTestListMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SkipTestTestListMapResult(%+v)", *p)
}

var fieldIDToName_SkipTestTestListMapResult = map[int16]string{
	0: "success",
}
