// Code generated by Kitex v0.5.2. DO NOT EDIT.

package testservice

import (
	"context"
	"fmt"
	example "github.com/cloudwego/dynamicgo/testdata/kitex_gen/pb/example"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return testServiceServiceInfo
}

var testServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TestService"
	handlerType := (*example.TestService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ScalarsMethodTest": kitex.NewMethodInfo(scalarsMethodTestHandler, newScalarsMethodTestArgs, newScalarsMethodTestResult, false),
		"MessageMethodTest": kitex.NewMethodInfo(messageMethodTestHandler, newMessageMethodTestArgs, newMessageMethodTestResult, false),
		"NestedMethodTest":  kitex.NewMethodInfo(nestedMethodTestHandler, newNestedMethodTestArgs, newNestedMethodTestResult, false),
		"PartialMethodTest": kitex.NewMethodInfo(partialMethodTestHandler, newPartialMethodTestArgs, newPartialMethodTestResult, false),
		"ListMethodTest":    kitex.NewMethodInfo(listMethodTestHandler, newListMethodTestArgs, newListMethodTestResult, false),
		"MapMethodTest":     kitex.NewMethodInfo(mapMethodTestHandler, newMapMethodTestArgs, newMapMethodTestResult, false),
		"OneofMethodTest":   kitex.NewMethodInfo(oneofMethodTestHandler, newOneofMethodTestArgs, newOneofMethodTestResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "pb3",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func scalarsMethodTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(example.ExampleScalarsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(example.TestService).ScalarsMethodTest(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ScalarsMethodTestArgs:
		success, err := handler.(example.TestService).ScalarsMethodTest(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ScalarsMethodTestResult)
		realResult.Success = success
	}
	return nil
}
func newScalarsMethodTestArgs() interface{} {
	return &ScalarsMethodTestArgs{}
}

func newScalarsMethodTestResult() interface{} {
	return &ScalarsMethodTestResult{}
}

type ScalarsMethodTestArgs struct {
	Req *example.ExampleScalarsReq
}

func (p *ScalarsMethodTestArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(example.ExampleScalarsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ScalarsMethodTestArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ScalarsMethodTestArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ScalarsMethodTestArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ScalarsMethodTestArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ScalarsMethodTestArgs) Unmarshal(in []byte) error {
	msg := new(example.ExampleScalarsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ScalarsMethodTestArgs_Req_DEFAULT *example.ExampleScalarsReq

func (p *ScalarsMethodTestArgs) GetReq() *example.ExampleScalarsReq {
	if !p.IsSetReq() {
		return ScalarsMethodTestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ScalarsMethodTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScalarsMethodTestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ScalarsMethodTestResult struct {
	Success *example.ExampleScalarsResp
}

var ScalarsMethodTestResult_Success_DEFAULT *example.ExampleScalarsResp

func (p *ScalarsMethodTestResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(example.ExampleScalarsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ScalarsMethodTestResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ScalarsMethodTestResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ScalarsMethodTestResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ScalarsMethodTestResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ScalarsMethodTestResult) Unmarshal(in []byte) error {
	msg := new(example.ExampleScalarsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ScalarsMethodTestResult) GetSuccess() *example.ExampleScalarsResp {
	if !p.IsSetSuccess() {
		return ScalarsMethodTestResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ScalarsMethodTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*example.ExampleScalarsResp)
}

func (p *ScalarsMethodTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScalarsMethodTestResult) GetResult() interface{} {
	return p.Success
}

func messageMethodTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(example.ExampleMessageReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(example.TestService).MessageMethodTest(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MessageMethodTestArgs:
		success, err := handler.(example.TestService).MessageMethodTest(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MessageMethodTestResult)
		realResult.Success = success
	}
	return nil
}
func newMessageMethodTestArgs() interface{} {
	return &MessageMethodTestArgs{}
}

func newMessageMethodTestResult() interface{} {
	return &MessageMethodTestResult{}
}

type MessageMethodTestArgs struct {
	Req *example.ExampleMessageReq
}

func (p *MessageMethodTestArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(example.ExampleMessageReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MessageMethodTestArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MessageMethodTestArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MessageMethodTestArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MessageMethodTestArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MessageMethodTestArgs) Unmarshal(in []byte) error {
	msg := new(example.ExampleMessageReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MessageMethodTestArgs_Req_DEFAULT *example.ExampleMessageReq

func (p *MessageMethodTestArgs) GetReq() *example.ExampleMessageReq {
	if !p.IsSetReq() {
		return MessageMethodTestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MessageMethodTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MessageMethodTestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MessageMethodTestResult struct {
	Success *example.ExampleMessageResp
}

var MessageMethodTestResult_Success_DEFAULT *example.ExampleMessageResp

func (p *MessageMethodTestResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(example.ExampleMessageResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MessageMethodTestResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MessageMethodTestResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MessageMethodTestResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MessageMethodTestResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MessageMethodTestResult) Unmarshal(in []byte) error {
	msg := new(example.ExampleMessageResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MessageMethodTestResult) GetSuccess() *example.ExampleMessageResp {
	if !p.IsSetSuccess() {
		return MessageMethodTestResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MessageMethodTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*example.ExampleMessageResp)
}

func (p *MessageMethodTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MessageMethodTestResult) GetResult() interface{} {
	return p.Success
}

func nestedMethodTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(example.ExampleNestedReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(example.TestService).NestedMethodTest(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *NestedMethodTestArgs:
		success, err := handler.(example.TestService).NestedMethodTest(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*NestedMethodTestResult)
		realResult.Success = success
	}
	return nil
}
func newNestedMethodTestArgs() interface{} {
	return &NestedMethodTestArgs{}
}

func newNestedMethodTestResult() interface{} {
	return &NestedMethodTestResult{}
}

type NestedMethodTestArgs struct {
	Req *example.ExampleNestedReq
}

func (p *NestedMethodTestArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(example.ExampleNestedReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *NestedMethodTestArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *NestedMethodTestArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *NestedMethodTestArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in NestedMethodTestArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *NestedMethodTestArgs) Unmarshal(in []byte) error {
	msg := new(example.ExampleNestedReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var NestedMethodTestArgs_Req_DEFAULT *example.ExampleNestedReq

func (p *NestedMethodTestArgs) GetReq() *example.ExampleNestedReq {
	if !p.IsSetReq() {
		return NestedMethodTestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *NestedMethodTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NestedMethodTestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type NestedMethodTestResult struct {
	Success *example.ExampleNestedResp
}

var NestedMethodTestResult_Success_DEFAULT *example.ExampleNestedResp

func (p *NestedMethodTestResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(example.ExampleNestedResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *NestedMethodTestResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *NestedMethodTestResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *NestedMethodTestResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in NestedMethodTestResult")
	}
	return proto.Marshal(p.Success)
}

func (p *NestedMethodTestResult) Unmarshal(in []byte) error {
	msg := new(example.ExampleNestedResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *NestedMethodTestResult) GetSuccess() *example.ExampleNestedResp {
	if !p.IsSetSuccess() {
		return NestedMethodTestResult_Success_DEFAULT
	}
	return p.Success
}

func (p *NestedMethodTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*example.ExampleNestedResp)
}

func (p *NestedMethodTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NestedMethodTestResult) GetResult() interface{} {
	return p.Success
}

func partialMethodTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(example.ExampleParitalReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(example.TestService).PartialMethodTest(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PartialMethodTestArgs:
		success, err := handler.(example.TestService).PartialMethodTest(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PartialMethodTestResult)
		realResult.Success = success
	}
	return nil
}
func newPartialMethodTestArgs() interface{} {
	return &PartialMethodTestArgs{}
}

func newPartialMethodTestResult() interface{} {
	return &PartialMethodTestResult{}
}

type PartialMethodTestArgs struct {
	Req *example.ExampleParitalReq
}

func (p *PartialMethodTestArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(example.ExampleParitalReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PartialMethodTestArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PartialMethodTestArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PartialMethodTestArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PartialMethodTestArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PartialMethodTestArgs) Unmarshal(in []byte) error {
	msg := new(example.ExampleParitalReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PartialMethodTestArgs_Req_DEFAULT *example.ExampleParitalReq

func (p *PartialMethodTestArgs) GetReq() *example.ExampleParitalReq {
	if !p.IsSetReq() {
		return PartialMethodTestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PartialMethodTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PartialMethodTestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PartialMethodTestResult struct {
	Success *example.ExamplePartialResp
}

var PartialMethodTestResult_Success_DEFAULT *example.ExamplePartialResp

func (p *PartialMethodTestResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(example.ExamplePartialResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PartialMethodTestResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PartialMethodTestResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PartialMethodTestResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PartialMethodTestResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PartialMethodTestResult) Unmarshal(in []byte) error {
	msg := new(example.ExamplePartialResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PartialMethodTestResult) GetSuccess() *example.ExamplePartialResp {
	if !p.IsSetSuccess() {
		return PartialMethodTestResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PartialMethodTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*example.ExamplePartialResp)
}

func (p *PartialMethodTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PartialMethodTestResult) GetResult() interface{} {
	return p.Success
}

func listMethodTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(example.ExampleListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(example.TestService).ListMethodTest(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListMethodTestArgs:
		success, err := handler.(example.TestService).ListMethodTest(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListMethodTestResult)
		realResult.Success = success
	}
	return nil
}
func newListMethodTestArgs() interface{} {
	return &ListMethodTestArgs{}
}

func newListMethodTestResult() interface{} {
	return &ListMethodTestResult{}
}

type ListMethodTestArgs struct {
	Req *example.ExampleListReq
}

func (p *ListMethodTestArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(example.ExampleListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListMethodTestArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListMethodTestArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListMethodTestArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListMethodTestArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListMethodTestArgs) Unmarshal(in []byte) error {
	msg := new(example.ExampleListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListMethodTestArgs_Req_DEFAULT *example.ExampleListReq

func (p *ListMethodTestArgs) GetReq() *example.ExampleListReq {
	if !p.IsSetReq() {
		return ListMethodTestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListMethodTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListMethodTestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListMethodTestResult struct {
	Success *example.ExampleListResp
}

var ListMethodTestResult_Success_DEFAULT *example.ExampleListResp

func (p *ListMethodTestResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(example.ExampleListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListMethodTestResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListMethodTestResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListMethodTestResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListMethodTestResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListMethodTestResult) Unmarshal(in []byte) error {
	msg := new(example.ExampleListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListMethodTestResult) GetSuccess() *example.ExampleListResp {
	if !p.IsSetSuccess() {
		return ListMethodTestResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListMethodTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*example.ExampleListResp)
}

func (p *ListMethodTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListMethodTestResult) GetResult() interface{} {
	return p.Success
}

func mapMethodTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(example.ExampleMapReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(example.TestService).MapMethodTest(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MapMethodTestArgs:
		success, err := handler.(example.TestService).MapMethodTest(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MapMethodTestResult)
		realResult.Success = success
	}
	return nil
}
func newMapMethodTestArgs() interface{} {
	return &MapMethodTestArgs{}
}

func newMapMethodTestResult() interface{} {
	return &MapMethodTestResult{}
}

type MapMethodTestArgs struct {
	Req *example.ExampleMapReq
}

func (p *MapMethodTestArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(example.ExampleMapReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MapMethodTestArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MapMethodTestArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MapMethodTestArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MapMethodTestArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MapMethodTestArgs) Unmarshal(in []byte) error {
	msg := new(example.ExampleMapReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MapMethodTestArgs_Req_DEFAULT *example.ExampleMapReq

func (p *MapMethodTestArgs) GetReq() *example.ExampleMapReq {
	if !p.IsSetReq() {
		return MapMethodTestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MapMethodTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MapMethodTestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MapMethodTestResult struct {
	Success *example.ExampleMapResp
}

var MapMethodTestResult_Success_DEFAULT *example.ExampleMapResp

func (p *MapMethodTestResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(example.ExampleMapResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MapMethodTestResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MapMethodTestResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MapMethodTestResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MapMethodTestResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MapMethodTestResult) Unmarshal(in []byte) error {
	msg := new(example.ExampleMapResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MapMethodTestResult) GetSuccess() *example.ExampleMapResp {
	if !p.IsSetSuccess() {
		return MapMethodTestResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MapMethodTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*example.ExampleMapResp)
}

func (p *MapMethodTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MapMethodTestResult) GetResult() interface{} {
	return p.Success
}

func oneofMethodTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(example.ExampleOneofReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(example.TestService).OneofMethodTest(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *OneofMethodTestArgs:
		success, err := handler.(example.TestService).OneofMethodTest(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*OneofMethodTestResult)
		realResult.Success = success
	}
	return nil
}
func newOneofMethodTestArgs() interface{} {
	return &OneofMethodTestArgs{}
}

func newOneofMethodTestResult() interface{} {
	return &OneofMethodTestResult{}
}

type OneofMethodTestArgs struct {
	Req *example.ExampleOneofReq
}

func (p *OneofMethodTestArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(example.ExampleOneofReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *OneofMethodTestArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *OneofMethodTestArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *OneofMethodTestArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in OneofMethodTestArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *OneofMethodTestArgs) Unmarshal(in []byte) error {
	msg := new(example.ExampleOneofReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var OneofMethodTestArgs_Req_DEFAULT *example.ExampleOneofReq

func (p *OneofMethodTestArgs) GetReq() *example.ExampleOneofReq {
	if !p.IsSetReq() {
		return OneofMethodTestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *OneofMethodTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OneofMethodTestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type OneofMethodTestResult struct {
	Success *example.ExampleOneofResp
}

var OneofMethodTestResult_Success_DEFAULT *example.ExampleOneofResp

func (p *OneofMethodTestResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(example.ExampleOneofResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *OneofMethodTestResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *OneofMethodTestResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *OneofMethodTestResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in OneofMethodTestResult")
	}
	return proto.Marshal(p.Success)
}

func (p *OneofMethodTestResult) Unmarshal(in []byte) error {
	msg := new(example.ExampleOneofResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *OneofMethodTestResult) GetSuccess() *example.ExampleOneofResp {
	if !p.IsSetSuccess() {
		return OneofMethodTestResult_Success_DEFAULT
	}
	return p.Success
}

func (p *OneofMethodTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*example.ExampleOneofResp)
}

func (p *OneofMethodTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OneofMethodTestResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ScalarsMethodTest(ctx context.Context, Req *example.ExampleScalarsReq) (r *example.ExampleScalarsResp, err error) {
	var _args ScalarsMethodTestArgs
	_args.Req = Req
	var _result ScalarsMethodTestResult
	if err = p.c.Call(ctx, "ScalarsMethodTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageMethodTest(ctx context.Context, Req *example.ExampleMessageReq) (r *example.ExampleMessageResp, err error) {
	var _args MessageMethodTestArgs
	_args.Req = Req
	var _result MessageMethodTestResult
	if err = p.c.Call(ctx, "MessageMethodTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) NestedMethodTest(ctx context.Context, Req *example.ExampleNestedReq) (r *example.ExampleNestedResp, err error) {
	var _args NestedMethodTestArgs
	_args.Req = Req
	var _result NestedMethodTestResult
	if err = p.c.Call(ctx, "NestedMethodTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PartialMethodTest(ctx context.Context, Req *example.ExampleParitalReq) (r *example.ExamplePartialResp, err error) {
	var _args PartialMethodTestArgs
	_args.Req = Req
	var _result PartialMethodTestResult
	if err = p.c.Call(ctx, "PartialMethodTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListMethodTest(ctx context.Context, Req *example.ExampleListReq) (r *example.ExampleListResp, err error) {
	var _args ListMethodTestArgs
	_args.Req = Req
	var _result ListMethodTestResult
	if err = p.c.Call(ctx, "ListMethodTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MapMethodTest(ctx context.Context, Req *example.ExampleMapReq) (r *example.ExampleMapResp, err error) {
	var _args MapMethodTestArgs
	_args.Req = Req
	var _result MapMethodTestResult
	if err = p.c.Call(ctx, "MapMethodTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OneofMethodTest(ctx context.Context, Req *example.ExampleOneofReq) (r *example.ExampleOneofResp, err error) {
	var _args OneofMethodTestArgs
	_args.Req = Req
	var _result OneofMethodTestResult
	if err = p.c.Call(ctx, "OneofMethodTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
