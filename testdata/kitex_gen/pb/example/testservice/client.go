// Code generated by Kitex v0.5.2. DO NOT EDIT.

package testservice

import (
	"context"
	example "github.com/cloudwego/dynamicgo/testdata/kitex_gen/pb/example"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ScalarsMethodTest(ctx context.Context, Req *example.ExampleScalarsReq, callOptions ...callopt.Option) (r *example.ExampleScalarsResp, err error)
	MessageMethodTest(ctx context.Context, Req *example.ExampleMessageReq, callOptions ...callopt.Option) (r *example.ExampleMessageResp, err error)
	NestedMethodTest(ctx context.Context, Req *example.ExampleNestedReq, callOptions ...callopt.Option) (r *example.ExampleNestedResp, err error)
	PartialMethodTest(ctx context.Context, Req *example.ExampleParitalReq, callOptions ...callopt.Option) (r *example.ExamplePartialResp, err error)
	ListMethodTest(ctx context.Context, Req *example.ExampleListReq, callOptions ...callopt.Option) (r *example.ExampleListResp, err error)
	MapMethodTest(ctx context.Context, Req *example.ExampleMapReq, callOptions ...callopt.Option) (r *example.ExampleMapResp, err error)
	OneofMethodTest(ctx context.Context, Req *example.ExampleOneofReq, callOptions ...callopt.Option) (r *example.ExampleOneofResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kTestServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kTestServiceClient struct {
	*kClient
}

func (p *kTestServiceClient) ScalarsMethodTest(ctx context.Context, Req *example.ExampleScalarsReq, callOptions ...callopt.Option) (r *example.ExampleScalarsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ScalarsMethodTest(ctx, Req)
}

func (p *kTestServiceClient) MessageMethodTest(ctx context.Context, Req *example.ExampleMessageReq, callOptions ...callopt.Option) (r *example.ExampleMessageResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MessageMethodTest(ctx, Req)
}

func (p *kTestServiceClient) NestedMethodTest(ctx context.Context, Req *example.ExampleNestedReq, callOptions ...callopt.Option) (r *example.ExampleNestedResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.NestedMethodTest(ctx, Req)
}

func (p *kTestServiceClient) PartialMethodTest(ctx context.Context, Req *example.ExampleParitalReq, callOptions ...callopt.Option) (r *example.ExamplePartialResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PartialMethodTest(ctx, Req)
}

func (p *kTestServiceClient) ListMethodTest(ctx context.Context, Req *example.ExampleListReq, callOptions ...callopt.Option) (r *example.ExampleListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListMethodTest(ctx, Req)
}

func (p *kTestServiceClient) MapMethodTest(ctx context.Context, Req *example.ExampleMapReq, callOptions ...callopt.Option) (r *example.ExampleMapResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MapMethodTest(ctx, Req)
}

func (p *kTestServiceClient) OneofMethodTest(ctx context.Context, Req *example.ExampleOneofReq, callOptions ...callopt.Option) (r *example.ExampleOneofResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.OneofMethodTest(ctx, Req)
}
