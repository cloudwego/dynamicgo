// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package example

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Item) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Item[number], err)
}

func (x *Item) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Id = append(x.Id, v)
	return offset, err
}

func (x *Item) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.HasSub, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Item) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Value = append(x.Value, v)
			return offset, err
		})
	return offset, err
}

func (x *Item) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	if x.Extra == nil {
		x.Extra = make(map[string]int32)
	}
	var key string
	var value int32
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadInt32(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Extra[key] = value
	return offset, nil
}

func (x *Item) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v Item
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SubItems = append(x.SubItems, &v)
	return offset, nil
}

func (x *NestedExampleReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_NestedExampleReq[number], err)
}

func (x *NestedExampleReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Item
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Items = append(x.Items, &v)
	return offset, nil
}

func (x *NestedExampleResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_NestedExampleResp[number], err)
}

func (x *NestedExampleResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Item
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Items = append(x.Items, &v)
	return offset, nil
}

func (x *Item) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *Item) fastWriteField1(buf []byte) (offset int) {
	if len(x.Id) == 0 {
		return offset
	}
	for i := range x.GetId() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetId()[i])
	}
	return offset
}

func (x *Item) fastWriteField2(buf []byte) (offset int) {
	if !x.HasSub {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetHasSub())
	return offset
}

func (x *Item) fastWriteField3(buf []byte) (offset int) {
	if len(x.Value) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 3, len(x.GetValue()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, x.GetValue()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *Item) fastWriteField4(buf []byte) (offset int) {
	if x.Extra == nil {
		return offset
	}
	for k, v := range x.GetExtra() {
		offset += fastpb.WriteMapEntry(buf[offset:], 4,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteInt32(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *Item) fastWriteField5(buf []byte) (offset int) {
	if x.SubItems == nil {
		return offset
	}
	for i := range x.GetSubItems() {
		offset += fastpb.WriteMessage(buf[offset:], 5, x.GetSubItems()[i])
	}
	return offset
}

func (x *NestedExampleReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *NestedExampleReq) fastWriteField1(buf []byte) (offset int) {
	if x.Items == nil {
		return offset
	}
	for i := range x.GetItems() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetItems()[i])
	}
	return offset
}

func (x *NestedExampleResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *NestedExampleResp) fastWriteField1(buf []byte) (offset int) {
	if x.Items == nil {
		return offset
	}
	for i := range x.GetItems() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetItems()[i])
	}
	return offset
}

func (x *Item) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *Item) sizeField1() (n int) {
	if len(x.Id) == 0 {
		return n
	}
	for i := range x.GetId() {
		n += fastpb.SizeString(1, x.GetId()[i])
	}
	return n
}

func (x *Item) sizeField2() (n int) {
	if !x.HasSub {
		return n
	}
	n += fastpb.SizeBool(2, x.GetHasSub())
	return n
}

func (x *Item) sizeField3() (n int) {
	if len(x.Value) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(3, len(x.GetValue()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, x.GetValue()[numIdxOrVal])
			return n
		})
	return n
}

func (x *Item) sizeField4() (n int) {
	if x.Extra == nil {
		return n
	}
	for k, v := range x.GetExtra() {
		n += fastpb.SizeMapEntry(4,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeInt32(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *Item) sizeField5() (n int) {
	if x.SubItems == nil {
		return n
	}
	for i := range x.GetSubItems() {
		n += fastpb.SizeMessage(5, x.GetSubItems()[i])
	}
	return n
}

func (x *NestedExampleReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *NestedExampleReq) sizeField1() (n int) {
	if x.Items == nil {
		return n
	}
	for i := range x.GetItems() {
		n += fastpb.SizeMessage(1, x.GetItems()[i])
	}
	return n
}

func (x *NestedExampleResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *NestedExampleResp) sizeField1() (n int) {
	if x.Items == nil {
		return n
	}
	for i := range x.GetItems() {
		n += fastpb.SizeMessage(1, x.GetItems()[i])
	}
	return n
}

var fieldIDToName_Item = map[int32]string{
	1: "Id",
	2: "HasSub",
	3: "Value",
	4: "Extra",
	5: "SubItems",
}

var fieldIDToName_NestedExampleReq = map[int32]string{
	1: "Items",
}

var fieldIDToName_NestedExampleResp = map[int32]string{
	1: "Items",
}
