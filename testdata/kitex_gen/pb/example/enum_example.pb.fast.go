// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package example

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *PingEnumRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PingEnumRequest[number], err)
}

func (x *PingEnumRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Event = Event(v)
	return offset, nil
}

func (x *PingEnumRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.EventList = append(x.EventList, Event(v))
			return offset, nil
		})
	return offset, err
}

func (x *PingEnumRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	if x.EventMap == nil {
		x.EventMap = make(map[string]Event)
	}
	var key string
	var value Event
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			value = Event(v)
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.EventMap[key] = value
	return offset, nil
}

func (x *PingEnumRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.NestedEnum = PingEnumRequest_NestedEnum(v)
	return offset, nil
}

func (x *PingEnumRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.NestedEnumList = append(x.NestedEnumList, PingEnumRequest_NestedEnum(v))
			return offset, nil
		})
	return offset, err
}

func (x *PingEnumRequest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	if x.NestedEnumMap == nil {
		x.NestedEnumMap = make(map[string]PingEnumRequest_NestedEnum)
	}
	var key string
	var value PingEnumRequest_NestedEnum
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			value = PingEnumRequest_NestedEnum(v)
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.NestedEnumMap[key] = value
	return offset, nil
}

func (x *PingEnumResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *PingEnumRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *PingEnumRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Event == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetEvent()))
	return offset
}

func (x *PingEnumRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.EventList) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 2, len(x.GetEventList()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, int32(x.GetEventList()[numIdxOrVal]))
			return offset
		})
	return offset
}

func (x *PingEnumRequest) fastWriteField3(buf []byte) (offset int) {
	if x.EventMap == nil {
		return offset
	}
	for k, v := range x.GetEventMap() {
		offset += fastpb.WriteMapEntry(buf[offset:], 3,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteInt32(buf[offset:], numIdxOrVal, int32(v))
				return offset
			})
	}
	return offset
}

func (x *PingEnumRequest) fastWriteField4(buf []byte) (offset int) {
	if x.NestedEnum == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetNestedEnum()))
	return offset
}

func (x *PingEnumRequest) fastWriteField5(buf []byte) (offset int) {
	if len(x.NestedEnumList) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 5, len(x.GetNestedEnumList()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, int32(x.GetNestedEnumList()[numIdxOrVal]))
			return offset
		})
	return offset
}

func (x *PingEnumRequest) fastWriteField6(buf []byte) (offset int) {
	if x.NestedEnumMap == nil {
		return offset
	}
	for k, v := range x.GetNestedEnumMap() {
		offset += fastpb.WriteMapEntry(buf[offset:], 6,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteInt32(buf[offset:], numIdxOrVal, int32(v))
				return offset
			})
	}
	return offset
}

func (x *PingEnumResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *PingEnumRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *PingEnumRequest) sizeField1() (n int) {
	if x.Event == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetEvent()))
	return n
}

func (x *PingEnumRequest) sizeField2() (n int) {
	if len(x.EventList) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(2, len(x.GetEventList()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, int32(x.GetEventList()[numIdxOrVal]))
			return n
		})
	return n
}

func (x *PingEnumRequest) sizeField3() (n int) {
	if x.EventMap == nil {
		return n
	}
	for k, v := range x.GetEventMap() {
		n += fastpb.SizeMapEntry(3,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeInt32(numIdxOrVal, int32(v))
				return n
			})
	}
	return n
}

func (x *PingEnumRequest) sizeField4() (n int) {
	if x.NestedEnum == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetNestedEnum()))
	return n
}

func (x *PingEnumRequest) sizeField5() (n int) {
	if len(x.NestedEnumList) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(5, len(x.GetNestedEnumList()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, int32(x.GetNestedEnumList()[numIdxOrVal]))
			return n
		})
	return n
}

func (x *PingEnumRequest) sizeField6() (n int) {
	if x.NestedEnumMap == nil {
		return n
	}
	for k, v := range x.GetNestedEnumMap() {
		n += fastpb.SizeMapEntry(6,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeInt32(numIdxOrVal, int32(v))
				return n
			})
	}
	return n
}

func (x *PingEnumResponse) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

var fieldIDToName_PingEnumRequest = map[int32]string{
	1: "Event",
	2: "EventList",
	3: "EventMap",
	4: "NestedEnum",
	5: "NestedEnumList",
	6: "NestedEnumMap",
}

var fieldIDToName_PingEnumResponse = map[int32]string{}
