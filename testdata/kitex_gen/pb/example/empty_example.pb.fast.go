// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package example

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *ExampleEmptyReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ExampleEmptyReq[number], err)
}

func (x *ExampleEmptyReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExampleEmptyReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Cookie, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExampleEmptyReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExampleEmptyReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Query = append(x.Query, v)
	return offset, err
}

func (x *ExampleEmptyReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Header, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ExampleEmptyReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExampleEmptyReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.QueryInt = append(x.QueryInt, v)
			return offset, err
		})
	return offset, err
}

func (x *ExampleEmptyReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v float64
			v, offset, err = fastpb.ReadDouble(buf, _type)
			if err != nil {
				return offset, err
			}
			x.QueryDouble = append(x.QueryDouble, v)
			return offset, err
		})
	return offset, err
}

func (x *ExampleEmptyResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ExampleEmptyResp[number], err)
}

func (x *ExampleEmptyResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExampleEmptyResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Cookie, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExampleEmptyResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExampleEmptyResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Header, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ExampleEmptyResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExampleEmptyResp) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Subfix, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExampleEmptyReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *ExampleEmptyReq) fastWriteField1(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMsg())
	return offset
}

func (x *ExampleEmptyReq) fastWriteField2(buf []byte) (offset int) {
	if x.Cookie == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 2, x.GetCookie())
	return offset
}

func (x *ExampleEmptyReq) fastWriteField3(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPath())
	return offset
}

func (x *ExampleEmptyReq) fastWriteField4(buf []byte) (offset int) {
	if len(x.Query) == 0 {
		return offset
	}
	for i := range x.GetQuery() {
		offset += fastpb.WriteString(buf[offset:], 4, x.GetQuery()[i])
	}
	return offset
}

func (x *ExampleEmptyReq) fastWriteField5(buf []byte) (offset int) {
	if !x.Header {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 5, x.GetHeader())
	return offset
}

func (x *ExampleEmptyReq) fastWriteField6(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetCode())
	return offset
}

func (x *ExampleEmptyReq) fastWriteField7(buf []byte) (offset int) {
	if len(x.QueryInt) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 7, len(x.GetQueryInt()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, x.GetQueryInt()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *ExampleEmptyReq) fastWriteField8(buf []byte) (offset int) {
	if len(x.QueryDouble) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 8, len(x.GetQueryDouble()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteDouble(buf[offset:], numTagOrKey, x.GetQueryDouble()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *ExampleEmptyResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *ExampleEmptyResp) fastWriteField1(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMsg())
	return offset
}

func (x *ExampleEmptyResp) fastWriteField2(buf []byte) (offset int) {
	if x.Cookie == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 2, x.GetCookie())
	return offset
}

func (x *ExampleEmptyResp) fastWriteField3(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetStatus())
	return offset
}

func (x *ExampleEmptyResp) fastWriteField4(buf []byte) (offset int) {
	if !x.Header {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 4, x.GetHeader())
	return offset
}

func (x *ExampleEmptyResp) fastWriteField5(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCode())
	return offset
}

func (x *ExampleEmptyResp) fastWriteField6(buf []byte) (offset int) {
	if x.Subfix == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 6, x.GetSubfix())
	return offset
}

func (x *ExampleEmptyReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *ExampleEmptyReq) sizeField1() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMsg())
	return n
}

func (x *ExampleEmptyReq) sizeField2() (n int) {
	if x.Cookie == 0 {
		return n
	}
	n += fastpb.SizeDouble(2, x.GetCookie())
	return n
}

func (x *ExampleEmptyReq) sizeField3() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPath())
	return n
}

func (x *ExampleEmptyReq) sizeField4() (n int) {
	if len(x.Query) == 0 {
		return n
	}
	for i := range x.GetQuery() {
		n += fastpb.SizeString(4, x.GetQuery()[i])
	}
	return n
}

func (x *ExampleEmptyReq) sizeField5() (n int) {
	if !x.Header {
		return n
	}
	n += fastpb.SizeBool(5, x.GetHeader())
	return n
}

func (x *ExampleEmptyReq) sizeField6() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetCode())
	return n
}

func (x *ExampleEmptyReq) sizeField7() (n int) {
	if len(x.QueryInt) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(7, len(x.GetQueryInt()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, x.GetQueryInt()[numIdxOrVal])
			return n
		})
	return n
}

func (x *ExampleEmptyReq) sizeField8() (n int) {
	if len(x.QueryDouble) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(8, len(x.GetQueryDouble()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeDouble(numTagOrKey, x.GetQueryDouble()[numIdxOrVal])
			return n
		})
	return n
}

func (x *ExampleEmptyResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *ExampleEmptyResp) sizeField1() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMsg())
	return n
}

func (x *ExampleEmptyResp) sizeField2() (n int) {
	if x.Cookie == 0 {
		return n
	}
	n += fastpb.SizeDouble(2, x.GetCookie())
	return n
}

func (x *ExampleEmptyResp) sizeField3() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetStatus())
	return n
}

func (x *ExampleEmptyResp) sizeField4() (n int) {
	if !x.Header {
		return n
	}
	n += fastpb.SizeBool(4, x.GetHeader())
	return n
}

func (x *ExampleEmptyResp) sizeField5() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCode())
	return n
}

func (x *ExampleEmptyResp) sizeField6() (n int) {
	if x.Subfix == 0 {
		return n
	}
	n += fastpb.SizeDouble(6, x.GetSubfix())
	return n
}

var fieldIDToName_ExampleEmptyReq = map[int32]string{
	1: "Msg",
	2: "Cookie",
	3: "Path",
	4: "Query",
	5: "Header",
	6: "Code",
	7: "QueryInt",
	8: "QueryDouble",
}

var fieldIDToName_ExampleEmptyResp = map[int32]string{
	1: "Msg",
	2: "Cookie",
	3: "Status",
	4: "Header",
	5: "Code",
	6: "Subfix",
}
