// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: idl/basic_example.proto

package base

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BasicExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32        int32     `protobuf:"varint,1,opt,name=Int32,proto3" json:"Int32,omitempty"`
	Int64        int64     `protobuf:"varint,2,opt,name=Int64,proto3" json:"Int64,omitempty"`
	Uint32       uint32    `protobuf:"varint,3,opt,name=Uint32,proto3" json:"Uint32,omitempty"`
	Uint64       uint64    `protobuf:"varint,4,opt,name=Uint64,proto3" json:"Uint64,omitempty"`
	Sint32       int32     `protobuf:"zigzag32,5,opt,name=Sint32,proto3" json:"Sint32,omitempty"`
	Sint64       int64     `protobuf:"zigzag64,6,opt,name=Sint64,proto3" json:"Sint64,omitempty"`
	Sfixed32     int32     `protobuf:"fixed32,7,opt,name=Sfixed32,proto3" json:"Sfixed32,omitempty"`
	Sfixed64     int64     `protobuf:"fixed64,8,opt,name=Sfixed64,proto3" json:"Sfixed64,omitempty"`
	Fixed32      uint32    `protobuf:"fixed32,9,opt,name=Fixed32,proto3" json:"Fixed32,omitempty"`
	Fixed64      uint64    `protobuf:"fixed64,10,opt,name=Fixed64,proto3" json:"Fixed64,omitempty"`
	Float        float32   `protobuf:"fixed32,11,opt,name=Float,proto3" json:"Float,omitempty"`
	Double       float64   `protobuf:"fixed64,12,opt,name=Double,proto3" json:"Double,omitempty"`
	Bool         bool      `protobuf:"varint,13,opt,name=Bool,proto3" json:"Bool,omitempty"`
	Str          string    `protobuf:"bytes,14,opt,name=Str,proto3" json:"Str,omitempty"`
	Bytes        []byte    `protobuf:"bytes,15,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	ListInt32    []int32   `protobuf:"varint,16,rep,packed,name=ListInt32,proto3" json:"ListInt32,omitempty"`
	ListInt64    []int64   `protobuf:"varint,17,rep,packed,name=ListInt64,proto3" json:"ListInt64,omitempty"`
	ListUint32   []uint32  `protobuf:"varint,18,rep,packed,name=ListUint32,proto3" json:"ListUint32,omitempty"`
	ListUint64   []uint64  `protobuf:"varint,19,rep,packed,name=ListUint64,proto3" json:"ListUint64,omitempty"`
	ListSint32   []int32   `protobuf:"zigzag32,20,rep,packed,name=ListSint32,proto3" json:"ListSint32,omitempty"`
	ListSint64   []int64   `protobuf:"zigzag64,21,rep,packed,name=ListSint64,proto3" json:"ListSint64,omitempty"`
	ListSfixed32 []int32   `protobuf:"fixed32,22,rep,packed,name=ListSfixed32,proto3" json:"ListSfixed32,omitempty"`
	ListSfixed64 []int64   `protobuf:"fixed64,23,rep,packed,name=ListSfixed64,proto3" json:"ListSfixed64,omitempty"`
	ListFixed32  []uint32  `protobuf:"fixed32,24,rep,packed,name=ListFixed32,proto3" json:"ListFixed32,omitempty"`
	ListFixed64  []uint64  `protobuf:"fixed64,25,rep,packed,name=ListFixed64,proto3" json:"ListFixed64,omitempty"`
	ListFloat    []float32 `protobuf:"fixed32,26,rep,packed,name=ListFloat,proto3" json:"ListFloat,omitempty"`
	ListDouble   []float64 `protobuf:"fixed64,27,rep,packed,name=ListDouble,proto3" json:"ListDouble,omitempty"`
	ListBool     []bool    `protobuf:"varint,28,rep,packed,name=ListBool,proto3" json:"ListBool,omitempty"`
	ListString   []string  `protobuf:"bytes,29,rep,name=ListString,proto3" json:"ListString,omitempty"`
	ListBytes    [][]byte  `protobuf:"bytes,30,rep,name=ListBytes,proto3" json:"ListBytes,omitempty"`
}

func (x *BasicExample) Reset() {
	*x = BasicExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_basic_example_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicExample) ProtoMessage() {}

func (x *BasicExample) ProtoReflect() protoreflect.Message {
	mi := &file_idl_basic_example_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicExample.ProtoReflect.Descriptor instead.
func (*BasicExample) Descriptor() ([]byte, []int) {
	return file_idl_basic_example_proto_rawDescGZIP(), []int{0}
}

func (x *BasicExample) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *BasicExample) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *BasicExample) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *BasicExample) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *BasicExample) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *BasicExample) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *BasicExample) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *BasicExample) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *BasicExample) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *BasicExample) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *BasicExample) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *BasicExample) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *BasicExample) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *BasicExample) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *BasicExample) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *BasicExample) GetListInt32() []int32 {
	if x != nil {
		return x.ListInt32
	}
	return nil
}

func (x *BasicExample) GetListInt64() []int64 {
	if x != nil {
		return x.ListInt64
	}
	return nil
}

func (x *BasicExample) GetListUint32() []uint32 {
	if x != nil {
		return x.ListUint32
	}
	return nil
}

func (x *BasicExample) GetListUint64() []uint64 {
	if x != nil {
		return x.ListUint64
	}
	return nil
}

func (x *BasicExample) GetListSint32() []int32 {
	if x != nil {
		return x.ListSint32
	}
	return nil
}

func (x *BasicExample) GetListSint64() []int64 {
	if x != nil {
		return x.ListSint64
	}
	return nil
}

func (x *BasicExample) GetListSfixed32() []int32 {
	if x != nil {
		return x.ListSfixed32
	}
	return nil
}

func (x *BasicExample) GetListSfixed64() []int64 {
	if x != nil {
		return x.ListSfixed64
	}
	return nil
}

func (x *BasicExample) GetListFixed32() []uint32 {
	if x != nil {
		return x.ListFixed32
	}
	return nil
}

func (x *BasicExample) GetListFixed64() []uint64 {
	if x != nil {
		return x.ListFixed64
	}
	return nil
}

func (x *BasicExample) GetListFloat() []float32 {
	if x != nil {
		return x.ListFloat
	}
	return nil
}

func (x *BasicExample) GetListDouble() []float64 {
	if x != nil {
		return x.ListDouble
	}
	return nil
}

func (x *BasicExample) GetListBool() []bool {
	if x != nil {
		return x.ListBool
	}
	return nil
}

func (x *BasicExample) GetListString() []string {
	if x != nil {
		return x.ListString
	}
	return nil
}

func (x *BasicExample) GetListBytes() [][]byte {
	if x != nil {
		return x.ListBytes
	}
	return nil
}

var File_idl_basic_example_proto protoreflect.FileDescriptor

var file_idl_basic_example_proto_rawDesc = []byte{
	0x0a, 0x17, 0x69, 0x64, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x70, 0x62, 0x33, 0x22, 0xd0,
	0x06, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x06, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x10, 0x52, 0x08, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x74, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x11, 0x52, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x12, 0x52, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x22, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0f, 0x52, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x17, 0x20, 0x03, 0x28, 0x10, 0x52, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x18, 0x18, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x19, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x6f, 0x6f, 0x6c, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x08, 0x52, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x32, 0x45, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x35, 0x0a, 0x0d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x65, 0x67, 0x6f,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_idl_basic_example_proto_rawDescOnce sync.Once
	file_idl_basic_example_proto_rawDescData = file_idl_basic_example_proto_rawDesc
)

func file_idl_basic_example_proto_rawDescGZIP() []byte {
	file_idl_basic_example_proto_rawDescOnce.Do(func() {
		file_idl_basic_example_proto_rawDescData = protoimpl.X.CompressGZIP(file_idl_basic_example_proto_rawDescData)
	})
	return file_idl_basic_example_proto_rawDescData
}

var file_idl_basic_example_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_idl_basic_example_proto_goTypes = []interface{}{
	(*BasicExample)(nil), // 0: pb3.BasicExample
}
var file_idl_basic_example_proto_depIdxs = []int32{
	0, // 0: pb3.BasicService.ExampleMethod:input_type -> pb3.BasicExample
	0, // 1: pb3.BasicService.ExampleMethod:output_type -> pb3.BasicExample
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_idl_basic_example_proto_init() }
func file_idl_basic_example_proto_init() {
	if File_idl_basic_example_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_idl_basic_example_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_idl_basic_example_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_idl_basic_example_proto_goTypes,
		DependencyIndexes: file_idl_basic_example_proto_depIdxs,
		MessageInfos:      file_idl_basic_example_proto_msgTypes,
	}.Build()
	File_idl_basic_example_proto = out.File
	file_idl_basic_example_proto_rawDesc = nil
	file_idl_basic_example_proto_goTypes = nil
	file_idl_basic_example_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.9.1. DO NOT EDIT.

type BasicService interface {
	ExampleMethod(ctx context.Context, req *BasicExample) (res *BasicExample, err error)
}
